initSidebarItems({"enum":[["AssignOp",""],["BinaryOp",""],["BlockStmtOrExpr",""],["ClassMethodKind",""],["Decl",""],["ExportDefaultDecl",""],["Expr",""],["ExprOrSuper",""],["ImportSpecifier",""],["Lit",""],["ModuleDecl",""],["ModuleItem",""],["ObjectPatProp",""],["Pat",""],["PatOrExpr",""],["Prop",""],["PropName",""],["Stmt",""],["UnaryOp",""],["UpdateOp",""],["VarDeclKind",""],["VarDeclOrExpr",""],["VarDeclOrPat",""]],"macro":[["op","Creates a corresponding operator."]],"struct":[["ArrayLit","Array literal."],["ArrayPat",""],["ArrowExpr",""],["AssignExpr",""],["AssignPat",""],["AssignPatProp","`{key}` or `{key = value}`"],["AssignProp",""],["AwaitExpr",""],["BinExpr",""],["BlockStmt","Use when only block statements are allowed."],["Bool",""],["BreakStmt",""],["CallExpr",""],["CatchClause",""],["Class",""],["ClassDecl",""],["ClassExpr","Class expression."],["ClassMethod",""],["CondExpr",""],["ContinueStmt",""],["DebuggerStmt",""],["DoWhileStmt",""],["EmptyStmt",""],["ExportAll","`export * from 'mod'`"],["ExportSpecifier",""],["ExprOrSpread",""],["FnDecl",""],["FnExpr","Function expression."],["ForInStmt",""],["ForOfStmt",""],["ForStmt",""],["Function","Common parts of function and method."],["GetterProp",""],["Ident","Ident with span."],["IfStmt",""],["ImportDecl",""],["ImportDefault","e.g. `import foo from 'mod.js'`"],["ImportSpecific","e.g. local = foo, imported = None `import { foo } from 'mod.js'` e.g. local = bar, imported = Some(foo) for `import { foo as bar } from 'mod.js'`"],["ImportStarAs","e.g. `import * as foo from 'mod.js'`."],["KeyValuePatProp","`{key: value}`"],["KeyValueProp",""],["LabeledStmt",""],["MemberExpr",""],["MetaPropExpr",""],["MethodProp",""],["Module",""],["NamedExport","`export { foo } from 'mod'` `export { foo as bar } from 'mod'`"],["NewExpr",""],["Null",""],["Number",""],["ObjectLit","Object literal."],["ObjectPat",""],["ParenExpr",""],["Regex",""],["RestPat",""],["ReturnStmt",""],["SeqExpr",""],["SetterProp",""],["Str",""],["SwitchCase",""],["SwitchStmt",""],["ThisExpr",""],["ThrowStmt",""],["TplElement",""],["TplLit",""],["TryStmt",""],["UnaryExpr",""],["UpdateExpr",""],["VarDecl",""],["VarDeclarator",""],["WhileStmt",""],["WithStmt",""],["YieldExpr",""]],"type":[["RegexFlags",""]]});