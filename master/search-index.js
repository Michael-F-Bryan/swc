var searchIndex = {};
searchIndex["ast_node"] = {"doc":"","items":[[5,"derive","ast_node","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"ast_node","","Alias for `#[derive(Clone, Debug, PartialEq, AstNode)]`",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"fold","","",null,null],[5,"derive_fold","ast_node::fold","",null,{"inputs":[{"name":"deriveinput"}],"output":{"name":"itemimpl"}}],[5,"should_skip_field","","",null,{"inputs":[{"name":"field"}],"output":{"name":"bool"}}],[5,"normalize_type_for_bound","","",null,{"inputs":[{"name":"type"}],"output":{"name":"type"}}]],"paths":[]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[12,"inner","","",0,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[12,"inner","","",1,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[12,"bytes","","",2,null],[12,"demangled","","",2,null],[12,"cpp_demangled","","",2,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[12,"frames","","",3,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[12,"ip","","",4,null],[12,"symbol_address","","",4,null],[12,"symbols","","",4,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[12,"name","","",5,null],[12,"addr","","",5,null],[12,"filename","","",5,null],[12,"lineno","","",5,null],[3,"Bomb","","",null,null],[12,"enabled","","",6,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[0,"dylib","","",null,null],[3,"Dylib","backtrace::dylib","",null,null],[12,"init","","",7,null],[3,"Symbol","","",null,null],[12,"name","","",8,null],[12,"addr","","",8,null],[12,"_marker","","",8,null],[5,"fetch","","",null,null],[11,"get","","",7,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"option"}}],[11,"init","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"load","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","",8,null],[0,"backtrace","backtrace","",null,null],[3,"Frame","backtrace::backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[12,"inner","","",0,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[0,"libunwind","","",null,null],[3,"Frame","backtrace::backtrace::libunwind","",null,null],[12,"ctx","","",9,null],[5,"trace","","",null,{"inputs":[{"name":"fnmut"}],"output":null}],[0,"uw","","Unwind library interface used for backtraces",null,null],[4,"_Unwind_Reason_Code","backtrace::backtrace::libunwind::uw","",null,null],[13,"_URC_NO_REASON","","",10,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",10,null],[13,"_URC_FATAL_PHASE2_ERROR","","",10,null],[13,"_URC_FATAL_PHASE1_ERROR","","",10,null],[13,"_URC_NORMAL_STOP","","",10,null],[13,"_URC_END_OF_STACK","","",10,null],[13,"_URC_HANDLER_FOUND","","",10,null],[13,"_URC_INSTALL_CONTEXT","","",10,null],[13,"_URC_CONTINUE_UNWIND","","",10,null],[13,"_URC_FAILURE","","",10,null],[4,"_Unwind_Context","","",null,null],[5,"_Unwind_Backtrace","","",null,null],[5,"_Unwind_GetIPInfo","","",null,null],[5,"_Unwind_FindEnclosingFunction","","",null,null],[6,"_Unwind_Trace_Fn","","",null,null],[11,"ip","backtrace::backtrace::libunwind","",9,null],[11,"symbol_address","","",9,null],[11,"ip","backtrace","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"symbolize","","",null,null],[3,"Symbol","backtrace::symbolize","A trait representing the resolution of a symbol in a file.",null,null],[12,"inner","","",1,null],[3,"OptionCppSymbol","","",null,null],[12,"0","","",11,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[12,"bytes","","",2,null],[12,"demangled","","",2,null],[12,"cpp_demangled","","",2,null],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[0,"libbacktrace","","",null,null],[4,"Symbol","backtrace::symbolize::libbacktrace","",null,null],[13,"Syminfo","","",12,null],[12,"pc","backtrace::symbolize::libbacktrace::Symbol","",12,null],[12,"symname","","",12,null],[13,"Pcinfo","backtrace::symbolize::libbacktrace","",12,null],[12,"pc","backtrace::symbolize::libbacktrace::Symbol","",12,null],[12,"filename","","",12,null],[12,"lineno","","",12,null],[12,"function","","",12,null],[5,"error_cb","backtrace::symbolize::libbacktrace","",null,null],[5,"syminfo_cb","","",null,null],[5,"pcinfo_cb","","",null,null],[5,"call","","",null,null],[5,"init_state","","",null,null],[5,"resolve","","",null,null],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"name","backtrace","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","backtrace::symbolize","",11,null],[11,"none","","",11,{"inputs":[],"output":{"name":"optioncppsymbol"}}],[11,"new","backtrace","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"capture","","",null,null],[3,"Backtrace","backtrace::capture","Representation of an owned and self-contained backtrace.",null,null],[12,"frames","","",3,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[12,"ip","","",4,null],[12,"symbol_address","","",4,null],[12,"symbols","","",4,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[12,"name","","",5,null],[12,"addr","","",5,null],[12,"filename","","",5,null],[12,"lineno","","",5,null],[11,"clone","backtrace","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}],[0,"lock","","",null,null],[3,"LockGuard","backtrace::lock","",null,null],[12,"0","","",13,null],[5,"lock","","",null,{"inputs":[],"output":{"generics":["lockguard"],"name":"option"}}],[7,"LOCK","","",null,null],[7,"INIT","","",null,null],[17,"LOCK_HELD","","",null,null],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","backtrace","",6,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[3,"Bomb"],[3,"Dylib"],[3,"Symbol"],[3,"Frame"],[4,"_Unwind_Reason_Code"],[3,"OptionCppSymbol"],[4,"Symbol"],[3,"LockGuard"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null],[14,"__cfg_if_items","","",null,null],[14,"__cfg_if_apply","","",null,null]],"paths":[]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[14,"debug_unreachable","debug_unreachable","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["enum_kind"] = {"doc":"Atributes on enum ## functions `#[kind(functions(name = \"return_type\"))]`","items":[[5,"derive_kind","enum_kind","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"expand","","",null,null],[5,"expand","enum_kind::expand","",null,{"inputs":[{"name":"input"}],"output":{"name":"item"}}],[0,"input","enum_kind","",null,null],[3,"Input","enum_kind::input","Parsed input.",null,null],[12,"attrs","","",0,null],[12,"name","","Name of enum.",0,null],[12,"vis","","",0,null],[12,"generics","","",0,null],[12,"variants","","",0,null],[3,"EnumAttrs","","",null,null],[12,"fns","","",1,null],[12,"extras","","",1,null],[3,"FnDef","","Function to generate.",null,null],[12,"name","","Name of function.",2,null],[12,"return_type","","",2,null],[12,"default_value","","",2,null],[3,"EnumVar","","Variant of enum.",null,null],[12,"name","","Name of variant.",3,null],[12,"attrs","","",3,null],[12,"data","","",3,null],[3,"VariantAttrs","","Parsed attributes.",null,null],[12,"fn_values","","",4,null],[12,"extras","","",4,null],[12,"has_delegate","","Does this variant has `#[kind(delegate)]`?",4,null],[3,"VariantAttr","","",null,null],[12,"fn_name","","",5,null],[12,"value","","",5,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"enumattrs"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"variantattrs"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"parse","enum_kind","",null,null],[5,"parse_attrs","enum_kind::parse","Parse kind attr as MetaItem.",null,{"inputs":[{"generics":["attribute"],"name":"vec"}],"output":{"name":"t"}}],[5,"parse_str_as_tokens","","Parse content of string literal.",null,{"inputs":[{"name":"litstr"}],"output":{"name":"t"}}],[11,"from","enum_kind::input","",0,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"parse","","",1,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"result"}],"output":null}],[11,"def_value_for_type","","",2,{"inputs":[{"name":"type"}],"output":{"generics":["expr"],"name":"option"}}],[11,"parse","","",2,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"from","","",3,{"inputs":[{"name":"variant"}],"output":{"name":"self"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"add_assign","","",4,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"result"}],"output":null}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"util","enum_kind","",null,null],[5,"is_bool","enum_kind::util","",null,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"expand","enum_kind::input","",2,null]],"paths":[[3,"Input"],[3,"EnumAttrs"],[3,"FnDef"],[3,"EnumVar"],[3,"VariantAttrs"],[3,"VariantAttr"]]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[12,"internal","","",0,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[12,"error","","",1,null],[3,"Context","","An error with context around it.",null,null],[12,"context","","",2,null],[12,"failure","","",2,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[12,"inner","","",3,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[12,"inner","","",4,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[12,"fail","","",5,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"inputs":[{"name":"d"}],"output":{"name":"error"}}],[5,"find_root_cause","","",null,{"inputs":[{"name":"fail"}],"output":{"name":"fail"}}],[0,"backtrace","","",null,null],[3,"Backtrace","failure::backtrace","A `Backtrace`.",null,null],[12,"internal","","",0,null],[0,"internal","","",null,null],[3,"Backtrace","failure::backtrace::internal","Representation of an owned and self-contained backtrace.",null,null],[12,"frames","","",6,null],[3,"InternalBacktrace","","",null,null],[12,"backtrace","","",7,null],[3,"MaybeResolved","","",null,null],[12,"resolved","","",8,null],[12,"backtrace","","",8,null],[5,"is_backtrace_enabled","","",null,{"inputs":[{"name":"f"}],"output":{"name":"bool"}}],[17,"GENERAL_BACKTRACE","","",null,null],[17,"FAILURE_BACKTRACE","","",null,null],[11,"new","","",7,{"inputs":[],"output":{"name":"internalbacktrace"}}],[11,"none","","",7,{"inputs":[],"output":{"name":"internalbacktrace"}}],[11,"as_backtrace","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"is_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","failure","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"none","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"is_none","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"compat","","",null,null],[3,"Compat","failure::compat","A compatibility wrapper around an error type from this crate.",null,null],[12,"error","","",1,null],[11,"fmt","failure","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"compat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"context","","",null,null],[3,"Context","failure::context","An error with context around it.",null,null],[12,"context","","",2,null],[12,"failure","","",2,null],[4,"Either","","",null,null],[13,"This","","",9,null],[13,"That","","",9,null],[11,"new","failure","Creates a new context without an underlying error message.",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"with_err","","",2,{"inputs":[{"name":"d"},{"name":"e"}],"output":{"name":"context"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"backtrace","failure::context","",9,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","failure","",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[0,"result_ext","","",null,null],[8,"ResultExt","failure::result_ext","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["compat"],"name":"result"}}],[10,"context","","Wraps the error type in a context type.",10,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["context"],"name":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["context"],"name":"result"}}],[0,"sync_failure","failure","",null,null],[3,"SyncFailure","failure::sync_failure","Wrapper for `std` errors to make them `Sync`.",null,null],[12,"inner","","",3,null],[11,"new","failure","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","","",null,null],[3,"Error","failure::error","The `Error` type, which can contain any failure.",null,null],[12,"inner","","",4,null],[3,"Inner","","",null,null],[12,"backtrace","","",11,null],[12,"failure","","",11,null],[11,"from","failure","",4,{"inputs":[{"name":"f"}],"output":{"name":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"macros","","",null,null],[0,"error_message","","",null,null],[3,"ErrorMessage","failure::error_message","A `Fail` type that just contains an error message. You can construct this from the `err_msg` function.",null,null],[12,"msg","","",12,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"inputs":[{"name":"d"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ResultExt","failure","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["compat"],"name":"result"}}],[10,"context","","Wraps the error type in a context type.",10,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["context"],"name":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["context"],"name":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",13,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",13,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"context","","Provides context for this failure.",13,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",13,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",13,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",13,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"__private_get_type_id__","","",13,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",13,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",13,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null],[11,"new","failure::backtrace::internal","Captures a backtrace at the callsite of this function, returning an owned representation.",6,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",6,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",6,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",6,null],[11,"from","","",6,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"backtrace"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"into","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[3,"Causes"],[3,"Backtrace"],[3,"InternalBacktrace"],[3,"MaybeResolved"],[4,"Either"],[8,"ResultExt"],[3,"Inner"],[3,"ErrorMessage"],[8,"Fail"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"fail_derive","","",null,{"inputs":[{"name":"structure"}],"output":{"name":"tokens"}}],[5,"display_body","","",null,{"inputs":[{"name":"structure"}],"output":{"generics":["tokens"],"name":"option"}}],[5,"find_error_msg","","",null,null],[5,"is_backtrace","","",null,{"inputs":[{"name":"bindinginfo"}],"output":{"name":"bool"}}],[5,"is_cause","","",null,{"inputs":[{"name":"bindinginfo"}],"output":{"name":"bool"}}]],"paths":[]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[12,"0","","",0,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[0,"lazy","","",null,null],[17,"ONCE_INIT","lazy_static::lazy","Initialization value for static [`Once`] values.",null,null],[3,"Lazy","","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[8,"LazyStatic","lazy_static","Support trait for enabling a few common operation on lazy static values.",null,null],[10,"initialize","","",1,{"inputs":[{"name":"self"}],"output":null}],[14,"__lazy_static_create","","",null,null],[14,"__lazy_static_internal","","",null,null],[14,"lazy_static","","",null,null]],"paths":[[3,"Lazy"],[8,"LazyStatic"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[12,"__align","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[12,"__ss_align","","",24,null],[12,"__ss_pad2","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pad","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[12,"fds_bits","","",28,null],[3,"tm","","",null,null],[12,"tm_sec","","",29,null],[12,"tm_min","","",29,null],[12,"tm_hour","","",29,null],[12,"tm_mday","","",29,null],[12,"tm_mon","","",29,null],[12,"tm_year","","",29,null],[12,"tm_wday","","",29,null],[12,"tm_yday","","",29,null],[12,"tm_isdst","","",29,null],[12,"tm_gmtoff","","",29,null],[12,"tm_zone","","",29,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",30,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",31,null],[12,"dli_fbase","","",31,null],[12,"dli_sname","","",31,null],[12,"dli_saddr","","",31,null],[3,"epoll_event","","",null,null],[12,"events","","",32,null],[12,"u64","","",32,null],[3,"utsname","","",null,null],[12,"sysname","","",33,null],[12,"nodename","","",33,null],[12,"release","","",33,null],[12,"version","","",33,null],[12,"machine","","",33,null],[12,"domainname","","",33,null],[3,"lconv","","",null,null],[12,"decimal_point","","",34,null],[12,"thousands_sep","","",34,null],[12,"grouping","","",34,null],[12,"int_curr_symbol","","",34,null],[12,"currency_symbol","","",34,null],[12,"mon_decimal_point","","",34,null],[12,"mon_thousands_sep","","",34,null],[12,"mon_grouping","","",34,null],[12,"positive_sign","","",34,null],[12,"negative_sign","","",34,null],[12,"int_frac_digits","","",34,null],[12,"frac_digits","","",34,null],[12,"p_cs_precedes","","",34,null],[12,"p_sep_by_space","","",34,null],[12,"n_cs_precedes","","",34,null],[12,"n_sep_by_space","","",34,null],[12,"p_sign_posn","","",34,null],[12,"n_sign_posn","","",34,null],[12,"int_p_cs_precedes","","",34,null],[12,"int_p_sep_by_space","","",34,null],[12,"int_n_cs_precedes","","",34,null],[12,"int_n_sep_by_space","","",34,null],[12,"int_p_sign_posn","","",34,null],[12,"int_n_sign_posn","","",34,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",35,null],[12,"sigev_signo","","",35,null],[12,"sigev_notify","","",35,null],[12,"sigev_notify_thread_id","","",35,null],[12,"__unused1","","",35,null],[3,"dirent","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"dirent64","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",38,null],[12,"rlim_max","","",38,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[12,"__unused1","","",39,null],[12,"__unused2","","",39,null],[12,"__unused3","","",39,null],[12,"__unused4","","",39,null],[12,"__unused5","","",39,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",40,null],[12,"ifa_name","","",40,null],[12,"ifa_flags","","",40,null],[12,"ifa_addr","","",40,null],[12,"ifa_netmask","","",40,null],[12,"ifa_ifu","","",40,null],[12,"ifa_data","","",40,null],[3,"pthread_mutex_t","","",null,null],[12,"__align","","",41,null],[12,"size","","",41,null],[3,"pthread_rwlock_t","","",null,null],[12,"__align","","",42,null],[12,"size","","",42,null],[3,"pthread_mutexattr_t","","",null,null],[12,"__align","","",43,null],[12,"size","","",43,null],[3,"pthread_rwlockattr_t","","",null,null],[12,"__align","","",44,null],[12,"size","","",44,null],[3,"pthread_cond_t","","",null,null],[12,"__align","","",45,null],[12,"size","","",45,null],[3,"pthread_condattr_t","","",null,null],[12,"__align","","",46,null],[12,"size","","",46,null],[3,"passwd","","",null,null],[12,"pw_name","","",47,null],[12,"pw_passwd","","",47,null],[12,"pw_uid","","",47,null],[12,"pw_gid","","",47,null],[12,"pw_gecos","","",47,null],[12,"pw_dir","","",47,null],[12,"pw_shell","","",47,null],[3,"spwd","","",null,null],[12,"sp_namp","","",48,null],[12,"sp_pwdp","","",48,null],[12,"sp_lstchg","","",48,null],[12,"sp_min","","",48,null],[12,"sp_max","","",48,null],[12,"sp_warn","","",48,null],[12,"sp_inact","","",48,null],[12,"sp_expire","","",48,null],[12,"sp_flag","","",48,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",49,null],[12,"f_frsize","","",49,null],[12,"f_blocks","","",49,null],[12,"f_bfree","","",49,null],[12,"f_bavail","","",49,null],[12,"f_files","","",49,null],[12,"f_ffree","","",49,null],[12,"f_favail","","",49,null],[12,"f_fsid","","",49,null],[12,"f_flag","","",49,null],[12,"f_namemax","","",49,null],[12,"__f_spare","","",49,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",50,null],[12,"dqb_bsoftlimit","","",50,null],[12,"dqb_curspace","","",50,null],[12,"dqb_ihardlimit","","",50,null],[12,"dqb_isoftlimit","","",50,null],[12,"dqb_curinodes","","",50,null],[12,"dqb_btime","","",50,null],[12,"dqb_itime","","",50,null],[12,"dqb_valid","","",50,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",51,null],[12,"ssi_errno","","",51,null],[12,"ssi_code","","",51,null],[12,"ssi_pid","","",51,null],[12,"ssi_uid","","",51,null],[12,"ssi_fd","","",51,null],[12,"ssi_tid","","",51,null],[12,"ssi_band","","",51,null],[12,"ssi_overrun","","",51,null],[12,"ssi_trapno","","",51,null],[12,"ssi_status","","",51,null],[12,"ssi_int","","",51,null],[12,"ssi_ptr","","",51,null],[12,"ssi_utime","","",51,null],[12,"ssi_stime","","",51,null],[12,"ssi_addr","","",51,null],[12,"_pad","","",51,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",52,null],[12,"it_value","","",52,null],[3,"fsid_t","","",null,null],[12,"__val","","",53,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",54,null],[12,"mq_maxmsg","","",54,null],[12,"mq_msgsize","","",54,null],[12,"mq_curmsgs","","",54,null],[12,"pad","","",54,null],[3,"cpu_set_t","","",null,null],[12,"bits","","",55,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",56,null],[12,"if_name","","",56,null],[3,"msginfo","","",null,null],[12,"msgpool","","",57,null],[12,"msgmap","","",57,null],[12,"msgmax","","",57,null],[12,"msgmnb","","",57,null],[12,"msgmni","","",57,null],[12,"msgssz","","",57,null],[12,"msgtql","","",57,null],[12,"msgseg","","",57,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",58,null],[12,"msg_len","","",58,null],[3,"sembuf","","",null,null],[12,"sem_num","","",59,null],[12,"sem_op","","",59,null],[12,"sem_flg","","",59,null],[3,"input_event","","",null,null],[12,"time","","",60,null],[12,"type_","","",60,null],[12,"code","","",60,null],[12,"value","","",60,null],[3,"input_id","","",null,null],[12,"bustype","","",61,null],[12,"vendor","","",61,null],[12,"product","","",61,null],[12,"version","","",61,null],[3,"input_absinfo","","",null,null],[12,"value","","",62,null],[12,"minimum","","",62,null],[12,"maximum","","",62,null],[12,"fuzz","","",62,null],[12,"flat","","",62,null],[12,"resolution","","",62,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",63,null],[12,"len","","",63,null],[12,"index","","",63,null],[12,"keycode","","",63,null],[12,"scancode","","",63,null],[3,"input_mask","","",null,null],[12,"type_","","",64,null],[12,"codes_size","","",64,null],[12,"codes_ptr","","",64,null],[3,"ff_replay","","",null,null],[12,"length","","",65,null],[12,"delay","","",65,null],[3,"ff_trigger","","",null,null],[12,"button","","",66,null],[12,"interval","","",66,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",67,null],[12,"attack_level","","",67,null],[12,"fade_length","","",67,null],[12,"fade_level","","",67,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",68,null],[12,"envelope","","",68,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",69,null],[12,"end_level","","",69,null],[12,"envelope","","",69,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",70,null],[12,"left_saturation","","",70,null],[12,"right_coeff","","",70,null],[12,"left_coeff","","",70,null],[12,"deadband","","",70,null],[12,"center","","",70,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",71,null],[12,"period","","",71,null],[12,"magnitude","","",71,null],[12,"offset","","",71,null],[12,"phase","","",71,null],[12,"envelope","","",71,null],[12,"custom_len","","",71,null],[12,"custom_data","","",71,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",72,null],[12,"weak_magnitude","","",72,null],[3,"ff_effect","","",null,null],[12,"type_","","",73,null],[12,"id","","",73,null],[12,"direction","","",73,null],[12,"trigger","","",73,null],[12,"replay","","",73,null],[12,"u","","",73,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",74,null],[12,"dlpi_name","","",74,null],[12,"dlpi_phdr","","",74,null],[12,"dlpi_phnum","","",74,null],[12,"dlpi_adds","","",74,null],[12,"dlpi_subs","","",74,null],[12,"dlpi_tls_modid","","",74,null],[12,"dlpi_tls_data","","",74,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",75,null],[12,"p_offset","","",75,null],[12,"p_vaddr","","",75,null],[12,"p_paddr","","",75,null],[12,"p_filesz","","",75,null],[12,"p_memsz","","",75,null],[12,"p_flags","","",75,null],[12,"p_align","","",75,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",76,null],[12,"p_flags","","",76,null],[12,"p_offset","","",76,null],[12,"p_vaddr","","",76,null],[12,"p_paddr","","",76,null],[12,"p_filesz","","",76,null],[12,"p_memsz","","",76,null],[12,"p_align","","",76,null],[3,"ucred","","",null,null],[12,"pid","","",77,null],[12,"uid","","",77,null],[12,"gid","","",77,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",78,null],[12,"mnt_dir","","",78,null],[12,"mnt_type","","",78,null],[12,"mnt_opts","","",78,null],[12,"mnt_freq","","",78,null],[12,"mnt_passno","","",78,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",79,null],[12,"aio_lio_opcode","","",79,null],[12,"aio_reqprio","","",79,null],[12,"aio_buf","","",79,null],[12,"aio_nbytes","","",79,null],[12,"aio_sigevent","","",79,null],[12,"__next_prio","","",79,null],[12,"__abs_prio","","",79,null],[12,"__policy","","",79,null],[12,"__error_code","","",79,null],[12,"__return_value","","",79,null],[12,"aio_offset","","",79,null],[12,"__glibc_reserved","","",79,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",80,null],[12,"e_exit","","",80,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",81,null],[12,"tv_usec","","",81,null],[3,"utmpx","","",null,null],[12,"ut_type","","",82,null],[12,"ut_pid","","",82,null],[12,"ut_line","","",82,null],[12,"ut_id","","",82,null],[12,"ut_user","","",82,null],[12,"ut_host","","",82,null],[12,"ut_exit","","",82,null],[12,"ut_session","","",82,null],[12,"ut_tv","","",82,null],[12,"ut_addr_v6","","",82,null],[12,"__glibc_reserved","","",82,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",83,null],[12,"sa_mask","","",83,null],[12,"sa_flags","","",83,null],[12,"sa_restorer","","",83,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",84,null],[12,"ss_flags","","",84,null],[12,"ss_size","","",84,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",85,null],[12,"si_errno","","",85,null],[12,"si_code","","",85,null],[12,"_pad","","",85,null],[12,"_align","","",85,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",86,null],[12,"gl_pathv","","",86,null],[12,"gl_offs","","",86,null],[12,"gl_flags","","",86,null],[12,"__unused1","","",86,null],[12,"__unused2","","",86,null],[12,"__unused3","","",86,null],[12,"__unused4","","",86,null],[12,"__unused5","","",86,null],[3,"statfs","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_spare","","",87,null],[3,"msghdr","","",null,null],[12,"msg_name","","",88,null],[12,"msg_namelen","","",88,null],[12,"msg_iov","","",88,null],[12,"msg_iovlen","","",88,null],[12,"msg_control","","",88,null],[12,"msg_controllen","","",88,null],[12,"msg_flags","","",88,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",89,null],[12,"cmsg_level","","",89,null],[12,"cmsg_type","","",89,null],[3,"termios","","",null,null],[12,"c_iflag","","",90,null],[12,"c_oflag","","",90,null],[12,"c_cflag","","",90,null],[12,"c_lflag","","",90,null],[12,"c_line","","",90,null],[12,"c_cc","","",90,null],[12,"c_ispeed","","",90,null],[12,"c_ospeed","","",90,null],[3,"flock","","",null,null],[12,"l_type","","",91,null],[12,"l_whence","","",91,null],[12,"l_start","","",91,null],[12,"l_len","","",91,null],[12,"l_pid","","",91,null],[3,"sem_t","","",null,null],[12,"__size","","",92,null],[12,"__align","","",92,null],[3,"sigset_t","","",null,null],[12,"__val","","",93,null],[3,"sysinfo","","",null,null],[12,"uptime","","",94,null],[12,"loads","","",94,null],[12,"totalram","","",94,null],[12,"freeram","","",94,null],[12,"sharedram","","",94,null],[12,"bufferram","","",94,null],[12,"totalswap","","",94,null],[12,"freeswap","","",94,null],[12,"procs","","",94,null],[12,"pad","","",94,null],[12,"totalhigh","","",94,null],[12,"freehigh","","",94,null],[12,"mem_unit","","",94,null],[12,"_f","","",94,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",95,null],[12,"msg_stime","","",95,null],[12,"msg_rtime","","",95,null],[12,"msg_ctime","","",95,null],[12,"__msg_cbytes","","",95,null],[12,"msg_qnum","","",95,null],[12,"msg_qbytes","","",95,null],[12,"msg_lspid","","",95,null],[12,"msg_lrpid","","",95,null],[12,"__glibc_reserved4","","",95,null],[12,"__glibc_reserved5","","",95,null],[3,"stat","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"__pad0","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[12,"__unused","","",96,null],[3,"stat64","","",null,null],[12,"st_dev","","",97,null],[12,"st_ino","","",97,null],[12,"st_nlink","","",97,null],[12,"st_mode","","",97,null],[12,"st_uid","","",97,null],[12,"st_gid","","",97,null],[12,"__pad0","","",97,null],[12,"st_rdev","","",97,null],[12,"st_size","","",97,null],[12,"st_blksize","","",97,null],[12,"st_blocks","","",97,null],[12,"st_atime","","",97,null],[12,"st_atime_nsec","","",97,null],[12,"st_mtime","","",97,null],[12,"st_mtime_nsec","","",97,null],[12,"st_ctime","","",97,null],[12,"st_ctime_nsec","","",97,null],[12,"__reserved","","",97,null],[3,"statfs64","","",null,null],[12,"f_type","","",98,null],[12,"f_bsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_fsid","","",98,null],[12,"f_namelen","","",98,null],[12,"f_frsize","","",98,null],[12,"f_flags","","",98,null],[12,"f_spare","","",98,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",99,null],[12,"f_frsize","","",99,null],[12,"f_blocks","","",99,null],[12,"f_bfree","","",99,null],[12,"f_bavail","","",99,null],[12,"f_files","","",99,null],[12,"f_ffree","","",99,null],[12,"f_favail","","",99,null],[12,"f_fsid","","",99,null],[12,"f_flag","","",99,null],[12,"f_namemax","","",99,null],[12,"__f_spare","","",99,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",100,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",101,null],[12,"exponent","","",101,null],[12,"__private","","",101,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",102,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",103,null],[12,"swd","","",103,null],[12,"ftw","","",103,null],[12,"fop","","",103,null],[12,"rip","","",103,null],[12,"rdp","","",103,null],[12,"mxcsr","","",103,null],[12,"mxcr_mask","","",103,null],[12,"_st","","",103,null],[12,"_xmm","","",103,null],[12,"__private","","",103,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",104,null],[12,"swd","","",104,null],[12,"ftw","","",104,null],[12,"fop","","",104,null],[12,"rip","","",104,null],[12,"rdp","","",104,null],[12,"mxcsr","","",104,null],[12,"mxcr_mask","","",104,null],[12,"st_space","","",104,null],[12,"xmm_space","","",104,null],[12,"padding","","",104,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",105,null],[12,"r14","","",105,null],[12,"r13","","",105,null],[12,"r12","","",105,null],[12,"rbp","","",105,null],[12,"rbx","","",105,null],[12,"r11","","",105,null],[12,"r10","","",105,null],[12,"r9","","",105,null],[12,"r8","","",105,null],[12,"rax","","",105,null],[12,"rcx","","",105,null],[12,"rdx","","",105,null],[12,"rsi","","",105,null],[12,"rdi","","",105,null],[12,"orig_rax","","",105,null],[12,"rip","","",105,null],[12,"cs","","",105,null],[12,"eflags","","",105,null],[12,"rsp","","",105,null],[12,"ss","","",105,null],[12,"fs_base","","",105,null],[12,"gs_base","","",105,null],[12,"ds","","",105,null],[12,"es","","",105,null],[12,"fs","","",105,null],[12,"gs","","",105,null],[3,"user","","",null,null],[12,"regs","","",106,null],[12,"u_fpvalid","","",106,null],[12,"i387","","",106,null],[12,"u_tsize","","",106,null],[12,"u_dsize","","",106,null],[12,"u_ssize","","",106,null],[12,"start_code","","",106,null],[12,"start_stack","","",106,null],[12,"signal","","",106,null],[12,"__reserved","","",106,null],[12,"u_ar0","","",106,null],[12,"u_fpstate","","",106,null],[12,"magic","","",106,null],[12,"u_comm","","",106,null],[12,"u_debugreg","","",106,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",107,null],[12,"fpregs","","",107,null],[12,"__private","","",107,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",108,null],[12,"uc_link","","",108,null],[12,"uc_stack","","",108,null],[12,"uc_mcontext","","",108,null],[12,"uc_sigmask","","",108,null],[12,"__private","","",108,null],[3,"ipc_perm","","",null,null],[12,"__key","","",109,null],[12,"uid","","",109,null],[12,"gid","","",109,null],[12,"cuid","","",109,null],[12,"cgid","","",109,null],[12,"mode","","",109,null],[12,"__pad1","","",109,null],[12,"__seq","","",109,null],[12,"__pad2","","",109,null],[12,"__unused1","","",109,null],[12,"__unused2","","",109,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",110,null],[12,"shm_segsz","","",110,null],[12,"shm_atime","","",110,null],[12,"shm_dtime","","",110,null],[12,"shm_ctime","","",110,null],[12,"shm_cpid","","",110,null],[12,"shm_lpid","","",110,null],[12,"shm_nattch","","",110,null],[12,"__unused4","","",110,null],[12,"__unused5","","",110,null],[3,"termios2","","",null,null],[12,"c_iflag","","",111,null],[12,"c_oflag","","",111,null],[12,"c_cflag","","",111,null],[12,"c_lflag","","",111,null],[12,"c_line","","",111,null],[12,"c_cc","","",111,null],[12,"c_ispeed","","",111,null],[12,"c_ospeed","","",111,null],[4,"c_void","","",null,null],[13,"__variant1","","",112,null],[13,"__variant2","","",112,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[0,"macros","","",null,null],[0,"dox","","",null,null],[0,"imp","libc::dox","",null,null],[4,"Option","libc::dox::imp","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",113,null],[13,"Some","","Some value `T`",113,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",114,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",114,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[0,"mem","","Basic functions for dealing with memory.",null,null],[5,"forget","libc::dox::imp::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[12,"value","","",116,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"unix","libc","Definitions found commonly among almost all Unix derivatives",null,null],[3,"group","libc::unix","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[12,"__align","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[0,"notbsd","","",null,null],[3,"sockaddr","libc::unix::notbsd","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[12,"__ss_align","","",24,null],[12,"__ss_pad2","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pad","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[12,"fds_bits","","",28,null],[3,"tm","","",null,null],[12,"tm_sec","","",29,null],[12,"tm_min","","",29,null],[12,"tm_hour","","",29,null],[12,"tm_mday","","",29,null],[12,"tm_mon","","",29,null],[12,"tm_year","","",29,null],[12,"tm_wday","","",29,null],[12,"tm_yday","","",29,null],[12,"tm_isdst","","",29,null],[12,"tm_gmtoff","","",29,null],[12,"tm_zone","","",29,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",30,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",31,null],[12,"dli_fbase","","",31,null],[12,"dli_sname","","",31,null],[12,"dli_saddr","","",31,null],[3,"epoll_event","","",null,null],[12,"events","","",32,null],[12,"u64","","",32,null],[3,"utsname","","",null,null],[12,"sysname","","",33,null],[12,"nodename","","",33,null],[12,"release","","",33,null],[12,"version","","",33,null],[12,"machine","","",33,null],[12,"domainname","","",33,null],[3,"lconv","","",null,null],[12,"decimal_point","","",34,null],[12,"thousands_sep","","",34,null],[12,"grouping","","",34,null],[12,"int_curr_symbol","","",34,null],[12,"currency_symbol","","",34,null],[12,"mon_decimal_point","","",34,null],[12,"mon_thousands_sep","","",34,null],[12,"mon_grouping","","",34,null],[12,"positive_sign","","",34,null],[12,"negative_sign","","",34,null],[12,"int_frac_digits","","",34,null],[12,"frac_digits","","",34,null],[12,"p_cs_precedes","","",34,null],[12,"p_sep_by_space","","",34,null],[12,"n_cs_precedes","","",34,null],[12,"n_sep_by_space","","",34,null],[12,"p_sign_posn","","",34,null],[12,"n_sign_posn","","",34,null],[12,"int_p_cs_precedes","","",34,null],[12,"int_p_sep_by_space","","",34,null],[12,"int_n_cs_precedes","","",34,null],[12,"int_n_sep_by_space","","",34,null],[12,"int_p_sign_posn","","",34,null],[12,"int_n_sign_posn","","",34,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",35,null],[12,"sigev_signo","","",35,null],[12,"sigev_notify","","",35,null],[12,"sigev_notify_thread_id","","",35,null],[12,"__unused1","","",35,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[0,"linux","","Linux-specific definitions for linux-like values",null,null],[3,"dirent","libc::unix::notbsd::linux","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"dirent64","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",38,null],[12,"rlim_max","","",38,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[12,"__unused1","","",39,null],[12,"__unused2","","",39,null],[12,"__unused3","","",39,null],[12,"__unused4","","",39,null],[12,"__unused5","","",39,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",40,null],[12,"ifa_name","","",40,null],[12,"ifa_flags","","",40,null],[12,"ifa_addr","","",40,null],[12,"ifa_netmask","","",40,null],[12,"ifa_ifu","","",40,null],[12,"ifa_data","","",40,null],[3,"pthread_mutex_t","","",null,null],[12,"__align","","",41,null],[12,"size","","",41,null],[3,"pthread_rwlock_t","","",null,null],[12,"__align","","",42,null],[12,"size","","",42,null],[3,"pthread_mutexattr_t","","",null,null],[12,"__align","","",43,null],[12,"size","","",43,null],[3,"pthread_rwlockattr_t","","",null,null],[12,"__align","","",44,null],[12,"size","","",44,null],[3,"pthread_cond_t","","",null,null],[12,"__align","","",45,null],[12,"size","","",45,null],[3,"pthread_condattr_t","","",null,null],[12,"__align","","",46,null],[12,"size","","",46,null],[3,"passwd","","",null,null],[12,"pw_name","","",47,null],[12,"pw_passwd","","",47,null],[12,"pw_uid","","",47,null],[12,"pw_gid","","",47,null],[12,"pw_gecos","","",47,null],[12,"pw_dir","","",47,null],[12,"pw_shell","","",47,null],[3,"spwd","","",null,null],[12,"sp_namp","","",48,null],[12,"sp_pwdp","","",48,null],[12,"sp_lstchg","","",48,null],[12,"sp_min","","",48,null],[12,"sp_max","","",48,null],[12,"sp_warn","","",48,null],[12,"sp_inact","","",48,null],[12,"sp_expire","","",48,null],[12,"sp_flag","","",48,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",49,null],[12,"f_frsize","","",49,null],[12,"f_blocks","","",49,null],[12,"f_bfree","","",49,null],[12,"f_bavail","","",49,null],[12,"f_files","","",49,null],[12,"f_ffree","","",49,null],[12,"f_favail","","",49,null],[12,"f_fsid","","",49,null],[12,"f_flag","","",49,null],[12,"f_namemax","","",49,null],[12,"__f_spare","","",49,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",50,null],[12,"dqb_bsoftlimit","","",50,null],[12,"dqb_curspace","","",50,null],[12,"dqb_ihardlimit","","",50,null],[12,"dqb_isoftlimit","","",50,null],[12,"dqb_curinodes","","",50,null],[12,"dqb_btime","","",50,null],[12,"dqb_itime","","",50,null],[12,"dqb_valid","","",50,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",51,null],[12,"ssi_errno","","",51,null],[12,"ssi_code","","",51,null],[12,"ssi_pid","","",51,null],[12,"ssi_uid","","",51,null],[12,"ssi_fd","","",51,null],[12,"ssi_tid","","",51,null],[12,"ssi_band","","",51,null],[12,"ssi_overrun","","",51,null],[12,"ssi_trapno","","",51,null],[12,"ssi_status","","",51,null],[12,"ssi_int","","",51,null],[12,"ssi_ptr","","",51,null],[12,"ssi_utime","","",51,null],[12,"ssi_stime","","",51,null],[12,"ssi_addr","","",51,null],[12,"_pad","","",51,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",52,null],[12,"it_value","","",52,null],[3,"fsid_t","","",null,null],[12,"__val","","",53,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",54,null],[12,"mq_maxmsg","","",54,null],[12,"mq_msgsize","","",54,null],[12,"mq_curmsgs","","",54,null],[12,"pad","","",54,null],[3,"cpu_set_t","","",null,null],[12,"bits","","",55,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",56,null],[12,"if_name","","",56,null],[3,"msginfo","","",null,null],[12,"msgpool","","",57,null],[12,"msgmap","","",57,null],[12,"msgmax","","",57,null],[12,"msgmnb","","",57,null],[12,"msgmni","","",57,null],[12,"msgssz","","",57,null],[12,"msgtql","","",57,null],[12,"msgseg","","",57,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",58,null],[12,"msg_len","","",58,null],[3,"sembuf","","",null,null],[12,"sem_num","","",59,null],[12,"sem_op","","",59,null],[12,"sem_flg","","",59,null],[3,"input_event","","",null,null],[12,"time","","",60,null],[12,"type_","","",60,null],[12,"code","","",60,null],[12,"value","","",60,null],[3,"input_id","","",null,null],[12,"bustype","","",61,null],[12,"vendor","","",61,null],[12,"product","","",61,null],[12,"version","","",61,null],[3,"input_absinfo","","",null,null],[12,"value","","",62,null],[12,"minimum","","",62,null],[12,"maximum","","",62,null],[12,"fuzz","","",62,null],[12,"flat","","",62,null],[12,"resolution","","",62,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",63,null],[12,"len","","",63,null],[12,"index","","",63,null],[12,"keycode","","",63,null],[12,"scancode","","",63,null],[3,"input_mask","","",null,null],[12,"type_","","",64,null],[12,"codes_size","","",64,null],[12,"codes_ptr","","",64,null],[3,"ff_replay","","",null,null],[12,"length","","",65,null],[12,"delay","","",65,null],[3,"ff_trigger","","",null,null],[12,"button","","",66,null],[12,"interval","","",66,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",67,null],[12,"attack_level","","",67,null],[12,"fade_length","","",67,null],[12,"fade_level","","",67,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",68,null],[12,"envelope","","",68,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",69,null],[12,"end_level","","",69,null],[12,"envelope","","",69,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",70,null],[12,"left_saturation","","",70,null],[12,"right_coeff","","",70,null],[12,"left_coeff","","",70,null],[12,"deadband","","",70,null],[12,"center","","",70,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",71,null],[12,"period","","",71,null],[12,"magnitude","","",71,null],[12,"offset","","",71,null],[12,"phase","","",71,null],[12,"envelope","","",71,null],[12,"custom_len","","",71,null],[12,"custom_data","","",71,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",72,null],[12,"weak_magnitude","","",72,null],[3,"ff_effect","","",null,null],[12,"type_","","",73,null],[12,"id","","",73,null],[12,"direction","","",73,null],[12,"trigger","","",73,null],[12,"replay","","",73,null],[12,"u","","",73,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",74,null],[12,"dlpi_name","","",74,null],[12,"dlpi_phdr","","",74,null],[12,"dlpi_phnum","","",74,null],[12,"dlpi_adds","","",74,null],[12,"dlpi_subs","","",74,null],[12,"dlpi_tls_modid","","",74,null],[12,"dlpi_tls_data","","",74,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",75,null],[12,"p_offset","","",75,null],[12,"p_vaddr","","",75,null],[12,"p_paddr","","",75,null],[12,"p_filesz","","",75,null],[12,"p_memsz","","",75,null],[12,"p_flags","","",75,null],[12,"p_align","","",75,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",76,null],[12,"p_flags","","",76,null],[12,"p_offset","","",76,null],[12,"p_vaddr","","",76,null],[12,"p_paddr","","",76,null],[12,"p_filesz","","",76,null],[12,"p_memsz","","",76,null],[12,"p_align","","",76,null],[3,"ucred","","",null,null],[12,"pid","","",77,null],[12,"uid","","",77,null],[12,"gid","","",77,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",78,null],[12,"mnt_dir","","",78,null],[12,"mnt_type","","",78,null],[12,"mnt_opts","","",78,null],[12,"mnt_freq","","",78,null],[12,"mnt_passno","","",78,null],[4,"fpos64_t","","",null,null],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[0,"other","","",null,null],[3,"aiocb","libc::unix::notbsd::linux::other","",null,null],[12,"aio_fildes","","",79,null],[12,"aio_lio_opcode","","",79,null],[12,"aio_reqprio","","",79,null],[12,"aio_buf","","",79,null],[12,"aio_nbytes","","",79,null],[12,"aio_sigevent","","",79,null],[12,"__next_prio","","",79,null],[12,"__abs_prio","","",79,null],[12,"__policy","","",79,null],[12,"__error_code","","",79,null],[12,"__return_value","","",79,null],[12,"aio_offset","","",79,null],[12,"__glibc_reserved","","",79,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",80,null],[12,"e_exit","","",80,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",81,null],[12,"tv_usec","","",81,null],[3,"utmpx","","",null,null],[12,"ut_type","","",82,null],[12,"ut_pid","","",82,null],[12,"ut_line","","",82,null],[12,"ut_id","","",82,null],[12,"ut_user","","",82,null],[12,"ut_host","","",82,null],[12,"ut_exit","","",82,null],[12,"ut_session","","",82,null],[12,"ut_tv","","",82,null],[12,"ut_addr_v6","","",82,null],[12,"__glibc_reserved","","",82,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",83,null],[12,"sa_mask","","",83,null],[12,"sa_flags","","",83,null],[12,"sa_restorer","","",83,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",84,null],[12,"ss_flags","","",84,null],[12,"ss_size","","",84,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",85,null],[12,"si_errno","","",85,null],[12,"si_code","","",85,null],[12,"_pad","","",85,null],[12,"_align","","",85,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",86,null],[12,"gl_pathv","","",86,null],[12,"gl_offs","","",86,null],[12,"gl_flags","","",86,null],[12,"__unused1","","",86,null],[12,"__unused2","","",86,null],[12,"__unused3","","",86,null],[12,"__unused4","","",86,null],[12,"__unused5","","",86,null],[3,"statfs","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_spare","","",87,null],[3,"msghdr","","",null,null],[12,"msg_name","","",88,null],[12,"msg_namelen","","",88,null],[12,"msg_iov","","",88,null],[12,"msg_iovlen","","",88,null],[12,"msg_control","","",88,null],[12,"msg_controllen","","",88,null],[12,"msg_flags","","",88,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",89,null],[12,"cmsg_level","","",89,null],[12,"cmsg_type","","",89,null],[3,"termios","","",null,null],[12,"c_iflag","","",90,null],[12,"c_oflag","","",90,null],[12,"c_cflag","","",90,null],[12,"c_lflag","","",90,null],[12,"c_line","","",90,null],[12,"c_cc","","",90,null],[12,"c_ispeed","","",90,null],[12,"c_ospeed","","",90,null],[3,"flock","","",null,null],[12,"l_type","","",91,null],[12,"l_whence","","",91,null],[12,"l_start","","",91,null],[12,"l_len","","",91,null],[12,"l_pid","","",91,null],[3,"sem_t","","",null,null],[12,"__size","","",92,null],[12,"__align","","",92,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[0,"b64","","64-bit specific definitions for linux-like values",null,null],[3,"sigset_t","libc::unix::notbsd::linux::other::b64","",null,null],[12,"__val","","",93,null],[3,"sysinfo","","",null,null],[12,"uptime","","",94,null],[12,"loads","","",94,null],[12,"totalram","","",94,null],[12,"freeram","","",94,null],[12,"sharedram","","",94,null],[12,"bufferram","","",94,null],[12,"totalswap","","",94,null],[12,"freeswap","","",94,null],[12,"procs","","",94,null],[12,"pad","","",94,null],[12,"totalhigh","","",94,null],[12,"freehigh","","",94,null],[12,"mem_unit","","",94,null],[12,"_f","","",94,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",95,null],[12,"msg_stime","","",95,null],[12,"msg_rtime","","",95,null],[12,"msg_ctime","","",95,null],[12,"__msg_cbytes","","",95,null],[12,"msg_qnum","","",95,null],[12,"msg_qbytes","","",95,null],[12,"msg_lspid","","",95,null],[12,"msg_lrpid","","",95,null],[12,"__glibc_reserved4","","",95,null],[12,"__glibc_reserved5","","",95,null],[0,"x86_64","","x86_64-specific definitions for 64-bit linux-like values",null,null],[3,"stat","libc::unix::notbsd::linux::other::b64::x86_64","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"__pad0","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[12,"__unused","","",96,null],[3,"stat64","","",null,null],[12,"st_dev","","",97,null],[12,"st_ino","","",97,null],[12,"st_nlink","","",97,null],[12,"st_mode","","",97,null],[12,"st_uid","","",97,null],[12,"st_gid","","",97,null],[12,"__pad0","","",97,null],[12,"st_rdev","","",97,null],[12,"st_size","","",97,null],[12,"st_blksize","","",97,null],[12,"st_blocks","","",97,null],[12,"st_atime","","",97,null],[12,"st_atime_nsec","","",97,null],[12,"st_mtime","","",97,null],[12,"st_mtime_nsec","","",97,null],[12,"st_ctime","","",97,null],[12,"st_ctime_nsec","","",97,null],[12,"__reserved","","",97,null],[3,"statfs64","","",null,null],[12,"f_type","","",98,null],[12,"f_bsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_fsid","","",98,null],[12,"f_namelen","","",98,null],[12,"f_frsize","","",98,null],[12,"f_flags","","",98,null],[12,"f_spare","","",98,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",99,null],[12,"f_frsize","","",99,null],[12,"f_blocks","","",99,null],[12,"f_bfree","","",99,null],[12,"f_bavail","","",99,null],[12,"f_files","","",99,null],[12,"f_ffree","","",99,null],[12,"f_favail","","",99,null],[12,"f_fsid","","",99,null],[12,"f_flag","","",99,null],[12,"f_namemax","","",99,null],[12,"__f_spare","","",99,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",100,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",101,null],[12,"exponent","","",101,null],[12,"__private","","",101,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",102,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",103,null],[12,"swd","","",103,null],[12,"ftw","","",103,null],[12,"fop","","",103,null],[12,"rip","","",103,null],[12,"rdp","","",103,null],[12,"mxcsr","","",103,null],[12,"mxcr_mask","","",103,null],[12,"_st","","",103,null],[12,"_xmm","","",103,null],[12,"__private","","",103,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",104,null],[12,"swd","","",104,null],[12,"ftw","","",104,null],[12,"fop","","",104,null],[12,"rip","","",104,null],[12,"rdp","","",104,null],[12,"mxcsr","","",104,null],[12,"mxcr_mask","","",104,null],[12,"st_space","","",104,null],[12,"xmm_space","","",104,null],[12,"padding","","",104,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",105,null],[12,"r14","","",105,null],[12,"r13","","",105,null],[12,"r12","","",105,null],[12,"rbp","","",105,null],[12,"rbx","","",105,null],[12,"r11","","",105,null],[12,"r10","","",105,null],[12,"r9","","",105,null],[12,"r8","","",105,null],[12,"rax","","",105,null],[12,"rcx","","",105,null],[12,"rdx","","",105,null],[12,"rsi","","",105,null],[12,"rdi","","",105,null],[12,"orig_rax","","",105,null],[12,"rip","","",105,null],[12,"cs","","",105,null],[12,"eflags","","",105,null],[12,"rsp","","",105,null],[12,"ss","","",105,null],[12,"fs_base","","",105,null],[12,"gs_base","","",105,null],[12,"ds","","",105,null],[12,"es","","",105,null],[12,"fs","","",105,null],[12,"gs","","",105,null],[3,"user","","",null,null],[12,"regs","","",106,null],[12,"u_fpvalid","","",106,null],[12,"i387","","",106,null],[12,"u_tsize","","",106,null],[12,"u_dsize","","",106,null],[12,"u_ssize","","",106,null],[12,"start_code","","",106,null],[12,"start_stack","","",106,null],[12,"signal","","",106,null],[12,"__reserved","","",106,null],[12,"u_ar0","","",106,null],[12,"u_fpstate","","",106,null],[12,"magic","","",106,null],[12,"u_comm","","",106,null],[12,"u_debugreg","","",106,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",107,null],[12,"fpregs","","",107,null],[12,"__private","","",107,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",108,null],[12,"uc_link","","",108,null],[12,"uc_stack","","",108,null],[12,"uc_mcontext","","",108,null],[12,"uc_sigmask","","",108,null],[12,"__private","","",108,null],[3,"ipc_perm","","",null,null],[12,"__key","","",109,null],[12,"uid","","",109,null],[12,"gid","","",109,null],[12,"cuid","","",109,null],[12,"cgid","","",109,null],[12,"mode","","",109,null],[12,"__pad1","","",109,null],[12,"__seq","","",109,null],[12,"__pad2","","",109,null],[12,"__unused1","","",109,null],[12,"__unused2","","",109,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",110,null],[12,"shm_segsz","","",110,null],[12,"shm_atime","","",110,null],[12,"shm_dtime","","",110,null],[12,"shm_ctime","","",110,null],[12,"shm_cpid","","",110,null],[12,"shm_lpid","","",110,null],[12,"shm_nattch","","",110,null],[12,"__unused4","","",110,null],[12,"__unused5","","",110,null],[3,"termios2","","",null,null],[12,"c_iflag","","",111,null],[12,"c_oflag","","",111,null],[12,"c_cflag","","",111,null],[12,"c_lflag","","",111,null],[12,"c_line","","",111,null],[12,"c_cc","","",111,null],[12,"c_ispeed","","",111,null],[12,"c_ospeed","","",111,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[11,"clone","libc","",96,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[0,"not_x32","libc::unix::notbsd::linux::other::b64","",null,null],[5,"sysctl","libc::unix::notbsd::linux::other::b64::not_x32","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[6,"clock_t","libc::unix::notbsd::linux::other::b64","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[11,"clone","libc","",93,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[6,"__priority_which_t","libc::unix::notbsd::linux::other","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"AF_MAX","","",null,null],[17,"PF_MAX","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[11,"clone","libc","",79,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[6,"useconds_t","libc::unix::notbsd::linux","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[11,"clone","libc","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[6,"sa_family_t","libc::unix::notbsd","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[17,"ULONG_SIZE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[11,"clone","libc","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[6,"pid_t","libc::unix","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[11,"clone","libc","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"AF_MAX","","",null,null],[17,"PF_MAX","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[11,"is_some","libc::dox::imp","Returns `true` if the option is a [`Some`] value.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",113,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",113,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a [`default`][] (if not).",113,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a [`default`][] (if not).",113,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",113,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",113,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",113,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",113,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",113,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","libc::dox::imp::mem","",116,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","libc::dox::imp","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","libc::dox::imp::mem","",116,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",116,null],[11,"partial_cmp","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"deref","libc::dox::imp::mem","",116,null],[11,"cmp","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","libc::dox::imp::mem","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"fmt","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","libc::dox::imp::mem","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"assert_receiver_is_total_eq","libc::dox::imp","",113,null],[11,"eq","libc::dox::imp::mem","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"into_result","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",113,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",113,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"from","","",113,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",113,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"hash","libc::dox::imp::mem","",115,null],[11,"hash","libc::dox::imp","",113,null],[11,"hash","libc::dox::imp::mem","",116,null],[11,"into_iter","libc::dox::imp","Returns a consuming iterator over the possibly contained value.",113,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","Returns [`None`].",113,{"inputs":[],"output":{"name":"option"}}],[11,"default","libc::dox::imp::mem","",116,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"new","","Wrap a value to be manually dropped.",116,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",116,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",116,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[4,"c_void"],[4,"Option"],[8,"Clone"],[3,"Discriminant"],[19,"ManuallyDrop"]]};
searchIndex["parser_macros"] = {"doc":"Simulates unhygienic macro to make parser's code cleaner. It lives here because it's not a generic purpose macro (at all).","items":[[5,"parser","parser_macros","This attribute macro injects first argument of function (typically `self`) to all known macros invocation in a function.",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"expand","","",null,null],[3,"MyFolder","parser_macros::expand","",null,null],[12,"parser","","",0,null],[5,"expand","","",null,{"inputs":[{"name":"tokenstream"},{"name":"item"}],"output":{"name":"item"}}],[5,"get_joinned_span","","",null,{"inputs":[{"name":"totokens"}],"output":{"name":"span"}}],[5,"parse_args","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"punctuated"}}],[11,"fold_expr_method_call","","",0,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[11,"fold_method_sig","","",0,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fold_expr_closure","","",0,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[11,"fold_macro","","",0,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"macro"}}]],"paths":[[3,"MyFolder"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["pmutil"] = {"doc":"Utils for implementing proc-macro. Works on stable.","items":[[3,"Quote","pmutil","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[0,"comment","","",null,null],[5,"comment","pmutil::comment","Creates a comment from `s`.",null,{"inputs":[{"name":"s"}],"output":{"name":"attribute"}}],[0,"prelude","pmutil","Prelude for convenience.",null,null],[3,"Literal","pmutil::prelude","",null,null],[12,"0","","",1,null],[3,"Span","","",null,null],[12,"0","","",2,null],[3,"Term","","",null,null],[12,"0","","",3,null],[3,"TokenStream","","",null,null],[12,"0","","",4,null],[3,"TokenTree","","",null,null],[12,"span","","",5,null],[12,"kind","","",5,null],[3,"Ident","","A word of Rust code, such as a keyword or variable name.",null,null],[12,"term","","",6,null],[12,"span","","",6,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[8,"SpanExt","","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[10,"into_pm2_span","","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"spanned_quote","pmutil","Span-aware quasi quotting built on top of `quote` crate.",null,null],[3,"Location","pmutil::spanned_quote","Location of `smart_quote!` macro invocation.",null,null],[12,"file_name","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[0,"buffer","","",null,null],[3,"Quote","pmutil::spanned_quote::buffer","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[3,"Location","","Location of `smart_quote!` macro invocation.",null,null],[12,"file_name","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[17,"INVALID_SPAN_STATE","","",null,null],[11,"clone","pmutil::spanned_quote","",8,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","pmutil","",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"new_call_site","","Shorthand for",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_tokens","","Shorthand for",0,{"inputs":[{"name":"totokens"}],"output":{"name":"self"}}],[11,"from_tokens_or","","Shorthand for",0,{"inputs":[{"name":"option"},{"name":"span"}],"output":{"name":"self"}}],[11,"parse","","Parse tokens as `Node`. Panics if parsing failed.",0,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"report_loc","","Reports location of `smart_quote!` invocation.",0,{"inputs":[{"name":"self"},{"name":"location"}],"output":null}],[11,"quote_with","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"push_parsed","","Parse `token` and append it to `self`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_node","","Respan token and append it to `self`.",0,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":null}],[11,"push_sym","","Respan symbol and append it to `self`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_group","","Respan and append `TokenStream::Group`",0,{"inputs":[{"name":"self"},{"name":"delimiter"},{"name":"f"}],"output":null}],[11,"push_tokens","","Appends node into `self` without respanning.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"into_iter","","",0,null],[11,"from","pmutil::prelude","",4,{"inputs":[{"name":"quote"}],"output":{"name":"self"}}],[11,"to_tokens","pmutil","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[0,"respan","","Span support for quasi-quotting.",null,null],[3,"FirstLast","pmutil::respan","",null,null],[12,"first","","",9,null],[12,"last","","",9,null],[8,"Respan","","",null,null],[10,"span_for","","Used while quasi quotting.",10,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"respan","","",10,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"span_for","pmutil::prelude","",2,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"fmt","pmutil::respan","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"firstlast"}}],[11,"span_for","","",9,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"from_tokens","","",9,{"inputs":[{"name":"totokens"}],"output":{"name":"self"}}],[0,"span_ext","pmutil","",null,null],[8,"SpanExt","pmutil::span_ext","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","pmutil::prelude","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[10,"into_pm2_span","pmutil::span_ext","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"into_pm2_span","pmutil::prelude","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"synom_ext","pmutil","Utils for tokens from synom::tokens.",null,null],[8,"FromSpan","pmutil::synom_ext","See [SpanExt#as_token][] for usage. Create tokens from [Span][].",null,null],[10,"from_span","","",11,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"from_span","pmutil::prelude","",2,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[8,"SpanExt","pmutil","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","pmutil::prelude","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[10,"into_pm2_span","pmutil","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[8,"IdentExt","","Extension trait for [syn::Ident][].",null,null],[10,"new_ident_with","","Creates a new ident with same span by applying `map` to `self`.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ident"}}],[8,"ToTokensExt","","",null,null],[11,"dump","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"first_last","","Usage: `Quote::new(body.first_last())`",13,{"inputs":[{"name":"self"}],"output":{"name":"firstlast"}}],[11,"new_ident_with","pmutil::prelude","Creates a new ident with same span by applying `map` to `self`.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ident"}}],[14,"quoter_location","pmutil","",null,null],[14,"handle_vars_for_quote","","Usage: __sq_handle_vars! { a, b: expression(), c, };",null,null],[14,"declare_vars_for_quote","","This macro handles `Vars`, and creates a new hidden macro used inside quasi-quotting.",null,null],[14,"__sq_quote_tokens_to","","This macro assumes that `Vars` is already handled.",null,null],[14,"__sq_quote_closure","","",null,null],[14,"smart_quote","","ide-friendly quasi quotting.",null,null],[11,"integer","pmutil::prelude","",1,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",1,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",1,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",1,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",1,null],[11,"byte_char","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",1,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",1,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",1,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"tokenstream"}}],[11,"from","","",4,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from","","",5,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",2,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"from","","",4,{"inputs":[{"name":"tokens"}],"output":{"name":"tokenstream"}}],[11,"to_tokens","","",3,null],[11,"to_tokens","","",4,null],[11,"to_tokens","","",1,null],[11,"to_tokens","","",5,null],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"self_"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"crate"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"capself"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"super"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"to_tokens","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"call_site","","",2,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",2,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",2,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",2,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",2,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"intern","","",3,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Ident` from the structured items. This is mainly used by the parser to create `Ident`s from existing Rust source code.",6,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}]],"paths":[[3,"Quote"],[3,"Literal"],[3,"Span"],[3,"Term"],[3,"TokenStream"],[3,"TokenTree"],[3,"Ident"],[8,"SpanExt"],[3,"Location"],[3,"FirstLast"],[8,"Respan"],[8,"FromSpan"],[8,"IdentExt"],[8,"ToTokensExt"]]};
searchIndex["precomputed_hash"] = {"doc":"A base trait to expose a precomputed hash for a type.","items":[[8,"PrecomputedHash","precomputed_hash","A trait to expose a precomputed hash for a type.",null,null],[10,"precomputed_hash","","Return the precomputed hash for this item.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[8,"PrecomputedHash"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the `proc_macro` API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[12,"0","","",0,null],[3,"LexError","","",null,null],[12,"0","","",1,null],[3,"FileName","","",null,null],[12,"0","","",2,null],[3,"SourceFile","","",null,null],[12,"0","","",3,null],[3,"LineColumn","","",null,null],[12,"line","","",4,null],[12,"column","","",4,null],[3,"Span","","",null,null],[12,"0","","",5,null],[3,"TokenTree","","",null,null],[12,"span","","",6,null],[12,"kind","","",6,null],[3,"Term","","",null,null],[12,"0","","",7,null],[3,"Literal","","",null,null],[12,"0","","",8,null],[3,"TokenTreeIter","","",null,null],[12,"0","","",9,null],[4,"TokenNode","","",null,null],[13,"Group","","",10,null],[13,"Term","","",10,null],[13,"Op","","",10,null],[13,"Literal","","",10,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",11,null],[13,"Brace","","",11,null],[13,"Bracket","","",11,null],[13,"None","","",11,null],[4,"Spacing","","",null,null],[13,"Alone","","",12,null],[13,"Joint","","",12,null],[0,"imp","","",null,null],[3,"TokenStream","proc_macro2::imp","",null,null],[12,"0","","",13,null],[3,"LexError","","",null,null],[12,"0","","",14,null],[3,"TokenTreeIter","","",null,null],[12,"0","","",15,null],[3,"FileName","","",null,null],[12,"0","","",2,null],[3,"SourceFile","","",null,null],[12,"0","","",16,null],[12,"1","","",16,null],[3,"LineColumn","","",null,null],[12,"line","","",17,null],[12,"column","","",17,null],[3,"Span","","",null,null],[12,"0","","",18,null],[3,"Term","","",null,null],[12,"0","","",19,null],[3,"Literal","","",null,null],[12,"0","","",20,null],[5,"to_literal","","",null,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"empty","","",13,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",13,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"size_hint","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","proc_macro2","",2,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","proc_macro2::imp","",16,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"new","","",16,{"inputs":[{"name":"sourcefile"}],"output":{"name":"self"}}],[11,"path","","Get the path to this source file as a string.",16,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"is_real","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"from","proc_macro2","",5,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"call_site","proc_macro2::imp","",18,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",18,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","",18,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",18,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",18,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"intern","","",19,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"byte_char","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"byte_string","","",20,null],[11,"doccomment","","",20,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"float","","",20,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"integer","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"raw_string","","",20,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",20,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[0,"macros","proc_macro2","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",0,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"empty","","",0,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"path","","Get the path to this source file as a string.",3,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"is_real","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","",5,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",5,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",5,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"intern","","",7,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"integer","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",8,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",8,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",8,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",8,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",8,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",8,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",8,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",8,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",8,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",8,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",8,null],[11,"byte_char","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",8,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",8,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",8,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TokenStream"],[3,"LexError"],[3,"FileName"],[3,"SourceFile"],[3,"LineColumn"],[3,"Span"],[3,"TokenTree"],[3,"Term"],[3,"Literal"],[3,"TokenTreeIter"],[4,"TokenNode"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"LexError"],[3,"TokenTreeIter"],[3,"SourceFile"],[3,"LineColumn"],[3,"Span"],[3,"Term"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",null,null],[12,"tts","","",0,null],[0,"tokens","","",null,null],[3,"Tokens","quote::tokens","Tokens produced by a [`quote!`] invocation.",null,null],[12,"tts","","",0,null],[5,"tt_eq","","",null,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[5,"tt_hash","","",null,{"inputs":[{"name":"tokentree"},{"name":"h"}],"output":null}],[0,"private","","",null,null],[3,"IntoIter","quote::tokens::private","",null,null],[12,"0","","",1,null],[5,"into_iter","","",null,{"inputs":[{"generics":["tokentree"],"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","quote","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"tokens"}}],[11,"new","","Empty tokens.",0,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"into_iter","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"to_tokens","","",null,null],[5,"tt","quote::to_tokens","",null,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[0,"__rt","quote","",null,null],[5,"parse","quote::__rt","",null,{"inputs":[{"name":"tokens"},{"name":"span"},{"name":"str"}],"output":null}],[5,"append_kind","","",null,{"inputs":[{"name":"tokens"},{"name":"span"},{"name":"tokennode"}],"output":null}],[8,"ToTokens","quote","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","quote::to_tokens","Convert `self` directly into a `Tokens` object.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[14,"quote","quote","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[14,"pounded_var_names","","",null,null],[14,"nested_tuples_pat","","",null,null],[14,"multi_zip_expr","","",null,null],[14,"quote_each_token","","",null,null]],"paths":[[3,"Tokens"],[3,"IntoIter"],[8,"ToTokens"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[12,"original","","",0,null],[12,"inner","","",0,null],[12,"valid","","",0,null],[12,"elements","","The number of ::-separated elements in the original name.",0,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[12,"_priv","","",1,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[5,"is_rust_hash","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Demangle"],[3,"TryDemangleError"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"lib","serde","A facade around all the types we need from the `std`, `core`, and `alloc` crates. This avoids elaborate import wrangling having to happen in every module.",null,null],[0,"cmp","serde::lib","Functionality for ordering and comparison.",null,null],[8,"PartialEq","serde::lib::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",0,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",0,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[11,"assert_receiver_is_total_eq","","",1,null],[3,"AssertParamIsEq","","",null,null],[12,"_field","","",2,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",3,null],[13,"Equal","","An ordering where a compared value is equal [to another].",3,null],[13,"Greater","","An ordering where a compared value is greater [than another].",3,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"iter","serde::lib","Composable external iteration.",null,null],[3,"Rev","serde::lib::iter","A double-ended iterator with the direction inverted.",null,null],[12,"iter","","",7,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[12,"it","","",8,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[12,"orig","","",9,null],[12,"iter","","",9,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[12,"iter","","",10,null],[12,"step","","",10,null],[12,"first_take","","",10,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[12,"a","","",11,null],[12,"b","","",11,null],[12,"state","","",11,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[12,"a","","",12,null],[12,"b","","",12,null],[12,"index","","",12,null],[12,"len","","",12,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[12,"iter","","",13,null],[12,"f","","",13,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[12,"iter","","",14,null],[12,"predicate","","",14,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[12,"iter","","",15,null],[12,"f","","",15,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[12,"iter","","",16,null],[12,"count","","",16,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[12,"iter","","",17,null],[12,"peeked","","Remember a peeked value, even if it was None.",17,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[12,"iter","","",18,null],[12,"flag","","",18,null],[12,"predicate","","",18,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[12,"iter","","",19,null],[12,"flag","","",19,null],[12,"predicate","","",19,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[12,"iter","","",20,null],[12,"n","","",20,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[12,"iter","","",21,null],[12,"n","","",21,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[12,"iter","","",22,null],[12,"f","","",22,null],[12,"state","","",22,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[12,"iter","","",23,null],[12,"f","","",23,null],[12,"frontiter","","",23,null],[12,"backiter","","",23,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[12,"iter","","",24,null],[12,"done","","",24,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[12,"iter","","",25,null],[12,"f","","",25,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",27,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",28,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",29,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[12,"inner","","",30,null],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",31,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[12,"0","","",32,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[12,"element","","",33,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",34,null],[10,"next","","Advances the iterator and returns the next value.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",34,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",34,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",34,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",34,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",34,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",34,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",34,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",34,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",34,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",34,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",34,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",34,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",34,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",34,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",34,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",34,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",34,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",34,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",34,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",35,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",36,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",36,null],[10,"into_iter","","Creates an iterator from a value.",36,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",37,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",37,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",37,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[0,"mem","serde::lib","Basic functions for dealing with memory.",null,null],[5,"forget","serde::lib::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[12,"0","","",38,null],[12,"1","","",38,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[12,"value","","",39,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","serde::lib","Overloadable operators.",null,null],[8,"Generator","serde::lib::ops","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",40,null],[16,"Return","","The type of value this generator returns.",40,null],[10,"resume","","Resumes the execution of this generator.",40,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",41,null],[16,"Error","","The type of this value when viewed as failed.",41,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",41,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",41,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",42,null],[10,"bitor","","Performs the `|` operation.",42,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",43,null],[10,"index","","Performs the indexing (`container[index]`) operation.",43,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",44,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",45,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",46,null],[13,"Complete","","The generator completed with a return value.",46,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",47,null],[10,"add","","Performs the `+` operation.",47,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",48,null],[10,"bitand","","Performs the `&` operation.",48,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",49,{"inputs":[],"output":{"name":"self"}}],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",50,null],[10,"neg","","Performs the unary `-` operation.",50,null],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",51,null],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",52,null],[10,"deref","","Dereferences the value.",52,null],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",53,null],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",54,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",55,null],[10,"bitxor","","Performs the `^` operation.",55,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",56,null],[10,"sub","","Performs the `-` operation.",56,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",57,null],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",58,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",59,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",60,null],[16,"Place","","The place that will negotiate the storage of the data.",60,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",60,null],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",61,null],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",62,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",63,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",63,null],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",64,null],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",65,null],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",66,null],[12,"end","","The upper bound of the range (exclusive).",66,null],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",67,null],[10,"not","","Performs the unary `!` operation.",67,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",68,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",69,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",70,null],[10,"shl","","Performs the `<<` operation.",70,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",71,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",72,null],[10,"rem","","Performs the `%` operation.",72,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",73,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",74,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",75,null],[10,"make_place","","Creates a fresh place from `self`.",75,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",76,null],[10,"call_once","","Performs the call operation.",76,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",77,null],[10,"div","","Performs the `/` operation.",77,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",78,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",79,null],[10,"shr","","Performs the `>>` operation.",79,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",80,null],[12,"end","","The upper bound of the range (inclusive).",80,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",81,null],[10,"mul","","Performs the `*` operation.",81,null],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",82,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[0,"slice","serde::lib","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","serde::lib::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",83,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",83,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",83,null],[10,"connect","","",83,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[12,"v","","",84,null],[12,"chunk_size","","",84,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[12,"inner","","",85,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[12,"inner","","",86,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",87,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",87,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",87,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",87,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",87,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[12,"v","","",88,null],[12,"pred","","",88,null],[12,"finished","","",88,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[12,"v","","",89,null],[12,"pred","","",89,null],[12,"finished","","",89,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[12,"inner","","",90,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[12,"inner","","",91,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[12,"ptr","","",92,null],[12,"end","","",92,null],[12,"_marker","","",92,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[12,"v","","",93,null],[12,"size","","",93,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[12,"inner","","",94,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[12,"v","","",95,null],[12,"chunk_size","","",95,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[12,"inner","","",96,null],[3,"Iter","","Immutable slice iterator",null,null],[12,"ptr","","",97,null],[12,"end","","",97,null],[12,"_marker","","",97,null],[0,"str","serde::lib","Unicode string slices.",null,null],[3,"EncodeUtf16","serde::lib::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[12,"encoder","","",98,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[12,"0","","",99,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[12,"0","","",100,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","serde::lib::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",101,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",101,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",101,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",102,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",102,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",102,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",103,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",104,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",105,null],[12,"finger","","`finger` is the current byte index of the forward search. Imagine that it exists before the byte at its index, i.e. haystack[finger] is the first byte of the slice we must inspect during forward searching",105,null],[12,"finger_back","","`finger_back` is the current byte index of the reverse search. Imagine that it exists after the byte at its index, i.e. haystack[finger_back - 1] is the last byte of the slice we must inspect during forward searching (and thus the first byte to be inspected when calling next_back())",105,null],[12,"needle","","The character being searched for",105,null],[12,"utf8_size","","The number of bytes `needle` takes up when encoded in utf8",105,null],[12,"utf8_encoded","","A utf8 encoded copy of the `needle`",105,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[12,"0","","",106,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[12,"0","","",107,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",108,null],[12,"needle","","",108,null],[12,"searcher","","",108,null],[3,"SplitWhitespace","serde::lib::str","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[12,"inner","","",109,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[12,"0","","",110,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[12,"0","","",111,null],[3,"Matches","","Created with the method [`matches`].",null,null],[12,"0","","",112,null],[3,"Split","","Created with the method [`split`].",null,null],[12,"0","","",113,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[12,"0","","",114,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[12,"valid_up_to","","",115,null],[12,"error_len","","",115,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[12,"front_offset","","",116,null],[12,"iter","","",116,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[12,"0","","",117,null],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[12,"_priv","","",118,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[12,"0","","",119,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[12,"0","","",120,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",121,null],[10,"from_str","","Parses a string `s` to return a value of this type.",121,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[12,"0","","",122,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[12,"0","","",123,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[12,"iter","","",124,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[12,"0","","",125,null],[0,"isize","serde::lib","The pointer-sized signed integer type.",null,null],[17,"MIN","serde::lib::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","serde::lib","The 16-bit signed integer type.",null,null],[17,"MIN","serde::lib::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","serde::lib","The 32-bit signed integer type.",null,null],[17,"MIN","serde::lib::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","serde::lib","The 64-bit signed integer type.",null,null],[17,"MIN","serde::lib::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","serde::lib","The 8-bit signed integer type.",null,null],[17,"MIN","serde::lib::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","serde::lib","The pointer-sized unsigned integer type.",null,null],[17,"MIN","serde::lib::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","serde::lib","The 16-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","serde::lib","The 32-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","serde::lib","The 64-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","serde::lib","The 8-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"f32","serde::lib","This module provides constants which are specific to the implementation of the `f32` floating point data type.",null,null],[17,"MAX_EXP","serde::lib::f32","Maximum possible power of 2 exponent.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","serde::lib::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"MANTISSA_DIGITS","serde::lib::f32","Number of significant digits in base 2.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"RADIX","","The radix or base of the internal representation of `f32`.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[0,"f64","serde::lib","This module provides constants which are specific to the implementation of the `f64` floating point data type.",null,null],[17,"MAX_EXP","serde::lib::f64","Maximum possible power of 2 exponent.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","serde::lib::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"MANTISSA_DIGITS","serde::lib::f64","Number of significant digits in base 2.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"RADIX","","The radix or base of the internal representation of `f64`.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[3,"Cell","serde::lib","A mutable memory location.",null,null],[12,"value","","",126,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[12,"borrow","","",127,null],[12,"value","","",127,null],[0,"clone","","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","serde::lib::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",128,null],[3,"AssertParamIsClone","","",null,null],[12,"_field","","",129,null],[3,"AssertParamIsCopy","","",null,null],[12,"_field","","",130,null],[8,"Clone","serde::lib","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",128,null],[0,"convert","","Traits for conversions between types.",null,null],[4,"Infallible","serde::lib::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",131,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",134,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",135,null],[10,"try_into","","Performs the conversion.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",136,null],[10,"try_from","","Performs the conversion.",136,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"From","serde::lib","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",134,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"default","","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","serde::lib::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",137,{"inputs":[],"output":{"name":"self"}}],[8,"Default","serde::lib","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",137,{"inputs":[],"output":{"name":"self"}}],[0,"fmt","","Utilities for formatting and printing `String`s.",null,null],[5,"format","serde::lib::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",139,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",139,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",143,null],[12,"formatter","","",143,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",144,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",145,null],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",146,null],[12,"result","","",146,null],[12,"fields","","",146,null],[12,"empty_name","","",146,null],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[12,"pieces","","",151,null],[12,"fmt","","",151,null],[12,"args","","",151,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",152,null],[12,"fill","","",152,null],[12,"align","","",152,null],[12,"width","","",152,null],[12,"precision","","",152,null],[12,"buf","","",152,null],[12,"curarg","","",152,null],[12,"args","","",152,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[0,"rt","","",null,null],[0,"v1","serde::lib::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are emitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","serde::lib::fmt::rt::v1","",null,null],[12,"position","","",153,null],[12,"format","","",153,null],[3,"FormatSpec","","",null,null],[12,"fill","","",154,null],[12,"align","","",154,null],[12,"flags","","",154,null],[12,"precision","","",154,null],[12,"width","","",154,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",155,null],[13,"Right","","Indication that contents should be right-aligned.",155,null],[13,"Center","","Indication that contents should be center-aligned.",155,null],[13,"Unknown","","No alignment was requested.",155,null],[4,"Count","","",null,null],[13,"Is","","",156,null],[13,"Param","","",156,null],[13,"NextParam","","",156,null],[13,"Implied","","",156,null],[4,"Position","","",null,null],[13,"Next","","",157,null],[13,"At","","",157,null],[3,"DebugMap","serde::lib::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",158,null],[12,"result","","",158,null],[12,"has_fields","","",158,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",159,null],[12,"result","","",159,null],[12,"has_fields","","",159,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","serde::lib","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"marker","","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","serde::lib::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[3,"PhantomData","serde::lib","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[0,"option","","Optional values.",null,null],[4,"Option","serde::lib::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",161,null],[13,"Some","","Some value `T`",161,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[12,"inner","","",162,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[12,"inner","","",163,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[12,"inner","","",164,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[4,"Option","serde::lib","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",161,null],[13,"Some","","Some value `T`",161,null],[0,"result","","Error handling with the `Result` type.",null,null],[4,"Result","serde::lib::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",165,null],[13,"Err","","Contains the error value",165,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[12,"inner","","",166,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[12,"inner","","",167,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[12,"inner","","",168,null],[4,"Result","serde::lib","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",165,null],[13,"Err","","Contains the error value",165,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",169,null],[13,"Owned","","Owned data.",169,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",170,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",170,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",170,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[12,"vec","","",171,null],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[12,"buf","","",172,null],[12,"len","","",172,null],[3,"Box","","A pointer type for heap allocation.",null,null],[12,"0","","",173,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[12,"root","","",174,null],[12,"length","","",174,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[12,"map","","",175,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[12,"data","","",176,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[12,"head","","",177,null],[12,"tail","","",177,null],[12,"len","","",177,null],[12,"marker","","",177,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring buffer.",null,null],[12,"tail","","",178,null],[12,"head","","",178,null],[12,"buf","","",178,null],[0,"error","","Traits for working with Errors.",null,null],[8,"Error","serde::lib::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",179,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",179,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"type_id","","Get the `TypeId` of `self`",179,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[0,"net","serde::lib","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","serde::lib::net","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",180,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",180,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",180,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[12,"0","","",181,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"generics":["lookuphost","error"],"name":"result"}}],[3,"Ipv6Addr","","An IPv6 address.",null,null],[12,"inner","","",182,null],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",183,null],[13,"V6","","An IPv6 address.",183,null],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[12,"0","","",184,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[12,"inner","","",185,null],[3,"Ipv4Addr","","An IPv4 address.",null,null],[12,"inner","","",186,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more [`SocketAddr`] values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond to.",187,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",187,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[12,"inner","","",188,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",189,null],[13,"LinkLocal","","",189,null],[13,"RealmLocal","","",189,null],[13,"AdminLocal","","",189,null],[13,"SiteLocal","","",189,null],[13,"OrganizationLocal","","",189,null],[13,"Global","","",189,null],[3,"Incoming","","An iterator that infinitely [`accept`]s connections on a [`TcpListener`].",null,null],[12,"listener","","",190,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[12,"0","","",191,null],[3,"UdpSocket","","A UDP socket.",null,null],[12,"0","","",192,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address or a socket address.",null,null],[12,"0","","",193,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",194,null],[13,"V6","","An IPv6 socket address.",194,null],[3,"HashMap","serde::lib","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[12,"hash_builder","","",195,null],[12,"table","","",195,null],[12,"resize_policy","","",195,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[12,"map","","",196,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[12,"inner","","",197,null],[3,"CString","","A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle.",null,null],[12,"inner","","",198,null],[3,"OsStr","","Borrowed reference to an OS string (see [`OsString`]).",null,null],[12,"inner","","",199,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[12,"inner","","",200,null],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",201,null],[10,"build_hasher","","Creates a new hasher.",201,null],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",202,null],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",202,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",203,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",203,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",203,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",203,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",203,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",204,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[12,"inner","","",205,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[12,"inner","","",206,null],[3,"Duration","","A `Duration` type to represent a span of time, typically used for system timeouts.",null,null],[12,"secs","","",207,null],[12,"nanos","","",207,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[12,"0","","",208,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[12,"inner","","",209,null],[12,"poison","","",209,null],[12,"data","","",209,null],[3,"RwLock","","A reader-writer lock",null,null],[12,"inner","","",210,null],[12,"poison","","",210,null],[12,"data","","",210,null],[0,"core","","",null,null],[14,"eprintln","serde::lib::core","Macro for printing to the standard error, with a newline.",null,null],[14,"__thread_local_inner","","",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"select","","A macro to select an event from a number of receivers.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"println","","Macro for printing to the standard output, with a newline.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"eprint","","Macro for printing to the standard error.",null,null],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"write","","Write formatted data into a buffer.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"thread_local","","Declare a new thread local storage key of type [`std::thread::LocalKey`].",null,null],[14,"panic","","The entry point for panic of Rust threads.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[0,"macros","serde","",null,null],[0,"ser","","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[12,"void","","",211,null],[12,"ok","","",211,null],[12,"error","","",211,null],[5,"iterator_len_hint","","",null,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"option"}}],[0,"impls","","",null,null],[11,"serialize","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",197,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",198,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",161,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",212,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",176,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",175,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",196,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",177,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",172,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",178,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib::ops","",66,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib","",174,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",195,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",173,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",169,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",126,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",127,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",209,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",210,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",165,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",207,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",208,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",186,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",182,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",194,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",188,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",185,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib","",205,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",206,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",199,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",200,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",204,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"impossible","serde::ser","This module contains `Impossible` serializer and its implementations.",null,null],[3,"Impossible","serde::ser::impossible","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[12,"void","","",211,null],[12,"ok","","",211,null],[12,"error","","",211,null],[4,"Void","","",null,null],[11,"serialize_element","serde::ser","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",211,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",211,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",211,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",213,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",215,null],[16,"Error","","The error type when some error occurs during serialization.",215,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",215,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",215,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",215,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",215,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",215,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",215,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",215,null],[10,"serialize_bool","","Serialize a `bool` value.",215,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",215,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",215,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",215,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",215,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",215,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",215,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",215,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",215,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",215,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",215,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",215,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",215,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",215,null],[10,"serialize_none","","Serialize a [`None`] value.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",215,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",215,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",215,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",216,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",216,null],[10,"serialize_element","","Serialize a sequence element.",216,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",216,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",217,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",217,null],[10,"serialize_element","","Serialize a tuple element.",217,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",217,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",218,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",218,null],[10,"serialize_field","","Serialize a tuple struct field.",218,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",218,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",219,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",219,null],[10,"serialize_field","","Serialize a tuple variant field.",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",220,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",220,null],[10,"serialize_key","","Serialize a map key.",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",220,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",220,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",221,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",221,null],[10,"serialize_field","","Serialize a struct field.",221,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",221,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",221,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",222,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",222,null],[10,"serialize_field","","Serialize a struct variant field.",222,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",222,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",222,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"LenHint","","",null,null],[10,"len_hint","","",223,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[3,"OneOf","","Used in error messages.",null,null],[12,"names","","",224,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",225,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",225,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",225,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",225,null],[13,"Char","","The input contained a `char` that was not expected.",225,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",225,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",225,null],[13,"Unit","","The input contained a unit `()` that was not expected.",225,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",225,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",225,null],[13,"Seq","","The input contained a sequence that was not expected.",225,null],[13,"Map","","The input contained a map that was not expected.",225,null],[13,"Enum","","The input contained an enum that was not expected.",225,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",225,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",225,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",225,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",225,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",225,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[12,"err","","",226,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[12,"marker","","",227,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[12,"value","","",228,null],[12,"marker","","",228,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[12,"value","","",229,null],[12,"marker","","",229,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[12,"value","","",230,null],[12,"marker","","",230,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[12,"value","","",231,null],[12,"marker","","",231,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[12,"value","","",232,null],[12,"marker","","",232,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[12,"value","","",233,null],[12,"marker","","",233,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[12,"value","","",234,null],[12,"marker","","",234,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[12,"value","","",235,null],[12,"marker","","",235,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[12,"value","","",236,null],[12,"marker","","",236,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[12,"value","","",237,null],[12,"marker","","",237,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[12,"value","","",238,null],[12,"marker","","",238,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[12,"value","","",239,null],[12,"marker","","",239,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[12,"value","","",240,null],[12,"marker","","",240,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[12,"value","","",241,null],[12,"marker","","",241,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[12,"value","","",242,null],[12,"marker","","",242,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[12,"value","","",243,null],[12,"marker","","",243,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[12,"value","","",244,null],[12,"marker","","",244,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[12,"value","","",245,null],[12,"marker","","",245,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[12,"value","","",246,null],[12,"marker","","",246,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[12,"iter","","",247,null],[12,"count","","",247,null],[12,"marker","","",247,null],[3,"ExpectedInSeq","","",null,null],[12,"0","","",248,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[12,"seq","","",249,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[12,"iter","","",250,null],[12,"value","","",250,null],[12,"count","","",250,null],[12,"lifetime","","",250,null],[12,"error","","",250,null],[3,"PairDeserializer","","",null,null],[12,"0","","",251,null],[12,"1","","",251,null],[12,"2","","",251,null],[3,"PairVisitor","","",null,null],[12,"0","","",252,null],[12,"1","","",252,null],[12,"2","","",252,null],[3,"ExpectedInMap","","",null,null],[12,"0","","",253,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[12,"map","","",254,null],[0,"private","","",null,null],[3,"UnitOnly","serde::de::value::private","",null,null],[12,"marker","","",255,null],[5,"unit_only","","",null,null],[6,"First","","",null,null],[6,"Second","","",null,null],[8,"Pair","","Avoid having to restate the generic types on `MapDeserializer`. The `Iterator::Item` contains enough information to figure out K and V.",null,null],[16,"First","","",256,null],[16,"Second","","",256,null],[10,"split","","",256,null],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"unitonly"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unit_variant","","",255,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",255,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",255,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",255,null],[6,"ErrorImpl","serde::de::value","",null,null],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",226,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",226,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",226,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",227,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",227,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",227,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",227,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",227,null],[11,"deserialize_enum","","",227,null],[11,"deserialize_identifier","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",227,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",228,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",228,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",228,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",228,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",228,null],[11,"deserialize_enum","","",228,null],[11,"deserialize_identifier","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",228,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",229,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",229,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",229,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",229,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",229,null],[11,"deserialize_enum","","",229,null],[11,"deserialize_identifier","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",229,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",230,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",230,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",230,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",230,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",230,null],[11,"deserialize_enum","","",230,null],[11,"deserialize_identifier","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",230,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",231,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",231,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",231,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",231,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",231,null],[11,"deserialize_enum","","",231,null],[11,"deserialize_identifier","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",232,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",232,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",232,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",232,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",232,null],[11,"deserialize_enum","","",232,null],[11,"deserialize_identifier","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",233,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",233,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",233,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",233,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",233,null],[11,"deserialize_enum","","",233,null],[11,"deserialize_identifier","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",234,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",234,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",234,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",234,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",234,null],[11,"deserialize_enum","","",234,null],[11,"deserialize_identifier","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",235,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",235,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",235,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",235,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",235,null],[11,"deserialize_enum","","",235,null],[11,"deserialize_identifier","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",236,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",236,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",236,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",236,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",236,null],[11,"deserialize_enum","","",236,null],[11,"deserialize_identifier","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",237,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",237,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",237,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",237,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",237,null],[11,"deserialize_enum","","",237,null],[11,"deserialize_identifier","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",238,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",238,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",238,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",238,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",238,null],[11,"deserialize_enum","","",238,null],[11,"deserialize_identifier","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",239,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",239,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",239,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",239,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",239,null],[11,"deserialize_enum","","",239,null],[11,"deserialize_identifier","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",240,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",240,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",240,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",240,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",240,null],[11,"deserialize_enum","","",240,null],[11,"deserialize_identifier","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",241,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",241,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",241,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",241,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",241,null],[11,"deserialize_identifier","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",241,null],[11,"variant_seed","","",241,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",242,null],[11,"deserialize_bool","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",242,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",242,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",242,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",242,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",242,null],[11,"deserialize_identifier","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",242,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",243,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",243,null],[11,"deserialize_bool","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",243,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",243,null],[11,"deserialize_identifier","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",243,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",171,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"deserialize_any","serde::de::value","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",244,null],[11,"deserialize_bool","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",244,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",244,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",244,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",244,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",244,null],[11,"deserialize_identifier","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",244,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",169,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"deserialize_any","serde::de::value","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",245,null],[11,"deserialize_bool","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",245,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",245,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",245,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",245,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",245,null],[11,"deserialize_identifier","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",245,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",246,null],[11,"deserialize_any","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",246,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",246,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",246,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",246,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",246,null],[11,"deserialize_identifier","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",246,null],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",247,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",247,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",247,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",247,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",247,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",247,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",247,null],[11,"deserialize_enum","","",247,null],[11,"deserialize_identifier","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",247,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",172,null],[11,"into_deserializer","","",175,null],[11,"into_deserializer","","",196,null],[11,"clone","serde::de::value","",249,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",249,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",249,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",249,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",249,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",249,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",249,null],[11,"deserialize_enum","","",249,null],[11,"deserialize_identifier","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",250,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",250,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_pair","","",250,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_any","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",250,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",250,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",250,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",250,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",250,null],[11,"deserialize_enum","","",250,null],[11,"deserialize_identifier","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",250,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",250,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",250,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",250,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",250,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",250,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",251,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",251,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",251,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",251,null],[11,"deserialize_enum","","",251,null],[11,"deserialize_identifier","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",251,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",252,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",252,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",174,null],[11,"into_deserializer","","",195,null],[11,"clone","serde::de::value","",254,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",254,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",254,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",254,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",254,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",254,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",254,null],[11,"deserialize_enum","","",254,null],[11,"deserialize_identifier","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[0,"from_primitive","serde::de","",null,null],[8,"FromPrimitive","serde::de::from_primitive","",null,null],[10,"from_isize","","",257,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[10,"from_i8","","",257,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[10,"from_i16","","",257,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[10,"from_i32","","",257,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","",257,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[10,"from_usize","","",257,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[10,"from_u8","","",257,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[10,"from_u16","","",257,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[10,"from_u32","","",257,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","",257,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[0,"ignored_any","serde::de","",null,null],[3,"IgnoredAny","serde::de::ignored_any","An efficient way of discarding data from a deserializer.",null,null],[11,"clone","serde::de","",258,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",258,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",258,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",258,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",258,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",258,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",258,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",258,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",258,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",258,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",258,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",258,null],[11,"deserialize","","",258,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[0,"impls","","",null,null],[3,"UnitVisitor","serde::de::impls","",null,null],[3,"BoolVisitor","","",null,null],[3,"CharVisitor","","",null,null],[3,"StringVisitor","","",null,null],[3,"StringInPlaceVisitor","","",null,null],[12,"0","","",259,null],[3,"StrVisitor","","",null,null],[3,"BytesVisitor","","",null,null],[3,"CStringVisitor","","",null,null],[3,"OptionVisitor","","",null,null],[12,"marker","","",260,null],[3,"PhantomDataVisitor","","",null,null],[12,"marker","","",261,null],[3,"ArrayVisitor","","",null,null],[12,"marker","","",262,null],[3,"ArrayInPlaceVisitor","","",null,null],[12,"0","","",263,null],[3,"PathVisitor","","",null,null],[3,"PathBufVisitor","","",null,null],[3,"OsStringVisitor","","",null,null],[4,"OsStringKind","","",null,null],[13,"Unix","","",264,null],[13,"Windows","","",264,null],[5,"nop_reserve","","",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":null}],[7,"OSSTR_VARIANTS","","",null,null],[11,"expecting","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",265,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",266,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["bool"],"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_char","","",267,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["char"],"name":"result"}}],[11,"visit_str","","",267,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["char"],"name":"result"}}],[11,"expecting","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",268,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"visit_string","","",268,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["string"],"name":"result"}}],[11,"visit_bytes","","",268,null],[11,"visit_byte_buf","","",268,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["string"],"name":"result"}}],[11,"expecting","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",259,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",259,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",259,null],[11,"visit_byte_buf","","",259,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",171,{"inputs":[{"name":"d"}],"output":{"generics":["string"],"name":"result"}}],[11,"deserialize_in_place","","",171,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"expecting","serde::de::impls","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",269,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_bytes","","",269,null],[11,"expecting","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_borrowed_bytes","","",270,null],[11,"visit_borrowed_str","","",270,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"expecting","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",271,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"visit_bytes","","",271,null],[11,"visit_byte_buf","","",271,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"visit_str","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"visit_string","","",271,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"deserialize","serde::lib","",198,{"inputs":[{"name":"d"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"expecting","serde::de::impls","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",260,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"visit_none","","",260,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"visit_some","","",260,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["option"],"name":"result"}}],[11,"deserialize","serde::lib","",161,{"inputs":[{"name":"d"}],"output":{"generics":["option"],"name":"result"}}],[11,"expecting","serde::de::impls","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",261,{"inputs":[{"name":"self"}],"output":{"generics":["phantomdata"],"name":"result"}}],[11,"deserialize","serde::lib","",212,{"inputs":[{"name":"d"}],"output":{"generics":["phantomdata"],"name":"result"}}],[11,"deserialize","","",176,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",176,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",175,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",175,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",177,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",177,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",196,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",196,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",172,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",172,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",178,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",178,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","",262,{"inputs":[],"output":{"name":"self"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",263,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",174,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",195,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib::net","",183,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",186,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",182,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",194,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",188,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",185,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","serde::de::impls","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_bytes","","",272,null],[11,"expecting","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",273,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"visit_string","","",273,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"deserialize","serde::lib","",206,{"inputs":[{"name":"d"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"deserialize","serde::de::impls","",264,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_enum","","",274,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["osstring"],"name":"result"}}],[11,"deserialize","serde::lib","",200,{"inputs":[{"name":"d"}],"output":{"generics":["osstring"],"name":"result"}}],[11,"deserialize","","",173,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",173,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",173,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",169,{"inputs":[{"name":"d"}],"output":{"generics":["cow"],"name":"result"}}],[11,"deserialize","","",126,{"inputs":[{"name":"d"}],"output":{"generics":["cell"],"name":"result"}}],[11,"deserialize","","",127,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",209,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",210,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",207,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",208,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib::ops","",66,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",165,{"inputs":[{"name":"d"}],"output":{"generics":["result"],"name":"result"}}],[11,"deserialize","","",204,{"inputs":[{"name":"d"}],"output":{"generics":["wrapping"],"name":"result"}}],[0,"utf8","serde::de","",null,null],[3,"Encode","serde::de::utf8","",null,null],[12,"buf","","",275,null],[12,"pos","","",275,null],[5,"encode","","",null,{"inputs":[{"name":"char"}],"output":{"name":"encode"}}],[17,"TAG_CONT","","",null,null],[17,"TAG_TWO_B","","",null,null],[17,"TAG_THREE_B","","",null,null],[17,"TAG_FOUR_B","","",null,null],[17,"MAX_ONE_B","","",null,null],[17,"MAX_TWO_B","","",null,null],[17,"MAX_THREE_B","","",null,null],[11,"as_str","","",275,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",276,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",276,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",276,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",276,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",276,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",276,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",276,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",276,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",278,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","Deserializes a value into `self` from the given Deserializer.",278,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",279,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",279,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",280,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",280,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",280,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",280,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",280,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",280,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",280,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",280,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",281,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",281,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",281,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",281,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",281,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",281,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",281,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",281,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",281,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",281,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",281,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",281,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",281,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",281,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",281,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",281,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",281,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",281,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",281,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",281,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",281,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",281,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",281,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",281,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",282,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",282,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",282,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",282,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",283,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",283,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",283,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",283,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",283,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",283,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",283,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",283,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",284,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",284,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",284,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",285,null],[10,"unit_variant","","Called when deserializing a variant with no values.",285,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",285,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",285,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",285,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",285,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",286,null],[10,"into_deserializer","","Convert this value into a deserializer.",286,null],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",212,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","serde::de","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"export","serde","",null,null],[8,"Clone","serde::export","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",128,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",128,null],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",134,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",137,{"inputs":[],"output":{"name":"self"}}],[0,"fmt","","Utilities for formatting and printing `String`s.",null,null],[5,"format","serde::export::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",139,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",139,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",139,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",143,null],[12,"formatter","","",143,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",144,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",145,null],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[6,"Result","","The type returned by formatter methods.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",146,null],[12,"result","","",146,null],[12,"fields","","",146,null],[12,"empty_name","","",146,null],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[12,"pieces","","",151,null],[12,"fmt","","",151,null],[12,"args","","",151,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",152,null],[12,"fill","","",152,null],[12,"align","","",152,null],[12,"width","","",152,null],[12,"precision","","",152,null],[12,"buf","","",152,null],[12,"curarg","","",152,null],[12,"args","","",152,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[0,"rt","","",null,null],[0,"v1","serde::export::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are emitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","serde::export::fmt::rt::v1","",null,null],[12,"position","","",153,null],[12,"format","","",153,null],[3,"FormatSpec","","",null,null],[12,"fill","","",154,null],[12,"align","","",154,null],[12,"flags","","",154,null],[12,"precision","","",154,null],[12,"width","","",154,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",155,null],[13,"Right","","Indication that contents should be right-aligned.",155,null],[13,"Center","","Indication that contents should be center-aligned.",155,null],[13,"Unknown","","No alignment was requested.",155,null],[4,"Count","","",null,null],[13,"Is","","",156,null],[13,"Param","","",156,null],[13,"NextParam","","",156,null],[13,"Implied","","",156,null],[4,"Position","","",null,null],[13,"Next","","",157,null],[13,"At","","",157,null],[3,"DebugMap","serde::export::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",158,null],[12,"result","","",158,null],[12,"has_fields","","",158,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",159,null],[12,"result","","",159,null],[12,"has_fields","","",159,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","serde::export","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",152,null],[12,"fill","","",152,null],[12,"align","","",152,null],[12,"width","","",152,null],[12,"precision","","",152,null],[12,"buf","","",152,null],[12,"curarg","","",152,null],[12,"args","","",152,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[4,"Option","","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",161,null],[13,"Some","","Some value `T`",161,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",165,null],[13,"Err","","Contains the error value",165,null],[5,"from_utf8_lossy","","",null,null],[0,"string","","",null,null],[5,"from_utf8_lossy","serde::export::string","",null,null],[0,"private","serde","",null,null],[0,"macros","serde::private","",null,null],[0,"ser","","",null,null],[3,"TaggedSerializer","serde::private::ser","",null,null],[12,"type_ident","","",287,null],[12,"variant_ident","","",287,null],[12,"tag","","",287,null],[12,"variant_name","","",287,null],[12,"delegate","","",287,null],[3,"Error","","Used only by Serde doc tests. Not public API.",null,null],[4,"Unsupported","","",null,null],[13,"Boolean","","",288,null],[13,"Integer","","",288,null],[13,"Float","","",288,null],[13,"Char","","",288,null],[13,"String","","",288,null],[13,"ByteArray","","",288,null],[13,"Optional","","",288,null],[13,"Unit","","",288,null],[13,"Sequence","","",288,null],[13,"Tuple","","",288,null],[13,"TupleStruct","","",288,null],[5,"constrain","","Used to check that serde(getter) attributes return the expected type. Not public API.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"serialize_tagged_newtype","","Not public API.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[0,"content","","",null,null],[3,"SerializeTupleVariantAsMapValue","serde::private::ser::content","",null,null],[12,"map","","",289,null],[12,"name","","",289,null],[12,"fields","","",289,null],[3,"SerializeStructVariantAsMapValue","","",null,null],[12,"map","","",290,null],[12,"name","","",290,null],[12,"fields","","",290,null],[3,"ContentSerializer","","",null,null],[12,"error","","",291,null],[3,"SerializeSeq","","",null,null],[12,"elements","","",292,null],[12,"error","","",292,null],[3,"SerializeTuple","","",null,null],[12,"elements","","",293,null],[12,"error","","",293,null],[3,"SerializeTupleStruct","","",null,null],[12,"name","","",294,null],[12,"fields","","",294,null],[12,"error","","",294,null],[3,"SerializeTupleVariant","","",null,null],[12,"name","","",295,null],[12,"variant_index","","",295,null],[12,"variant","","",295,null],[12,"fields","","",295,null],[12,"error","","",295,null],[3,"SerializeMap","","",null,null],[12,"entries","","",296,null],[12,"key","","",296,null],[12,"error","","",296,null],[3,"SerializeStruct","","",null,null],[12,"name","","",297,null],[12,"fields","","",297,null],[12,"error","","",297,null],[3,"SerializeStructVariant","","",null,null],[12,"name","","",298,null],[12,"variant_index","","",298,null],[12,"variant","","",298,null],[12,"fields","","",298,null],[12,"error","","",298,null],[4,"Content","","",null,null],[13,"Bool","","",299,null],[13,"U8","","",299,null],[13,"U16","","",299,null],[13,"U32","","",299,null],[13,"U64","","",299,null],[13,"I8","","",299,null],[13,"I16","","",299,null],[13,"I32","","",299,null],[13,"I64","","",299,null],[13,"F32","","",299,null],[13,"F64","","",299,null],[13,"Char","","",299,null],[13,"String","","",299,null],[13,"Bytes","","",299,null],[13,"None","","",299,null],[13,"Some","","",299,null],[13,"Unit","","",299,null],[13,"UnitStruct","","",299,null],[13,"UnitVariant","","",299,null],[13,"NewtypeStruct","","",299,null],[13,"NewtypeVariant","","",299,null],[13,"Seq","","",299,null],[13,"Tuple","","",299,null],[13,"TupleStruct","","",299,null],[13,"TupleVariant","","",299,null],[13,"Map","","",299,null],[13,"Struct","","",299,null],[13,"StructVariant","","",299,null],[11,"new","","",289,{"inputs":[{"name":"m"},{"name":"str"},{"name":"usize"}],"output":{"name":"self"}}],[11,"serialize_field","","",289,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",289,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",290,{"inputs":[{"name":"m"},{"name":"str"},{"name":"usize"}],"output":{"name":"self"}}],[11,"serialize_field","","",290,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",290,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",299,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",291,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",291,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i8","","",291,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i16","","",291,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i32","","",291,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i64","","",291,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u8","","",291,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u16","","",291,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u32","","",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u64","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_f32","","",291,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_f64","","",291,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_char","","",291,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_str","","",291,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_bytes","","",291,null],[11,"serialize_none","","",291,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_some","","",291,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_unit","","",291,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_unit_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_unit_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_newtype_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_newtype_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_seq","","",291,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",291,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_element","","",292,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",292,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_element","","",293,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",293,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_field","","",294,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",294,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_field","","",295,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_key","","",296,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",296,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",296,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_entry","","",296,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_field","","",297,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",297,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_field","","",298,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",298,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"fmt","serde::private::ser","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bad_type","","",287,null],[11,"serialize_bool","","",287,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i8","","",287,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",287,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",287,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",287,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u8","","",287,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",287,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",287,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",287,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",287,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",287,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",287,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",287,null],[11,"serialize_none","","",287,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",287,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_unit","","",287,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",287,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",287,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",287,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",287,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",287,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",300,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"description","","",300,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"de","serde::private","",null,null],[3,"ContentDeserializer","serde::private::de","Not public API",null,null],[12,"content","","",301,null],[12,"err","","",301,null],[3,"ContentRefDeserializer","","Not public API.",null,null],[12,"content","","",302,null],[12,"err","","",302,null],[3,"InternallyTaggedUnitVisitor","","Visitor for deserializing an internally tagged unit variant.",null,null],[12,"type_name","","",303,null],[12,"variant_name","","",303,null],[3,"TagContentOtherFieldVisitor","","Not public API.",null,null],[12,"tag","","",304,null],[12,"content","","",304,null],[3,"TagOrContentFieldVisitor","","Not public API.",null,null],[12,"tag","","",305,null],[12,"content","","",305,null],[3,"TaggedContentVisitor","","Not public API.",null,null],[12,"tag_name","","",306,null],[12,"value","","",306,null],[3,"UntaggedUnitVisitor","","Visitor for deserializing an untagged unit variant.",null,null],[12,"type_name","","",307,null],[12,"variant_name","","",307,null],[3,"StrDeserializer","","",null,null],[12,"value","","",308,null],[12,"marker","","",308,null],[3,"BytesDeserializer","","",null,null],[12,"value","","",309,null],[12,"marker","","",309,null],[3,"InPlaceSeed","","A DeserializeSeed helper for implementing deserialize_in_place Visitors.",null,null],[12,"0","","",310,null],[4,"Content","","Used from generated code to buffer the contents of the Deserializer when deserializing untagged enums and internally tagged enums.",null,null],[13,"Bool","","",311,null],[13,"U8","","",311,null],[13,"U16","","",311,null],[13,"U32","","",311,null],[13,"U64","","",311,null],[13,"I8","","",311,null],[13,"I16","","",311,null],[13,"I32","","",311,null],[13,"I64","","",311,null],[13,"F32","","",311,null],[13,"F64","","",311,null],[13,"Char","","",311,null],[13,"String","","",311,null],[13,"Str","","",311,null],[13,"ByteBuf","","",311,null],[13,"Bytes","","",311,null],[13,"None","","",311,null],[13,"Some","","",311,null],[13,"Unit","","",311,null],[13,"Newtype","","",311,null],[13,"Seq","","",311,null],[13,"Map","","",311,null],[4,"TagContentOtherField","","Used by generated code to deserialize an adjacently tagged enum when ignoring unrelated fields is allowed.",null,null],[13,"Tag","","",312,null],[13,"Content","","",312,null],[13,"Other","","",312,null],[4,"TagOrContentField","","Used by generated code to deserialize an adjacently tagged enum.",null,null],[13,"Tag","","",313,null],[13,"Content","","",313,null],[5,"missing_field","","If the missing field is of type `Option<T>` then treat is as `None`, otherwise it is an error.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"borrow_cow_str","","",null,{"inputs":[{"name":"d"}],"output":{"generics":["cow"],"name":"result"}}],[5,"borrow_cow_bytes","","",null,{"inputs":[{"name":"d"}],"output":{"generics":["cow"],"name":"result"}}],[0,"size_hint","","",null,null],[5,"from_bounds","serde::private::de::size_hint","",null,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"option"}}],[5,"cautious","","",null,{"inputs":[{"generics":["usize"],"name":"option"}],"output":{"name":"usize"}}],[5,"helper","","",null,null],[0,"content","serde::private::de","",null,null],[3,"ContentVisitor","serde::private::de::content","",null,null],[12,"value","","",314,null],[3,"TagOrContentVisitor","","",null,null],[12,"name","","",315,null],[12,"value","","",315,null],[3,"TaggedContent","","Used by generated code to deserialize an internally tagged enum.",null,null],[12,"tag","","",316,null],[12,"content","","",316,null],[3,"TaggedContentVisitor","","Not public API.",null,null],[12,"tag_name","","",306,null],[12,"value","","",306,null],[3,"TagOrContentFieldVisitor","","Not public API.",null,null],[12,"tag","","",305,null],[12,"content","","",305,null],[3,"TagContentOtherFieldVisitor","","Not public API.",null,null],[12,"tag","","",304,null],[12,"content","","",304,null],[3,"ContentDeserializer","","Not public API",null,null],[12,"content","","",301,null],[12,"err","","",301,null],[3,"EnumDeserializer","","",null,null],[12,"variant","","",317,null],[12,"value","","",317,null],[12,"err","","",317,null],[3,"VariantDeserializer","","",null,null],[12,"value","","",318,null],[12,"err","","",318,null],[3,"SeqDeserializer","","",null,null],[12,"iter","","",319,null],[12,"err","","",319,null],[3,"MapDeserializer","","",null,null],[12,"iter","","",320,null],[12,"value","","",320,null],[12,"err","","",320,null],[3,"ContentRefDeserializer","","Not public API.",null,null],[12,"content","","",302,null],[12,"err","","",302,null],[3,"EnumRefDeserializer","","",null,null],[12,"variant","","",321,null],[12,"value","","",321,null],[12,"err","","",321,null],[3,"VariantRefDeserializer","","",null,null],[12,"value","","",322,null],[12,"err","","",322,null],[3,"SeqRefDeserializer","","",null,null],[12,"iter","","",323,null],[12,"err","","",323,null],[3,"MapRefDeserializer","","",null,null],[12,"iter","","",324,null],[12,"value","","",324,null],[12,"err","","",324,null],[3,"InternallyTaggedUnitVisitor","","Visitor for deserializing an internally tagged unit variant.",null,null],[12,"type_name","","",303,null],[12,"variant_name","","",303,null],[3,"UntaggedUnitVisitor","","Visitor for deserializing an untagged unit variant.",null,null],[12,"type_name","","",307,null],[12,"variant_name","","",307,null],[4,"Content","","Used from generated code to buffer the contents of the Deserializer when deserializing untagged enums and internally tagged enums.",null,null],[13,"Bool","","",311,null],[13,"U8","","",311,null],[13,"U16","","",311,null],[13,"U32","","",311,null],[13,"U64","","",311,null],[13,"I8","","",311,null],[13,"I16","","",311,null],[13,"I32","","",311,null],[13,"I64","","",311,null],[13,"F32","","",311,null],[13,"F64","","",311,null],[13,"Char","","",311,null],[13,"String","","",311,null],[13,"Str","","",311,null],[13,"ByteBuf","","",311,null],[13,"Bytes","","",311,null],[13,"None","","",311,null],[13,"Some","","",311,null],[13,"Unit","","",311,null],[13,"Newtype","","",311,null],[13,"Seq","","",311,null],[13,"Map","","",311,null],[4,"TagOrContent","","This is the type of the map keys in an internally tagged enum.",null,null],[13,"Tag","","",325,null],[13,"Content","","",325,null],[4,"TagOrContentField","","Used by generated code to deserialize an adjacently tagged enum.",null,null],[13,"Tag","","",313,null],[13,"Content","","",313,null],[4,"TagContentOtherField","","Used by generated code to deserialize an adjacently tagged enum when ignoring unrelated fields is allowed.",null,null],[13,"Tag","","",312,null],[13,"Content","","",312,null],[13,"Other","","",312,null],[11,"fmt","serde::private::de","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unexpected","","",311,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"deserialize","","",311,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::private::de::content","",314,{"inputs":[],"output":{"name":"self"}}],[11,"expecting","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",314,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","",314,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",314,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",314,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",314,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","",314,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",314,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",314,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",314,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",314,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",314,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",314,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",314,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",314,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",314,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",314,null],[11,"visit_borrowed_bytes","","",314,null],[11,"visit_byte_buf","","",314,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_unit","","",314,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","",314,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",314,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",314,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","",314,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","",314,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",314,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","",315,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deserialize","","",315,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",315,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","",315,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",315,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",315,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",315,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","",315,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",315,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",315,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",315,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",315,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",315,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",315,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",315,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",315,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",315,null],[11,"visit_borrowed_bytes","","",315,null],[11,"visit_byte_buf","","",315,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_unit","","",315,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","",315,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",315,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",315,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","",315,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","",315,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",315,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","serde::private::de","Visitor for the content of an internally tagged enum with the given tag name.",306,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deserialize","","",306,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",306,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_map","","",306,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"deserialize","","",305,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",305,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",304,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",304,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize_any","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",301,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",301,null],[11,"deserialize_unit_struct","","",301,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",301,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",301,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",301,null],[11,"deserialize_identifier","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",301,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","private API, don't use",301,{"inputs":[{"name":"content"}],"output":{"name":"self"}}],[11,"variant_seed","serde::private::de::content","",317,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",318,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",318,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",318,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",318,null],[11,"new","","",319,{"inputs":[{"generics":["content"],"name":"vec"}],"output":{"name":"self"}}],[11,"deserialize_any","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",319,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",319,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",319,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",319,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",319,null],[11,"deserialize_enum","","",319,null],[11,"deserialize_identifier","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",319,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",319,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","",320,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"next_key_seed","","",320,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",320,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",320,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"deserialize_any","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",320,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",320,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",320,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",320,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",320,null],[11,"deserialize_enum","","",320,null],[11,"deserialize_identifier","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","serde::private::de","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",302,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",302,null],[11,"deserialize_bool","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",302,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",302,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",302,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",302,null],[11,"deserialize_identifier","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",302,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","private API, don't use",302,{"inputs":[{"name":"content"}],"output":{"name":"self"}}],[11,"variant_seed","serde::private::de::content","",321,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",322,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",322,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",322,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",322,null],[11,"new","","",323,null],[11,"deserialize_any","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",323,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",323,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",323,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",323,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",323,null],[11,"deserialize_enum","","",323,null],[11,"deserialize_identifier","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",323,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",323,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","",324,null],[11,"next_key_seed","","",324,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",324,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",324,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"deserialize_any","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",324,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",324,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",324,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",324,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",324,null],[11,"deserialize_enum","","",324,null],[11,"deserialize_identifier","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::private::de","",301,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_deserializer","","",302,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Not public API.",303,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"expecting","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",303,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_map","","",303,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"new","","Not public API.",307,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"expecting","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",307,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"IdentifierDeserializer","","",null,null],[16,"Deserializer","","",326,null],[10,"from","","",326,null],[11,"deserialize_any","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",308,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",308,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",308,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",308,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",308,null],[11,"deserialize_enum","","",308,null],[11,"deserialize_identifier","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",308,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",309,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",309,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",309,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",309,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",309,null],[11,"deserialize_enum","","",309,null],[11,"deserialize_identifier","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",309,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",310,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",215,null],[16,"Error","","The error type when some error occurs during serialization.",215,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",215,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",215,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",215,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",215,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",215,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",215,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",215,null],[10,"serialize_bool","","Serialize a `bool` value.",215,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",215,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",215,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",215,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",215,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",215,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",215,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",215,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",215,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",215,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",215,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",215,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",215,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",215,null],[10,"serialize_none","","Serialize a [`None`] value.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",215,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",215,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",215,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",278,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","Deserializes a value into `self` from the given Deserializer.",278,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",280,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",280,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",280,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",280,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",280,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",280,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",280,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",280,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",280,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"forward_to_deserialize_any_method","","",null,null],[14,"forward_to_deserialize_any_helper","","",null,null],[14,"__private_serialize","","",null,null],[14,"__private_deserialize","","",null,null],[14,"__serialize_unimplemented","","Used only by Serde doc tests. Not public API.",null,null],[14,"__serialize_unimplemented_method","","",null,null],[14,"__serialize_unimplemented_helper","","",null,null],[11,"from_vec","serde::lib","",200,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",200,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"borrow","","",206,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"borrow","","",198,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"borrow","","",200,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"report","serde::export","",165,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"assert_receiver_is_total_eq","serde::lib","",207,null],[11,"assert_receiver_is_total_eq","serde::lib::net","",183,null],[11,"assert_receiver_is_total_eq","","",180,null],[11,"assert_receiver_is_total_eq","","",194,null],[11,"assert_receiver_is_total_eq","serde::lib","",208,null],[11,"assert_receiver_is_total_eq","serde::lib::net","",189,null],[11,"assert_receiver_is_total_eq","","",193,null],[11,"assert_receiver_is_total_eq","serde::lib","",198,null],[11,"fill_buf","","",173,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",173,null],[11,"read_until","","",173,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_line","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"seek","","",173,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"add_assign","","",208,null],[11,"add_assign","","",207,null],[11,"sub_assign","","",207,null],[11,"sub_assign","","",208,null],[11,"write","","",173,null],[11,"flush","","",173,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","",173,null],[11,"write_fmt","","",173,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","serde::lib::net","",191,null],[11,"flush","","",191,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","serde::lib","",172,null],[11,"write_all","","",172,null],[11,"flush","","",172,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone","serde::lib::net","",186,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv6"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv4"}}],[11,"clone","serde::lib","",207,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"clone","serde::lib::net","",183,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"ipv6multicastscope"}}],[11,"clone","serde::lib","",208,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"clone","serde::lib::net","",194,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"clone","serde::lib","",195,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"into_raw_fd","serde::lib::net","",192,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",184,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",191,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"new","serde::lib","Coerces into an `OsStr` slice.",199,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",199,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",199,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",199,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",199,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_os_string","","Converts a [`Box`]`<OsStr>` into an [`OsString`] without copying or allocating.",199,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"deref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"from_ptr","","Wraps a raw C string with a safe C string wrapper.",197,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",197,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",197,null],[11,"as_ptr","","Returns the inner pointer to this C string.",197,null],[11,"to_bytes","","Converts this C string to a byte slice.",197,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",197,null],[11,"to_str","","Yields a [`&str`] slice if the `CStr` contains valid UTF-8.",197,{"inputs":[{"name":"self"}],"output":{"generics":["str","utf8error"],"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.",197,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"into_c_string","","Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.",197,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"deref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"new","","Directly wraps a string slice as a `Path` slice.",205,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",205,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",205,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",205,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",205,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e. if it is independent of the current directory.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","Returns `true` if the `Path` is relative, i.e. not absolute.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","Returns `true` if the `Path` has a root.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","Returns the `Path` without its final component, if there is one.",205,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"file_name","","Returns the final component of the `Path`, if there is one.",205,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["path","stripprefixerror"],"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name`].",205,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",205,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",205,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",205,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",205,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produces an iterator over the [`Component`]s of the path.",205,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produces an iterator over the path's components viewed as [`OsStr`] slices.",205,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",205,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"metadata","","Queries the file system to get information about a file, directory, etc.",205,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"result"}}],[11,"symlink_metadata","","Queries the metadata about a file without following symlinks.",205,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",205,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",205,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",205,{"inputs":[{"name":"self"}],"output":{"generics":["readdir","error"],"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path exists on disk and is pointing at a regular file.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path exists on disk and is pointing at a directory.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or allocating.",205,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"deref","","",206,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"from_iter","","",196,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"from_iter","","",195,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"from_iter","","",206,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"as_ref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",206,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",205,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",197,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",205,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",206,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",196,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",195,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","",173,{"inputs":[],"output":{"generics":["cstr"],"name":"box"}}],[11,"default","","Constructs an empty `OsString`.",200,{"inputs":[],"output":{"name":"osstring"}}],[11,"default","","Creates an empty `CString`.",198,{"inputs":[],"output":{"name":"cstring"}}],[11,"default","","Creates a `Mutex<T>`, with the `Default` value for T.",209,{"inputs":[],"output":{"name":"mutex"}}],[11,"default","","",206,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",196,{"inputs":[],"output":{"name":"hashset"}}],[11,"default","","",173,{"inputs":[],"output":{"generics":["osstr"],"name":"box"}}],[11,"default","","",207,{"inputs":[],"output":{"name":"duration"}}],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",195,{"inputs":[],"output":{"name":"hashmap"}}],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",210,{"inputs":[],"output":{"name":"rwlock"}}],[11,"drop","","",198,null],[11,"drop","","",210,null],[11,"drop","","",209,null],[11,"description","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",173,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","serde::lib::str","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::export::fmt","",327,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::lib::str","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::lib::net","",193,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::lib::convert","",328,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"add","serde::lib","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",194,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",206,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",185,{"inputs":[{"name":"self"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",188,{"inputs":[{"name":"self"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",189,{"inputs":[{"name":"self"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",169,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",186,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",182,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",193,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",186,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",200,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"extend","","",206,null],[11,"extend","","",196,null],[11,"extend","","",195,null],[11,"extend","","",195,null],[11,"extend","","",196,null],[11,"div","","",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"next","serde::lib::net","",181,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"next","","",190,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"mul","serde::lib","",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",182,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",206,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",186,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",182,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::net","",186,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",169,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",199,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",199,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",197,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","serde::lib::net","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_raw_fd","","",192,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"from_raw_fd","","",191,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",184,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"to_owned","serde::lib","",199,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone_into","","",199,null],[11,"to_owned","","",205,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"clone_into","","",205,null],[11,"to_owned","","",197,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"mul_assign","","",207,null],[11,"to_socket_addrs","serde::lib::net","",185,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"to_socket_addrs","","",188,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"to_socket_addrs","","",194,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"to_socket_addrs","serde::lib","",171,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"div_assign","","",207,null],[11,"hash","serde::lib::net","",189,null],[11,"hash","serde::lib","",207,null],[11,"hash","","",205,null],[11,"hash","","",206,null],[11,"hash","serde::lib::net","",188,null],[11,"hash","serde::lib","",199,null],[11,"hash","serde::lib::net","",183,null],[11,"hash","serde::lib","",208,null],[11,"hash","serde::lib::net","",186,null],[11,"hash","","",185,null],[11,"hash","serde::lib","",198,null],[11,"hash","","",197,null],[11,"hash","serde::lib::net","",194,null],[11,"hash","","",182,null],[11,"hash","serde::lib","",200,null],[11,"from","","",173,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","","",206,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","serde::lib::net","",194,null],[11,"from","","",183,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipaddr"}}],[11,"from","serde::lib","",200,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","serde::lib::net","",183,null],[11,"from","","",182,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"from","serde::lib","",173,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","serde::lib::net","It performs the conversion in network order (big-endian).",186,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","serde::lib","",173,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",173,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",173,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",173,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",206,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","serde::lib::net","",194,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddr"}}],[11,"from","serde::lib","",169,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","","Creates a new instance of an `RwLock<T>` which is unlocked. This is equivalent to [`RwLock::new`].",210,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"from","","",173,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",206,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"from","","",198,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",200,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"from","","",200,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"from","","",173,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",172,{"inputs":[{"name":"cstring"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",173,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",200,{"inputs":[{"name":"defaultenvkey"}],"output":{"name":"osstring"}}],[11,"from","serde::lib::net","",183,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipaddr"}}],[11,"from","serde::lib","",169,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","serde::lib::net","",182,null],[11,"from","serde::lib","",200,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","serde::lib::net","",194,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddr"}}],[11,"from","serde::lib","",173,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",173,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",173,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",198,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"from","","",173,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","serde::lib::net","",183,null],[11,"from","serde::lib","Creates a new mutex in an unlocked state ready for use. This is equivalent to [`Mutex::new`].",209,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"from","","",206,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from","","",173,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","serde::lib::net","",182,null],[11,"from","","",183,null],[11,"from","","",186,null],[11,"sub","serde::lib","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",208,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sum","","",207,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sum","","",207,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"index","","",195,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","","",198,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"index","","",200,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"as_raw_fd","serde::lib::net","",191,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",192,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",184,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cmp","serde::lib","",198,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"cmp","","",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::net","",186,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",205,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::net","",183,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"cmp","","",206,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"cmp","","",199,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"cmp","","",200,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::net","",182,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",197,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"fmt","serde::lib::net","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","serde::lib::net","",186,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",194,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddr","addrparseerror"],"name":"result"}}],[11,"from_str","","",183,{"inputs":[{"name":"str"}],"output":{"generics":["ipaddr","addrparseerror"],"name":"result"}}],[11,"from_str","","",188,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv4","addrparseerror"],"name":"result"}}],[11,"from_str","","",182,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",185,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv6","addrparseerror"],"name":"result"}}],[11,"read","serde::lib","",173,null],[11,"initializer","","",173,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",173,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","",173,null],[11,"read","serde::lib::net","",191,null],[11,"initializer","","",191,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"from_bytes","serde::lib","",199,null],[11,"as_bytes","","",199,null],[11,"deref_mut","serde::lib::mem","",39,null],[11,"clone","serde::lib::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","serde::export","",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","serde::lib::str::pattern","",102,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","serde::lib","",127,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","serde::lib::iter","",10,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","serde::lib::mem","",38,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","serde::lib::slice","",89,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","serde::lib::str","",124,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","serde::lib::str::pattern","",107,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","serde::lib::str","",123,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","serde::export::fmt","",151,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","serde::lib::result","",166,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","serde::lib::str","",114,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","serde::lib::iter","",12,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","serde::lib::convert","",328,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"clone","serde::export","",212,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","serde::lib::str","",117,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","serde::lib::slice","",97,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","serde::lib::iter","",9,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","serde::lib::str","",118,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","serde::lib::iter","",33,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","serde::lib::result","",168,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","serde::lib::option","",162,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","serde::lib::iter","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","serde::lib::str::pattern","",105,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","serde::lib::str","",111,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","serde::lib::ops","",329,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","serde::lib::str","",120,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","serde::lib::iter","",15,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","serde::lib::str","",122,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","serde::lib::slice","",90,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","serde::lib::iter","",19,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","serde::export::fmt","",327,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","serde::lib::iter","",32,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","serde::lib::cmp","",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","serde::lib","",204,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","serde::lib::iter","",7,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","serde::lib::slice","",93,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","serde::lib","",126,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","serde::lib::str","",112,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","serde::lib::str::pattern","",106,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","serde::lib::iter","",23,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","serde::export","",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","serde::lib::ops","",46,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","serde::lib::str","",125,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"clone","serde::lib::mem","",39,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",39,null],[11,"clone","serde::lib::ops","",78,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","serde::lib::iter","",17,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","serde::lib::option","",164,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","serde::lib::str","",100,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","serde::lib::ops","",57,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","serde::lib::iter","",18,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","serde::lib::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","serde::lib::option","",330,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"clone","serde::lib::iter","",11,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","serde::lib::ops","",80,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","serde::lib::iter","",21,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","serde::lib::str","",113,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","serde::lib::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"partial_cmp","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::option","",330,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::export","",212,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::convert","",328,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::ops","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::export","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::export","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::export::fmt","",327,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","serde::lib::mem","",39,null],[11,"cmp","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::option","",330,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::convert","",328,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export","",212,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::ops","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export::fmt","",327,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","serde::lib::ops","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::result","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::result","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::mem","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::result","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::convert","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl_assign","serde::lib","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"shl_assign","","",204,null],[11,"div","","",204,null],[11,"div","","",204,null],[11,"div","","",204,null],[11,"div","","",204,null],[11,"div","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"div","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"div","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"div","","",204,null],[11,"div","","",204,null],[11,"div","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"div","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"div","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"div","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitxor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitor_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"bitand_assign","","",204,null],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","serde::export","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",165,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","serde::lib","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"assert_receiver_is_total_eq","serde::lib::ops","",66,null],[11,"assert_receiver_is_total_eq","","",329,null],[11,"assert_receiver_is_total_eq","serde::export","",165,null],[11,"assert_receiver_is_total_eq","serde::export::fmt","",327,null],[11,"assert_receiver_is_total_eq","serde::lib::convert","",328,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",46,null],[11,"assert_receiver_is_total_eq","serde::lib::cmp","",4,null],[11,"assert_receiver_is_total_eq","serde::lib::str","",118,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",57,null],[11,"assert_receiver_is_total_eq","","",78,null],[11,"assert_receiver_is_total_eq","serde::lib","",204,null],[11,"assert_receiver_is_total_eq","serde::export","",161,null],[11,"assert_receiver_is_total_eq","serde::lib::str","",115,null],[11,"assert_receiver_is_total_eq","serde::lib::option","",330,null],[11,"assert_receiver_is_total_eq","serde::lib::str::pattern","",102,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",80,null],[11,"assert_receiver_is_total_eq","","",71,null],[11,"eq","serde::lib::str","",115,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","serde::export","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::str::pattern","",102,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",57,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",80,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","serde::export","",212,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",126,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::str","",118,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::convert","",328,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::mem","",38,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",127,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::option","",330,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",329,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","serde::export::fmt","",327,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","serde::export","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",71,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"add","serde::lib","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"add","","",204,null],[11,"add","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"add","","",204,null],[11,"add","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"add","","",204,null],[11,"add","","",204,null],[11,"add","","",204,null],[11,"add","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"add","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"add","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"add","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"next_back","serde::lib::str","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::result","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",92,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",92,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::str","",124,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","serde::lib::ops","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next_back","serde::lib::str","",122,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::str","",99,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",97,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",97,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::result","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",8,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",8,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::option","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::result","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::option","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",111,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",111,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::option","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",113,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::ops","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",110,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::str","",112,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",7,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",114,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"rfold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"bitor","serde::lib","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"bitor","","",204,null],[11,"bitor","","",204,null],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"bitor","","",204,null],[11,"bitor","","",204,null],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"bitor","","",204,null],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"bitor","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitor","","",204,null],[11,"into_result","serde::export","",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",165,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_error","","",165,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"into_result","","",161,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",161,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",161,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"write_str","","",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",152,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",152,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",161,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","serde::lib","",127,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from","","",126,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ref","serde::lib::slice","",97,null],[11,"from_iter","serde::export","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",161,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",165,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"rem_assign","serde::lib","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"rem_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"div_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"mul_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"sub_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"add_assign","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"neg","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"shr_assign","","",204,null],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sub","","",204,null],[11,"sub","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","serde::export","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",165,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","serde::lib","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",204,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"get","serde::lib::ops","",57,null],[11,"get_mut","","",57,null],[11,"get_unchecked","","",57,null],[11,"get_unchecked_mut","","",57,null],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"get","","",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",57,null],[11,"get_unchecked_mut","","",57,null],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"get","","",80,null],[11,"get_mut","","",80,null],[11,"get_unchecked","","",80,null],[11,"get_unchecked_mut","","",80,null],[11,"index","","",80,null],[11,"index_mut","","",80,null],[11,"get","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",78,null],[11,"get_unchecked_mut","","",78,null],[11,"index","","",78,null],[11,"index_mut","","",78,null],[11,"get","","",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",71,null],[11,"get_unchecked_mut","","",71,null],[11,"index","","",71,null],[11,"index_mut","","",71,null],[11,"get","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",66,null],[11,"get_unchecked_mut","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"get","","",66,null],[11,"get_mut","","",66,null],[11,"get_unchecked","","",66,null],[11,"get_unchecked_mut","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"get","","",71,null],[11,"get_mut","","",71,null],[11,"get_unchecked","","",71,null],[11,"get_unchecked_mut","","",71,null],[11,"index","","",71,null],[11,"index_mut","","",71,null],[11,"get","","",329,null],[11,"get_mut","","",329,null],[11,"get_unchecked","","",329,null],[11,"get_unchecked_mut","","",329,null],[11,"index","","",329,null],[11,"index_mut","","",329,null],[11,"get","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",80,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",80,null],[11,"get_unchecked_mut","","",80,null],[11,"index","","",80,null],[11,"index_mut","","",80,null],[11,"get","","",78,null],[11,"get_mut","","",78,null],[11,"get_unchecked","","",78,null],[11,"get_unchecked_mut","","",78,null],[11,"index","","",78,null],[11,"index_mut","","",78,null],[11,"get","","",329,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",329,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",329,null],[11,"get_unchecked_mut","","",329,null],[11,"index","","",329,null],[11,"index_mut","","",329,null],[11,"shr","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shr","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"next","serde::lib::slice","",89,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next","serde::lib::str","",124,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",124,null],[11,"last","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","serde::lib::slice","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next","serde::lib::str","",114,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::iter","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"try_fold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"try_fold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"fold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"count","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",84,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"try_fold","","",17,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",17,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::ops","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"nth","","",80,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::option","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"next","serde::lib::str","",123,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::option","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"next","serde::lib::slice","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"count","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",92,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",92,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",24,null],[11,"try_fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next","serde::lib::result","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",24,null],[11,"try_fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next","serde::lib::str","",112,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",95,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"try_fold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","serde::lib::str","",117,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::iter","Overflow Behavior",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"nth","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next","serde::lib::str","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"try_fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"try_fold","","",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",7,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","serde::lib::slice","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","serde::lib::result","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"next","serde::lib::iter","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"try_fold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::ops","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"nth","","",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::str","",120,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",111,null],[11,"count","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",111,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",111,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",111,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",111,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","serde::lib::result","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"next","serde::lib::iter","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"try_fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","serde::lib::slice","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"count","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",97,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",97,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",97,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::str","",125,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::slice","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","serde::lib::str","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",116,null],[11,"last","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next","serde::lib::str","",110,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",110,null],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next","serde::lib::ops","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"nth","","",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"try_fold","","",8,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",8,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","serde::lib::str","",100,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",99,null],[11,"next","serde::lib::iter","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",93,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"try_fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"try_fold","","",21,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","serde::lib::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next","serde::lib::iter","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"try_fold","","",22,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next_back","serde::lib::str::pattern","",107,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",108,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","serde::lib::str","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","serde::lib::slice","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","serde::lib::iter","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","serde::lib::slice","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","serde::lib::iter","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","serde::lib::mem","",38,null],[11,"hash","serde::lib::ops","",71,null],[11,"hash","serde::lib::convert","",328,null],[11,"hash","serde::export","",161,null],[11,"hash","serde::lib::ops","",78,null],[11,"hash","serde::lib::option","",330,null],[11,"hash","serde::lib::cmp","",3,null],[11,"hash","serde::lib::ops","",57,null],[11,"hash","serde::lib::mem","",39,null],[11,"hash","serde::lib::ops","",46,null],[11,"hash","serde::export","",165,null],[11,"hash","serde::lib","",204,null],[11,"hash","serde::lib::ops","",329,null],[11,"hash","","",80,null],[11,"hash","serde::export::fmt","",327,null],[11,"hash","serde::export","",212,null],[11,"hash","serde::lib::ops","",66,null],[11,"bitxor","serde::lib","",204,null],[11,"bitxor","","",204,null],[11,"bitxor","","",204,null],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitxor","","",204,null],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitxor","","",204,null],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitxor","","",204,null],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitxor","","",204,null],[11,"bitxor","","",204,null],[11,"bitxor","","",204,null],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitxor","","",204,null],[11,"bitxor","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitxor","","",204,null],[11,"bitxor","","",204,null],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"not","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",327,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::convert","",328,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"rem","serde::lib","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,null],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,null],[11,"rem","","",204,null],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"rem","","",204,null],[11,"rem","","",204,null],[11,"rem","","",204,null],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"mul","","",204,null],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"mul","","",204,null],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"mul","","",204,null],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"mul","","",204,null],[11,"mul","","",204,null],[11,"mul","","",204,null],[11,"mul","","",204,null],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"mul","","",204,null],[11,"mul","","",204,null],[11,"mul","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"mul","","",204,null],[11,"mul","","",204,null],[11,"mul","","",204,null],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shl","","",204,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"haystack","serde::lib::str::pattern","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",108,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",107,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitand","serde::lib","",204,null],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitand","","",204,null],[11,"bitand","","",204,null],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitand","","",204,null],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitand","","",204,null],[11,"bitand","","",204,null],[11,"bitand","","",204,null],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitand","","",204,null],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitand","","",204,null],[11,"bitand","","",204,null],[11,"bitand","","",204,null],[11,"bitand","","",204,null],[11,"bitand","","",204,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"into_iter","serde::export","Returns a consuming iterator over the possibly contained value.",165,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",161,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","serde::lib","",204,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","serde::export::fmt","",327,{"inputs":[],"output":{"name":"error"}}],[11,"default","serde::lib","Creates a `RefCell<T>`, with the `Default` value for T.",127,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","serde::lib::iter","",32,{"inputs":[],"output":{"name":"empty"}}],[11,"default","serde::export","",212,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","serde::lib","Creates a `Cell<T>`, with the `Default` value for T.",126,{"inputs":[],"output":{"name":"cell"}}],[11,"default","serde::export","Returns [`None`].",161,{"inputs":[],"output":{"name":"option"}}],[11,"default","serde::lib::mem","",39,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"borrow","serde::lib","",169,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","","",172,null],[11,"borrow","","",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"assert_receiver_is_total_eq","","",175,null],[11,"assert_receiver_is_total_eq","","",171,null],[11,"add_assign","","",169,null],[11,"add_assign","","",169,null],[11,"add_assign","","",171,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",172,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",173,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",173,null],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",171,null],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",169,null],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",176,null],[11,"clone","serde::lib::str","",98,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","serde::lib","",174,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",172,null],[11,"deref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"as_ref","","",172,null],[11,"as_ref","","",172,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",171,null],[11,"as_ref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",176,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",178,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",172,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",174,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",177,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",175,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",172,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","",174,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Gets an iterator for moving out the `BTreeSet`'s contents.",175,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by value.",178,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",177,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",176,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",172,null],[11,"as_mut","","",172,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"call_once","","",173,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",173,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",173,{"inputs":[],"output":{"name":"box"}}],[11,"default","","Creates an empty `BTreeMap<K, V>`.",174,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","","Creates an empty `VecDeque<T>`.",178,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","","Creates an empty `Vec<T>`.",172,{"inputs":[],"output":{"name":"vec"}}],[11,"default","","Creates an empty `BinaryHeap<T>`.",176,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","","",173,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","","Creates an owned Cow<'a, B> with the default value for the contained owned value.",169,{"inputs":[],"output":{"name":"cow"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"box"}}],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",175,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","","Creates an empty `String`.",171,{"inputs":[],"output":{"name":"string"}}],[11,"default","","Creates an empty `LinkedList<T>`.",177,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"to_string","","",171,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","","",169,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"drop","","",172,null],[11,"drop","","",177,null],[11,"drop","","",174,null],[11,"drop","","",173,null],[11,"drop","","",178,null],[11,"add","","",169,null],[11,"add","","",169,null],[11,"add","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"eq","","",178,null],[11,"extend","","",178,null],[11,"extend","","",175,null],[11,"extend","","",175,null],[11,"extend","","",171,null],[11,"extend","","",171,null],[11,"extend","","",171,null],[11,"extend","","",176,null],[11,"extend","","",178,null],[11,"extend","","",172,null],[11,"extend","","",174,null],[11,"extend","","",177,null],[11,"extend","","",171,null],[11,"extend","","",171,null],[11,"extend","","",176,null],[11,"extend","","",172,null],[11,"extend","","",174,null],[11,"extend","","",177,null],[11,"start","serde::lib::ops","",71,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",329,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",329,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"finish","serde::lib","",173,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",173,null],[11,"write_u8","","",173,null],[11,"write_u16","","",173,null],[11,"write_u32","","",173,null],[11,"write_u64","","",173,null],[11,"write_u128","","",173,null],[11,"write_usize","","",173,null],[11,"write_i8","","",173,null],[11,"write_i16","","",173,null],[11,"write_i32","","",173,null],[11,"write_i64","","",173,null],[11,"write_i128","","",173,null],[11,"write_isize","","",173,null],[11,"next","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"nth","","",173,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","serde::lib::str","",98,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",98,null],[11,"partial_cmp","serde::lib","",169,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",172,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",177,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",174,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"len","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resume","","",173,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"hash","","",173,null],[11,"hash","","",175,null],[11,"hash","","",169,null],[11,"hash","","",178,null],[11,"hash","","",171,null],[11,"hash","","",172,null],[11,"hash","","",177,null],[11,"hash","","",174,null],[11,"from","","",172,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","","",172,null],[11,"from","","",171,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",169,null],[11,"from","","",173,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","","",173,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",178,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","","",173,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",172,null],[11,"from","","",176,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","","",169,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","","",173,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",169,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","","",173,null],[11,"from","","",172,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","","",172,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",169,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","","",171,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","","",173,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","","",172,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",172,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",171,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","","",172,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"index_mut","","",172,null],[11,"index_mut","","",172,null],[11,"index_mut","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",171,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",172,null],[11,"index_mut","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",172,null],[11,"index_mut","","",172,null],[11,"index_mut","","",172,null],[11,"index_mut","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",172,null],[11,"index","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",172,null],[11,"index","","",172,null],[11,"index","","",172,null],[11,"index","","",172,null],[11,"index","","",174,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","","",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",171,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",171,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",172,null],[11,"index","","",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"borrow_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",172,null],[11,"cmp","","",174,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"cmp","","",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","","",173,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","","",169,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","","",172,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","","",177,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",171,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"finalize","","",173,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"deref_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",172,null],[11,"write_str","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",171,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","","",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","serde::lib::str","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"next","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"reverse","serde::lib::cmp","Reverses the `Ordering`.",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"peek","serde::lib::iter","Returns a reference to the next() value without advancing the iterator.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","serde::lib::mem","Wrap a value to be manually dropped.",39,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",39,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",39,null],[11,"contains","serde::lib::ops","Returns `true` if `item` is contained in the range.",57,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",66,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",71,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",78,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",80,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"into_slice","serde::lib::slice","View the underlying data as a subslice of the original data.",92,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",97,null],[11,"valid_up_to","serde::lib::str","Returns the index in the given string up to which valid UTF-8 was verified.",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",115,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get","serde::lib","Returns a copy of the contained value.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Cell` containing the given value.",126,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",126,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",126,null],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",126,null],[11,"replace","","Replaces the contained value, and returns it.",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",127,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",127,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",127,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",127,null],[11,"borrow","","Immutably borrows the wrapped value.",127,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",127,{"inputs":[{"name":"self"}],"output":{"generics":["ref","borrowerror"],"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",127,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",127,{"inputs":[{"name":"self"}],"output":{"generics":["refmut","borrowmuterror"],"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",127,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",127,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"entry","serde::export::fmt","Adds a new entry to the set output.",144,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",144,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",144,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",145,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",145,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",145,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",146,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",146,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the Arguments structure.",151,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters. The `pieces` array must be at least as long as `fmt` to construct a valid Arguments structure. Also, any `Count` within `fmt` that is `CountIsParam` or `CountIsNextParam` has to point to an argument created with `argumentusize`. However, failing to do so doesn't cause unsafety, but will ignore invalid .",151,null],[11,"estimated_capacity","","Estimates the length of the formatted text.",151,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pad_integral","serde::export","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",152,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",152,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",152,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",152,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",152,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",152,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",152,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",152,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",152,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",152,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",152,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","serde::export::fmt","Adds a new entry to the map output.",158,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",158,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",158,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",159,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",159,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_some","serde::export","Returns `true` if the option is a [`Some`] value.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",161,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",161,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",161,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a [`default`][] (if not).",161,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a [`default`][] (if not).",161,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",161,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",161,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",161,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",161,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",161,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",161,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",161,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_ok","","Returns `true` if the result is [`Ok`].",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",165,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",165,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",165,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",165,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",165,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",165,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",165,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",165,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",165,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",165,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",165,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",165,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",165,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",165,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",165,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_mut","serde::lib","Acquires a mutable reference to the owned form of the data.",169,null],[11,"into_owned","","Extracts the owned data.",169,null],[11,"new","","Creates a new empty `String`.",171,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",171,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",171,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",171,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",171,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",171,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",171,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",171,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",171,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",171,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",171,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",171,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",171,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",171,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",171,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",171,null],[11,"truncate","","Shortens this `String` to the specified length.",171,null],[11,"pop","","Removes the last character from the string buffer and returns it.",171,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",171,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",171,null],[11,"insert","","Inserts a character into this `String` at a byte position.",171,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",171,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",171,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",171,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",171,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",171,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",171,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",171,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"new","","Constructs a new, empty `Vec<T>`.",172,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",172,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",172,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",172,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",172,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",172,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",172,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",172,null],[11,"as_slice","","Extracts a slice containing the entire vector.",172,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",172,null],[11,"set_len","","Sets the length of a vector.",172,null],[11,"swap_remove","","Removes an element from the vector and returns it.",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",172,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",172,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",172,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",172,null],[11,"push","","Appends an element to the back of a collection.",172,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",172,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",172,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",172,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",172,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",172,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",172,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",172,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",172,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",172,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",172,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",172,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",172,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",172,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"new","","Allocates memory on the heap and then places `x` into it.",173,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",173,null],[11,"from_unique","","Constructs a `Box` from a `Unique<T>` pointer.",173,{"inputs":[{"name":"unique"}],"output":{"name":"box"}}],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",173,null],[11,"into_unique","","Consumes the `Box`, returning the wrapped pointer as `Unique<T>`.",173,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",173,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",173,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",173,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",174,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",174,null],[11,"get","","Returns a reference to the value corresponding to the key.",174,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",174,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",174,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",174,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",174,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",174,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",174,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",174,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",174,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",174,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",174,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",174,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",174,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",174,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",174,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",174,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",175,{"inputs":[],"output":{"name":"btreeset"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",175,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"clear","","Clears the set, removing all values.",175,null],[11,"contains","","Returns `true` if the set contains a value.",175,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",175,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",175,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",175,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",175,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",175,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",175,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",175,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",175,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",175,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the number of elements in the set.",175,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",176,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",176,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",176,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",176,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",176,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",176,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",176,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",176,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",176,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",176,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",176,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",176,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",176,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",176,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",176,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",176,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",176,null],[11,"new","","Creates an empty `LinkedList`.",177,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",177,null],[11,"iter","","Provides a forward iterator.",177,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",177,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",177,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",177,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",177,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",177,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",177,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",177,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",177,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",177,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",177,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","","Creates an empty `VecDeque`.",178,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",178,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",178,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",178,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",178,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",178,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",178,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",178,null],[11,"iter","","Returns a front-to-back iterator.",178,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",178,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",178,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",178,null],[11,"len","","Returns the number of elements in the `VecDeque`.",178,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",178,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",178,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",178,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",178,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",178,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",178,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",178,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",178,null],[11,"retain","","Retains only the elements specified by the predicate.",178,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",178,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",178,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements or by appending clones of `value` to the back.",178,null],[11,"is","serde::lib::error","Returns true if the boxed type is the same as `T`",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,{"inputs":[{"generics":["error"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,{"inputs":[{"generics":["error"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",179,{"inputs":[{"generics":["error"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"new","serde::lib::net","Creates a new IPv6 address from eight 16-bit segments.",182,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",182,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",182,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",182,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",182,{"inputs":[{"name":"self"}],"output":{"generics":["ipv6multicastscope"],"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",182,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",182,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.",184,{"inputs":[{"name":"a"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",184,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",184,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",184,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this listener.",184,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",184,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",184,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_only_v6","","",184,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"only_v6","","",184,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",184,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",184,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new socket address from an [IPv6 address], a 16-bit port number, and the `flowinfo` and `scope_id` fields.",185,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",185,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",185,null],[11,"port","","Returns the port number associated with this socket address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",185,null],[11,"flowinfo","","Returns the flow information associated with this address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Changes the flow information associated with this socket address.",185,null],[11,"scope_id","","Returns the scope ID associated with this address.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",185,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",186,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",186,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",186,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",186,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",186,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",186,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",186,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","Creates a new socket address from an [IPv4 address] and a port number.",188,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",188,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",188,null],[11,"port","","Returns the port number associated with this socket address.",188,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",188,null],[11,"connect","","Opens a TCP connection to a remote host.",191,{"inputs":[{"name":"a"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",191,{"inputs":[{"name":"socketaddr"},{"name":"duration"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",191,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",191,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",191,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"generics":["error"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",191,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",191,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",191,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",191,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",191,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",191,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",192,{"inputs":[{"name":"a"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"recv_from","","Receives a single datagram message on the socket. On success, returns the number of bytes read and the origin.",192,null],[11,"peek_from","","Receives a single datagram message on the socket, without removing it from the queue. On success, returns the number of bytes read and the origin.",192,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",192,null],[11,"local_addr","","Returns the socket address that this socket was created from.",192,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",192,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",192,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",192,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",192,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",192,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",192,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",192,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",192,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",192,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",192,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",192,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",192,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",192,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["error"],"name":"result"}}],[11,"send","","Sends data on the socket to the remote address to which it is connected.",192,null],[11,"recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",192,null],[11,"peek","","Receives single datagram on the socket from the remote address to which it is connected, without removing the message from input queue. On success, returns the number of bytes peeked.",192,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",192,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new socket address from an [IP address] and a port number.",194,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",194,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",194,null],[11,"port","","Returns the port number associated with this socket address.",194,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",194,null],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv4 address], and [`false`] otherwise.",194,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv6 address], and [`false`] otherwise.",194,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","serde::lib","Creates an empty `HashMap`.",195,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",195,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",195,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",195,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",195,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",195,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",195,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",195,null],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",195,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",195,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",195,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",195,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",195,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",195,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",195,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",195,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",195,null],[11,"get","","Returns a reference to the value corresponding to the key.",195,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",195,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",195,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",195,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",195,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",195,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",195,null],[11,"new","","Creates an empty `HashSet`.",196,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",196,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",196,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",196,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",196,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",196,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",196,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",196,null],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",196,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",196,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",196,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",196,null],[11,"contains","","Returns `true` if the set contains a value.",196,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",196,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",196,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",196,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",196,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",196,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",196,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",196,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",198,{"inputs":[{"name":"t"}],"output":{"generics":["cstring","nulerror"],"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector, without checking for interior 0 bytes.",198,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C via [`into_raw`].",198,null],[11,"into_raw","","Consumes the `CString` and transfers ownership of the string to a C caller.",198,null],[11,"into_string","","Converts the `CString` into a [`String`] if it contains valid UTF-8 data.",198,{"inputs":[{"name":"self"}],"output":{"generics":["string","intostringerror"],"name":"result"}}],[11,"into_bytes","","Consumes the `CString` and returns the underlying byte buffer.",198,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the [`into_bytes`] function except that the returned vector includes the trailing nul terminator.",198,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",198,null],[11,"as_bytes_with_nul","","Equivalent to the [`as_bytes`] function except that the returned slice includes the trailing nul terminator.",198,null],[11,"as_c_str","","Extracts a [`CStr`] slice containing the entire string.",198,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"into_boxed_c_str","","Converts this `CString` into a boxed [`CStr`].",198,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"new","","Constructs a new empty `OsString`.",200,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an [`OsStr`] slice.",200,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains valid Unicode data.",200,{"inputs":[{"name":"self"}],"output":{"generics":["string","osstring"],"name":"result"}}],[11,"push","","Extends the string with the given [`&OsStr`] slice.",200,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",200,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",200,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",200,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",200,null],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",200,null],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed [`OsStr`].",200,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"new","","Allocates an empty `PathBuf`.",206,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",206,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",206,null],[11,"pop","","Truncates `self` to [`self.parent`].",206,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",206,null],[11,"set_extension","","Updates [`self.extension`] to `extension`.",206,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",206,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",206,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"box"}}],[11,"new","","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",207,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",207,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",207,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",207,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_nanos","","Creates a new `Duration` from the specified number of nanoseconds.",207,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",207,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in milliseconds.",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in microseconds.",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if overflow occurred.",207,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"now","","Returns the system time corresponding to \"now\".",208,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",208,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",208,{"inputs":[{"name":"self"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",209,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",209,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard","poisonerror"],"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",209,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard","trylockerror"],"name":"result"}}],[11,"is_poisoned","","Determines whether the mutex is poisoned.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",209,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",209,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",210,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",210,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard","poisonerror"],"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",210,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard","trylockerror"],"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",210,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard","poisonerror"],"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",210,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard","trylockerror"],"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",210,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",210,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",210,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}]],"paths":[[8,"PartialEq"],[8,"Eq"],[3,"AssertParamIsEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"StepBy"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[8,"ExactSizeIterator"],[8,"Step"],[8,"Product"],[8,"Extend"],[3,"Once"],[8,"Sum"],[3,"Empty"],[3,"Repeat"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[3,"Discriminant"],[19,"ManuallyDrop"],[8,"Generator"],[8,"Try"],[8,"BitOr"],[8,"Index"],[8,"Place"],[8,"DerefMut"],[4,"GeneratorState"],[8,"Add"],[8,"BitAnd"],[8,"BoxPlace"],[8,"Neg"],[8,"ShlAssign"],[8,"Deref"],[8,"RemAssign"],[8,"ShrAssign"],[8,"BitXor"],[8,"Sub"],[3,"RangeFrom"],[8,"DivAssign"],[8,"FnMut"],[8,"Boxed"],[8,"SubAssign"],[8,"BitXorAssign"],[8,"InPlace"],[8,"MulAssign"],[8,"BitOrAssign"],[3,"Range"],[8,"Not"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"Shl"],[3,"RangeToInclusive"],[8,"Rem"],[8,"Drop"],[8,"IndexMut"],[8,"Placer"],[8,"FnOnce"],[8,"Div"],[3,"RangeTo"],[8,"Shr"],[3,"RangeInclusive"],[8,"Mul"],[8,"Fn"],[8,"SliceConcatExt"],[3,"ChunksMut"],[3,"RSplitMut"],[3,"RSplitNMut"],[8,"SliceIndex"],[3,"SplitMut"],[3,"Split"],[3,"RSplit"],[3,"SplitNMut"],[3,"IterMut"],[3,"Windows"],[3,"RSplitN"],[3,"Chunks"],[3,"SplitN"],[3,"Iter"],[3,"EncodeUtf16"],[3,"LinesAny"],[3,"RMatches"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"SplitWhitespace"],[3,"Lines"],[3,"Bytes"],[3,"Matches"],[3,"Split"],[3,"RSplit"],[3,"Utf8Error"],[3,"CharIndices"],[3,"RSplitTerminator"],[3,"ParseBoolError"],[3,"RMatchIndices"],[3,"RSplitN"],[8,"FromStr"],[3,"SplitTerminator"],[3,"MatchIndices"],[3,"Chars"],[3,"SplitN"],[3,"Cell"],[3,"RefCell"],[8,"Clone"],[3,"AssertParamIsClone"],[3,"AssertParamIsCopy"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Pointer"],[8,"Write"],[8,"UpperExp"],[8,"UpperHex"],[8,"Octal"],[3,"ArgumentV1"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugTuple"],[8,"LowerHex"],[8,"LowerExp"],[8,"Display"],[8,"Binary"],[3,"Arguments"],[3,"Formatter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"DebugMap"],[3,"DebugStruct"],[8,"Debug"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Cow"],[8,"ToOwned"],[3,"String"],[3,"Vec"],[3,"Box"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"BinaryHeap"],[3,"LinkedList"],[3,"VecDeque"],[8,"Error"],[4,"Shutdown"],[3,"LookupHost"],[3,"Ipv6Addr"],[4,"IpAddr"],[3,"TcpListener"],[3,"SocketAddrV6"],[3,"Ipv4Addr"],[8,"ToSocketAddrs"],[3,"SocketAddrV4"],[4,"Ipv6MulticastScope"],[3,"Incoming"],[3,"TcpStream"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"SocketAddr"],[3,"HashMap"],[3,"HashSet"],[3,"CStr"],[3,"CString"],[3,"OsStr"],[3,"OsString"],[8,"BuildHasher"],[8,"Hash"],[8,"Write"],[3,"Wrapping"],[3,"Path"],[3,"PathBuf"],[3,"Duration"],[3,"SystemTime"],[3,"Mutex"],[3,"RwLock"],[3,"Impossible"],[3,"PhantomData"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[8,"LenHint"],[3,"OneOf"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"ExpectedInSeq"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"PairDeserializer"],[3,"PairVisitor"],[3,"ExpectedInMap"],[3,"MapAccessDeserializer"],[3,"UnitOnly"],[8,"Pair"],[8,"FromPrimitive"],[3,"IgnoredAny"],[3,"StringInPlaceVisitor"],[3,"OptionVisitor"],[3,"PhantomDataVisitor"],[3,"ArrayVisitor"],[3,"ArrayInPlaceVisitor"],[4,"OsStringKind"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"CharVisitor"],[3,"StringVisitor"],[3,"StrVisitor"],[3,"BytesVisitor"],[3,"CStringVisitor"],[3,"PathVisitor"],[3,"PathBufVisitor"],[3,"OsStringVisitor"],[3,"Encode"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"TaggedSerializer"],[4,"Unsupported"],[3,"SerializeTupleVariantAsMapValue"],[3,"SerializeStructVariantAsMapValue"],[3,"ContentSerializer"],[3,"SerializeSeq"],[3,"SerializeTuple"],[3,"SerializeTupleStruct"],[3,"SerializeTupleVariant"],[3,"SerializeMap"],[3,"SerializeStruct"],[3,"SerializeStructVariant"],[4,"Content"],[3,"Error"],[3,"ContentDeserializer"],[3,"ContentRefDeserializer"],[3,"InternallyTaggedUnitVisitor"],[3,"TagContentOtherFieldVisitor"],[3,"TagOrContentFieldVisitor"],[3,"TaggedContentVisitor"],[3,"UntaggedUnitVisitor"],[3,"StrDeserializer"],[3,"BytesDeserializer"],[3,"InPlaceSeed"],[4,"Content"],[4,"TagContentOtherField"],[4,"TagOrContentField"],[3,"ContentVisitor"],[3,"TagOrContentVisitor"],[3,"TaggedContent"],[3,"EnumDeserializer"],[3,"VariantDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"EnumRefDeserializer"],[3,"VariantRefDeserializer"],[3,"SeqRefDeserializer"],[3,"MapRefDeserializer"],[4,"TagOrContent"],[8,"IdentifierDeserializer"],[3,"Error"],[4,"Infallible"],[3,"RangeFull"],[3,"NoneError"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[12,"hasher","","",0,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[12,"hasher","","",1,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[12,"0","","",2,null],[3,"Hasher","","",null,null],[12,"k0","","",3,null],[12,"k1","","",3,null],[12,"length","","",3,null],[12,"state","","",3,null],[12,"tail","","",3,null],[12,"ntail","","",3,null],[12,"_marker","","",3,null],[3,"State","","",null,null],[12,"v0","","",4,null],[12,"v2","","",4,null],[12,"v1","","",4,null],[12,"v3","","",4,null],[3,"Sip13Rounds","","",null,null],[3,"Sip24Rounds","","",null,null],[5,"u8to64_le","","Load an u64 using up to 7 bytes of a byte slice.",null,null],[8,"Sip","","",null,null],[10,"c_rounds","","",5,{"inputs":[{"name":"state"}],"output":null}],[10,"d_rounds","","",5,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"new_with_keys","","",3,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"hasher"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"short_write","","",3,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write_usize","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_u8","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write","","",3,null],[11,"finish","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","Creates a `Hasher<S>` with the two initial keys set to 0.",3,{"inputs":[],"output":{"name":"hasher"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sip13rounds"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"sip13rounds"}}],[11,"c_rounds","","",6,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",6,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sip24rounds"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"sip24rounds"}}],[11,"c_rounds","","",7,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",7,{"inputs":[{"name":"state"}],"output":null}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",8,null],[12,"h2","","",8,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[12,"hasher","","",9,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[12,"hasher","","",10,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[12,"0","","",11,null],[3,"Hasher","","",null,null],[12,"k0","","",12,null],[12,"k1","","",12,null],[12,"length","","",12,null],[12,"state","","",12,null],[12,"tail","","",12,null],[12,"ntail","","",12,null],[12,"_marker","","",12,null],[3,"State","","",null,null],[12,"v0","","",13,null],[12,"v2","","",13,null],[12,"v1","","",13,null],[12,"v3","","",13,null],[3,"Sip13Rounds","","",null,null],[3,"Sip24Rounds","","",null,null],[5,"u8to64_le","","Load an u64 using up to 7 bytes of a byte slice.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",14,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[8,"Sip","","",null,null],[10,"c_rounds","","",15,{"inputs":[{"name":"state"}],"output":null}],[10,"d_rounds","","",15,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",11,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",11,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",11,null],[11,"finish128","","Return a 128-bit hash",11,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",9,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",9,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",9,null],[11,"finish128","","Return a 128-bit hash",9,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",10,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",10,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",10,null],[11,"finish128","","Return a 128-bit hash",10,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new_with_keys","","",12,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"hasher"}}],[11,"reset","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"short_write","","",12,null],[11,"finish128","","",12,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",11,null],[11,"finish","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",9,null],[11,"finish","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",10,null],[11,"finish","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write_usize","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_u8","","",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write","","",12,null],[11,"finish","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"default","","Creates a `Hasher<S>` with the two initial keys set to 0.",12,{"inputs":[],"output":{"name":"hasher"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sip13rounds"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"sip13rounds"}}],[11,"c_rounds","","",16,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",16,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sip24rounds"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"sip24rounds"}}],[11,"c_rounds","","",17,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",17,{"inputs":[{"name":"state"}],"output":null}],[11,"as_bytes","","Convert into a 16-bytes vector",8,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hasher"],[3,"State"],[8,"Sip"],[3,"Sip13Rounds"],[3,"Sip24Rounds"],[3,"Hash128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hasher"],[3,"State"],[8,"Hasher128"],[8,"Sip"],[3,"Sip13Rounds"],[3,"Sip24Rounds"]]};
searchIndex["slog"] = {"doc":"Slog -  Structured, extensible, composable logging for Rust","items":[[3,"Logger","slog","Logging handle used to execute logging statements",null,null],[12,"drain","","",0,null],[12,"list","","",0,null],[3,"Discard","","`Drain` discarding everything",null,null],[3,"Filter","","`Drain` filtering records",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"MapError","","`Drain` mapping error returned by another `Drain`",null,null],[12,"drain","","",3,null],[12,"map_fn","","",3,null],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",null,null],[12,"0","","",4,null],[12,"1","","",4,null],[3,"Fuse","","`Drain` panicking on error",null,null],[12,"0","","",5,null],[3,"IgnoreResult","","`Drain` ignoring result",null,null],[12,"drain","","",6,null],[3,"RecordLocation","","",null,null],[12,"file","","File",7,null],[12,"line","","Line",7,null],[12,"column","","Column (currently not implemented)",7,null],[12,"function","","Function (currently not implemented)",7,null],[12,"module","","Module",7,null],[3,"RecordStatic","","Information that can be static in the given record thus allowing to optimize record creation to be done mostly at compile-time.",null,null],[12,"location","","Code location",8,null],[12,"tag","","Tag",8,null],[12,"level","","Logging level",8,null],[3,"Record","","One logging record",null,null],[12,"rstatic","","",9,null],[12,"msg","","",9,null],[12,"kv","","",9,null],[3,"AsFmtSerializer","","Serializer to closure adapter.",null,null],[12,"0","","",10,null],[3,"FnValue","","Explicit lazy-closure `Value`",null,null],[12,"0","","",11,null],[3,"PushFnValueSerializer","","Handle passed to `PushFnValue` closure",null,null],[12,"record","","",12,null],[12,"key","","",12,null],[12,"serializer","","",12,null],[12,"done","","",12,null],[3,"PushFnValue","","Lazy `Value` that writes to Serializer",null,null],[12,"0","","",13,null],[3,"SingleKV","","Single pair `Key` and `Value`",null,null],[12,"0","","",14,null],[12,"1","","",14,null],[3,"OwnedKV","","Owned KV",null,null],[12,"0","","The exact details of that it are not considered public and stable API. `slog_o` or `o` macro should be used instead to create `OwnedKV` instances.",15,null],[3,"BorrowedKV","","Borrowed `KV`",null,null],[12,"0","","The exact details of it function are not considered public and stable API. `log` and other macros should be used instead to create `BorrowedKV` instances.",16,null],[3,"OwnedKVListNode","","",null,null],[12,"next_node","","",17,null],[12,"kv","","",17,null],[3,"MultiListNode","","",null,null],[12,"next_node","","",18,null],[12,"node","","",18,null],[3,"OwnedKVList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its ancestors",null,null],[12,"node","","",19,null],[4,"MutexDrainError","","Error returned by `Mutex<D : Drain>`",null,null],[13,"Mutex","","Error acquiring mutex",20,null],[13,"Drain","","Error returned by drain",20,null],[4,"Level","","Logging level associated with a logging `Record`",null,null],[13,"Critical","","Critical",21,null],[13,"Error","","Error",21,null],[13,"Warning","","Warning",21,null],[13,"Info","","Info",21,null],[13,"Debug","","Debug",21,null],[13,"Trace","","Trace",21,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",22,null],[13,"Critical","","Log critical level only",22,null],[13,"Error","","Log only error level and above",22,null],[13,"Warning","","Log only warning level and above",22,null],[13,"Info","","Log only info level and above",22,null],[13,"Debug","","Log only debug level and above",22,null],[13,"Trace","","Log everything",22,null],[4,"Error","","Serialization Error",null,null],[13,"Io","","`io::Error` (not available in ![no_std] mode)",23,null],[13,"Fmt","","`fmt::Error`",23,null],[13,"Other","","Other error",23,null],[5,"__slog_static_max_level","","Not an API",null,{"inputs":[],"output":{"name":"filterlevel"}}],[0,"key","","",null,null],[0,"static_","slog::key","",null,null],[6,"Key","slog::key::static_","Key type",null,null],[0,"private","slog","",null,null],[3,"NeverStruct","slog::private","",null,null],[12,"0","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","slog","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"Key","","Key type",null,null],[6,"PushFnSerializer","","Old name of `PushFnValueSerializer`",null,null],[6,"Result","","Serialization `Result`",null,null],[6,"Never","","This type is here just to abstract away lack of `!` type support in stable rust during time of the release. It will be switched to `!` at some point and `Never` should not be considered \"stable\" API.",null,null],[6,"Serialize","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"PushLazy","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"ValueSerializer","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"OwnedKeyValueList","","Compatibility name to ease upgrading from `slog v1`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[7,"ASCII_LOWERCASE_MAP","","",null,null],[7,"STATIC_TERMINATOR_UNIT","","This is not part of \"stable\" API",null,null],[8,"Drain","","Logging drain",null,null],[16,"Ok","","Type returned by this drain",25,null],[16,"Err","","Type of potential errors that can be returned by this `Drain`",25,null],[10,"log","","Handle one logging statement (`Record`)",25,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"map","","Pass `Drain` through a closure, eg. to wrap into another `Drain`.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"filter","","Filter logging records passed to `Drain`",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_level","","Filter logging records passed to `Drain` (by level)",25,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"levelfilter"}}],[11,"map_err","","Map logging errors returned by this drain",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperror"}}],[11,"ignore_res","","Ignore results returned by this drain",25,{"inputs":[{"name":"self"}],"output":{"name":"ignoreresult"}}],[11,"fuse","","Make `Self` panic when returning any errors",25,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[8,"SendSyncUnwindSafe","","`Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncUnwindSafeDrain","","`Drain + Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncRefUnwindSafeDrain","","`Drain + Send + Sync + RefUnwindSafe` bound",null,null],[8,"MapErrFn","","Function that can be used in `MapErr` drain",null,null],[8,"FilterFn","","Function that can be used in `Filter` drain",null,null],[8,"SendRefUnwindSafeDrain","","`Drain + Send + RefUnwindSafe` bound",null,null],[8,"Serializer","","Serializer",null,null],[11,"emit_usize","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_isize","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_bool","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_char","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_u8","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_i8","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_u16","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_i16","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_u32","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_i32","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_f32","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_u64","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_i64","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_f64","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_str","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_unit","","Emit `()`",26,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"emit_none","","Emit `None`",26,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[10,"emit_arguments","","Emit `fmt::Arguments`",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Value","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",27,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"KV","","Key-value pair(s)",null,null],[10,"serialize","","Serialize self into `Serializer`",28,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"SendSyncRefUnwindSafeKV","","Thread-local safety bound for `KV`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"root","","Build a root `Logger`",0,{"inputs":[{"name":"d"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"root_typed","","Build a root `Logger` that retains `drain` type",0,{"inputs":[{"name":"d"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"new","","Build a child logger",0,{"inputs":[{"name":"self"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"log","","Log one logging `Record`",0,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"list","","Get list of key-value pairs assigned to this `Logger`",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedkvlist"}}],[11,"into_erased","","Convert to default, \"erased\" type: `Logger<Arc<SendSyncUnwindSafeDrain>>`",0,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"logger"}}],[11,"to_erased","","Create a copy with \"erased\" type",0,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"logger"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"discard"}}],[11,"log","","",29,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"new","","Create `Filter` wrapping given `drain`",1,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"new","","Create `LevelFilter`",2,{"inputs":[{"name":"d"},{"name":"level"}],"output":{"name":"self"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","Create `Filter` wrapping given `drain`",3,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duplicate"}}],[11,"new","","Create `Duplicate`",4,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"log","","",4,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"new","","Create `Fuse` wrapping given `drain`",5,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",5,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ignoreresult"}}],[11,"new","","Create `IgnoreResult` wrapping `drain`",6,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",6,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mutexdrainerror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",20,{"inputs":[{"generics":["mutexguard"],"name":"poisonerror"}],"output":{"name":"mutexdrainerror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_usize","","Cast `Level` to ordering integer",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `Level` from an `usize`",21,{"inputs":[{"name":"usize"}],"output":{"generics":["level"],"name":"option"}}],[11,"as_usize","","Convert to `usize` value",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `FilterLevel` from an `usize`",22,{"inputs":[{"name":"usize"}],"output":{"generics":["filterlevel"],"name":"option"}}],[11,"max","","Maximum logging level (log everything)",22,{"inputs":[],"output":{"name":"self"}}],[11,"min","","Minimum logging level (log nothing)",22,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"generics":["level"],"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"generics":["filterlevel"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"recordlocation"}}],[11,"new","","Create a new `Record`",9,{"inputs":[{"name":"recordstatic"},{"name":"arguments"},{"name":"borrowedkv"}],"output":{"name":"self"}}],[11,"msg","","Get a log record message",9,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"level","","Get record logging level",9,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"line","","Get line number",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"location","","Get line number",9,{"inputs":[{"name":"self"}],"output":{"name":"recordlocation"}}],[11,"column","","Get error column",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"file","","Get file path",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"tag","","Get tag",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module","","Get module",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"function","","Get function (placeholder)",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kv","","Get key-value pairs",9,{"inputs":[{"name":"self"}],"output":{"name":"borrowedkv"}}],[11,"emit_arguments","","",10,{"inputs":[{"name":"self"},{"name":"key"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","Emit a value",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"emit","","Emit a value",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"from","","",14,null],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ownedkvlist"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"root","","New `OwnedKVList` node without a parent (root)",19,{"inputs":[{"name":"ownedkv"}],"output":{"name":"self"}}],[11,"new","","New `OwnedKVList` node with an existing parent",19,{"inputs":[{"name":"ownedkv"},{"generics":["sendsyncrefunwindsafekv"],"name":"arc"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"ownedkv"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",23,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"o","","Macro for building group of key-value pairs: `OwnedKV`",null,null],[14,"slog_o","","Macro for building group of key-value pairs (alias)",null,null],[14,"b","","Macro for building group of key-value pairs in `BorrowedKV`",null,null],[14,"slog_b","","Alias of `b`",null,null],[14,"kv","","Macro for build `KV` implementing type",null,null],[14,"slog_kv","","Alias of `kv`",null,null],[14,"record_static","","Create `RecordStatic` at the given code location",null,null],[14,"slog_record_static","","Create `RecordStatic` at the given code location (alias)",null,null],[14,"record","","Create `Record` at the given code location",null,null],[14,"slog_record","","Create `Record` at the given code location (alias)",null,null],[14,"log","","Log message a logging record",null,null],[14,"slog_log","","Log message a logging record (alias)",null,null],[14,"crit","","Log critical level record",null,null],[14,"slog_crit","","Log critical level record (alias)",null,null],[14,"error","","Log error level record",null,null],[14,"slog_error","","Log error level record",null,null],[14,"warn","","Log warning level record",null,null],[14,"slog_warn","","Log warning level record (alias)",null,null],[14,"info","","Log info level record",null,null],[14,"slog_info","","Log info level record (alias)",null,null],[14,"debug","","Log debug level record",null,null],[14,"slog_debug","","Log debug level record (alias)",null,null],[14,"trace","","Log trace level record",null,null],[14,"slog_trace","","Log trace level record (alias)",null,null]],"paths":[[3,"Logger"],[3,"Filter"],[3,"LevelFilter"],[3,"MapError"],[3,"Duplicate"],[3,"Fuse"],[3,"IgnoreResult"],[3,"RecordLocation"],[3,"RecordStatic"],[3,"Record"],[3,"AsFmtSerializer"],[3,"FnValue"],[3,"PushFnValueSerializer"],[3,"PushFnValue"],[3,"SingleKV"],[3,"OwnedKV"],[3,"BorrowedKV"],[3,"OwnedKVListNode"],[3,"MultiListNode"],[3,"OwnedKVList"],[4,"MutexDrainError"],[4,"Level"],[4,"FilterLevel"],[4,"Error"],[3,"NeverStruct"],[8,"Drain"],[8,"Serializer"],[8,"Value"],[8,"KV"],[3,"Discard"]]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"StringCache","string_cache::atom","",null,null],[12,"buckets","","",0,null],[3,"STRING_CACHE","","",null,null],[12,"__private_field","","",1,null],[3,"StringCacheEntry","","",null,null],[12,"next_in_bucket","","",2,null],[12,"hash","","",2,null],[12,"ref_count","","",2,null],[12,"string","","",2,null],[3,"PhfStrSet","","",null,null],[12,"key","","",3,null],[12,"disps","","",3,null],[12,"atoms","","",3,null],[12,"hashes","","",3,null],[3,"EmptyStaticAtomSet","","",null,null],[3,"Atom","","",null,null],[12,"unsafe_data","","This field is public so that the `atom!()` macros can use it. You should not otherwise access this field.",4,null],[12,"phantom","","",4,null],[4,"UnpackedAtom","","",null,null],[13,"Dynamic","","Pointer to a dynamic table entry.  Must be 16-byte aligned!",5,null],[13,"Inline","","Length + bytes of string.",5,null],[13,"Static","","Index in static interning table.",5,null],[5,"u64_hash_as_u32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"inline_atom_slice","","",null,null],[5,"inline_atom_slice_mut","","",null,null],[5,"from_packed_dynamic","","Used for a fast path in Clone and Drop.",null,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[5,"inline_orig_bytes","","For as_slice on inline atoms, we need a pointer into the original string contents.",null,null],[6,"DefaultAtom","","Use this if you don’t care about static atoms.",null,null],[7,"STRING_CACHE","","",null,null],[17,"NB_BUCKETS","","",null,null],[17,"BUCKET_MASK","","",null,null],[8,"StaticAtomSet","","",null,null],[10,"get","","",6,{"inputs":[],"output":{"name":"phfstrset"}}],[10,"empty_string_index","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"mutex"}}],[11,"initialize","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",2,{"inputs":[{"generics":["box"],"name":"option"},{"name":"u64"},{"name":"string"}],"output":{"name":"stringcacheentry"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"stringcache"}}],[11,"add","","",0,null],[11,"remove","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get","","",7,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"precomputed_hash","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"unpack","","",4,{"inputs":[{"name":"self"}],"output":{"name":"unpackedatom"}}],[11,"get_hash","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_mutated_str","","",4,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"self"}}],[11,"to_ascii_uppercase","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_ascii_lowercase","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq_ignore_ascii_case","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_str_ignore_ascii_case","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"pack","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_packed","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"unpackedatom"}}],[0,"string_cache","string_cache","",null,null]],"paths":[[3,"StringCache"],[3,"STRING_CACHE"],[3,"StringCacheEntry"],[3,"PhfStrSet"],[3,"Atom"],[4,"UnpackedAtom"],[8,"StaticAtomSet"],[3,"EmptyStaticAtomSet"]]};
searchIndex["string_cache_shared"] = {"doc":"","items":[[5,"pack_static","string_cache_shared","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null]],"paths":[]};
searchIndex["swc"] = {"doc":"","items":[],"paths":[]};
searchIndex["swc_atoms"] = {"doc":"","items":[[3,"JsWordStaticSet","swc_atoms","",null,null],[6,"JsWord","","",null,null],[11,"get","","",0,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",0,{"inputs":[],"output":{"name":"u32"}}],[14,"js_word","","",null,null]],"paths":[[3,"JsWordStaticSet"]]};
searchIndex["swc_common"] = {"doc":"","items":[[3,"BytePos","swc_common","",null,null],[12,"0","","",0,null],[3,"Span","","",null,null],[12,"start","","Inclusive",1,null],[12,"end","","Inclusive",1,null],[5,"gen_iter","","Creates a new iterator from `gen`.",null,null],[0,"compat","","Tracking for used html5 features.",null,null],[3,"Feature","swc_common::compat","Feature from `caniuse.com`. TODO: Make this enum?",null,null],[12,"0","","",2,null],[3,"UsedFeatures","","",null,null],[12,"feats","","",3,null],[8,"CanIUse","","",null,null],[10,"report_used_features","","",4,{"inputs":[{"name":"self"},{"name":"usedfeatures"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"feature"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"hash","","",2,null],[11,"new","","not public api",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usedfeatures"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"usedfeatures"}}],[11,"finalize","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["feature"],"name":"fnvhashset"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"self"}}],[11,"add_assign","","",3,{"inputs":[{"name":"self"},{"name":"feature"}],"output":null}],[0,"fold","swc_common","",null,null],[8,"Folder","swc_common::fold","This trait requires `specialization` feature.",null,null],[10,"fold","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[8,"FoldWith","","This trait can be derived with `#[derive(AstNode)]`.",null,null],[10,"fold_children","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"ast_node","swc_common","",null,null],[8,"AstNode","swc_common::ast_node","Currently just a marker trait.",null,null],[0,"gen_iter","swc_common","",null,null],[3,"GenIter","swc_common::gen_iter","",null,null],[12,"0","","",7,null],[5,"gen_iter","","Creates a new iterator from `gen`.",null,null],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"span","swc_common","",null,null],[3,"BytePos","swc_common::span","",null,null],[12,"0","","",0,null],[3,"Span","","",null,null],[12,"start","","Inclusive",1,null],[12,"end","","Inclusive",1,null],[8,"Spanned","","",null,null],[10,"from_unspanned","","",8,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"self"}}],[11,"default","swc_common","",0,{"inputs":[],"output":{"name":"bytepos"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DUMMY","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fold_children","","no-op",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"span"}}],[8,"AstNode","","Currently just a marker trait.",null,null],[8,"Spanned","","",null,null],[10,"from_unspanned","","",8,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"self"}}],[14,"caniuse_feature","","Creates a `caniuse::compat::Feature` with given string.",null,null]],"paths":[[3,"BytePos"],[3,"Span"],[3,"Feature"],[3,"UsedFeatures"],[8,"CanIUse"],[8,"Folder"],[8,"FoldWith"],[3,"GenIter"],[8,"Spanned"]]};
searchIndex["swc_ecma_ast"] = {"doc":"","items":[[3,"Class","swc_ecma_ast","",null,null],[12,"span","","",0,null],[12,"super_class","","",0,null],[12,"body","","",0,null],[3,"ClassMethod","","",null,null],[12,"key","","",1,null],[12,"function","","",1,null],[12,"kind","","",1,null],[12,"is_static","","",1,null],[3,"ClassDecl","","",null,null],[12,"ident","","",2,null],[12,"class","","",2,null],[3,"VarDecl","","",null,null],[12,"span","","",3,null],[12,"kind","","",3,null],[12,"decls","","",3,null],[3,"VarDeclarator","","",null,null],[12,"span","","",4,null],[12,"name","","",4,null],[12,"init","","Initialization expresion.",4,null],[3,"Expr","","",null,null],[12,"span","","",5,null],[12,"node","","",5,null],[3,"FnExpr","","Function expression.",null,null],[12,"ident","","",6,null],[12,"function","","",6,null],[3,"ClassExpr","","Class expression.",null,null],[12,"ident","","",7,null],[12,"class","","",7,null],[3,"TplLit","","",null,null],[12,"tag","","",8,null],[12,"exprs","","",8,null],[12,"quasis","","",8,null],[3,"TplElement","","",null,null],[12,"tail","","",9,null],[12,"cooked","","",9,null],[12,"raw","","",9,null],[3,"Function","","Common parts of function and method.",null,null],[12,"params","","",10,null],[12,"span","","",10,null],[12,"body","","",10,null],[12,"is_generator","","",10,null],[12,"is_async","","",10,null],[3,"Regex","","",null,null],[12,"exp","","",11,null],[12,"flags","","",11,null],[3,"Number","","",null,null],[12,"0","","",12,null],[3,"Module","","",null,null],[12,"body","","",13,null],[3,"ModuleDecl","","",null,null],[12,"span","","",14,null],[12,"node","","",14,null],[3,"ImportSpecifier","","",null,null],[12,"span","","",15,null],[12,"local","","",15,null],[12,"node","","",15,null],[3,"ExportSpecifier","","",null,null],[12,"orig","","`foo` in `export { foo as bar }`",16,null],[12,"exported","","`Some(bar)` in `export { foo as bar }`",16,null],[3,"Pat","","",null,null],[12,"span","","",17,null],[12,"node","","",17,null],[3,"Prop","","",null,null],[12,"span","","",18,null],[12,"node","","",18,null],[3,"Stmt","","",null,null],[12,"span","","",19,null],[12,"node","","",19,null],[3,"BlockStmt","","Use when only block statements are allowed.",null,null],[12,"span","","Span of brace.",20,null],[12,"stmts","","",20,null],[3,"SwitchCase","","",null,null],[12,"test","","None for `default:`",21,null],[12,"consequent","","",21,null],[3,"CatchClause","","",null,null],[12,"param","","",22,null],[12,"body","","",22,null],[3,"Ident","","Ident with span.",null,null],[12,"span","","",23,null],[12,"sym","","",23,null],[3,"DebugUsingDisplay","","",null,null],[12,"0","","",24,null],[4,"ClassMethodKind","","",null,null],[13,"Constructor","","",25,null],[13,"Method","","",25,null],[13,"Getter","","",25,null],[13,"Setter","","",25,null],[4,"Decl","","",null,null],[13,"Class","","",26,null],[13,"Fn","","",26,null],[12,"ident","swc_ecma_ast::Decl","",26,null],[12,"function","","",26,null],[13,"Var","swc_ecma_ast","",26,null],[4,"VarDeclKind","","",null,null],[13,"Var","","",27,null],[13,"Let","","",27,null],[13,"Const","","",27,null],[4,"ExprKind","","",null,null],[13,"This","","",28,null],[13,"Array","","",28,null],[12,"elems","swc_ecma_ast::ExprKind","",28,null],[13,"Object","swc_ecma_ast","",28,null],[12,"props","swc_ecma_ast::ExprKind","",28,null],[13,"Function","swc_ecma_ast","",28,null],[13,"Unary","","",28,null],[12,"op","swc_ecma_ast::ExprKind","",28,null],[12,"prefix","","",28,null],[12,"arg","","",28,null],[13,"Update","swc_ecma_ast","`++v`, `--v`, `v++`, `v--`",28,null],[12,"op","swc_ecma_ast::ExprKind","",28,null],[12,"prefix","","",28,null],[12,"arg","","",28,null],[13,"Binary","swc_ecma_ast","",28,null],[12,"op","swc_ecma_ast::ExprKind","",28,null],[12,"left","","",28,null],[12,"right","","",28,null],[13,"Assign","swc_ecma_ast","",28,null],[12,"op","swc_ecma_ast::ExprKind","",28,null],[12,"left","","Pattern | Expr",28,null],[12,"right","","",28,null],[13,"Member","swc_ecma_ast","A member expression. If computed is true, the node corresponds to a computed (a[b]) member expression and property is an Expression. If computed is false, the node corresponds to a static (a.b) member expression and property is an Identifier.",28,null],[12,"obj","swc_ecma_ast::ExprKind","",28,null],[12,"prop","","",28,null],[12,"computed","","",28,null],[13,"Cond","swc_ecma_ast","true ? 'a' : 'b'",28,null],[12,"test","swc_ecma_ast::ExprKind","",28,null],[12,"cons","","",28,null],[12,"alt","","",28,null],[13,"Call","swc_ecma_ast","",28,null],[12,"callee","swc_ecma_ast::ExprKind","",28,null],[12,"args","","",28,null],[13,"New","swc_ecma_ast","`new Cat()`",28,null],[12,"callee","swc_ecma_ast::ExprKind","",28,null],[12,"args","","`None` for `new Cat`.",28,null],[13,"Seq","swc_ecma_ast","",28,null],[12,"exprs","swc_ecma_ast::ExprKind","",28,null],[13,"Ident","swc_ecma_ast","",28,null],[13,"Lit","","",28,null],[13,"Tpl","","",28,null],[13,"Arrow","","",28,null],[12,"params","swc_ecma_ast::ExprKind","",28,null],[12,"body","","",28,null],[12,"is_generator","","",28,null],[12,"is_async","","",28,null],[13,"Class","swc_ecma_ast","",28,null],[13,"Yield","","",28,null],[12,"arg","swc_ecma_ast::ExprKind","",28,null],[12,"delegate","","",28,null],[13,"MetaProp","swc_ecma_ast","",28,null],[12,"meta","swc_ecma_ast::ExprKind","",28,null],[12,"prop","","",28,null],[13,"Await","swc_ecma_ast","",28,null],[12,"arg","swc_ecma_ast::ExprKind","",28,null],[13,"Paren","swc_ecma_ast","",28,null],[4,"ExprOrSuper","","",null,null],[13,"Super","","",29,null],[13,"Expr","","",29,null],[4,"ExprOrSpread","","",null,null],[13,"Expr","","",30,null],[13,"Spread","","",30,null],[4,"BlockStmtOrExpr","","",null,null],[13,"BlockStmt","","",31,null],[13,"Expr","","",31,null],[4,"PatOrExpr","","",null,null],[13,"Pat","","",32,null],[13,"Expr","","",32,null],[4,"BinaryOp","","",null,null],[13,"EqEq","","`==`",33,null],[13,"NotEq","","`!=`",33,null],[13,"EqEqEq","","`===\"`",33,null],[13,"NotEqEq","","`!==`",33,null],[13,"Lt","","`<`",33,null],[13,"LtEq","","`<=`",33,null],[13,"Gt","","`>`",33,null],[13,"GtEq","","`>=`",33,null],[13,"LShift","","`<<`",33,null],[13,"RShift","","`>>`",33,null],[13,"ZeroFillRShift","","`>>>`",33,null],[13,"Add","","`+`",33,null],[13,"Sub","","`-`",33,null],[13,"Mul","","`*`",33,null],[13,"Div","","`/`",33,null],[13,"Mod","","`%`",33,null],[13,"BitOr","","`|`",33,null],[13,"BitXor","","`^`",33,null],[13,"BitAnd","","`&`",33,null],[13,"LogicalOr","","`||`",33,null],[13,"LogicalAnd","","`&&`",33,null],[13,"In","","`in`",33,null],[13,"InstanceOf","","`instanceof`",33,null],[13,"Exp","","`**`",33,null],[4,"UpdateOp","","",null,null],[13,"PlusPlus","","`++`",34,null],[13,"MinusMinus","","`--`",34,null],[4,"UnaryOp","","",null,null],[13,"Minus","","`-`",35,null],[13,"Plus","","`+`",35,null],[13,"Bang","","`!`",35,null],[13,"Tilde","","`~`",35,null],[13,"TypeOf","","`typeof`",35,null],[13,"Void","","`void`",35,null],[13,"Delete","","`delete`",35,null],[4,"AssignOp","","",null,null],[13,"Assign","","`=`",36,null],[13,"AddAssign","","`+=`",36,null],[13,"SubAssign","","`-=`",36,null],[13,"MulAssign","","`*=`",36,null],[13,"DivAssign","","`/=`",36,null],[13,"ModAssign","","`%=`",36,null],[13,"LShiftAssign","","`<<=`",36,null],[13,"RShiftAssign","","`>>=`",36,null],[13,"ZeroFillRShiftAssign","","`>>>=`",36,null],[13,"BitOrAssign","","`|=`",36,null],[13,"BitXorAssign","","`^=`",36,null],[13,"BitAndAssign","","`&=`",36,null],[13,"ExpAssign","","`**=`",36,null],[4,"Lit","","",null,null],[13,"Str","","",37,null],[13,"Bool","","",37,null],[13,"Null","","",37,null],[13,"Num","","",37,null],[13,"Regex","","",37,null],[4,"ModuleItem","","",null,null],[13,"Stmt","","",38,null],[13,"ModuleDecl","","",38,null],[4,"ModuleDeclKind","","",null,null],[13,"Import","","",39,null],[12,"specifiers","swc_ecma_ast::ModuleDeclKind","",39,null],[12,"src","","",39,null],[13,"ExportDecl","swc_ecma_ast","",39,null],[13,"ExportNamed","","`export { foo } from 'mod'` `export { foo as bar } from 'mod'`",39,null],[12,"specifiers","swc_ecma_ast::ModuleDeclKind","",39,null],[12,"src","","",39,null],[13,"ExportDefaultDecl","swc_ecma_ast","",39,null],[13,"ExportDefaultExpr","","",39,null],[13,"ExportAll","","`export * from 'mod'`",39,null],[12,"src","swc_ecma_ast::ModuleDeclKind","",39,null],[4,"ExportDefaultDecl","swc_ecma_ast","",null,null],[13,"Class","","",40,null],[12,"ident","swc_ecma_ast::ExportDefaultDecl","",40,null],[12,"class","","",40,null],[13,"Fn","swc_ecma_ast","",40,null],[12,"ident","swc_ecma_ast::ExportDefaultDecl","",40,null],[12,"function","","",40,null],[13,"Var","swc_ecma_ast","",40,null],[4,"ImportSpecifierKind","","",null,null],[13,"Specific","","e.g. local = foo, imported = None `import { foo } from 'mod.js'` e.g. local = bar, imported = Some(foo) for `import { foo as bar } from 'mod.js'`",41,null],[12,"imported","swc_ecma_ast::ImportSpecifierKind","",41,null],[13,"Default","swc_ecma_ast","e.g. `import foo from 'mod.js'`",41,null],[13,"Namespace","","e.g. `import * as foo from 'mod.js'`.",41,null],[4,"PatKind","","",null,null],[13,"Ident","","",42,null],[13,"Array","","",42,null],[13,"Rest","","",42,null],[13,"Object","","",42,null],[12,"props","swc_ecma_ast::PatKind","",42,null],[13,"Assign","swc_ecma_ast","",42,null],[12,"left","swc_ecma_ast::PatKind","",42,null],[12,"right","","",42,null],[13,"Expr","swc_ecma_ast","Only for for-in / for-of loops. This is syntatically valid.",42,null],[4,"ObjectPatProp","","",null,null],[13,"KeyValue","","`{key: value}`",43,null],[12,"key","swc_ecma_ast::ObjectPatProp","",43,null],[12,"value","","",43,null],[13,"Assign","swc_ecma_ast","`{key}` or `{key = value}`",43,null],[12,"key","swc_ecma_ast::ObjectPatProp","",43,null],[12,"value","","",43,null],[4,"PropKind","swc_ecma_ast","",null,null],[13,"Shorthand","","`a` in `{ a, }`",44,null],[13,"KeyValue","","`key: value` in `{ key: value, }`",44,null],[12,"key","swc_ecma_ast::PropKind","",44,null],[12,"value","","",44,null],[13,"Assign","swc_ecma_ast","This is invalid for object literal.",44,null],[12,"key","swc_ecma_ast::PropKind","",44,null],[12,"value","","",44,null],[13,"Getter","swc_ecma_ast","",44,null],[12,"key","swc_ecma_ast::PropKind","",44,null],[12,"body","","",44,null],[13,"Setter","swc_ecma_ast","",44,null],[12,"key","swc_ecma_ast::PropKind","",44,null],[12,"param","","",44,null],[12,"body","","",44,null],[13,"Method","swc_ecma_ast","",44,null],[12,"key","swc_ecma_ast::PropKind","",44,null],[12,"function","","",44,null],[4,"PropName","swc_ecma_ast","",null,null],[13,"Ident","","",45,null],[13,"Str","","String literal.",45,null],[13,"Num","","Numeric literal.",45,null],[13,"Computed","","",45,null],[4,"StmtKind","","",null,null],[13,"Expr","","",46,null],[13,"Block","","",46,null],[13,"Empty","","",46,null],[13,"Debugger","","",46,null],[13,"With","","",46,null],[12,"obj","swc_ecma_ast::StmtKind","",46,null],[12,"body","","",46,null],[13,"Return","swc_ecma_ast","",46,null],[12,"arg","swc_ecma_ast::StmtKind","",46,null],[13,"Labeled","swc_ecma_ast","",46,null],[12,"label","swc_ecma_ast::StmtKind","",46,null],[12,"body","","",46,null],[13,"Break","swc_ecma_ast","",46,null],[12,"label","swc_ecma_ast::StmtKind","",46,null],[13,"Continue","swc_ecma_ast","",46,null],[12,"label","swc_ecma_ast::StmtKind","",46,null],[13,"If","swc_ecma_ast","",46,null],[12,"test","swc_ecma_ast::StmtKind","",46,null],[12,"consequent","","",46,null],[12,"alt","","",46,null],[13,"Switch","swc_ecma_ast","",46,null],[12,"discriminant","swc_ecma_ast::StmtKind","",46,null],[12,"cases","","",46,null],[13,"Throw","swc_ecma_ast","",46,null],[12,"arg","swc_ecma_ast::StmtKind","",46,null],[13,"Try","swc_ecma_ast","A try statement. If handler is null then finalizer must be a BlockStmt.",46,null],[12,"block","swc_ecma_ast::StmtKind","",46,null],[12,"handler","","",46,null],[12,"finalizer","","",46,null],[13,"While","swc_ecma_ast","",46,null],[12,"test","swc_ecma_ast::StmtKind","",46,null],[12,"body","","",46,null],[13,"DoWhile","swc_ecma_ast","",46,null],[12,"test","swc_ecma_ast::StmtKind","",46,null],[12,"body","","",46,null],[13,"For","swc_ecma_ast","",46,null],[12,"init","swc_ecma_ast::StmtKind","VarDecl | Expr | null",46,null],[12,"test","","",46,null],[12,"update","","",46,null],[12,"body","","",46,null],[13,"ForIn","swc_ecma_ast","",46,null],[12,"left","swc_ecma_ast::StmtKind","",46,null],[12,"right","","",46,null],[12,"body","","",46,null],[13,"ForOf","swc_ecma_ast","",46,null],[12,"left","swc_ecma_ast::StmtKind","",46,null],[12,"right","","",46,null],[12,"body","","",46,null],[13,"Decl","swc_ecma_ast","",46,null],[4,"VarDeclOrPat","","",null,null],[13,"VarDecl","","",47,null],[13,"Pat","","",47,null],[4,"VarDeclOrExpr","","",null,null],[13,"VarDecl","","",48,null],[13,"Expr","","",48,null],[0,"macros","","",null,null],[0,"class","","",null,null],[3,"Class","swc_ecma_ast::class","",null,null],[12,"span","","",0,null],[12,"super_class","","",0,null],[12,"body","","",0,null],[3,"ClassMethod","","",null,null],[12,"key","","",1,null],[12,"function","","",1,null],[12,"kind","","",1,null],[12,"is_static","","",1,null],[4,"ClassMethodKind","","",null,null],[13,"Constructor","","",25,null],[13,"Method","","",25,null],[13,"Getter","","",25,null],[13,"Setter","","",25,null],[11,"fold_children","swc_ecma_ast","",0,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"fold_children","","",1,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"classmethod"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"classmethod"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"classmethod"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"classmethodkind"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"classmethodkind"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",25,null],[11,"hash","","",25,null],[11,"fold_children","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"decl","","",null,null],[3,"ClassDecl","swc_ecma_ast::decl","",null,null],[12,"ident","","",2,null],[12,"class","","",2,null],[3,"VarDecl","","",null,null],[12,"span","","",3,null],[12,"kind","","",3,null],[12,"decls","","",3,null],[3,"VarDeclarator","","",null,null],[12,"span","","",4,null],[12,"name","","",4,null],[12,"init","","Initialization expresion.",4,null],[4,"Decl","","",null,null],[13,"Class","","",26,null],[13,"Fn","","",26,null],[12,"ident","swc_ecma_ast::decl::Decl","",26,null],[12,"function","","",26,null],[13,"Var","swc_ecma_ast::decl","",26,null],[4,"VarDeclKind","","",null,null],[13,"Var","","",27,null],[13,"Let","","",27,null],[13,"Const","","",27,null],[11,"fold_children","swc_ecma_ast","",26,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"decl"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"bool"}}],[11,"span","","",26,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fold_children","","",2,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"classdecl"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"classdecl"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"classdecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",3,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vardecl"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"vardecl"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"vardecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",27,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vardeclkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"vardeclkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",4,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vardeclarator"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"vardeclarator"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"vardeclarator"}],"output":{"name":"bool"}}],[0,"expr","","",null,null],[3,"Expr","swc_ecma_ast::expr","",null,null],[12,"span","","",5,null],[12,"node","","",5,null],[3,"FnExpr","","Function expression.",null,null],[12,"ident","","",6,null],[12,"function","","",6,null],[3,"ClassExpr","","Class expression.",null,null],[12,"ident","","",7,null],[12,"class","","",7,null],[3,"TplLit","","",null,null],[12,"tag","","",8,null],[12,"exprs","","",8,null],[12,"quasis","","",8,null],[3,"TplElement","","",null,null],[12,"tail","","",9,null],[12,"cooked","","",9,null],[12,"raw","","",9,null],[4,"ExprKind","","",null,null],[13,"This","","",28,null],[13,"Array","","",28,null],[12,"elems","swc_ecma_ast::expr::ExprKind","",28,null],[13,"Object","swc_ecma_ast::expr","",28,null],[12,"props","swc_ecma_ast::expr::ExprKind","",28,null],[13,"Function","swc_ecma_ast::expr","",28,null],[13,"Unary","","",28,null],[12,"op","swc_ecma_ast::expr::ExprKind","",28,null],[12,"prefix","","",28,null],[12,"arg","","",28,null],[13,"Update","swc_ecma_ast::expr","`++v`, `--v`, `v++`, `v--`",28,null],[12,"op","swc_ecma_ast::expr::ExprKind","",28,null],[12,"prefix","","",28,null],[12,"arg","","",28,null],[13,"Binary","swc_ecma_ast::expr","",28,null],[12,"op","swc_ecma_ast::expr::ExprKind","",28,null],[12,"left","","",28,null],[12,"right","","",28,null],[13,"Assign","swc_ecma_ast::expr","",28,null],[12,"op","swc_ecma_ast::expr::ExprKind","",28,null],[12,"left","","Pattern | Expr",28,null],[12,"right","","",28,null],[13,"Member","swc_ecma_ast::expr","A member expression. If computed is true, the node corresponds to a computed (a[b]) member expression and property is an Expression. If computed is false, the node corresponds to a static (a.b) member expression and property is an Identifier.",28,null],[12,"obj","swc_ecma_ast::expr::ExprKind","",28,null],[12,"prop","","",28,null],[12,"computed","","",28,null],[13,"Cond","swc_ecma_ast::expr","true ? 'a' : 'b'",28,null],[12,"test","swc_ecma_ast::expr::ExprKind","",28,null],[12,"cons","","",28,null],[12,"alt","","",28,null],[13,"Call","swc_ecma_ast::expr","",28,null],[12,"callee","swc_ecma_ast::expr::ExprKind","",28,null],[12,"args","","",28,null],[13,"New","swc_ecma_ast::expr","`new Cat()`",28,null],[12,"callee","swc_ecma_ast::expr::ExprKind","",28,null],[12,"args","","`None` for `new Cat`.",28,null],[13,"Seq","swc_ecma_ast::expr","",28,null],[12,"exprs","swc_ecma_ast::expr::ExprKind","",28,null],[13,"Ident","swc_ecma_ast::expr","",28,null],[13,"Lit","","",28,null],[13,"Tpl","","",28,null],[13,"Arrow","","",28,null],[12,"params","swc_ecma_ast::expr::ExprKind","",28,null],[12,"body","","",28,null],[12,"is_generator","","",28,null],[12,"is_async","","",28,null],[13,"Class","swc_ecma_ast::expr","",28,null],[13,"Yield","","",28,null],[12,"arg","swc_ecma_ast::expr::ExprKind","",28,null],[12,"delegate","","",28,null],[13,"MetaProp","swc_ecma_ast::expr","",28,null],[12,"meta","swc_ecma_ast::expr::ExprKind","",28,null],[12,"prop","","",28,null],[13,"Await","swc_ecma_ast::expr","",28,null],[12,"arg","swc_ecma_ast::expr::ExprKind","",28,null],[13,"Paren","swc_ecma_ast::expr","",28,null],[4,"ExprOrSuper","","",null,null],[13,"Super","","",29,null],[13,"Expr","","",29,null],[4,"ExprOrSpread","","",null,null],[13,"Expr","","",30,null],[13,"Spread","","",30,null],[4,"BlockStmtOrExpr","","",null,null],[13,"BlockStmt","","",31,null],[13,"Expr","","",31,null],[4,"PatOrExpr","","",null,null],[13,"Pat","","",32,null],[13,"Expr","","",32,null],[4,"BinaryOp","","",null,null],[13,"EqEq","","`==`",33,null],[13,"NotEq","","`!=`",33,null],[13,"EqEqEq","","`===\"`",33,null],[13,"NotEqEq","","`!==`",33,null],[13,"Lt","","`<`",33,null],[13,"LtEq","","`<=`",33,null],[13,"Gt","","`>`",33,null],[13,"GtEq","","`>=`",33,null],[13,"LShift","","`<<`",33,null],[13,"RShift","","`>>`",33,null],[13,"ZeroFillRShift","","`>>>`",33,null],[13,"Add","","`+`",33,null],[13,"Sub","","`-`",33,null],[13,"Mul","","`*`",33,null],[13,"Div","","`/`",33,null],[13,"Mod","","`%`",33,null],[13,"BitOr","","`|`",33,null],[13,"BitXor","","`^`",33,null],[13,"BitAnd","","`&`",33,null],[13,"LogicalOr","","`||`",33,null],[13,"LogicalAnd","","`&&`",33,null],[13,"In","","`in`",33,null],[13,"InstanceOf","","`instanceof`",33,null],[13,"Exp","","`**`",33,null],[4,"UpdateOp","","",null,null],[13,"PlusPlus","","`++`",34,null],[13,"MinusMinus","","`--`",34,null],[4,"UnaryOp","","",null,null],[13,"Minus","","`-`",35,null],[13,"Plus","","`+`",35,null],[13,"Bang","","`!`",35,null],[13,"Tilde","","`~`",35,null],[13,"TypeOf","","`typeof`",35,null],[13,"Void","","`void`",35,null],[13,"Delete","","`delete`",35,null],[4,"AssignOp","","",null,null],[13,"Assign","","`=`",36,null],[13,"AddAssign","","`+=`",36,null],[13,"SubAssign","","`-=`",36,null],[13,"MulAssign","","`*=`",36,null],[13,"DivAssign","","`/=`",36,null],[13,"ModAssign","","`%=`",36,null],[13,"LShiftAssign","","`<<=`",36,null],[13,"RShiftAssign","","`>>=`",36,null],[13,"ZeroFillRShiftAssign","","`>>>=`",36,null],[13,"BitOrAssign","","`|=`",36,null],[13,"BitXorAssign","","`^=`",36,null],[13,"BitAndAssign","","`&=`",36,null],[13,"ExpAssign","","`**=`",36,null],[11,"fold_children","swc_ecma_ast","",5,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",5,{"inputs":[{"name":"exprkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",28,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",6,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fnexpr"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fnexpr"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fnexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",7,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"classexpr"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"classexpr"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"classexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",8,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tpllit"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"tpllit"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"tpllit"}],"output":{"name":"bool"}}],[11,"fold_children","","",9,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"tplelement"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"tplelement"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"tplelement"}],"output":{"name":"bool"}}],[11,"fold_children","","",29,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"exprorsuper"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"exprorsuper"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"exprorsuper"}],"output":{"name":"bool"}}],[11,"span","","",29,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fold_children","","",30,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"exprorspread"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"exprorspread"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"exprorspread"}],"output":{"name":"bool"}}],[11,"fold_children","","",31,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"blockstmtorexpr"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"blockstmtorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"blockstmtorexpr"}],"output":{"name":"bool"}}],[11,"span","","",31,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fold_children","","",32,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"patorexpr"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"patorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"patorexpr"}],"output":{"name":"bool"}}],[11,"precedence","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"binaryop"}}],[11,"assert_receiver_is_total_eq","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"fold_children","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_children","","",34,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"updateop"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"updateop"}],"output":{"name":"bool"}}],[11,"fold_children","","",35,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unaryop"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"unaryop"}],"output":{"name":"bool"}}],[11,"fold_children","","",36,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assignop"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"bool"}}],[0,"function","","",null,null],[3,"Function","swc_ecma_ast::function","Common parts of function and method.",null,null],[12,"params","","",10,null],[12,"span","","",10,null],[12,"body","","",10,null],[12,"is_generator","","",10,null],[12,"is_async","","",10,null],[11,"fold_children","swc_ecma_ast","",10,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[0,"lit","","",null,null],[3,"Regex","swc_ecma_ast::lit","",null,null],[12,"exp","","",11,null],[12,"flags","","",11,null],[3,"Number","","",null,null],[12,"0","","",12,null],[4,"Lit","","",null,null],[13,"Str","","",37,null],[13,"Bool","","",37,null],[13,"Null","","",37,null],[13,"Num","","",37,null],[13,"Regex","","",37,null],[6,"RegexFlags","","",null,null],[11,"fold_children","swc_ecma_ast","",37,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"fold_children","","",11,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"fold_children","","",12,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"module","","",null,null],[3,"Module","swc_ecma_ast::module","",null,null],[12,"body","","",13,null],[4,"ModuleItem","","",null,null],[13,"Stmt","","",38,null],[13,"ModuleDecl","","",38,null],[11,"fold_children","swc_ecma_ast","",13,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"module"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"fold_children","","",38,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"moduleitem"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"moduleitem"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"moduleitem"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",38,{"inputs":[{"name":"stmtkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"stmt"}],"output":{"name":"self"}}],[0,"module_decl","","",null,null],[3,"ModuleDecl","swc_ecma_ast::module_decl","",null,null],[12,"span","","",14,null],[12,"node","","",14,null],[3,"ImportSpecifier","","",null,null],[12,"span","","",15,null],[12,"local","","",15,null],[12,"node","","",15,null],[3,"ExportSpecifier","","",null,null],[12,"orig","","`foo` in `export { foo as bar }`",16,null],[12,"exported","","`Some(bar)` in `export { foo as bar }`",16,null],[4,"ModuleDeclKind","","",null,null],[13,"Import","","",39,null],[12,"specifiers","swc_ecma_ast::module_decl::ModuleDeclKind","",39,null],[12,"src","","",39,null],[13,"ExportDecl","swc_ecma_ast::module_decl","",39,null],[13,"ExportNamed","","`export { foo } from 'mod'` `export { foo as bar } from 'mod'`",39,null],[12,"specifiers","swc_ecma_ast::module_decl::ModuleDeclKind","",39,null],[12,"src","","",39,null],[13,"ExportDefaultDecl","swc_ecma_ast::module_decl","",39,null],[13,"ExportDefaultExpr","","",39,null],[13,"ExportAll","","`export * from 'mod'`",39,null],[12,"src","swc_ecma_ast::module_decl::ModuleDeclKind","",39,null],[4,"ExportDefaultDecl","swc_ecma_ast::module_decl","",null,null],[13,"Class","","",40,null],[12,"ident","swc_ecma_ast::module_decl::ExportDefaultDecl","",40,null],[12,"class","","",40,null],[13,"Fn","swc_ecma_ast::module_decl","",40,null],[12,"ident","swc_ecma_ast::module_decl::ExportDefaultDecl","",40,null],[12,"function","","",40,null],[13,"Var","swc_ecma_ast::module_decl","",40,null],[4,"ImportSpecifierKind","","",null,null],[13,"Specific","","e.g. local = foo, imported = None `import { foo } from 'mod.js'` e.g. local = bar, imported = Some(foo) for `import { foo as bar } from 'mod.js'`",41,null],[12,"imported","swc_ecma_ast::module_decl::ImportSpecifierKind","",41,null],[13,"Default","swc_ecma_ast::module_decl","e.g. `import foo from 'mod.js'`",41,null],[13,"Namespace","","e.g. `import * as foo from 'mod.js'`.",41,null],[11,"fold_children","swc_ecma_ast","",14,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"moduledecl"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"moduledecl"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"moduledecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",39,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"moduledeclkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"moduledeclkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"moduledeclkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",40,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"exportdefaultdecl"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"exportdefaultdecl"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"exportdefaultdecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",15,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"importspecifier"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"bool"}}],[11,"fold_children","","",41,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"importspecifierkind"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"importspecifierkind"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"importspecifierkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",16,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exportspecifier"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"exportspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"exportspecifier"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",14,{"inputs":[{"name":"moduledeclkind"},{"name":"span"}],"output":{"name":"self"}}],[0,"pat","","",null,null],[3,"Pat","swc_ecma_ast::pat","",null,null],[12,"span","","",17,null],[12,"node","","",17,null],[4,"PatKind","","",null,null],[13,"Ident","","",42,null],[13,"Array","","",42,null],[13,"Rest","","",42,null],[13,"Object","","",42,null],[12,"props","swc_ecma_ast::pat::PatKind","",42,null],[13,"Assign","swc_ecma_ast::pat","",42,null],[12,"left","swc_ecma_ast::pat::PatKind","",42,null],[12,"right","","",42,null],[13,"Expr","swc_ecma_ast::pat","Only for for-in / for-of loops. This is syntatically valid.",42,null],[4,"ObjectPatProp","","",null,null],[13,"KeyValue","","`{key: value}`",43,null],[12,"key","swc_ecma_ast::pat::ObjectPatProp","",43,null],[12,"value","","",43,null],[13,"Assign","swc_ecma_ast::pat","`{key}` or `{key = value}`",43,null],[12,"key","swc_ecma_ast::pat::ObjectPatProp","",43,null],[12,"value","","",43,null],[11,"fold_children","swc_ecma_ast","",17,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",17,{"inputs":[{"name":"patkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",42,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",43,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"objectpatprop"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"objectpatprop"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"objectpatprop"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[0,"prop","","",null,null],[3,"Prop","swc_ecma_ast::prop","",null,null],[12,"span","","",18,null],[12,"node","","",18,null],[4,"PropKind","","",null,null],[13,"Shorthand","","`a` in `{ a, }`",44,null],[13,"KeyValue","","`key: value` in `{ key: value, }`",44,null],[12,"key","swc_ecma_ast::prop::PropKind","",44,null],[12,"value","","",44,null],[13,"Assign","swc_ecma_ast::prop","This is invalid for object literal.",44,null],[12,"key","swc_ecma_ast::prop::PropKind","",44,null],[12,"value","","",44,null],[13,"Getter","swc_ecma_ast::prop","",44,null],[12,"key","swc_ecma_ast::prop::PropKind","",44,null],[12,"body","","",44,null],[13,"Setter","swc_ecma_ast::prop","",44,null],[12,"key","swc_ecma_ast::prop::PropKind","",44,null],[12,"param","","",44,null],[12,"body","","",44,null],[13,"Method","swc_ecma_ast::prop","",44,null],[12,"key","swc_ecma_ast::prop::PropKind","",44,null],[12,"function","","",44,null],[4,"PropName","swc_ecma_ast::prop","",null,null],[13,"Ident","","",45,null],[13,"Str","","String literal.",45,null],[13,"Num","","Numeric literal.",45,null],[13,"Computed","","",45,null],[11,"fold_children","swc_ecma_ast","",18,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prop"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"prop"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"prop"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",18,{"inputs":[{"name":"propkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",44,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"propkind"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"propkind"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"propkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",45,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"propname"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"propname"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"propname"}],"output":{"name":"bool"}}],[11,"from","","",45,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"new_shorthand","","",18,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[0,"stmt","","",null,null],[3,"Stmt","swc_ecma_ast::stmt","",null,null],[12,"span","","",19,null],[12,"node","","",19,null],[3,"BlockStmt","","Use when only block statements are allowed.",null,null],[12,"span","","Span of brace.",20,null],[12,"stmts","","",20,null],[3,"SwitchCase","","",null,null],[12,"test","","None for `default:`",21,null],[12,"consequent","","",21,null],[3,"CatchClause","","",null,null],[12,"param","","",22,null],[12,"body","","",22,null],[4,"StmtKind","","",null,null],[13,"Expr","","",46,null],[13,"Block","","",46,null],[13,"Empty","","",46,null],[13,"Debugger","","",46,null],[13,"With","","",46,null],[12,"obj","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"body","","",46,null],[13,"Return","swc_ecma_ast::stmt","",46,null],[12,"arg","swc_ecma_ast::stmt::StmtKind","",46,null],[13,"Labeled","swc_ecma_ast::stmt","",46,null],[12,"label","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"body","","",46,null],[13,"Break","swc_ecma_ast::stmt","",46,null],[12,"label","swc_ecma_ast::stmt::StmtKind","",46,null],[13,"Continue","swc_ecma_ast::stmt","",46,null],[12,"label","swc_ecma_ast::stmt::StmtKind","",46,null],[13,"If","swc_ecma_ast::stmt","",46,null],[12,"test","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"consequent","","",46,null],[12,"alt","","",46,null],[13,"Switch","swc_ecma_ast::stmt","",46,null],[12,"discriminant","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"cases","","",46,null],[13,"Throw","swc_ecma_ast::stmt","",46,null],[12,"arg","swc_ecma_ast::stmt::StmtKind","",46,null],[13,"Try","swc_ecma_ast::stmt","A try statement. If handler is null then finalizer must be a BlockStmt.",46,null],[12,"block","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"handler","","",46,null],[12,"finalizer","","",46,null],[13,"While","swc_ecma_ast::stmt","",46,null],[12,"test","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"body","","",46,null],[13,"DoWhile","swc_ecma_ast::stmt","",46,null],[12,"test","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"body","","",46,null],[13,"For","swc_ecma_ast::stmt","",46,null],[12,"init","swc_ecma_ast::stmt::StmtKind","VarDecl | Expr | null",46,null],[12,"test","","",46,null],[12,"update","","",46,null],[12,"body","","",46,null],[13,"ForIn","swc_ecma_ast::stmt","",46,null],[12,"left","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"right","","",46,null],[12,"body","","",46,null],[13,"ForOf","swc_ecma_ast::stmt","",46,null],[12,"left","swc_ecma_ast::stmt::StmtKind","",46,null],[12,"right","","",46,null],[12,"body","","",46,null],[13,"Decl","swc_ecma_ast::stmt","",46,null],[4,"VarDeclOrPat","","",null,null],[13,"VarDecl","","",47,null],[13,"Pat","","",47,null],[4,"VarDeclOrExpr","","",null,null],[13,"VarDecl","","",48,null],[13,"Expr","","",48,null],[11,"fold_children","swc_ecma_ast","",19,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"from","","",19,{"inputs":[{"name":"decl"}],"output":{"name":"self"}}],[11,"from_unspanned","","",19,{"inputs":[{"name":"stmtkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",20,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"blockstmt"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"blockstmt"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"blockstmt"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",20,{"inputs":[{"generics":["stmt"],"name":"vec"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",46,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",21,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"switchcase"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"bool"}}],[11,"fold_children","","",22,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"catchclause"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"bool"}}],[11,"fold_children","","",47,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"vardeclorpat"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"vardeclorpat"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"vardeclorpat"}],"output":{"name":"bool"}}],[11,"fold_children","","",48,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vardeclorexpr"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"vardeclorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"vardeclorexpr"}],"output":{"name":"bool"}}],[6,"RegexFlags","","",null,null],[11,"fold_children","","",23,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_unspanned","","",23,{"inputs":[{"name":"jsword"},{"name":"span"}],"output":{"name":"self"}}],[14,"op","","Unary +,- is `op!(unary, \"+\")`, `op!(unary, \"-\")`. Binary +,- is `op!(bin, \"+\")`, `op!(bin, \"-\")`.",null,null]],"paths":[[3,"Class"],[3,"ClassMethod"],[3,"ClassDecl"],[3,"VarDecl"],[3,"VarDeclarator"],[3,"Expr"],[3,"FnExpr"],[3,"ClassExpr"],[3,"TplLit"],[3,"TplElement"],[3,"Function"],[3,"Regex"],[3,"Number"],[3,"Module"],[3,"ModuleDecl"],[3,"ImportSpecifier"],[3,"ExportSpecifier"],[3,"Pat"],[3,"Prop"],[3,"Stmt"],[3,"BlockStmt"],[3,"SwitchCase"],[3,"CatchClause"],[3,"Ident"],[3,"DebugUsingDisplay"],[4,"ClassMethodKind"],[4,"Decl"],[4,"VarDeclKind"],[4,"ExprKind"],[4,"ExprOrSuper"],[4,"ExprOrSpread"],[4,"BlockStmtOrExpr"],[4,"PatOrExpr"],[4,"BinaryOp"],[4,"UpdateOp"],[4,"UnaryOp"],[4,"AssignOp"],[4,"Lit"],[4,"ModuleItem"],[4,"ModuleDeclKind"],[4,"ExportDefaultDecl"],[4,"ImportSpecifierKind"],[4,"PatKind"],[4,"ObjectPatProp"],[4,"PropKind"],[4,"PropName"],[4,"StmtKind"],[4,"VarDeclOrPat"],[4,"VarDeclOrExpr"]]};
searchIndex["swc_ecma_parser"] = {"doc":"","items":[[0,"macros","swc_ecma_parser","",null,null],[0,"error","","",null,null],[4,"SyntaxError","swc_ecma_parser::error","",null,null],[13,"InvalidIdentInStrict","","\"implements\", \"interface\", \"let\", \"package\",\\ \"private\", \"protected\",  \"public\", \"static\", or \"yield\"",0,null],[13,"EvalAndArgumentsInStrict","","'eval' and 'arguments' are invalid identfier in strict mode.",0,null],[13,"UnaryInExp","","",0,null],[13,"LineBreakInThrow","","",0,null],[13,"Expected","","",0,null],[13,"AwaitStar","","\"await* has been removed from the async functions proposal. Use Promise.all() instead.\"",0,null],[13,"ReservedWordInObjShorthandOrPat","","\"cannot use a reserved word as a shorthand property\"",0,null],[13,"MultipleDefault","","",0,null],[13,"CommaAfterRestElement","","",0,null],[13,"NonLastRestParam","","",0,null],[13,"SpreadInParenExpr","","",0,null],[13,"EmptyParenExpr","","`()`",0,null],[13,"ExpectedIdent","","",0,null],[13,"ExpctedSemi","","",0,null],[13,"DuplicateLabel","","",0,null],[13,"AsyncGenerator","","",0,null],[13,"NonTopLevelImportExport","","",0,null],[13,"PatVarWithoutInit","","Destructuring bindings require initializers.",0,null],[12,"span","swc_ecma_parser::error::SyntaxError","",0,null],[11,"fmt","swc_ecma_parser::error","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lexer","swc_ecma_parser","ECMAScript lexer.",null,null],[3,"Options","swc_ecma_parser::lexer","",null,null],[12,"fn_bind","","Support function bind expression.",1,null],[12,"strict","","",1,null],[12,"num_sep","","Support numeric separator.",1,null],[12,"module","","",1,null],[3,"Lexer","","",null,null],[12,"logger","","",2,null],[12,"input","","",2,null],[12,"opts","","",2,null],[12,"state","","",2,null],[4,"Error","","",null,null],[13,"Input","","",3,null],[12,"err","swc_ecma_parser::lexer::Error","",3,null],[13,"UnterminatedStrLit","swc_ecma_parser::lexer","",3,null],[12,"start","swc_ecma_parser::lexer::Error","",3,null],[13,"ExpectedUnicodeEscape","swc_ecma_parser::lexer","",3,null],[12,"pos","swc_ecma_parser::lexer::Error","",3,null],[13,"EscapeInReservedWord","swc_ecma_parser::lexer","",3,null],[12,"word","swc_ecma_parser::lexer::Error","",3,null],[13,"UnterminatedRegxp","swc_ecma_parser::lexer","",3,null],[12,"start","swc_ecma_parser::lexer::Error","",3,null],[13,"IdentAfterNum","swc_ecma_parser::lexer","",3,null],[12,"pos","swc_ecma_parser::lexer::Error","",3,null],[13,"DecimalStartsWithZero","swc_ecma_parser::lexer","",3,null],[12,"start","swc_ecma_parser::lexer::Error","",3,null],[13,"ImplicitOctalOnStrict","swc_ecma_parser::lexer","",3,null],[12,"start","swc_ecma_parser::lexer::Error","",3,null],[13,"UnexpectedChar","swc_ecma_parser::lexer","",3,null],[12,"pos","swc_ecma_parser::lexer::Error","",3,null],[12,"c","","",3,null],[13,"InvalidStrEscape","swc_ecma_parser::lexer","",3,null],[12,"start","swc_ecma_parser::lexer::Error","",3,null],[13,"InvalidUnicodeEscape","swc_ecma_parser::lexer","",3,null],[12,"pos","swc_ecma_parser::lexer::Error","",3,null],[13,"InvalidCodePoint","swc_ecma_parser::lexer","",3,null],[12,"pos","swc_ecma_parser::lexer::Error","",3,null],[13,"InvalidIdentChar","swc_ecma_parser::lexer","",3,null],[12,"pos","swc_ecma_parser::lexer::Error","",3,null],[0,"macros","swc_ecma_parser::lexer","",null,null],[0,"input","","",null,null],[3,"LexerInput","swc_ecma_parser::lexer::input","Used inside lexer.",null,null],[12,"cur","","",4,null],[12,"last_pos","","",4,null],[12,"input","","",4,null],[3,"CharIndices","","",null,null],[12,"0","","",5,null],[8,"Input","","",null,null],[16,"Error","","",6,null],[10,"peek","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peek_ahead","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"uncons_while","","Takes items from stream, testing each one with predicate. returns the range of items which passed predicate.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["str"],"name":"option"}}],[11,"new","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"bump","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"peek_ahead","","Get char at `cur + 2`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"current","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"cur_pos","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"last_pos","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"peek","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_ahead","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"uncons_while","","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"number","swc_ecma_parser::lexer","Lexer methods related to reading numbers.",null,null],[11,"read_number","","Reads an integer, octal integer, or floating-point number",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["number","error"],"name":"result"}}],[11,"read_radix_number","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["number","error"],"name":"result"}}],[11,"read_number_no_dot","","This can read long integers like \"13612536612375123612312312312312312312312\".",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["f64","error"],"name":"result"}}],[11,"ensure_not_ident","","Ensure that ident cannot directly follow numbers.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_int","","Read an integer in the given radix. Return `None` if zero digits were read, the integer value otherwise. When `len` is not zero, this will return `None` unless the integer has exactly `len` digits.",2,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"read_digits","","`op`- |total, radix, value| -> (total * radix + value, continue)",2,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"make_legacy_octal","","",2,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f64"}],"output":{"generics":["number","error"],"name":"result"}}],[0,"state","","",null,null],[3,"State","swc_ecma_parser::lexer::state","State of lexer.",null,null],[12,"is_expr_allowed","","",7,null],[12,"octal_pos","","",7,null],[12,"had_line_break","","if line break exists between previous token and new token?",7,null],[12,"is_first","","TODO: Remove this field.",7,null],[12,"context","","",7,null],[12,"token_type","","",7,null],[3,"Context","","",null,null],[12,"0","","",8,null],[4,"Type","","The algorithm used to determine whether a regexp can appear at a given point in the program is loosely based on sweet.js' approach. See https://github.com/mozilla/sweet.js/wiki/design",null,null],[13,"BraceStmt","","",9,null],[13,"BraceExpr","","",9,null],[13,"TplQuasi","","",9,null],[13,"ParenStmt","","",9,null],[12,"is_for_loop","swc_ecma_parser::lexer::state::Type","Is this `for` loop?",9,null],[13,"ParenExpr","swc_ecma_parser::lexer::state","",9,null],[13,"Tpl","","",9,null],[13,"FnExpr","","",9,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","swc_ecma_parser::lexer","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","swc_ecma_parser::lexer::state","",7,{"inputs":[],"output":{"name":"self"}}],[11,"can_skip_space","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_in_template","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"last_was_tpl_element","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update","","",7,{"inputs":[{"name":"self"},{"name":"logger"},{"name":"token"}],"output":null}],[11,"is_expr_allowed_on_next","","`is_expr_allowed`: previous value.",7,{"inputs":[{"name":"logger"},{"name":"context"},{"generics":["token"],"name":"option"},{"name":"token"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"context"}}],[11,"is_brace_block","","Returns true if following `LBrace` token is `block statement` according to `ctx`, `prev`, `is_expr_allowed`.",8,{"inputs":[{"name":"self"},{"generics":["token"],"name":"option"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop","","",8,{"inputs":[{"name":"self"},{"name":"logger"}],"output":{"generics":["type"],"name":"option"}}],[11,"current","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"push","","",8,{"inputs":[{"name":"self"},{"name":"logger"},{"name":"type"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",9,null],[11,"is_expr","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"preserve_space","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"util","swc_ecma_parser::lexer","Ported from [babylon/util/identifier.js][]",null,null],[17,"BACKSPACE","swc_ecma_parser::lexer::util","",null,null],[17,"SHIFT_OUT","","",null,null],[17,"OGHAM_SPACE_MARK","","",null,null],[17,"LINE_FEED","","",null,null],[17,"LINE_SEPARATOR","","",null,null],[17,"PARAGRAPH_SEPARATOR","","",null,null],[8,"CharExt","","Implemented for `char`.",null,null],[10,"to_char","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"is_ident_start","","Test whether a given character code starts an identifier.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ident_part","","Test whether a given character is part of an identifier.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_line_break","","See https://tc39.github.io/ecma262/#sec-line-terminators",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ws","","See https://tc39.github.io/ecma262/#sec-white-space",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_space","swc_ecma_parser::lexer","Skip comments or whitespaces.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"skip_line_comment","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"skip_block_comment","","Expects current char to be '/' and next char to be '*'.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"hash","","",3,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"options"}}],[11,"new","","",2,{"inputs":[{"name":"logger"},{"name":"i"}],"output":{"name":"self"}}],[11,"new_with","","",2,{"inputs":[{"name":"logger"},{"name":"options"},{"name":"i"}],"output":{"name":"self"}}],[11,"read_token","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"read_escaped_char","","Read an escaped charater for string literal.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"read_slash","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"read_token_lt_gt","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"read_ident_or_keyword","","See https://tc39.github.io/ecma262/#sec-names-and-keywords",2,{"inputs":[{"name":"self"}],"output":{"generics":["token","error"],"name":"result"}}],[11,"may_read_word_as_str","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"read_word_as_str","","returns (word, has_escape)",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_unicode_escape","","",2,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["char","error"],"name":"result"}}],[11,"read_hex_char","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["char","error"],"name":"result"}}],[11,"read_code_point","","Read `CodePoint`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["char","error"],"name":"result"}}],[11,"read_str_lit","","See https://tc39.github.io/ecma262/#sec-literals-string-literals",2,{"inputs":[{"name":"self"}],"output":{"generics":["token","error"],"name":"result"}}],[11,"read_regexp","","Expects current char to be '/'",2,{"inputs":[{"name":"self"}],"output":{"generics":["token","error"],"name":"result"}}],[11,"read_tmpl_token","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["token","error"],"name":"result"}}],[11,"had_line_break_before_last","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_from_str","","",2,{"inputs":[{"name":"logger"},{"name":"str"}],"output":{"name":"self"}}],[0,"token","swc_ecma_parser","Ported from [babel/bablyon][]",null,null],[4,"AssignOpToken","swc_ecma_parser::token","",null,null],[13,"Assign","","`=`",11,null],[13,"AddAssign","","`+=`",11,null],[13,"SubAssign","","`-=`",11,null],[13,"MulAssign","","`*=`",11,null],[13,"DivAssign","","`/=`",11,null],[13,"ModAssign","","`%=`",11,null],[13,"LShiftAssign","","`<<=`",11,null],[13,"RShiftAssign","","`>>=`",11,null],[13,"ZeroFillRShiftAssign","","`>>>=`",11,null],[13,"BitOrAssign","","`|=`",11,null],[13,"BitXorAssign","","`^=`",11,null],[13,"BitAndAssign","","`&=`",11,null],[13,"ExpAssign","","`**=`",11,null],[3,"Number","","",null,null],[12,"0","","",12,null],[3,"TokenAndSpan","","",null,null],[12,"token","","",13,null],[12,"span","","",13,null],[4,"Token","","",null,null],[13,"Word","","Identifier, \"null\", \"true\", \"false\".",14,null],[13,"Arrow","","'=>'",14,null],[13,"At","","'@'",14,null],[13,"Dot","","'.'",14,null],[13,"DotDotDot","","'...'",14,null],[13,"Bang","","'!'",14,null],[13,"LParen","","'('",14,null],[13,"RParen","","')'",14,null],[13,"LBracket","","`[`",14,null],[13,"RBracket","","']'",14,null],[13,"LBrace","","'{'",14,null],[13,"RBrace","","'}'",14,null],[13,"Semi","","';'",14,null],[13,"Comma","","','",14,null],[13,"BackQuote","","'`'",14,null],[13,"Template","","",14,null],[13,"Colon","","':'",14,null],[13,"ColonColon","","'::'",14,null],[13,"BinOp","","",14,null],[13,"AssignOp","","",14,null],[13,"DollarLBrace","","'${'",14,null],[13,"QuestionMark","","'?'",14,null],[13,"PlusPlus","","`++`",14,null],[13,"MinusMinus","","`--`",14,null],[13,"Tilde","","`~`",14,null],[13,"Str","","String literal. bool field is true if it's enclosed by '\"' ( double quote).",14,null],[13,"Regex","","Regexp literal.",14,null],[13,"Num","","TODO: Make Num as enum and separate decimal, binary, ..etc",14,null],[4,"BinOpToken","","",null,null],[13,"EqEq","","`==`",15,null],[13,"NotEq","","`!=`",15,null],[13,"EqEqEq","","`===`",15,null],[13,"NotEqEq","","`!==`",15,null],[13,"Lt","","`<`",15,null],[13,"LtEq","","`<=`",15,null],[13,"Gt","","`>`",15,null],[13,"GtEq","","`>=`",15,null],[13,"LShift","","`<<`",15,null],[13,"RShift","","`>>`",15,null],[13,"ZeroFillRShift","","`>>>`",15,null],[13,"Add","","`+`",15,null],[13,"Sub","","`-`",15,null],[13,"Mul","","`*`",15,null],[13,"Div","","`/`",15,null],[13,"Mod","","`%`",15,null],[13,"BitOr","","`|`",15,null],[13,"BitXor","","`^`",15,null],[13,"BitAnd","","`&`",15,null],[13,"Exp","","`**`",15,null],[13,"LogicalOr","","`||`",15,null],[13,"LogicalAnd","","`&&`",15,null],[4,"Word","","",null,null],[13,"Keyword","","",16,null],[13,"Null","","",16,null],[13,"True","","",16,null],[13,"False","","",16,null],[13,"Ident","","",16,null],[4,"Keyword","","Keywords",null,null],[13,"Await","","Spec says this might be identifier.",17,null],[13,"Break","","",17,null],[13,"Case","","",17,null],[13,"Catch","","",17,null],[13,"Continue","","",17,null],[13,"Debugger","","",17,null],[13,"Default_","","",17,null],[13,"Do","","",17,null],[13,"Else","","",17,null],[13,"Finally","","",17,null],[13,"For","","",17,null],[13,"Function","","",17,null],[13,"If","","",17,null],[13,"Return","","",17,null],[13,"Switch","","",17,null],[13,"Throw","","",17,null],[13,"Try","","",17,null],[13,"Var","","",17,null],[13,"Let","","",17,null],[13,"Const","","",17,null],[13,"While","","",17,null],[13,"With","","",17,null],[13,"New","","",17,null],[13,"This","","",17,null],[13,"Super","","",17,null],[13,"Class","","",17,null],[13,"Extends","","",17,null],[13,"Export","","",17,null],[13,"Import","","",17,null],[13,"Yield","","Spec says this might be identifier.",17,null],[13,"In","","",17,null],[13,"InstanceOf","","",17,null],[13,"TypeOf","","",17,null],[13,"Void","","",17,null],[13,"Delete","","",17,null],[11,"starts_expr","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"before_expr","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"starts_expr","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"assert_receiver_is_total_eq","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"before_expr","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"starts_expr","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"before_expr","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"word"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"hash","","",16,null],[11,"from","","",16,{"inputs":[{"name":"jsword"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"keyword"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_reserved_word","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"before_expr","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"starts_expr","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",17,null],[11,"hash","","",17,null],[11,"follows_keyword_let","","Returns true if `self` can follow keyword let.",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[0,"parser","swc_ecma_parser","",null,null],[3,"Config","swc_ecma_parser::parser","",null,null],[3,"Parser","","EcmaScript parser.",null,null],[12,"logger","","",18,null],[12,"cfg","","",18,null],[12,"ctx","","",18,null],[12,"state","","",18,null],[12,"input","","",18,null],[3,"Context","","",null,null],[12,"strict","","",19,null],[12,"include_in_expr","","",19,null],[12,"in_async","","If true, await expression is parsed, and \"await\" is treated as a keyword.",19,null],[12,"in_generator","","If true, yield expression is parsed, and \"yield\" is treated as a keyword.",19,null],[12,"in_module","","",19,null],[3,"State","","",null,null],[12,"labels","","",20,null],[12,"potential_arrow_start","","Start position of an assignment expression.",20,null],[4,"Error","","",null,null],[13,"Eof","","",21,null],[13,"Syntax","","",21,null],[0,"macros","","",null,null],[0,"class_and_fn","","Parser for function expression and function declaration.",null,null],[8,"OutputType","swc_ecma_parser::parser::class_and_fn","",null,null],[16,"Ident","","",22,null],[10,"finish_fn","","",22,null],[10,"finish_class","","",22,null],[8,"FnBodyParser","","",null,null],[10,"parse_fn_body_inner","","",23,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_async_fn_expr","swc_ecma_parser::parser","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_fn_expr","","Parse function expression",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_async_fn_decl","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["decl"],"name":"presult"}}],[11,"parse_fn_decl","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["decl"],"name":"presult"}}],[11,"parse_default_async_fn","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefaultdecl"],"name":"presult"}}],[11,"parse_default_fn","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefaultdecl"],"name":"presult"}}],[11,"parse_class_decl","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["decl"],"name":"presult"}}],[11,"parse_class_expr","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_default_class","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefaultdecl"],"name":"presult"}}],[11,"parse_class","","",18,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_class_body","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_class_element","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["classmethod"],"name":"presult"}}],[11,"parse_fn","","",18,{"inputs":[{"name":"self"},{"generics":["bytepos"],"name":"option"}],"output":{"name":"presult"}}],[11,"parse_fn_args_body","","`parse_args` closure should not eat '(' or ')'.",18,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["function"],"name":"presult"}}],[11,"parse_method_def","","",18,{"inputs":[{"name":"self"},{"generics":["bytepos"],"name":"option"}],"output":{"generics":["classmethod"],"name":"presult"}}],[11,"parse_fn_body","","",18,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_fn_body_inner","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["blockstmtorexpr"],"name":"presult"}}],[11,"parse_fn_body_inner","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["blockstmt"],"name":"presult"}}],[0,"object","","Parser for object literal.",null,null],[11,"parse_object","","Parse a object literal or object pattern.",18,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_prop_name","","spec: 'PropertyName'",18,{"inputs":[{"name":"self"}],"output":{"generics":["propname"],"name":"presult"}}],[11,"make_object","","",18,{"inputs":[{"name":"span"},{"name":"vec"}],"output":{"generics":["expr"],"name":"box"}}],[11,"parse_object_prop","","spec: 'PropertyDefinition'",18,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"make_object","","",18,{"inputs":[{"name":"span"},{"name":"vec"}],"output":{"name":"pat"}}],[11,"parse_object_prop","","Production 'BindingProperty'",18,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"expr","","",null,null],[0,"ops","swc_ecma_parser::parser::expr","Parser for unary operations and binary operations.",null,null],[11,"parse_bin_expr","swc_ecma_parser::parser","Name from spec: 'LogicalORExpression'",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_bin_op_recursively","","Parse binary operators with the operator precedence parsing algorithm. `left` is the left-hand side of the operator. `minPrec` provides context that allows the function to stop and defer further parser to one of its callers when it encounters an operator that has a lower precedence than the set it is parsing.",18,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"box"},{"name":"u8"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_unary_expr","","Parse unary expression and update expression.",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_await_expr","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_expr","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_assignment_expr","","Parse an assignment expression. This includes applications of operators like `+=`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_cond_expr","","Spec: 'ConditionalExpression'",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_primary_expr","","Parse a primary expression or arrow function",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_array_lit","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_member_expr","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_member_expr_or_new_expr","","`is_new_expr`: true iff we are parsing production 'NewExpression'.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_new_expr","","Parse `NewExpresion`. This includes `MemberExpression`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_args","","Parse `Arguments[Yield, Await]`",18,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_expr_or_spread","","AssignmentExpression[+In, ?Yield, ?Await] ...AssignmentExpression[+In, ?Yield, ?Await]",18,{"inputs":[{"name":"self"}],"output":{"generics":["exprorspread"],"name":"presult"}}],[11,"parse_paren_expr_or_arrow_fn","","Parse paren expression or arrow function expression.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_tpl_lit","","",18,{"inputs":[{"name":"self"},{"generics":["box"],"name":"option"}],"output":{"generics":["tpllit"],"name":"presult"}}],[11,"parse_tpl_element","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["tplelement"],"name":"presult"}}],[11,"parse_subscripts","","",18,{"inputs":[{"name":"self"},{"name":"exprorsuper"},{"name":"bool"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_subscript","","returned bool is true if this method should be called again.",18,{"inputs":[{"name":"self"},{"name":"exprorsuper"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_lhs_expr","","Parse call, dot, and `[]`-subscript expressions.",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_expr_or_pat","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_args_or_pats","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_yield_expr","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_lit","","12.2.5 Array Initializer",18,{"inputs":[{"name":"self"}],"output":{"generics":["lit"],"name":"presult"}}],[0,"ident","","12.1 Identifiers",null,null],[8,"MaybeOptionalIdentParser","swc_ecma_parser::parser::ident","",null,null],[10,"parse_maybe_opt_binding_ident","","",24,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ident_ref","swc_ecma_parser::parser","IdentifierReference",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_label_ident","","LabelIdentifier",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_ident_name","","Use this when spec says \"IdentiferName\". This allows idents like `catch`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_ident","","Identifier",18,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_maybe_opt_binding_ident","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_maybe_opt_binding_ident","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[0,"stmt","","",null,null],[4,"ForHead","swc_ecma_parser::parser::stmt","",null,null],[13,"For","","",25,null],[12,"init","swc_ecma_parser::parser::stmt::ForHead","",25,null],[12,"test","","",25,null],[12,"update","","",25,null],[13,"ForIn","swc_ecma_parser::parser::stmt","",25,null],[12,"left","swc_ecma_parser::parser::stmt::ForHead","",25,null],[12,"right","","",25,null],[13,"ForOf","swc_ecma_parser::parser::stmt","",25,null],[12,"left","swc_ecma_parser::parser::stmt::ForHead","",25,null],[12,"right","","",25,null],[0,"module_item","swc_ecma_parser::parser::stmt","",null,null],[11,"parse_import","swc_ecma_parser::parser","",18,{"inputs":[{"name":"self"}],"output":{"generics":["moduledecl"],"name":"presult"}}],[11,"parse_import_specifier","","Parse `foo`, `foo2 as bar` in `import { foo, foo2 as bar }`",18,{"inputs":[{"name":"self"}],"output":{"generics":["importspecifier"],"name":"presult"}}],[11,"parse_imported_default_binding","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_imported_binding","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_export","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["moduledecl"],"name":"presult"}}],[11,"parse_export_specifier","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["exportspecifier"],"name":"presult"}}],[11,"parse_from_clause_and_semi","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"presult"}}],[11,"accept_import_export","","",18,{"inputs":[],"output":{"name":"bool"}}],[11,"handle_import_export","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["moduleitem"],"name":"presult"}}],[8,"StmtLikeParser","swc_ecma_parser::parser::stmt","",null,null],[10,"accept_import_export","","",26,{"inputs":[],"output":{"name":"bool"}}],[10,"handle_import_export","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_block_body","swc_ecma_parser::parser","",18,{"inputs":[{"name":"self"},{"name":"bool"},{"generics":["token"],"name":"option"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_stmt","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_stmt_list_item","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_stmt_like","","Parse a statement, declaration or module item.",18,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_stmt_internal","","",18,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_if_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_return_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_switch_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_throw_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_try_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_catch_param","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_var_stmt","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["vardecl"],"name":"presult"}}],[11,"parse_var_declarator","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["vardeclarator"],"name":"presult"}}],[11,"parse_do_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_while_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_with_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_block","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["blockstmt"],"name":"presult"}}],[11,"parse_labelled_stmt","","",18,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_for_stmt","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_for_head","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["forhead"],"name":"presult"}}],[11,"parse_for_each_head","","",18,{"inputs":[{"name":"self"},{"name":"vardeclorpat"}],"output":{"generics":["forhead"],"name":"presult"}}],[11,"parse_normal_for_head","","",18,{"inputs":[{"name":"self"},{"generics":["vardeclorexpr"],"name":"option"}],"output":{"generics":["forhead"],"name":"presult"}}],[11,"fold_children","swc_ecma_parser::parser::stmt","",25,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"forhead"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"forhead"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"forhead"}],"output":{"name":"bool"}}],[11,"accept_import_export","swc_ecma_parser::parser","",18,{"inputs":[],"output":{"name":"bool"}}],[11,"handle_import_export","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[0,"pat","","13.3.3 Destructuring Binding Patterns",null,null],[11,"parse_opt_binding_ident","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[11,"parse_binding_ident","","babel: `parseBindingIdentifier`",18,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_binding_pat_or_ident","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_binding_element","","babel: `parseBindingAtom`",18,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_array_binding_pat","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_formal_param","","spec: 'FormalParameter'",18,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_formal_params","","spec: 'FormalParameterList'",18,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_unique_formal_params","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"reparse_expr_as_pat","","This does not return 'rest' pattern because non-last parameter cannot be rest.",18,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"box"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_exprs_as_params","","",18,{"inputs":[{"name":"self"},{"generics":["exprorspread"],"name":"vec"}],"output":{"generics":["vec"],"name":"presult"}}],[0,"input","","Note: this module requires `#![feature(nll)]`.",null,null],[3,"ParserInput","swc_ecma_parser::parser::input","This struct is responsible for managing current token and peeked token.",null,null],[12,"iter","","",27,null],[12,"cur","","",27,null],[12,"last_pos","","Last of previous span",27,null],[12,"next","","Peeked token",27,null],[3,"Item","","One token",null,null],[12,"token","","",28,null],[12,"had_line_break","","Had a line break before this token?",28,null],[12,"span","","",28,null],[3,"ItemIter","","",null,null],[12,"0","","",29,null],[8,"Input","","Input for parser.",null,null],[10,"had_line_break_before_last","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["item"],"name":"option"}}],[11,"new","","",27,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"bump_inner","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"cur_debug","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"bump","","Returns current token.",27,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"knows_cur","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"had_line_break_before_cur","","This returns true on eof.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_linebreak_between_cur_and_peeked","","This returns true on eof.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cur","","Get current token. Returns `None` only on eof.",27,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"is","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"peeked_is","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat_keyword","","",27,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"cur_pos","","Returns start of current token.",27,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"last_pos","","Returns last of previous token.",27,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[0,"util","swc_ecma_parser::parser","",null,null],[3,"WithCtx","swc_ecma_parser::parser::util","",null,null],[12,"inner","","",31,null],[12,"orig_ctx","","",31,null],[8,"ParseObject","","",null,null],[16,"Prop","","",32,null],[10,"make_object","","",32,{"inputs":[{"name":"span"},{"name":"vec"}],"output":{"name":"obj"}}],[10,"parse_object_prop","","",32,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"with_ctx","swc_ecma_parser::parser","Original context is restored when returned guard is dropped.",18,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"withctx"}}],[11,"include_in_expr","","Original context is restored when returned guard is dropped.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"withctx"}}],[11,"parse_with","","Parse with given closure",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ret"}}],[11,"deref","swc_ecma_parser::parser::util","",31,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[6,"PResult","swc_ecma_parser::parser","",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",21,{"inputs":[{"name":"noneerror"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"config"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"context"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"state"}}],[11,"new_for_module","","",18,{"inputs":[{"name":"logger"},{"name":"i"}],"output":{"name":"self"}}],[11,"new_for_script","","",18,{"inputs":[{"name":"logger"},{"name":"i"},{"name":"bool"}],"output":{"name":"self"}}],[11,"parse_script","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_module","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["module"],"name":"presult"}}],[11,"clone","swc_ecma_parser::token","",12,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"assignop"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fold_children","","",11,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"assignop"}}],[11,"fold_children","","",12,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"number"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"SyntaxError"],[3,"Options"],[3,"Lexer"],[4,"Error"],[3,"LexerInput"],[3,"CharIndices"],[8,"Input"],[3,"State"],[3,"Context"],[4,"Type"],[8,"CharExt"],[4,"AssignOpToken"],[3,"Number"],[3,"TokenAndSpan"],[4,"Token"],[4,"BinOpToken"],[4,"Word"],[4,"Keyword"],[3,"Parser"],[3,"Context"],[3,"State"],[4,"Error"],[8,"OutputType"],[8,"FnBodyParser"],[8,"MaybeOptionalIdentParser"],[4,"ForHead"],[8,"StmtLikeParser"],[3,"ParserInput"],[3,"Item"],[3,"ItemIter"],[8,"Input"],[3,"WithCtx"],[8,"ParseObject"],[3,"Config"]]};
searchIndex["swc_ecmascript"] = {"doc":"","items":[],"paths":[]};
searchIndex["swc_macros"] = {"doc":"Macros used by swc project.","items":[],"paths":[]};
searchIndex["swc_macros_common"] = {"doc":"","items":[[5,"call_site","swc_macros_common","",null,{"inputs":[],"output":{"name":"t"}}],[5,"print","","`attr` - tokens inside `#[]`. e.g. `derive(EqIgnoreSpan)`, ast_node",null,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"tokenstream"}}],[5,"is_attr_name","","",null,{"inputs":[{"name":"attribute"},{"name":"str"}],"output":{"name":"bool"}}],[0,"derive","","",null,null],[3,"Derive","swc_macros_common::derive","Generics of derived impl item.",null,null],[12,"input","","",0,null],[12,"out","","",0,null],[0,"generics","","",null,null],[11,"all_generic_fields","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"vec"}}],[11,"add_where_predicates","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"bound_self","","Add `Self: #trait_`.",0,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"derive"}}],[11,"new","","",0,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"defaultness","","Set `defaultness`",0,{"inputs":[{"name":"self"},{"generics":["default"],"name":"option"}],"output":null}],[11,"unsafety","","Set `unsafety`",0,{"inputs":[{"name":"self"},{"generics":["unsafe"],"name":"option"}],"output":null}],[11,"input","","",0,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"append_to","","",0,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[0,"prelude","swc_macros_common","",null,null],[4,"Delimiter","swc_macros_common::prelude","",null,null],[13,"Parenthesis","","",1,null],[13,"Brace","","",1,null],[13,"Bracket","","",1,null],[13,"None","","",1,null],[3,"Literal","","",null,null],[12,"0","","",2,null],[3,"Span","","",null,null],[12,"0","","",3,null],[4,"TokenNode","","",null,null],[13,"Group","","",4,null],[13,"Term","","",4,null],[13,"Op","","",4,null],[13,"Literal","","",4,null],[3,"TokenStream","","",null,null],[12,"0","","",5,null],[3,"TokenTree","","",null,null],[12,"span","","",6,null],[12,"kind","","",6,null],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",7,null],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[3,"Tokens","","Tokens produced by a [`quote!`] invocation.",null,null],[12,"tts","","",8,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",9,null],[13,"End","","",9,null],[3,"Punctuated","","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[12,"inner","","",10,null],[4,"Element","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",9,null],[13,"End","","",9,null],[8,"ItemImplExt","","Extension trait for `ItemImpl` (impl block).",null,null],[10,"with_generics","","Instead of",11,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[8,"PairExt","","",null,null],[11,"map_item","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"pair"}}],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"named","","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"tuple_parser","","",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"grouped","","",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"tap","","Run a parser, binding the result to a name, and then evaluating an expression.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[0,"syn_ext","swc_macros_common","",null,null],[8,"ItemImplExt","swc_macros_common::syn_ext","Extension trait for `ItemImpl` (impl block).",null,null],[10,"with_generics","","Instead of",11,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[8,"PairExt","","",null,null],[11,"map_item","swc_macros_common::prelude","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"pair"}}],[0,"binder","swc_macros_common","Example",null,null],[3,"Binder","swc_macros_common::binder","Used to bind whole struct or enum.",null,null],[12,"ident","","",13,null],[12,"body","","",13,null],[12,"attrs","","",13,null],[3,"VariantBinder","","Variant.",null,null],[12,"enum_name","","None for struct.",14,null],[12,"name","","Name of variant.",14,null],[12,"data","","",14,null],[12,"attrs","","",14,null],[3,"BindedField","","Binded field. Note that this struct acts like a binded variable for `quote!`.",null,null],[12,"binded_ident","","",15,null],[12,"idx","","",15,null],[12,"field","","",15,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"new","","`attrs`",13,null],[11,"new_from","","",13,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["variantbinder"],"name":"vec"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"variantbinder"}}],[11,"new","","",14,null],[11,"variant_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"data","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"attrs","","",14,null],[11,"qual_path","","`EnumName::VariantName` for enum, and `StructName` for struct.",14,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"bind","","`prefix`",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bindedfield"}}],[11,"idx","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","Name of field binding.",15,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"field","","",15,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"fail","swc_macros_common","fail! is a panic! with location reporting.",null,null],[14,"unimplemented","","",null,null],[14,"unreachable","","",null,null],[11,"from_span","swc_macros_common::prelude","",3,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"from","","",8,{"inputs":[{"name":"quote"}],"output":{"name":"tokens"}}],[11,"from","","",5,{"inputs":[{"name":"quote"}],"output":{"name":"tokenstream"}}],[11,"into_pm2_span","","",3,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"span_for","","",3,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"tokenstream"}}],[11,"from","","",5,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from","","",6,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"from","","",5,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",3,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"from","","",5,{"inputs":[{"name":"tokens"}],"output":{"name":"tokenstream"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"to_tokens","","",5,null],[11,"to_tokens","","",4,null],[11,"to_tokens","","",2,null],[11,"to_tokens","","",6,null],[11,"to_tokens","","",8,null],[11,"into_tokens","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"tokens"}}],[11,"into_iter","","",8,null],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"punctuated"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"punctuated"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"hash","","",10,null],[11,"assert_receiver_is_total_eq","","",10,null],[11,"to_tokens","","",9,null],[11,"to_tokens","","",10,null],[11,"extend","","",10,null],[11,"extend","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"index","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"punctuated"}}],[11,"into_iter","","",10,null],[11,"index_mut","","",10,null],[11,"integer","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",2,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",2,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",2,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",2,null],[11,"byte_char","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",2,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",2,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",2,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"call_site","","",3,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",3,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",3,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"empty","","",5,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",8,{"inputs":[],"output":{"name":"tokens"}}],[11,"append","","For use by `ToTokens` implementations.",8,null],[11,"append_all","","For use by `ToTokens` implementations.",8,null],[11,"append_separated","","For use by `ToTokens` implementations.",8,null],[11,"append_terminated","","For use by `ToTokens` implementations.",8,null],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",9,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"pair"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",9,null],[11,"new","","Creates an empty punctuated sequence.",10,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",10,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",10,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",10,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",10,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",10,null],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",10,null],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",10,null],[11,"insert","","Inserts an element at position `index`.",10,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",10,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",10,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",10,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",10,null]],"paths":[[3,"Derive"],[4,"Delimiter"],[3,"Literal"],[3,"Span"],[4,"TokenNode"],[3,"TokenStream"],[3,"TokenTree"],[8,"ToTokens"],[3,"Tokens"],[4,"Element"],[3,"Punctuated"],[8,"ItemImplExt"],[8,"PairExt"],[3,"Binder"],[3,"VariantBinder"],[3,"BindedField"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Attribute","syn","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `pub(crate)`.",null,null],[12,"pub_token","","",7,null],[12,"paren_token","","",7,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprAddrOf","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",10,null],[12,"and_token","","",10,null],[12,"mutability","","",10,null],[12,"expr","","",10,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",11,null],[12,"bracket_token","","",11,null],[12,"elems","","",11,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",12,null],[12,"left","","",12,null],[12,"eq_token","","",12,null],[12,"right","","",12,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",13,null],[12,"left","","",13,null],[12,"op","","",13,null],[12,"right","","",13,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",14,null],[12,"left","","",14,null],[12,"op","","",14,null],[12,"right","","",14,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",15,null],[12,"block","","",15,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",16,null],[12,"box_token","","",16,null],[12,"expr","","",16,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",17,null],[12,"break_token","","",17,null],[12,"label","","",17,null],[12,"expr","","",17,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",18,null],[12,"func","","",18,null],[12,"paren_token","","",18,null],[12,"args","","",18,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",19,null],[12,"expr","","",19,null],[12,"as_token","","",19,null],[12,"ty","","",19,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",20,null],[12,"do_token","","",20,null],[12,"catch_token","","",20,null],[12,"block","","",20,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",21,null],[12,"capture","","",21,null],[12,"or1_token","","",21,null],[12,"inputs","","",21,null],[12,"or2_token","","",21,null],[12,"output","","",21,null],[12,"body","","",21,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",22,null],[12,"continue_token","","",22,null],[12,"label","","",22,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",23,null],[12,"base","","",23,null],[12,"dot_token","","",23,null],[12,"member","","",23,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",24,null],[12,"label","","",24,null],[12,"for_token","","",24,null],[12,"pat","","",24,null],[12,"in_token","","",24,null],[12,"expr","","",24,null],[12,"body","","",24,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",25,null],[12,"group_token","","",25,null],[12,"expr","","",25,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",26,null],[12,"if_token","","",26,null],[12,"cond","","",26,null],[12,"then_branch","","",26,null],[12,"else_branch","","",26,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",27,null],[12,"if_token","","",27,null],[12,"let_token","","",27,null],[12,"pat","","",27,null],[12,"eq_token","","",27,null],[12,"expr","","",27,null],[12,"then_branch","","",27,null],[12,"else_branch","","",27,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",28,null],[12,"place","","",28,null],[12,"arrow_token","","",28,null],[12,"value","","",28,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",29,null],[12,"expr","","",29,null],[12,"bracket_token","","",29,null],[12,"index","","",29,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",30,null],[12,"lit","","",30,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",31,null],[12,"label","","",31,null],[12,"loop_token","","",31,null],[12,"body","","",31,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",32,null],[12,"mac","","",32,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",33,null],[12,"match_token","","",33,null],[12,"expr","","",33,null],[12,"brace_token","","",33,null],[12,"arms","","",33,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",34,null],[12,"receiver","","",34,null],[12,"dot_token","","",34,null],[12,"method","","",34,null],[12,"turbofish","","",34,null],[12,"paren_token","","",34,null],[12,"args","","",34,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",35,null],[12,"paren_token","","",35,null],[12,"expr","","",35,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",36,null],[12,"qself","","",36,null],[12,"path","","",36,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",37,null],[12,"from","","",37,null],[12,"limits","","",37,null],[12,"to","","",37,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",38,null],[12,"bracket_token","","",38,null],[12,"expr","","",38,null],[12,"semi_token","","",38,null],[12,"len","","",38,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",39,null],[12,"return_token","","",39,null],[12,"expr","","",39,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",40,null],[12,"path","","",40,null],[12,"brace_token","","",40,null],[12,"fields","","",40,null],[12,"dot2_token","","",40,null],[12,"rest","","",40,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",41,null],[12,"expr","","",41,null],[12,"question_token","","",41,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",42,null],[12,"paren_token","","",42,null],[12,"elems","","",42,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",43,null],[12,"expr","","",43,null],[12,"colon_token","","",43,null],[12,"ty","","",43,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",44,null],[12,"op","","",44,null],[12,"expr","","",44,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",45,null],[12,"unsafe_token","","",45,null],[12,"block","","",45,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",46,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",47,null],[12,"label","","",47,null],[12,"while_token","","",47,null],[12,"cond","","",47,null],[12,"body","","",47,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",48,null],[12,"label","","",48,null],[12,"while_token","","",48,null],[12,"let_token","","",48,null],[12,"pat","","",48,null],[12,"eq_token","","",48,null],[12,"expr","","",48,null],[12,"body","","",48,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",49,null],[12,"yield_token","","",49,null],[12,"expr","","",49,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",50,null],[12,"span","","",50,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",51,null],[12,"pats","","",51,null],[12,"guard","","",51,null],[12,"rocket_token","","",51,null],[12,"body","","",51,null],[12,"comma","","",51,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",52,null],[12,"stmts","","Statements in a block",52,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",53,null],[12,"member","","",53,null],[12,"colon_token","","",53,null],[12,"pat","","",53,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",54,null],[12,"member","","Name or index of the field.",54,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,null],[12,"expr","","Value of the field.",54,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",55,null],[12,"colon_token","","",55,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",56,null],[12,"let_token","","",56,null],[12,"pat","","",56,null],[12,"ty","","",56,null],[12,"init","","",56,null],[12,"semi_token","","",56,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",58,null],[12,"pat","","",58,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",59,null],[12,"mutability","","",59,null],[12,"ident","","",59,null],[12,"subpat","","",59,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",60,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",61,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",62,null],[12,"path","","",62,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",63,null],[12,"limits","","",63,null],[12,"hi","","",63,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",64,null],[12,"mutability","","",64,null],[12,"pat","","",64,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",65,null],[12,"front","","",65,null],[12,"middle","","",65,null],[12,"dot2_token","","",65,null],[12,"comma_token","","",65,null],[12,"back","","",65,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",66,null],[12,"brace_token","","",66,null],[12,"fields","","",66,null],[12,"dot2_token","","",66,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",67,null],[12,"front","","",67,null],[12,"dot2_token","","",67,null],[12,"comma_token","","",67,null],[12,"back","","",67,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",68,null],[12,"pat","","",68,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",69,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",70,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",71,null],[12,"lt_token","","",71,null],[12,"lifetimes","","",71,null],[12,"gt_token","","",71,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"default","","",72,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",73,null],[12,"params","","",73,null],[12,"gt_token","","",73,null],[12,"where_clause","","",73,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",74,null],[12,"lifetime","","",74,null],[12,"colon_token","","",74,null],[12,"bounds","","",74,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",75,null],[12,"eq_token","","",75,null],[12,"rhs_ty","","",75,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",76,null],[12,"colon_token","","",76,null],[12,"bounds","","",76,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",77,null],[12,"bounded_ty","","The type being bounded",77,null],[12,"colon_token","","",77,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"modifier","","",78,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",79,null],[12,"ident","","",79,null],[12,"colon_token","","",79,null],[12,"bounds","","",79,null],[12,"eq_token","","",79,null],[12,"default","","",79,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",80,null],[12,"predicates","","",80,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",81,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[12,"0","","",82,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",83,null],[3,"Ident","","A word of Rust code, such as a keyword or variable name.",null,null],[12,"term","","",84,null],[12,"span","","",84,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",85,null],[12,"colon_token","","",85,null],[12,"ty","","",85,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",86,null],[12,"self_token","","",86,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",87,null],[12,"lifetime","","",87,null],[12,"mutability","","",87,null],[12,"self_token","","",87,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",88,null],[12,"generics","","",88,null],[12,"paren_token","","",88,null],[12,"inputs","","",88,null],[12,"variadic","","",88,null],[12,"output","","",88,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",89,null],[12,"vis","","",89,null],[12,"ident","","",89,null],[12,"decl","","",89,null],[12,"semi_token","","",89,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",90,null],[12,"vis","","",90,null],[12,"static_token","","",90,null],[12,"mutability","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"semi_token","","",90,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",91,null],[12,"vis","","",91,null],[12,"type_token","","",91,null],[12,"ident","","",91,null],[12,"semi_token","","",91,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",92,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",93,null],[12,"vis","","",93,null],[12,"defaultness","","",93,null],[12,"const_token","","",93,null],[12,"ident","","",93,null],[12,"colon_token","","",93,null],[12,"ty","","",93,null],[12,"eq_token","","",93,null],[12,"expr","","",93,null],[12,"semi_token","","",93,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",94,null],[12,"mac","","",94,null],[12,"semi_token","","",94,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",95,null],[12,"vis","","",95,null],[12,"defaultness","","",95,null],[12,"sig","","",95,null],[12,"block","","",95,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",96,null],[12,"vis","","",96,null],[12,"defaultness","","",96,null],[12,"type_token","","",96,null],[12,"ident","","",96,null],[12,"generics","","",96,null],[12,"eq_token","","",96,null],[12,"ty","","",96,null],[12,"semi_token","","",96,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",97,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",98,null],[12,"vis","","",98,null],[12,"const_token","","",98,null],[12,"ident","","",98,null],[12,"colon_token","","",98,null],[12,"ty","","",98,null],[12,"eq_token","","",98,null],[12,"expr","","",98,null],[12,"semi_token","","",98,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",99,null],[12,"vis","","",99,null],[12,"enum_token","","",99,null],[12,"ident","","",99,null],[12,"generics","","",99,null],[12,"brace_token","","",99,null],[12,"variants","","",99,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",100,null],[12,"vis","","",100,null],[12,"extern_token","","",100,null],[12,"crate_token","","",100,null],[12,"ident","","",100,null],[12,"rename","","",100,null],[12,"semi_token","","",100,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",101,null],[12,"vis","","",101,null],[12,"constness","","",101,null],[12,"unsafety","","",101,null],[12,"abi","","",101,null],[12,"ident","","",101,null],[12,"decl","","",101,null],[12,"block","","",101,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",102,null],[12,"abi","","",102,null],[12,"brace_token","","",102,null],[12,"items","","",102,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",103,null],[12,"defaultness","","",103,null],[12,"unsafety","","",103,null],[12,"impl_token","","",103,null],[12,"generics","","",103,null],[12,"trait_","","Trait this impl implements.",103,null],[12,"self_ty","","The Self type of the impl.",103,null],[12,"brace_token","","",103,null],[12,"items","","",103,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",104,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",104,null],[12,"mac","","",104,null],[12,"semi_token","","",104,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",105,null],[12,"vis","","",105,null],[12,"macro_token","","",105,null],[12,"ident","","",105,null],[12,"paren_token","","",105,null],[12,"args","","",105,null],[12,"brace_token","","",105,null],[12,"body","","",105,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",106,null],[12,"vis","","",106,null],[12,"mod_token","","",106,null],[12,"ident","","",106,null],[12,"content","","",106,null],[12,"semi","","",106,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",107,null],[12,"vis","","",107,null],[12,"static_token","","",107,null],[12,"mutability","","",107,null],[12,"ident","","",107,null],[12,"colon_token","","",107,null],[12,"ty","","",107,null],[12,"eq_token","","",107,null],[12,"expr","","",107,null],[12,"semi_token","","",107,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",108,null],[12,"vis","","",108,null],[12,"struct_token","","",108,null],[12,"ident","","",108,null],[12,"generics","","",108,null],[12,"fields","","",108,null],[12,"semi_token","","",108,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",109,null],[12,"vis","","",109,null],[12,"unsafety","","",109,null],[12,"auto_token","","",109,null],[12,"trait_token","","",109,null],[12,"ident","","",109,null],[12,"generics","","",109,null],[12,"colon_token","","",109,null],[12,"supertraits","","",109,null],[12,"brace_token","","",109,null],[12,"items","","",109,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",110,null],[12,"vis","","",110,null],[12,"type_token","","",110,null],[12,"ident","","",110,null],[12,"generics","","",110,null],[12,"eq_token","","",110,null],[12,"ty","","",110,null],[12,"semi_token","","",110,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",111,null],[12,"vis","","",111,null],[12,"union_token","","",111,null],[12,"ident","","",111,null],[12,"generics","","",111,null],[12,"fields","","",111,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",112,null],[12,"vis","","",112,null],[12,"use_token","","",112,null],[12,"leading_colon","","",112,null],[12,"prefix","","",112,null],[12,"tree","","",112,null],[12,"semi_token","","",112,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",113,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",114,null],[12,"unsafety","","",114,null],[12,"abi","","",114,null],[12,"ident","","",114,null],[12,"decl","","",114,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",115,null],[12,"const_token","","",115,null],[12,"ident","","",115,null],[12,"colon_token","","",115,null],[12,"ty","","",115,null],[12,"default","","",115,null],[12,"semi_token","","",115,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",116,null],[12,"mac","","",116,null],[12,"semi_token","","",116,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",117,null],[12,"sig","","",117,null],[12,"default","","",117,null],[12,"semi_token","","",117,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",118,null],[12,"type_token","","",118,null],[12,"ident","","",118,null],[12,"generics","","",118,null],[12,"colon_token","","",118,null],[12,"bounds","","",118,null],[12,"default","","",118,null],[12,"semi_token","","",118,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",119,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",120,null],[3,"UseList","","A braced list of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",121,null],[12,"items","","",121,null],[3,"UsePath","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",null,null],[12,"ident","","",122,null],[12,"rename","","",122,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",123,null],[12,"attrs","","",123,null],[12,"items","","",123,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"term","","",124,null],[12,"span","","",124,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",125,null],[12,"span","","",125,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[12,"token","","",126,null],[12,"span","","",126,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[12,"token","","",127,null],[12,"span","","",127,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[12,"token","","",128,null],[12,"span","","",128,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[12,"token","","",129,null],[12,"span","","",129,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[12,"token","","",130,null],[12,"span","","",130,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[12,"token","","",131,null],[12,"span","","",131,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",132,null],[12,"span","","",132,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",133,null],[12,"bang_token","","",133,null],[12,"delimiter","","",133,null],[12,"tts","","",133,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",134,null],[12,"brace_token","","",134,null],[12,"variants","","",134,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",135,null],[12,"fields","","",135,null],[12,"semi_token","","",135,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",136,null],[12,"fields","","",136,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",137,null],[12,"vis","","Visibility of the struct or enum.",137,null],[12,"ident","","Name of the struct or enum.",137,null],[12,"generics","","Generics required to complete the definition.",137,null],[12,"data","","Data within the struct or enum.",137,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",138,null],[12,"name","","",138,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",139,null],[12,"ty","","",139,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",140,null],[12,"elem","","",140,null],[12,"semi_token","","",140,null],[12,"len","","",140,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",141,null],[12,"abi","","",141,null],[12,"fn_token","","",141,null],[12,"lifetimes","","",141,null],[12,"paren_token","","",141,null],[12,"inputs","","",141,null],[12,"variadic","","",141,null],[12,"output","","",141,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",142,null],[12,"elem","","",142,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",143,null],[12,"bounds","","",143,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",144,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",145,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",146,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",147,null],[12,"elem","","",147,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",148,null],[12,"path","","",148,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",149,null],[12,"const_token","","",149,null],[12,"mutability","","",149,null],[12,"elem","","",149,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",150,null],[12,"lifetime","","",150,null],[12,"mutability","","",150,null],[12,"elem","","",150,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",151,null],[12,"elem","","",151,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",152,null],[12,"bounds","","",152,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",153,null],[12,"elems","","",153,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",154,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",155,null],[12,"lt_token","","",155,null],[12,"args","","",155,null],[12,"gt_token","","",155,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",156,null],[12,"eq_token","","",156,null],[12,"ty","","",156,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",157,null],[12,"inputs","","`(A, B)`",157,null],[12,"output","","`C`",157,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",158,null],[12,"segments","","",158,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",159,null],[12,"arguments","","",159,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",160,null],[12,"ty","","",160,null],[12,"position","","",160,null],[12,"as_token","","",160,null],[12,"gt_token","","",160,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",161,null],[12,"1","","",161,null],[3,"TokensOrDefault","","",null,null],[12,"0","","",162,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",163,null],[13,"Inner","","",163,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",164,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",164,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",164,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",165,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",165,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",166,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",166,null],[13,"Unit","","Unit struct or unit variant such as `None`.",166,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",167,null],[13,"Crate","","A crate-level visibility: `pub(crate)`.",167,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",167,null],[13,"Inherited","","An inherited visibility, which usually means private.",167,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",168,null],[13,"InPlace","","A placement expression: `place <- value`.",168,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",168,null],[13,"Call","","A function call expression: `invoke(a, b)`.",168,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",168,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",168,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",168,null],[13,"Unary","","A unary operation: `!x`, `*x`.",168,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",168,null],[13,"Cast","","A cast expression: `foo as f64`.",168,null],[13,"Type","","A type ascription expression: `foo: f64`.",168,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",168,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",168,null],[13,"While","","A while loop: `while expr { ... }`.",168,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",168,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",168,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",168,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",168,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",168,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",168,null],[13,"Block","","A blocked scope: `{ ... }`.",168,null],[13,"Assign","","An assignment expression: `a = compute()`.",168,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",168,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",168,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",168,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",168,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",168,null],[13,"AddrOf","","A referencing operation: `&a` or `&mut a`.",168,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",168,null],[13,"Continue","","A `continue`, with an optional label.",168,null],[13,"Return","","A `return`, with an optional value to be returned.",168,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",168,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",168,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",168,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",168,null],[13,"Group","","An expression contained within invisible delimiters.",168,null],[13,"Try","","A try-expression: `expr?`.",168,null],[13,"Catch","","A catch expression: `do catch { ... }`.",168,null],[13,"Yield","","A yield expression: `yield expr`.",168,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",168,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",169,null],[13,"Unnamed","","An unnamed field like `self.0`.",169,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",170,null],[13,"Const","","A const expression. Must be inside of a block.",170,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",171,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",171,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",171,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",171,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",171,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",171,null],[13,"Box","","A box pattern: `box v`.",171,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",171,null],[13,"Lit","","A literal pattern: `0`.",171,null],[13,"Range","","A range pattern: `1..=2`.",171,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",171,null],[13,"Macro","","A macro in expression position.",171,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",171,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",172,null],[13,"Closed","","Inclusive at the beginning and end.",172,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",173,null],[13,"Item","","An item definition.",173,null],[13,"Expr","","Expr without trailing semicolon.",173,null],[13,"Semi","","Expression with trailing semicolon.",173,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",174,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",174,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",174,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",175,null],[13,"Maybe","","",175,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",176,null],[13,"Lifetime","","",176,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",177,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",177,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",177,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",178,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",178,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",178,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",178,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",178,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",179,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",179,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",179,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",179,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",180,null],[13,"Method","","A method within an impl block.",180,null],[13,"Type","","An associated type within an impl block.",180,null],[13,"Macro","","A macro invocation within an impl block.",180,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",180,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",181,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",181,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",181,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",181,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",181,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",181,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",181,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",181,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",181,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",181,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",181,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",181,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",181,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",181,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",181,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",181,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",182,null],[13,"Method","","A trait method within the definition of a trait.",182,null],[13,"Type","","An associated type within the definition of a trait.",182,null],[13,"Macro","","A macro invocation within the definition of a trait.",182,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",182,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",183,null],[13,"Glob","","A glob import in a `use` item: `*`.",183,null],[13,"List","","A braced list of imports in a `use` item: `{A, B, C}`.",183,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",184,null],[13,"F64","","",184,null],[13,"None","","",184,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",185,null],[13,"I16","","",185,null],[13,"I32","","",185,null],[13,"I64","","",185,null],[13,"I128","","",185,null],[13,"Isize","","",185,null],[13,"U8","","",185,null],[13,"U16","","",185,null],[13,"U32","","",185,null],[13,"U64","","",185,null],[13,"U128","","",185,null],[13,"Usize","","",185,null],[13,"None","","",185,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",186,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",186,null],[13,"Byte","","A byte literal: `b'f'`.",186,null],[13,"Char","","A character literal: `'a'`.",186,null],[13,"Int","","An integer literal: `1` or `1u16`.",186,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",186,null],[13,"Bool","","A boolean literal: `true` or `false`.",186,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",186,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",187,null],[13,"Raw","","A raw string like `r##\"data\"##`.",187,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",188,null],[13,"Brace","","",188,null],[13,"Bracket","","",188,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",189,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",189,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",189,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",190,null],[13,"Sub","","The `-` operator (subtraction)",190,null],[13,"Mul","","The `*` operator (multiplication)",190,null],[13,"Div","","The `/` operator (division)",190,null],[13,"Rem","","The `%` operator (modulus)",190,null],[13,"And","","The `&&` operator (logical and)",190,null],[13,"Or","","The `||` operator (logical or)",190,null],[13,"BitXor","","The `^` operator (bitwise xor)",190,null],[13,"BitAnd","","The `&` operator (bitwise and)",190,null],[13,"BitOr","","The `|` operator (bitwise or)",190,null],[13,"Shl","","The `<<` operator (shift left)",190,null],[13,"Shr","","The `>>` operator (shift right)",190,null],[13,"Eq","","The `==` operator (equality)",190,null],[13,"Lt","","The `<` operator (less than)",190,null],[13,"Le","","The `<=` operator (less than or equal to)",190,null],[13,"Ne","","The `!=` operator (not equal to)",190,null],[13,"Ge","","The `>=` operator (greater than or equal to)",190,null],[13,"Gt","","The `>` operator (greater than)",190,null],[13,"AddEq","","The `+=` operator",190,null],[13,"SubEq","","The `-=` operator",190,null],[13,"MulEq","","The `*=` operator",190,null],[13,"DivEq","","The `/=` operator",190,null],[13,"RemEq","","The `%=` operator",190,null],[13,"BitXorEq","","The `^=` operator",190,null],[13,"BitAndEq","","The `&=` operator",190,null],[13,"BitOrEq","","The `|=` operator",190,null],[13,"ShlEq","","The `<<=` operator",190,null],[13,"ShrEq","","The `>>=` operator",190,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",191,null],[13,"Not","","The `!` operator for logical inversion",191,null],[13,"Neg","","The `-` operator for negation",191,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",192,null],[13,"Wild","","Argument not given a name, matched with `_`.",192,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",193,null],[13,"Type","","A particular type is returned.",193,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",194,null],[13,"Array","","A fixed size array type: `[T; n]`.",194,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",194,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",194,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",194,null],[13,"Never","","The never type: `!`.",194,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",194,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",194,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",194,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",194,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",194,null],[13,"Group","","A type contained within invisible delimiters.",194,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",194,null],[13,"Macro","","A macro in the type position.",194,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",194,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",195,null],[13,"Type","","A type argument.",195,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",195,null],[13,"Const","","A const expression. Must be inside of a block.",195,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",196,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",196,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",196,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_file","","Parse the content of a file of Rust code.",null,{"inputs":[{"name":"str"}],"output":{"generics":["file","parseerror"],"name":"result"}}],[0,"parsers","","",null,null],[5,"invoke","syn::parsers","",null,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"r"}}],[5,"many0","","",null,null],[5,"input_end","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"macros","syn","",null,null],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Add","syn::token","`+`",null,null],[12,"0","","",197,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",198,null],[3,"And","","`&`",null,null],[12,"0","","",199,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",200,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",201,null],[3,"At","","`@`",null,null],[12,"0","","",202,null],[3,"Bang","","`!`",null,null],[12,"0","","",203,null],[3,"Caret","","`^`",null,null],[12,"0","","",204,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",205,null],[3,"Colon","","`:`",null,null],[12,"0","","",206,null],[3,"Colon2","","`::`",null,null],[12,"0","","",207,null],[3,"Comma","","`,`",null,null],[12,"0","","",208,null],[3,"Div","","`/`",null,null],[12,"0","","",209,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",210,null],[3,"Dot","","`.`",null,null],[12,"0","","",211,null],[3,"Dot2","","`..`",null,null],[12,"0","","",212,null],[3,"Dot3","","`...`",null,null],[12,"0","","",213,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",214,null],[3,"Eq","","`=`",null,null],[12,"0","","",215,null],[3,"EqEq","","`==`",null,null],[12,"0","","",216,null],[3,"Ge","","`>=`",null,null],[12,"0","","",217,null],[3,"Gt","","`>`",null,null],[12,"0","","",218,null],[3,"Le","","`<=`",null,null],[12,"0","","",219,null],[3,"Lt","","`<`",null,null],[12,"0","","",220,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",221,null],[3,"Ne","","`!=`",null,null],[12,"0","","",222,null],[3,"Or","","`|`",null,null],[12,"0","","",223,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",224,null],[3,"OrOr","","`||`",null,null],[12,"0","","",225,null],[3,"Pound","","`#`",null,null],[12,"0","","",226,null],[3,"Question","","`?`",null,null],[12,"0","","",227,null],[3,"RArrow","","`->`",null,null],[12,"0","","",228,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",229,null],[3,"Rem","","`%`",null,null],[12,"0","","",230,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",231,null],[3,"Rocket","","`=>`",null,null],[12,"0","","",232,null],[3,"Semi","","`;`",null,null],[12,"0","","",233,null],[3,"Shl","","`<<`",null,null],[12,"0","","",234,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",235,null],[3,"Shr","","`>>`",null,null],[12,"0","","",236,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",237,null],[3,"Star","","`*`",null,null],[12,"0","","",238,null],[3,"Sub","","`-`",null,null],[12,"0","","",239,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",240,null],[3,"Underscore","","`_`",null,null],[12,"0","","",241,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",242,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",243,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",244,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",245,null],[3,"As","","`as`",null,null],[12,"0","","",246,null],[3,"Auto","","`auto`",null,null],[12,"0","","",247,null],[3,"Box","","`box`",null,null],[12,"0","","",248,null],[3,"Break","","`break`",null,null],[12,"0","","",249,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",250,null],[3,"Catch","","`catch`",null,null],[12,"0","","",251,null],[3,"Const","","`const`",null,null],[12,"0","","",252,null],[3,"Continue","","`continue`",null,null],[12,"0","","",253,null],[3,"Crate","","`crate`",null,null],[12,"0","","",254,null],[3,"Default","","`default`",null,null],[12,"0","","",255,null],[3,"Do","","`do`",null,null],[12,"0","","",256,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",257,null],[3,"Else","","`else`",null,null],[12,"0","","",258,null],[3,"Enum","","`enum`",null,null],[12,"0","","",259,null],[3,"Extern","","`extern`",null,null],[12,"0","","",260,null],[3,"Fn","","`fn`",null,null],[12,"0","","",261,null],[3,"For","","`for`",null,null],[12,"0","","",262,null],[3,"If","","`if`",null,null],[12,"0","","",263,null],[3,"Impl","","`impl`",null,null],[12,"0","","",264,null],[3,"In","","`in`",null,null],[12,"0","","",265,null],[3,"Let","","`let`",null,null],[12,"0","","",266,null],[3,"Loop","","`loop`",null,null],[12,"0","","",267,null],[3,"Macro","","`macro`",null,null],[12,"0","","",268,null],[3,"Match","","`match`",null,null],[12,"0","","",269,null],[3,"Mod","","`mod`",null,null],[12,"0","","",270,null],[3,"Move","","`move`",null,null],[12,"0","","",271,null],[3,"Mut","","`mut`",null,null],[12,"0","","",272,null],[3,"Pub","","`pub`",null,null],[12,"0","","",273,null],[3,"Ref","","`ref`",null,null],[12,"0","","",274,null],[3,"Return","","`return`",null,null],[12,"0","","",275,null],[3,"Self_","","`self`",null,null],[12,"0","","",276,null],[3,"Static","","`static`",null,null],[12,"0","","",277,null],[3,"Struct","","`struct`",null,null],[12,"0","","",278,null],[3,"Super","","`super`",null,null],[12,"0","","",279,null],[3,"Trait","","`trait`",null,null],[12,"0","","",280,null],[3,"Type","","`type`",null,null],[12,"0","","",281,null],[3,"Union","","`union`",null,null],[12,"0","","",282,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",283,null],[3,"Use","","`use`",null,null],[12,"0","","",284,null],[3,"Where","","`where`",null,null],[12,"0","","",285,null],[3,"While","","`while`",null,null],[12,"0","","",286,null],[3,"Yield","","`yield`",null,null],[12,"0","","",287,null],[0,"parsing","","",null,null],[5,"punct","syn::token::parsing","",null,null],[5,"keyword","","",null,null],[5,"delim","","",null,null],[8,"FromSpans","","",null,null],[10,"from_spans","","",288,null],[0,"printing","syn::token","",null,null],[5,"punct","syn::token::printing","",null,null],[5,"keyword","","",null,{"inputs":[{"name":"str"},{"name":"span"},{"name":"tokens"}],"output":null}],[5,"delim","","",null,{"inputs":[{"name":"str"},{"name":"span"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"clone","syn::token","",197,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",197,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",197,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"add"}],"output":{"name":"bool"}}],[11,"hash","","",197,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",197,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",197,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",197,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",197,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",198,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"addeq"}],"output":{"name":"bool"}}],[11,"hash","","",198,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",198,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",198,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",198,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",198,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",199,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",199,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"and"}],"output":{"name":"bool"}}],[11,"hash","","",199,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",199,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",199,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",199,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",199,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",200,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",200,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"andand"}],"output":{"name":"bool"}}],[11,"hash","","",200,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",200,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",200,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",200,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",200,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",201,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",201,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"andeq"}],"output":{"name":"bool"}}],[11,"hash","","",201,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",201,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",201,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",201,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",201,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",202,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",202,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"at"}],"output":{"name":"bool"}}],[11,"hash","","",202,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",202,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",202,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",202,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",202,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",203,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"bang"}],"output":{"name":"bool"}}],[11,"hash","","",203,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",203,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",203,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",203,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",203,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",204,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",204,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"caret"}],"output":{"name":"bool"}}],[11,"hash","","",204,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",204,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",204,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",204,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",204,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",205,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"careteq"}],"output":{"name":"bool"}}],[11,"hash","","",205,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",205,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",205,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",205,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",205,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",206,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",206,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"colon"}],"output":{"name":"bool"}}],[11,"hash","","",206,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",206,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",206,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",206,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",206,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",207,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"colon2"}],"output":{"name":"bool"}}],[11,"hash","","",207,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",207,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",207,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",207,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",207,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",208,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"comma"}],"output":{"name":"bool"}}],[11,"hash","","",208,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",208,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",208,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",208,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",208,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",209,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"div"}],"output":{"name":"bool"}}],[11,"hash","","",209,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",209,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",209,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",209,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",209,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",210,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"diveq"}],"output":{"name":"bool"}}],[11,"hash","","",210,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",210,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",210,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",210,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",210,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",211,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",211,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"dot"}],"output":{"name":"bool"}}],[11,"hash","","",211,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",211,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",211,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",211,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",212,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"dot2"}],"output":{"name":"bool"}}],[11,"hash","","",212,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",212,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",212,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",212,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",213,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"dot3"}],"output":{"name":"bool"}}],[11,"hash","","",213,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",213,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",213,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",213,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",214,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"dotdoteq"}],"output":{"name":"bool"}}],[11,"hash","","",214,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",214,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",215,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",215,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"eq"}],"output":{"name":"bool"}}],[11,"hash","","",215,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",215,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",216,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",216,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"eqeq"}],"output":{"name":"bool"}}],[11,"hash","","",216,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",216,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",217,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",217,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"ge"}],"output":{"name":"bool"}}],[11,"hash","","",217,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",217,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",218,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",218,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"gt"}],"output":{"name":"bool"}}],[11,"hash","","",218,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",218,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",218,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",218,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",218,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",219,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",219,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"le"}],"output":{"name":"bool"}}],[11,"hash","","",219,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",219,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",219,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",219,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",219,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",220,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",220,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"lt"}],"output":{"name":"bool"}}],[11,"hash","","",220,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",220,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",220,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",220,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",220,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",221,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",221,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"muleq"}],"output":{"name":"bool"}}],[11,"hash","","",221,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",221,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",221,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",221,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",221,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",222,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",222,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"ne"}],"output":{"name":"bool"}}],[11,"hash","","",222,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",222,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",222,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",222,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",223,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"or"}],"output":{"name":"bool"}}],[11,"hash","","",223,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",223,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",223,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",223,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",224,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",224,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"oreq"}],"output":{"name":"bool"}}],[11,"hash","","",224,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",224,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",224,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",224,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",224,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",225,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"oror"}],"output":{"name":"bool"}}],[11,"hash","","",225,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",225,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",225,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",225,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",225,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",226,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",226,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"pound"}],"output":{"name":"bool"}}],[11,"hash","","",226,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",226,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",226,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",226,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",226,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",227,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",227,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"hash","","",227,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",227,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",227,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",227,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",227,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",228,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"rarrow"}],"output":{"name":"bool"}}],[11,"hash","","",228,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",228,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",228,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",228,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",228,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",229,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",229,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"larrow"}],"output":{"name":"bool"}}],[11,"hash","","",229,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",229,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",229,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",229,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",229,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",230,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",230,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"rem"}],"output":{"name":"bool"}}],[11,"hash","","",230,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",230,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",230,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",230,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",230,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",231,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",231,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"remeq"}],"output":{"name":"bool"}}],[11,"hash","","",231,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",231,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",231,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",231,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",231,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"rocket"}}],[11,"new","","",232,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"rocket"}],"output":{"name":"bool"}}],[11,"hash","","",232,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",232,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",232,{"inputs":[{"name":"cursor"}],"output":{"generics":["rocket"],"name":"presult"}}],[11,"description","","",232,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",232,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",233,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"semi"}],"output":{"name":"bool"}}],[11,"hash","","",233,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",233,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",233,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",233,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",233,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",234,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",234,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"shl"}],"output":{"name":"bool"}}],[11,"hash","","",234,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",234,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",234,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",234,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",234,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",235,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",235,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"shleq"}],"output":{"name":"bool"}}],[11,"hash","","",235,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",235,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",235,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",235,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",235,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",236,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",236,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"shr"}],"output":{"name":"bool"}}],[11,"hash","","",236,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",236,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",236,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",236,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",236,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",237,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",237,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"shreq"}],"output":{"name":"bool"}}],[11,"hash","","",237,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",237,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",237,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",237,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",237,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",238,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",238,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"star"}],"output":{"name":"bool"}}],[11,"hash","","",238,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",238,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",238,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",238,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",238,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",239,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",239,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"sub"}],"output":{"name":"bool"}}],[11,"hash","","",239,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",239,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",239,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",239,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",239,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",240,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",240,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"subeq"}],"output":{"name":"bool"}}],[11,"hash","","",240,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",240,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",240,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",240,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",240,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",241,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",241,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"underscore"}],"output":{"name":"bool"}}],[11,"hash","","",241,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",241,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",241,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",241,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",241,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",242,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",242,{"inputs":[{"name":"self"},{"name":"brace"}],"output":{"name":"bool"}}],[11,"hash","","",242,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",242,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",242,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",242,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",243,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"bracket"}],"output":{"name":"bool"}}],[11,"hash","","",243,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",243,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",243,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",243,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",244,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"paren"}],"output":{"name":"bool"}}],[11,"hash","","",244,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",244,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",244,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",244,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",245,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",245,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"hash","","",245,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",245,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",245,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",245,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",246,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",246,{"inputs":[{"name":"self"},{"name":"as"}],"output":{"name":"bool"}}],[11,"hash","","",246,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",246,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",246,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",246,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",246,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",247,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"auto"}],"output":{"name":"bool"}}],[11,"hash","","",247,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",247,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",247,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",247,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",247,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",248,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"hash","","",248,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",248,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",248,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",248,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",248,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",249,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"hash","","",249,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",249,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",249,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",249,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",249,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",250,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",250,{"inputs":[{"name":"self"},{"name":"capself"}],"output":{"name":"bool"}}],[11,"hash","","",250,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",250,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",250,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",250,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",250,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",251,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",251,{"inputs":[{"name":"self"},{"name":"catch"}],"output":{"name":"bool"}}],[11,"hash","","",251,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",251,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",251,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",251,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",251,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",252,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"hash","","",252,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",252,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",252,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",252,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",252,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",253,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"continue"}],"output":{"name":"bool"}}],[11,"hash","","",253,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",253,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",253,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",253,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",253,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",254,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",254,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",254,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",254,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",254,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",254,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",254,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",255,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"hash","","",255,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",255,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",255,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",255,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",255,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",256,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",256,{"inputs":[{"name":"self"},{"name":"do"}],"output":{"name":"bool"}}],[11,"hash","","",256,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",256,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",256,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",256,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",256,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",257,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",257,{"inputs":[{"name":"self"},{"name":"dyn"}],"output":{"name":"bool"}}],[11,"hash","","",257,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",257,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",257,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",257,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",257,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",258,{"inputs":[{"name":"self"},{"name":"else"}],"output":{"name":"bool"}}],[11,"hash","","",258,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",258,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",258,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",258,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",258,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",259,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",259,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"hash","","",259,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",259,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",259,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",259,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",259,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",260,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",260,{"inputs":[{"name":"self"},{"name":"extern"}],"output":{"name":"bool"}}],[11,"hash","","",260,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",260,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",260,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",260,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",260,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",261,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"fn"}],"output":{"name":"bool"}}],[11,"hash","","",261,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",261,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",261,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",261,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",261,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"for"}],"output":{"name":"bool"}}],[11,"hash","","",262,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",262,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",262,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",262,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",262,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",263,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"if"}],"output":{"name":"bool"}}],[11,"hash","","",263,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",263,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",263,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",263,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",263,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",264,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"name":"bool"}}],[11,"hash","","",264,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",264,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",264,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",264,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",264,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",265,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"bool"}}],[11,"hash","","",265,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",265,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",265,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",265,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",265,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"let"}],"output":{"name":"bool"}}],[11,"hash","","",266,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",266,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",266,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",266,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",266,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",267,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"loop"}],"output":{"name":"bool"}}],[11,"hash","","",267,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",267,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",267,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",267,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",267,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",268,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",268,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"bool"}}],[11,"hash","","",268,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",268,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",268,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",268,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",268,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",269,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",269,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",269,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",269,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",269,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",269,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",269,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",270,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"hash","","",270,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",270,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",270,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",270,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",270,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",271,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"hash","","",271,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",271,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",271,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",271,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",271,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",272,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"mut"}],"output":{"name":"bool"}}],[11,"hash","","",272,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",272,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",272,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",272,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",272,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"pub"}],"output":{"name":"bool"}}],[11,"hash","","",273,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",273,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",273,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",273,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",273,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",274,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"ref"}],"output":{"name":"bool"}}],[11,"hash","","",274,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",274,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",274,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",274,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",274,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",275,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",275,{"inputs":[{"name":"self"},{"name":"return"}],"output":{"name":"bool"}}],[11,"hash","","",275,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",275,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",275,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",275,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",275,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",276,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"self_"}],"output":{"name":"bool"}}],[11,"hash","","",276,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",276,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",276,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",276,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",276,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",277,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",277,{"inputs":[{"name":"self"},{"name":"static"}],"output":{"name":"bool"}}],[11,"hash","","",277,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",277,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",277,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",277,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",277,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",278,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",278,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"hash","","",278,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",278,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",278,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",278,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",278,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",279,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",279,{"inputs":[{"name":"self"},{"name":"super"}],"output":{"name":"bool"}}],[11,"hash","","",279,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",279,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",279,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",279,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",279,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",280,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",280,{"inputs":[{"name":"self"},{"name":"trait"}],"output":{"name":"bool"}}],[11,"hash","","",280,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",280,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",280,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",280,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",280,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",281,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",281,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",281,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"hash","","",281,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",281,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",281,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",281,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",281,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",282,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"union"}],"output":{"name":"bool"}}],[11,"hash","","",282,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",282,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",282,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",282,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",282,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",283,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",283,{"inputs":[{"name":"self"},{"name":"unsafe"}],"output":{"name":"bool"}}],[11,"hash","","",283,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",283,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",283,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",283,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",283,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",284,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",284,{"inputs":[{"name":"self"},{"name":"use"}],"output":{"name":"bool"}}],[11,"hash","","",284,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",284,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",284,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",284,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",284,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",285,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",285,{"inputs":[{"name":"self"},{"name":"where"}],"output":{"name":"bool"}}],[11,"hash","","",285,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",285,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",285,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",285,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",285,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",286,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",286,{"inputs":[{"name":"self"},{"name":"while"}],"output":{"name":"bool"}}],[11,"hash","","",286,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",286,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",286,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",286,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",286,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",287,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",287,{"inputs":[{"name":"self"},{"name":"yield"}],"output":{"name":"bool"}}],[11,"hash","","",287,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",287,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",287,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",287,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",287,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[0,"attr","syn","",null,null],[3,"Attribute","syn::attr","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",163,null],[13,"Inner","","",163,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",164,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",164,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",164,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",165,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",165,null],[5,"nested_meta_item_from_tokens","","",null,null],[5,"list_of_nested_meta_items_from_tokens","","",null,null],[0,"parsing","","",null,null],[4,"Comment","syn::attr::parsing","",null,null],[13,"Inner","","",289,null],[13,"Outer","","",289,null],[5,"eq","","",null,{"inputs":[{"name":"span"}],"output":{"name":"tokentree"}}],[5,"lit_doc_comment","","",null,{"inputs":[{"name":"cursor"},{"name":"comment"}],"output":{"generics":["tokentree"],"name":"presult"}}],[11,"parse_inner","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"printing","syn::attr","",null,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"FilterAttrs","syn::attr","",null,null],[16,"Ret","","",290,null],[10,"outer","","",290,null],[10,"inner","","",290,null],[11,"fmt","syn","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",163,null],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",163,null],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",164,null],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"hash","","",164,null],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",164,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",164,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",164,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",164,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",165,null],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"bool"}}],[11,"hash","","",165,null],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",165,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",165,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"data","","",null,null],[3,"Variant","syn::data","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisCrate","","A crate-level visibility: `pub(crate)`.",null,null],[12,"pub_token","","",7,null],[12,"paren_token","","",7,null],[12,"crate_token","","",7,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",166,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",166,null],[13,"Unit","","Unit struct or unit variant such as `None`.",166,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",167,null],[13,"Crate","","A crate-level visibility: `pub(crate)`.",167,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",167,null],[13,"Inherited","","An inherited visibility, which usually means private.",167,null],[0,"parsing","","",null,null],[11,"parse","syn","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::data","",null,null],[11,"to_tokens","syn","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",166,null],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"hash","","",166,null],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",166,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",166,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",167,null],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",167,null],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",167,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",167,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",167,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"expr","","",null,null],[3,"ExprBox","syn::expr","A box expression: `box f`.",null,null],[12,"attrs","","",16,null],[12,"box_token","","",16,null],[12,"expr","","",16,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",28,null],[12,"place","","",28,null],[12,"arrow_token","","",28,null],[12,"value","","",28,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",11,null],[12,"bracket_token","","",11,null],[12,"elems","","",11,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",18,null],[12,"func","","",18,null],[12,"paren_token","","",18,null],[12,"args","","",18,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",34,null],[12,"receiver","","",34,null],[12,"dot_token","","",34,null],[12,"method","","",34,null],[12,"turbofish","","",34,null],[12,"paren_token","","",34,null],[12,"args","","",34,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",42,null],[12,"paren_token","","",42,null],[12,"elems","","",42,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",14,null],[12,"left","","",14,null],[12,"op","","",14,null],[12,"right","","",14,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",44,null],[12,"op","","",44,null],[12,"expr","","",44,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",30,null],[12,"lit","","",30,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",19,null],[12,"expr","","",19,null],[12,"as_token","","",19,null],[12,"ty","","",19,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",43,null],[12,"expr","","",43,null],[12,"colon_token","","",43,null],[12,"ty","","",43,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",26,null],[12,"if_token","","",26,null],[12,"cond","","",26,null],[12,"then_branch","","",26,null],[12,"else_branch","","",26,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",27,null],[12,"if_token","","",27,null],[12,"let_token","","",27,null],[12,"pat","","",27,null],[12,"eq_token","","",27,null],[12,"expr","","",27,null],[12,"then_branch","","",27,null],[12,"else_branch","","",27,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",47,null],[12,"label","","",47,null],[12,"while_token","","",47,null],[12,"cond","","",47,null],[12,"body","","",47,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",48,null],[12,"label","","",48,null],[12,"while_token","","",48,null],[12,"let_token","","",48,null],[12,"pat","","",48,null],[12,"eq_token","","",48,null],[12,"expr","","",48,null],[12,"body","","",48,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",24,null],[12,"label","","",24,null],[12,"for_token","","",24,null],[12,"pat","","",24,null],[12,"in_token","","",24,null],[12,"expr","","",24,null],[12,"body","","",24,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",31,null],[12,"label","","",31,null],[12,"loop_token","","",31,null],[12,"body","","",31,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",33,null],[12,"match_token","","",33,null],[12,"expr","","",33,null],[12,"brace_token","","",33,null],[12,"arms","","",33,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",21,null],[12,"capture","","",21,null],[12,"or1_token","","",21,null],[12,"inputs","","",21,null],[12,"or2_token","","",21,null],[12,"output","","",21,null],[12,"body","","",21,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",45,null],[12,"unsafe_token","","",45,null],[12,"block","","",45,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",15,null],[12,"block","","",15,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",12,null],[12,"left","","",12,null],[12,"eq_token","","",12,null],[12,"right","","",12,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",13,null],[12,"left","","",13,null],[12,"op","","",13,null],[12,"right","","",13,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",23,null],[12,"base","","",23,null],[12,"dot_token","","",23,null],[12,"member","","",23,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",29,null],[12,"expr","","",29,null],[12,"bracket_token","","",29,null],[12,"index","","",29,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",37,null],[12,"from","","",37,null],[12,"limits","","",37,null],[12,"to","","",37,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",36,null],[12,"qself","","",36,null],[12,"path","","",36,null],[3,"ExprAddrOf","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",10,null],[12,"and_token","","",10,null],[12,"mutability","","",10,null],[12,"expr","","",10,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",17,null],[12,"break_token","","",17,null],[12,"label","","",17,null],[12,"expr","","",17,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",22,null],[12,"continue_token","","",22,null],[12,"label","","",22,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",39,null],[12,"return_token","","",39,null],[12,"expr","","",39,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",32,null],[12,"mac","","",32,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",40,null],[12,"path","","",40,null],[12,"brace_token","","",40,null],[12,"fields","","",40,null],[12,"dot2_token","","",40,null],[12,"rest","","",40,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",38,null],[12,"bracket_token","","",38,null],[12,"expr","","",38,null],[12,"semi_token","","",38,null],[12,"len","","",38,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",35,null],[12,"paren_token","","",35,null],[12,"expr","","",35,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",25,null],[12,"group_token","","",25,null],[12,"expr","","",25,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",41,null],[12,"expr","","",41,null],[12,"question_token","","",41,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",20,null],[12,"do_token","","",20,null],[12,"catch_token","","",20,null],[12,"block","","",20,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",49,null],[12,"yield_token","","",49,null],[12,"expr","","",49,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",46,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",50,null],[12,"span","","",50,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",54,null],[12,"member","","Name or index of the field.",54,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,null],[12,"expr","","Value of the field.",54,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",55,null],[12,"colon_token","","",55,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",52,null],[12,"stmts","","Statements in a block",52,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",56,null],[12,"let_token","","",56,null],[12,"pat","","",56,null],[12,"ty","","",56,null],[12,"init","","",56,null],[12,"semi_token","","",56,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",70,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",59,null],[12,"mutability","","",59,null],[12,"ident","","",59,null],[12,"subpat","","",59,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",66,null],[12,"brace_token","","",66,null],[12,"fields","","",66,null],[12,"dot2_token","","",66,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",68,null],[12,"pat","","",68,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",62,null],[12,"path","","",62,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",67,null],[12,"front","","",67,null],[12,"dot2_token","","",67,null],[12,"comma_token","","",67,null],[12,"back","","",67,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",58,null],[12,"pat","","",58,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",64,null],[12,"mutability","","",64,null],[12,"pat","","",64,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",60,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",63,null],[12,"limits","","",63,null],[12,"hi","","",63,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",65,null],[12,"front","","",65,null],[12,"middle","","",65,null],[12,"dot2_token","","",65,null],[12,"comma_token","","",65,null],[12,"back","","",65,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",61,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",69,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",51,null],[12,"pats","","",51,null],[12,"guard","","",51,null],[12,"rocket_token","","",51,null],[12,"body","","",51,null],[12,"comma","","",51,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",53,null],[12,"member","","",53,null],[12,"colon_token","","",53,null],[12,"pat","","",53,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",168,null],[13,"InPlace","","A placement expression: `place <- value`.",168,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",168,null],[13,"Call","","A function call expression: `invoke(a, b)`.",168,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",168,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",168,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",168,null],[13,"Unary","","A unary operation: `!x`, `*x`.",168,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",168,null],[13,"Cast","","A cast expression: `foo as f64`.",168,null],[13,"Type","","A type ascription expression: `foo: f64`.",168,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",168,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",168,null],[13,"While","","A while loop: `while expr { ... }`.",168,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",168,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",168,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",168,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",168,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",168,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",168,null],[13,"Block","","A blocked scope: `{ ... }`.",168,null],[13,"Assign","","An assignment expression: `a = compute()`.",168,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",168,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",168,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",168,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",168,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",168,null],[13,"AddrOf","","A referencing operation: `&a` or `&mut a`.",168,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",168,null],[13,"Continue","","A `continue`, with an optional label.",168,null],[13,"Return","","A `return`, with an optional value to be returned.",168,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",168,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",168,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",168,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",168,null],[13,"Group","","An expression contained within invisible delimiters.",168,null],[13,"Try","","A try-expression: `expr?`.",168,null],[13,"Catch","","A catch expression: `do catch { ... }`.",168,null],[13,"Yield","","A yield expression: `yield expr`.",168,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",168,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",169,null],[13,"Unnamed","","An unnamed field like `self.0`.",169,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",170,null],[13,"Const","","A const expression. Must be inside of a block.",170,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",173,null],[13,"Item","","An item definition.",173,null],[13,"Expr","","Expr without trailing semicolon.",173,null],[13,"Semi","","Expression with trailing semicolon.",173,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",171,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",171,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",171,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",171,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",171,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",171,null],[13,"Box","","A box pattern: `box v`.",171,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",171,null],[13,"Lit","","A literal pattern: `0`.",171,null],[13,"Range","","A range pattern: `1..=2`.",171,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",171,null],[13,"Macro","","A macro in expression position.",171,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",171,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",172,null],[13,"Closed","","Inclusive at the beginning and end.",172,null],[5,"arm_expr_requires_comma","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[0,"parsing","","",null,null],[5,"expr_no_struct","syn::expr::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"ambiguous_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"assign_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"placement_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"range_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"or_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"and_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"compare_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"bitor_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"bitxor_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"bitand_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"shift_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"arith_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"term_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"cast_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"unary_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"trailer_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"atom_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"expr_nosemi","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"and_call","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"and_method_call","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["exprmethodcall"],"name":"presult"}}],[5,"else_block","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"expr_closure","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"fn_arg","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["fnarg"],"name":"presult"}}],[5,"expr_break","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"expr_ret","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"expr_range","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"and_field","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"and_index","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"stmt_mac","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_local","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_item","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_blockexpr","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_expr","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"pat_lit_expr","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["expr"],"name":"presult"}}],[11,"parse","syn","",168,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",32,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",25,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",25,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",35,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",35,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",11,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",11,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",27,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",27,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",26,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",26,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",24,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",24,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",33,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",33,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",55,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",55,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",54,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",54,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",36,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",36,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_within","","",52,{"inputs":[{"name":"cursor"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",68,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",68,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",62,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",62,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",67,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",67,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",64,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",64,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",63,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",63,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",65,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",65,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",61,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",61,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::expr","",null,null],[5,"wrap_bare_struct","syn::expr::printing","",null,{"inputs":[{"name":"tokens"},{"name":"expr"}],"output":null}],[5,"attrs_to_tokens","","",null,null],[5,"maybe_wrap_else","","",null,{"inputs":[{"name":"tokens"},{"name":"option"}],"output":null}],[11,"to_tokens","syn","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",62,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",168,null],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",168,null],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",168,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",168,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",168,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",168,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",168,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",168,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",168,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",168,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",168,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",168,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",168,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",168,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",168,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",47,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",168,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",168,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",168,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",168,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",168,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",168,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",168,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",168,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",168,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",168,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",168,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",168,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",168,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",168,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"expraddrof"}}],[11,"from","","",168,{"inputs":[{"name":"expraddrof"}],"output":{"name":"expr"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",168,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",168,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",168,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",168,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",40,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",168,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",168,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",168,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",168,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",168,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",168,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",168,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",168,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"replace_attrs","","",168,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"vec"}],"output":{"generics":["attribute"],"name":"vec"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",169,null],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"bool"}}],[11,"hash","","",169,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",50,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"methodturbofish"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",170,null],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"bool"}}],[11,"hash","","",170,null],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"genericmethodargument"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",173,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",173,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",171,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",171,null],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"patwild"}}],[11,"from","","",171,{"inputs":[{"name":"patwild"}],"output":{"name":"pat"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"patident"}}],[11,"from","","",171,{"inputs":[{"name":"patident"}],"output":{"name":"pat"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"patstruct"}}],[11,"from","","",171,{"inputs":[{"name":"patstruct"}],"output":{"name":"pat"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pattuplestruct"}}],[11,"from","","",171,{"inputs":[{"name":"pattuplestruct"}],"output":{"name":"pat"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"patpath"}}],[11,"from","","",171,{"inputs":[{"name":"patpath"}],"output":{"name":"pat"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pattuple"}}],[11,"from","","",171,{"inputs":[{"name":"pattuple"}],"output":{"name":"pat"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"patbox"}}],[11,"from","","",171,{"inputs":[{"name":"patbox"}],"output":{"name":"pat"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"patref"}}],[11,"from","","",171,{"inputs":[{"name":"patref"}],"output":{"name":"pat"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"patlit"}}],[11,"from","","",171,{"inputs":[{"name":"patlit"}],"output":{"name":"pat"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"patrange"}}],[11,"from","","",171,{"inputs":[{"name":"patrange"}],"output":{"name":"pat"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"patslice"}}],[11,"from","","",171,{"inputs":[{"name":"patslice"}],"output":{"name":"pat"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"patmacro"}}],[11,"from","","",171,{"inputs":[{"name":"patmacro"}],"output":{"name":"pat"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"patverbatim"}}],[11,"from","","",171,{"inputs":[{"name":"patverbatim"}],"output":{"name":"pat"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",69,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",172,null],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",172,null],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[0,"generics","","",null,null],[3,"Generics","syn::generics","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",73,null],[12,"params","","",73,null],[12,"gt_token","","",73,null],[12,"where_clause","","",73,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",79,null],[12,"ident","","",79,null],[12,"colon_token","","",79,null],[12,"bounds","","",79,null],[12,"eq_token","","",79,null],[12,"default","","",79,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",74,null],[12,"lifetime","","",74,null],[12,"colon_token","","",74,null],[12,"bounds","","",74,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"default","","",72,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",81,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",83,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[12,"0","","",82,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",71,null],[12,"lt_token","","",71,null],[12,"lifetimes","","",71,null],[12,"gt_token","","",71,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"modifier","","",78,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",80,null],[12,"predicates","","",80,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",77,null],[12,"bounded_ty","","The type being bounded",77,null],[12,"colon_token","","",77,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",76,null],[12,"colon_token","","",76,null],[12,"bounds","","",76,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",75,null],[12,"eq_token","","",75,null],[12,"rhs_ty","","",75,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",174,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",174,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",174,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",176,null],[13,"Lifetime","","",176,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",175,null],[13,"Maybe","","",175,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",177,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",177,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",177,null],[0,"parsing","","",null,null],[11,"parse","syn","",73,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",73,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",74,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",74,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",79,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",78,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",78,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",72,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",72,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",80,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",177,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",177,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::generics","",null,null],[5,"empty_normal_generics","syn::generics::printing","Returns true if the generics object has no lifetimes or ty_params.",null,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"to_tokens","syn","",73,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",76,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"default","","",73,{"inputs":[],"output":{"name":"generics"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",174,null],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"bool"}}],[11,"hash","","",174,null],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",174,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",174,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",174,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"implgenerics"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"implgenerics"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"typegenerics"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"typegenerics"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"turbofish"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"turbofish"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",83,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",74,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",79,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",176,null],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"bool"}}],[11,"hash","","",176,null],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",176,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",176,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",175,null],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",175,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",177,null],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",177,null],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",177,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",177,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",75,null],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",177,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",177,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"ident","","",null,null],[3,"Ident","syn::ident","A word of Rust code, such as a keyword or variable name.",null,null],[12,"term","","",84,null],[12,"span","","",84,null],[0,"parsing","","",null,null],[11,"parse","syn","",84,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",84,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::ident","",null,null],[11,"to_tokens","syn","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ident` from the structured items. This is mainly used by the parser to create `Ident`s from existing Rust source code.",84,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"self_"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"capself"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"crate"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",84,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"item","","",null,null],[3,"ItemExternCrate","syn::item","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",100,null],[12,"vis","","",100,null],[12,"extern_token","","",100,null],[12,"crate_token","","",100,null],[12,"ident","","",100,null],[12,"rename","","",100,null],[12,"semi_token","","",100,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",112,null],[12,"vis","","",112,null],[12,"use_token","","",112,null],[12,"leading_colon","","",112,null],[12,"prefix","","",112,null],[12,"tree","","",112,null],[12,"semi_token","","",112,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",107,null],[12,"vis","","",107,null],[12,"static_token","","",107,null],[12,"mutability","","",107,null],[12,"ident","","",107,null],[12,"colon_token","","",107,null],[12,"ty","","",107,null],[12,"eq_token","","",107,null],[12,"expr","","",107,null],[12,"semi_token","","",107,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",98,null],[12,"vis","","",98,null],[12,"const_token","","",98,null],[12,"ident","","",98,null],[12,"colon_token","","",98,null],[12,"ty","","",98,null],[12,"eq_token","","",98,null],[12,"expr","","",98,null],[12,"semi_token","","",98,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",101,null],[12,"vis","","",101,null],[12,"constness","","",101,null],[12,"unsafety","","",101,null],[12,"abi","","",101,null],[12,"ident","","",101,null],[12,"decl","","",101,null],[12,"block","","",101,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",106,null],[12,"vis","","",106,null],[12,"mod_token","","",106,null],[12,"ident","","",106,null],[12,"content","","",106,null],[12,"semi","","",106,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",102,null],[12,"abi","","",102,null],[12,"brace_token","","",102,null],[12,"items","","",102,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",110,null],[12,"vis","","",110,null],[12,"type_token","","",110,null],[12,"ident","","",110,null],[12,"generics","","",110,null],[12,"eq_token","","",110,null],[12,"ty","","",110,null],[12,"semi_token","","",110,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",108,null],[12,"vis","","",108,null],[12,"struct_token","","",108,null],[12,"ident","","",108,null],[12,"generics","","",108,null],[12,"fields","","",108,null],[12,"semi_token","","",108,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",99,null],[12,"vis","","",99,null],[12,"enum_token","","",99,null],[12,"ident","","",99,null],[12,"generics","","",99,null],[12,"brace_token","","",99,null],[12,"variants","","",99,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",111,null],[12,"vis","","",111,null],[12,"union_token","","",111,null],[12,"ident","","",111,null],[12,"generics","","",111,null],[12,"fields","","",111,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",109,null],[12,"vis","","",109,null],[12,"unsafety","","",109,null],[12,"auto_token","","",109,null],[12,"trait_token","","",109,null],[12,"ident","","",109,null],[12,"generics","","",109,null],[12,"colon_token","","",109,null],[12,"supertraits","","",109,null],[12,"brace_token","","",109,null],[12,"items","","",109,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",103,null],[12,"defaultness","","",103,null],[12,"unsafety","","",103,null],[12,"impl_token","","",103,null],[12,"generics","","",103,null],[12,"trait_","","Trait this impl implements.",103,null],[12,"self_ty","","The Self type of the impl.",103,null],[12,"brace_token","","",103,null],[12,"items","","",103,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",104,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",104,null],[12,"mac","","",104,null],[12,"semi_token","","",104,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",105,null],[12,"vis","","",105,null],[12,"macro_token","","",105,null],[12,"ident","","",105,null],[12,"paren_token","","",105,null],[12,"args","","",105,null],[12,"brace_token","","",105,null],[12,"body","","",105,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",113,null],[3,"UsePath","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",null,null],[12,"ident","","",122,null],[12,"rename","","",122,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",120,null],[3,"UseList","","A braced list of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",121,null],[12,"items","","",121,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",89,null],[12,"vis","","",89,null],[12,"ident","","",89,null],[12,"decl","","",89,null],[12,"semi_token","","",89,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",90,null],[12,"vis","","",90,null],[12,"static_token","","",90,null],[12,"mutability","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"semi_token","","",90,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",91,null],[12,"vis","","",91,null],[12,"type_token","","",91,null],[12,"ident","","",91,null],[12,"semi_token","","",91,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",92,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",115,null],[12,"const_token","","",115,null],[12,"ident","","",115,null],[12,"colon_token","","",115,null],[12,"ty","","",115,null],[12,"default","","",115,null],[12,"semi_token","","",115,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",117,null],[12,"sig","","",117,null],[12,"default","","",117,null],[12,"semi_token","","",117,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",118,null],[12,"type_token","","",118,null],[12,"ident","","",118,null],[12,"generics","","",118,null],[12,"colon_token","","",118,null],[12,"bounds","","",118,null],[12,"default","","",118,null],[12,"semi_token","","",118,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",116,null],[12,"mac","","",116,null],[12,"semi_token","","",116,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",119,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",93,null],[12,"vis","","",93,null],[12,"defaultness","","",93,null],[12,"const_token","","",93,null],[12,"ident","","",93,null],[12,"colon_token","","",93,null],[12,"ty","","",93,null],[12,"eq_token","","",93,null],[12,"expr","","",93,null],[12,"semi_token","","",93,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",95,null],[12,"vis","","",95,null],[12,"defaultness","","",95,null],[12,"sig","","",95,null],[12,"block","","",95,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",96,null],[12,"vis","","",96,null],[12,"defaultness","","",96,null],[12,"type_token","","",96,null],[12,"ident","","",96,null],[12,"generics","","",96,null],[12,"eq_token","","",96,null],[12,"ty","","",96,null],[12,"semi_token","","",96,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",94,null],[12,"mac","","",94,null],[12,"semi_token","","",94,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",97,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",114,null],[12,"unsafety","","",114,null],[12,"abi","","",114,null],[12,"ident","","",114,null],[12,"decl","","",114,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",88,null],[12,"generics","","",88,null],[12,"paren_token","","",88,null],[12,"inputs","","",88,null],[12,"variadic","","",88,null],[12,"output","","",88,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",87,null],[12,"lifetime","","",87,null],[12,"mutability","","",87,null],[12,"self_token","","",87,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",86,null],[12,"self_token","","",86,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",85,null],[12,"colon_token","","",85,null],[12,"ty","","",85,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",181,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",181,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",181,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",181,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",181,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",181,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",181,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",181,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",181,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",181,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",181,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",181,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",181,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",181,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",181,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",181,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",183,null],[13,"Glob","","A glob import in a `use` item: `*`.",183,null],[13,"List","","A braced list of imports in a `use` item: `{A, B, C}`.",183,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",179,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",179,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",179,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",179,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",182,null],[13,"Method","","A trait method within the definition of a trait.",182,null],[13,"Type","","An associated type within the definition of a trait.",182,null],[13,"Macro","","A macro invocation within the definition of a trait.",182,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",182,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",180,null],[13,"Method","","A method within an impl block.",180,null],[13,"Type","","An associated type within an impl block.",180,null],[13,"Macro","","A macro invocation within an impl block.",180,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",180,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",178,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",178,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",178,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",178,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",178,null],[0,"parsing","","",null,null],[5,"use_prefix","syn::item::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["ident"],"name":"presult"}}],[5,"grab_cursor","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["cursor"],"name":"presult"}}],[5,"deprecated_default_impl","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["itemverbatim"],"name":"presult"}}],[5,"is_brace","","",null,{"inputs":[{"name":"macrodelimiter"}],"output":{"name":"bool"}}],[11,"parse","syn","",181,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",181,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",183,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",183,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",178,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",178,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",179,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",179,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",182,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",182,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",180,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",180,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::item","",null,null],[3,"NamedDecl","syn::item::printing","",null,null],[12,"0","","",291,null],[12,"1","","",291,null],[11,"to_tokens","syn","",100,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","syn::item::printing","",291,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","syn","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",181,null],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",181,null],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"bool"}}],[11,"hash","","",100,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"itemexterncrate"}}],[11,"from","","",181,{"inputs":[{"name":"itemexterncrate"}],"output":{"name":"item"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"bool"}}],[11,"hash","","",112,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"itemuse"}}],[11,"from","","",181,{"inputs":[{"name":"itemuse"}],"output":{"name":"item"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",107,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"bool"}}],[11,"hash","","",107,null],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"itemstatic"}}],[11,"from","","",181,{"inputs":[{"name":"itemstatic"}],"output":{"name":"item"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"bool"}}],[11,"hash","","",98,null],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"itemconst"}}],[11,"from","","",181,{"inputs":[{"name":"itemconst"}],"output":{"name":"item"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"itemfn"}}],[11,"from","","",181,{"inputs":[{"name":"itemfn"}],"output":{"name":"item"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"itemmod"}}],[11,"from","","",181,{"inputs":[{"name":"itemmod"}],"output":{"name":"item"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"itemforeignmod"}}],[11,"from","","",181,{"inputs":[{"name":"itemforeignmod"}],"output":{"name":"item"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"itemtype"}}],[11,"from","","",181,{"inputs":[{"name":"itemtype"}],"output":{"name":"item"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"itemstruct"}}],[11,"from","","",181,{"inputs":[{"name":"itemstruct"}],"output":{"name":"item"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"itemenum"}}],[11,"from","","",181,{"inputs":[{"name":"itemenum"}],"output":{"name":"item"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"itemunion"}}],[11,"from","","",181,{"inputs":[{"name":"itemunion"}],"output":{"name":"item"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"itemtrait"}}],[11,"from","","",181,{"inputs":[{"name":"itemtrait"}],"output":{"name":"item"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"itemimpl"}}],[11,"from","","",181,{"inputs":[{"name":"itemimpl"}],"output":{"name":"item"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"itemmacro"}}],[11,"from","","",181,{"inputs":[{"name":"itemmacro"}],"output":{"name":"item"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"itemmacro2"}}],[11,"from","","",181,{"inputs":[{"name":"itemmacro2"}],"output":{"name":"item"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"itemverbatim"}}],[11,"from","","",181,{"inputs":[{"name":"itemverbatim"}],"output":{"name":"item"}}],[11,"to_tokens","","",181,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",105,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",113,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",181,{"inputs":[{"name":"deriveinput"}],"output":{"name":"item"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",183,null],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"bool"}}],[11,"hash","","",183,null],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"usetree"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",122,null],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"bool"}}],[11,"hash","","",122,null],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usepath"}}],[11,"from","","",183,{"inputs":[{"name":"usepath"}],"output":{"name":"usetree"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"bool"}}],[11,"hash","","",120,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"useglob"}}],[11,"from","","",183,{"inputs":[{"name":"useglob"}],"output":{"name":"usetree"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"bool"}}],[11,"hash","","",121,null],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"uselist"}}],[11,"from","","",183,{"inputs":[{"name":"uselist"}],"output":{"name":"usetree"}}],[11,"to_tokens","","",183,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",179,null],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",179,null],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemfn"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemfn"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemstatic"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemstatic"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemtype"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemtype"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemverbatim"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemverbatim"}],"output":{"name":"foreignitem"}}],[11,"to_tokens","","",179,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",92,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",182,null],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",182,null],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"bool"}}],[11,"hash","","",115,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"traititemconst"}}],[11,"from","","",182,{"inputs":[{"name":"traititemconst"}],"output":{"name":"traititem"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"bool"}}],[11,"hash","","",117,null],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"traititemmethod"}}],[11,"from","","",182,{"inputs":[{"name":"traititemmethod"}],"output":{"name":"traititem"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"bool"}}],[11,"hash","","",118,null],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"traititemtype"}}],[11,"from","","",182,{"inputs":[{"name":"traititemtype"}],"output":{"name":"traititem"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"bool"}}],[11,"hash","","",116,null],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"traititemmacro"}}],[11,"from","","",182,{"inputs":[{"name":"traititemmacro"}],"output":{"name":"traititem"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"traititemverbatim"}}],[11,"from","","",182,{"inputs":[{"name":"traititemverbatim"}],"output":{"name":"traititem"}}],[11,"to_tokens","","",182,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",119,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",180,null],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",180,null],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"implitemconst"}}],[11,"from","","",180,{"inputs":[{"name":"implitemconst"}],"output":{"name":"implitem"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"implitemmethod"}}],[11,"from","","",180,{"inputs":[{"name":"implitemmethod"}],"output":{"name":"implitem"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"implitemtype"}}],[11,"from","","",180,{"inputs":[{"name":"implitemtype"}],"output":{"name":"implitem"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"implitemmacro"}}],[11,"from","","",180,{"inputs":[{"name":"implitemmacro"}],"output":{"name":"implitem"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"implitemverbatim"}}],[11,"from","","",180,{"inputs":[{"name":"implitemverbatim"}],"output":{"name":"implitem"}}],[11,"to_tokens","","",180,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",97,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",114,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",178,null],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"hash","","",178,null],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"argselfref"}}],[11,"from","","",178,{"inputs":[{"name":"argselfref"}],"output":{"name":"fnarg"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"argself"}}],[11,"from","","",178,{"inputs":[{"name":"argself"}],"output":{"name":"fnarg"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"argcaptured"}}],[11,"from","","",178,{"inputs":[{"name":"argcaptured"}],"output":{"name":"fnarg"}}],[11,"from","","",178,{"inputs":[{"name":"pat"}],"output":{"name":"fnarg"}}],[11,"from","","",178,{"inputs":[{"name":"type"}],"output":{"name":"fnarg"}}],[11,"to_tokens","","",178,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"file","","",null,null],[3,"File","syn::file","A complete file of Rust source code.",null,null],[12,"shebang","","",123,null],[12,"attrs","","",123,null],[12,"items","","",123,null],[0,"parsing","","",null,null],[11,"parse","syn","",123,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::file","",null,null],[11,"to_tokens","syn","",123,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"bool"}}],[11,"hash","","",123,null],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[0,"lifetime","","",null,null],[3,"Lifetime","syn::lifetime","A Rust lifetime: `'a`.",null,null],[12,"term","","",124,null],[12,"span","","",124,null],[0,"parsing","","",null,null],[11,"parse","syn","",124,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::lifetime","",null,null],[11,"to_tokens","syn","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",124,{"inputs":[{"name":"term"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",124,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"lit","","",null,null],[3,"LitStr","syn::lit","A UTF-8 string literal: `\"foo\"`.",null,null],[12,"token","","",131,null],[12,"span","","",131,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[12,"token","","",127,null],[12,"span","","",127,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[12,"token","","",126,null],[12,"span","","",126,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[12,"token","","",128,null],[12,"span","","",128,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[12,"token","","",130,null],[12,"span","","",130,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[12,"token","","",129,null],[12,"span","","",129,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",125,null],[12,"span","","",125,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",132,null],[12,"span","","",132,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",186,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",186,null],[13,"Byte","","A byte literal: `b'f'`.",186,null],[13,"Char","","A character literal: `'a'`.",186,null],[13,"Int","","An integer literal: `1` or `1u16`.",186,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",186,null],[13,"Bool","","A boolean literal: `true` or `false`.",186,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",186,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",187,null],[13,"Raw","","A raw string like `r##\"data\"##`.",187,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",185,null],[13,"I16","","",185,null],[13,"I32","","",185,null],[13,"I64","","",185,null],[13,"I128","","",185,null],[13,"Isize","","",185,null],[13,"U8","","",185,null],[13,"U16","","",185,null],[13,"U32","","",185,null],[13,"U64","","",185,null],[13,"U128","","",185,null],[13,"Usize","","",185,null],[13,"None","","",185,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",184,null],[13,"F64","","",184,null],[13,"None","","",184,null],[0,"parsing","","",null,null],[11,"parse","syn","",186,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",186,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::lit","",null,null],[11,"to_tokens","syn","",131,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"value","syn::lit","",null,null],[5,"number_is_int","syn::lit::value","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"number_is_float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"byte","","Get the byte at offset idx, or a default of `b'\\0'` if we're looking past the end of the input buffer.",null,{"inputs":[{"name":"s"},{"name":"usize"}],"output":{"name":"u8"}}],[5,"next_chr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"char"}}],[5,"parse_lit_str","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"parse_lit_str_cooked","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"parse_lit_str_raw","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"parse_lit_byte_str","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"parse_lit_byte_str_cooked","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"parse_lit_byte_str_raw","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"parse_lit_byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u8"}}],[5,"parse_lit_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"char"}}],[5,"backslash_x","","",null,null],[5,"backslash_u","","",null,null],[5,"parse_lit_int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u64"],"name":"option"}}],[5,"parse_lit_float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"f64"}}],[5,"to_literal","","",null,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"new","syn","",186,{"inputs":[{"name":"literal"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",186,null],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",186,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",186,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",186,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",186,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",186,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",186,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",186,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",186,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",186,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","",131,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",131,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",127,null],[11,"value","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"new","","",126,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","",128,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",128,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"new","","",130,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",130,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"new","","",129,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",129,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",129,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",131,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",127,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",126,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",128,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",130,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",129,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",125,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",132,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",187,null],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",187,null],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",185,null],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"intsuffix"}],"output":{"name":"bool"}}],[11,"hash","","",185,null],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",184,null],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"floatsuffix"}],"output":{"name":"bool"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[0,"mac","","",null,null],[3,"Macro","syn::mac","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",133,null],[12,"bang_token","","",133,null],[12,"delimiter","","",133,null],[12,"tts","","",133,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",188,null],[13,"Brace","","",188,null],[13,"Bracket","","",188,null],[0,"parsing","","",null,null],[11,"parse","syn","",133,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",133,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::mac","",null,null],[11,"to_tokens","syn","",133,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",188,null],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",133,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"derive","","",null,null],[3,"DeriveInput","syn::derive","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",137,null],[12,"vis","","Visibility of the struct or enum.",137,null],[12,"ident","","Name of the struct or enum.",137,null],[12,"generics","","Generics required to complete the definition.",137,null],[12,"data","","Data within the struct or enum.",137,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",135,null],[12,"fields","","",135,null],[12,"semi_token","","",135,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",134,null],[12,"brace_token","","",134,null],[12,"variants","","",134,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",136,null],[12,"fields","","",136,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",189,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",189,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",189,null],[0,"parsing","","",null,null],[5,"data_struct","syn::derive::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"data_enum","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","syn","",137,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::derive","",null,null],[11,"to_tokens","syn","",137,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",137,null],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"hash","","",189,null],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",189,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",189,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",189,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[0,"op","","",null,null],[4,"BinOp","syn::op","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",190,null],[13,"Sub","","The `-` operator (subtraction)",190,null],[13,"Mul","","The `*` operator (multiplication)",190,null],[13,"Div","","The `/` operator (division)",190,null],[13,"Rem","","The `%` operator (modulus)",190,null],[13,"And","","The `&&` operator (logical and)",190,null],[13,"Or","","The `||` operator (logical or)",190,null],[13,"BitXor","","The `^` operator (bitwise xor)",190,null],[13,"BitAnd","","The `&` operator (bitwise and)",190,null],[13,"BitOr","","The `|` operator (bitwise or)",190,null],[13,"Shl","","The `<<` operator (shift left)",190,null],[13,"Shr","","The `>>` operator (shift right)",190,null],[13,"Eq","","The `==` operator (equality)",190,null],[13,"Lt","","The `<` operator (less than)",190,null],[13,"Le","","The `<=` operator (less than or equal to)",190,null],[13,"Ne","","The `!=` operator (not equal to)",190,null],[13,"Ge","","The `>=` operator (greater than or equal to)",190,null],[13,"Gt","","The `>` operator (greater than)",190,null],[13,"AddEq","","The `+=` operator",190,null],[13,"SubEq","","The `-=` operator",190,null],[13,"MulEq","","The `*=` operator",190,null],[13,"DivEq","","The `/=` operator",190,null],[13,"RemEq","","The `%=` operator",190,null],[13,"BitXorEq","","The `^=` operator",190,null],[13,"BitAndEq","","The `&=` operator",190,null],[13,"BitOrEq","","The `|=` operator",190,null],[13,"ShlEq","","The `<<=` operator",190,null],[13,"ShrEq","","The `>>=` operator",190,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",191,null],[13,"Not","","The `!` operator for logical inversion",191,null],[13,"Neg","","The `-` operator for negation",191,null],[0,"parsing","","",null,null],[11,"parse_binop","syn","",190,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_assign_op","","",190,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",191,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",191,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::op","",null,null],[11,"to_tokens","syn","",190,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",191,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",190,null],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",190,null],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",191,null],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",191,null],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[0,"ty","","",null,null],[3,"TypeSlice","syn::ty","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",151,null],[12,"elem","","",151,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",140,null],[12,"elem","","",140,null],[12,"semi_token","","",140,null],[12,"len","","",140,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",149,null],[12,"const_token","","",149,null],[12,"mutability","","",149,null],[12,"elem","","",149,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",150,null],[12,"lifetime","","",150,null],[12,"mutability","","",150,null],[12,"elem","","",150,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",141,null],[12,"abi","","",141,null],[12,"fn_token","","",141,null],[12,"lifetimes","","",141,null],[12,"paren_token","","",141,null],[12,"inputs","","",141,null],[12,"variadic","","",141,null],[12,"output","","",141,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",146,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",153,null],[12,"elems","","",153,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",148,null],[12,"path","","",148,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",152,null],[12,"bounds","","",152,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",143,null],[12,"bounds","","",143,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",147,null],[12,"elem","","",147,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",142,null],[12,"elem","","",142,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",144,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",145,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",154,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",138,null],[12,"name","","",138,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",139,null],[12,"ty","","",139,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",194,null],[13,"Array","","A fixed size array type: `[T; n]`.",194,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",194,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",194,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",194,null],[13,"Never","","The never type: `!`.",194,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",194,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",194,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",194,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",194,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",194,null],[13,"Group","","A type contained within invisible delimiters.",194,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",194,null],[13,"Macro","","A macro in the type position.",194,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",194,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",192,null],[13,"Wild","","Argument not given a name, matched with `_`.",192,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",193,null],[13,"Type","","A particular type is returned.",193,null],[0,"parsing","","",null,null],[5,"ambig_ty","syn::ty::parsing","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["type"],"name":"presult"}}],[5,"at_least_one_type","","",null,{"inputs":[{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"parse","syn","",194,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",194,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",194,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",148,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse","","",193,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",193,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",152,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",152,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",147,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",192,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",192,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::ty","",null,null],[11,"to_tokens","syn","",151,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",193,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",192,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",194,null],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"hash","","",194,null],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",151,null],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",194,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",140,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"bool"}}],[11,"hash","","",140,null],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",194,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",149,null],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",194,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",150,null],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",194,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",141,null],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"bool"}}],[11,"hash","","",141,null],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",194,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",146,null],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"bool"}}],[11,"hash","","",146,null],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",194,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",153,null],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",194,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",148,null],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",194,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",152,null],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"bool"}}],[11,"hash","","",152,null],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",194,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",194,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",147,null],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"bool"}}],[11,"hash","","",147,null],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",194,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"bool"}}],[11,"hash","","",142,null],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",194,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"bool"}}],[11,"hash","","",144,null],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",194,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",145,null],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"bool"}}],[11,"hash","","",145,null],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",194,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",194,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",194,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",154,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",138,null],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",138,null],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",139,null],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",192,null],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"bool"}}],[11,"hash","","",192,null],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",193,null],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"bool"}}],[11,"hash","","",193,null],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[0,"path","","",null,null],[3,"Path","syn::path","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",158,null],[12,"segments","","",158,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",161,null],[12,"1","","",161,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",159,null],[12,"arguments","","",159,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",155,null],[12,"lt_token","","",155,null],[12,"args","","",155,null],[12,"gt_token","","",155,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",156,null],[12,"eq_token","","",156,null],[12,"ty","","",156,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",157,null],[12,"inputs","","`(A, B)`",157,null],[12,"output","","`C`",157,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",160,null],[12,"ty","","",160,null],[12,"position","","",160,null],[12,"as_token","","",160,null],[12,"gt_token","","",160,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",196,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",196,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",196,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",195,null],[13,"Type","","A type argument.",195,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",195,null],[13,"Const","","A const expression. Must be inside of a block.",195,null],[0,"parsing","","",null,null],[5,"mod_style_path_segment","syn::path::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["pathsegment"],"name":"presult"}}],[5,"qpath","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"ty_no_eq_after","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"parse","syn","",158,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",195,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",195,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",158,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"printing","syn::path","",null,null],[11,"to_tokens","syn","",158,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",196,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",195,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",158,null],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",161,null],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"pathtokens"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"pathtokens"}],"output":{"name":"bool"}}],[11,"hash","","",161,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",158,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",159,null],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",159,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",196,null],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"bool"}}],[11,"hash","","",196,null],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",196,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",195,null],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"bool"}}],[11,"hash","","",195,null],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",155,null],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",156,null],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",157,null],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",160,null],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[12,"data","","",292,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[12,"ptr","","The current entry which the `Cursor` is pointing at.",293,null],[12,"scope","","This is the only `Entry::End(..)` object which this cursor is allowed to point at. All other `End` objects are skipped over in `Cursor::create`.",293,null],[12,"marker","","This uses the &'a reference which guarantees that these pointers are still valid.",293,null],[4,"Entry","","Internal type which is used instead of `TokenTree` to represent a token tree within a `TokenBuffer`.",null,null],[13,"Group","","",294,null],[13,"Term","","",294,null],[13,"Op","","",294,null],[13,"Literal","","",294,null],[13,"End","","",294,null],[11,"inner_new","","",292,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",292,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",292,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",292,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"assert_receiver_is_total_eq","","",293,null],[11,"eq","","",293,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",293,{"inputs":[],"output":{"name":"self"}}],[11,"create","","This create method intelligently exits non-explicitly-entered `None`-delimited scopes when the cursor reaches the end of them, allowing for them to be treated transparently.",293,null],[11,"entry","","Get the current entry.",293,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"bump","","Bump the cursor to point at the next token after the current one. This is undefined behavior if the cursor is currently looking at an `Entry::End`.",293,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"ignore_none","","If the cursor is looking at a `None`-delimited group, move it to look at the first token inside instead. If the group is empty, this will move the cursor past the `None`-delimited group.",293,{"inputs":[{"name":"self"}],"output":null}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",293,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",293,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"term","","If the cursor is pointing at a `Term`, returns it along with a cursor pointing at the next `TokenTree`.",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"op","","If the cursor is pointing at an `Op`, returns it along with a cursor pointing at the next `TokenTree`.",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",293,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",293,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[12,"0","","",295,null],[6,"PResult","","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",296,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",296,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",297,null],[10,"parse2","","",297,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","",297,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","",297,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[12,"inner","","",298,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[12,"inner","","",299,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[12,"inner","","",300,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[12,"inner","","",301,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[12,"inner","","",302,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[12,"inner","","",303,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[12,"inner","","",304,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",305,null],[13,"End","","",305,null],[0,"printing","","",null,null],[11,"to_tokens","","",298,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",305,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"assert_receiver_is_total_eq","","",298,null],[11,"eq","","",298,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"hash","","",298,null],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",298,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",298,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",298,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",298,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",298,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",298,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",298,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",298,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",298,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",298,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",298,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",298,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",298,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",298,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",298,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",298,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",298,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",298,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",298,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",298,null],[11,"default","","",298,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",300,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",301,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",302,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",303,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",304,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",305,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",305,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",305,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",305,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",305,null],[11,"index","","",298,null],[11,"index_mut","","",298,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",298,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",298,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",298,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",298,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",298,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",298,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",298,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",298,null],[11,"parse","","",298,null],[0,"tt","syn","",null,null],[3,"TokenTreeHelper","syn::tt","",null,null],[12,"0","","",306,null],[3,"TokenStreamHelper","","",null,null],[12,"0","","",307,null],[5,"delimited","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"braced","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"parenthesized","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",306,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",307,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",307,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"parse_quote","syn","",null,null],[5,"parse","syn::parse_quote","",null,{"inputs":[{"name":"tokens"}],"output":{"name":"t"}}],[8,"ParseQuote","","",null,null],[10,"parse","","",308,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[10,"description","","",308,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","syn::punctuated","",298,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",298,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",0,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",309,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"gen","syn","",null,null],[0,"visit","syn::gen","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::gen::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":null}],[5,"visit_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":null}],[5,"visit_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":null}],[5,"visit_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":null}],[5,"visit_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":null}],[5,"visit_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":null}],[5,"visit_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":null}],[5,"visit_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":null}],[5,"visit_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":null}],[5,"visit_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":null}],[5,"visit_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":null}],[5,"visit_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":null}],[5,"visit_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":null}],[5,"visit_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":null}],[5,"visit_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":null}],[5,"visit_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":null}],[5,"visit_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":null}],[5,"visit_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":null}],[5,"visit_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":null}],[5,"visit_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":null}],[5,"visit_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":null}],[5,"visit_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":null}],[5,"visit_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":null}],[5,"visit_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":null}],[5,"visit_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":null}],[5,"visit_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":null}],[5,"visit_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":null}],[5,"visit_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":null}],[5,"visit_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":null}],[5,"visit_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":null}],[5,"visit_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"visit_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"visit_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":null}],[5,"visit_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":null}],[5,"visit_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":null}],[5,"visit_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"visit_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":null}],[5,"visit_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":null}],[5,"visit_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":null}],[5,"visit_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":null}],[5,"visit_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"visit_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":null}],[5,"visit_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":null}],[5,"visit_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":null}],[5,"visit_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":null}],[5,"visit_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":null}],[5,"visit_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":null}],[5,"visit_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":null}],[5,"visit_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":null}],[5,"visit_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":null}],[5,"visit_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":null}],[5,"visit_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":null}],[5,"visit_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":null}],[5,"visit_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":null}],[5,"visit_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":null}],[5,"visit_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":null}],[5,"visit_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":null}],[5,"visit_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"visit_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"visit_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":null}],[5,"visit_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":null}],[5,"visit_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":null}],[5,"visit_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":null}],[5,"visit_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":null}],[5,"visit_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":null}],[5,"visit_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":null}],[5,"visit_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":null}],[5,"visit_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":null}],[5,"visit_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":null}],[5,"visit_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":null}],[5,"visit_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":null}],[5,"visit_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"visit_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":null}],[5,"visit_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":null}],[5,"visit_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":null}],[5,"visit_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":null}],[5,"visit_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":null}],[5,"visit_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":null}],[5,"visit_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":null}],[5,"visit_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",310,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",310,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_arg_captured","","",310,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":null}],[11,"visit_arg_self","","",310,{"inputs":[{"name":"self"},{"name":"argself"}],"output":null}],[11,"visit_arg_self_ref","","",310,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":null}],[11,"visit_arm","","",310,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_attr_style","","",310,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",310,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",310,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",310,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",310,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",310,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_block","","",310,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_bound_lifetimes","","",310,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",310,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",310,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",310,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",310,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",310,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",310,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",310,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_addr_of","","",310,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":null}],[11,"visit_expr_array","","",310,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":null}],[11,"visit_expr_assign","","",310,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":null}],[11,"visit_expr_assign_op","","",310,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":null}],[11,"visit_expr_binary","","",310,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_block","","",310,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":null}],[11,"visit_expr_box","","",310,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":null}],[11,"visit_expr_break","","",310,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":null}],[11,"visit_expr_call","","",310,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",310,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_catch","","",310,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":null}],[11,"visit_expr_closure","","",310,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":null}],[11,"visit_expr_continue","","",310,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":null}],[11,"visit_expr_field","","",310,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_for_loop","","",310,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":null}],[11,"visit_expr_group","","",310,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":null}],[11,"visit_expr_if","","",310,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":null}],[11,"visit_expr_if_let","","",310,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":null}],[11,"visit_expr_in_place","","",310,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":null}],[11,"visit_expr_index","","",310,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",310,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_loop","","",310,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":null}],[11,"visit_expr_macro","","",310,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":null}],[11,"visit_expr_match","","",310,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":null}],[11,"visit_expr_method_call","","",310,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":null}],[11,"visit_expr_paren","","",310,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",310,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_range","","",310,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":null}],[11,"visit_expr_repeat","","",310,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":null}],[11,"visit_expr_return","","",310,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":null}],[11,"visit_expr_struct","","",310,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":null}],[11,"visit_expr_try","","",310,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":null}],[11,"visit_expr_tuple","","",310,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":null}],[11,"visit_expr_type","","",310,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":null}],[11,"visit_expr_unary","","",310,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_unsafe","","",310,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":null}],[11,"visit_expr_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_expr_while","","",310,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":null}],[11,"visit_expr_while_let","","",310,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":null}],[11,"visit_expr_yield","","",310,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":null}],[11,"visit_field","","",310,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_field_pat","","",310,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":null}],[11,"visit_field_value","","",310,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":null}],[11,"visit_fields","","",310,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",310,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",310,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_file","","",310,{"inputs":[{"name":"self"},{"name":"file"}],"output":null}],[11,"visit_fn_arg","","",310,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":null}],[11,"visit_fn_decl","","",310,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_foreign_item","","",310,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_foreign_item_fn","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":null}],[11,"visit_foreign_item_static","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":null}],[11,"visit_foreign_item_type","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":null}],[11,"visit_foreign_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":null}],[11,"visit_generic_argument","","",310,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_method_argument","","",310,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":null}],[11,"visit_generic_param","","",310,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",310,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",310,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_impl_item","","",310,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_const","","",310,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":null}],[11,"visit_impl_item_macro","","",310,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":null}],[11,"visit_impl_item_method","","",310,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":null}],[11,"visit_impl_item_type","","",310,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":null}],[11,"visit_impl_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":null}],[11,"visit_index","","",310,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_item","","",310,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_item_const","","",310,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":null}],[11,"visit_item_enum","","",310,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":null}],[11,"visit_item_extern_crate","","",310,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":null}],[11,"visit_item_fn","","",310,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":null}],[11,"visit_item_foreign_mod","","",310,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":null}],[11,"visit_item_impl","","",310,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":null}],[11,"visit_item_macro","","",310,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":null}],[11,"visit_item_macro2","","",310,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":null}],[11,"visit_item_mod","","",310,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":null}],[11,"visit_item_static","","",310,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":null}],[11,"visit_item_struct","","",310,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":null}],[11,"visit_item_trait","","",310,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":null}],[11,"visit_item_type","","",310,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":null}],[11,"visit_item_union","","",310,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":null}],[11,"visit_item_use","","",310,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":null}],[11,"visit_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":null}],[11,"visit_label","","",310,{"inputs":[{"name":"self"},{"name":"label"}],"output":null}],[11,"visit_lifetime","","",310,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",310,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",310,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",310,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",310,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",310,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",310,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",310,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",310,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",310,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_local","","",310,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_macro","","",310,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",310,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",310,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",310,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",310,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",310,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_method_sig","","",310,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_method_turbofish","","",310,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":null}],[11,"visit_nested_meta","","",310,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",310,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_pat","","",310,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_pat_box","","",310,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":null}],[11,"visit_pat_ident","","",310,{"inputs":[{"name":"self"},{"name":"patident"}],"output":null}],[11,"visit_pat_lit","","",310,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":null}],[11,"visit_pat_macro","","",310,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":null}],[11,"visit_pat_path","","",310,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":null}],[11,"visit_pat_range","","",310,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":null}],[11,"visit_pat_ref","","",310,{"inputs":[{"name":"self"},{"name":"patref"}],"output":null}],[11,"visit_pat_slice","","",310,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":null}],[11,"visit_pat_struct","","",310,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":null}],[11,"visit_pat_tuple","","",310,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":null}],[11,"visit_pat_tuple_struct","","",310,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":null}],[11,"visit_pat_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":null}],[11,"visit_pat_wild","","",310,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":null}],[11,"visit_path","","",310,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",310,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",310,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",310,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",310,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",310,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",310,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_range_limits","","",310,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":null}],[11,"visit_return_type","","",310,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",310,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_stmt","","",310,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_trait_bound","","",310,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",310,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_trait_item","","",310,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_const","","",310,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":null}],[11,"visit_trait_item_macro","","",310,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":null}],[11,"visit_trait_item_method","","",310,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":null}],[11,"visit_trait_item_type","","",310,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":null}],[11,"visit_trait_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":null}],[11,"visit_type","","",310,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",310,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",310,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",310,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",310,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",310,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",310,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",310,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",310,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",310,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",310,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",310,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",310,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",310,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",310,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",310,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",310,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",310,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_use_glob","","",310,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":null}],[11,"visit_use_list","","",310,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":null}],[11,"visit_use_path","","",310,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":null}],[11,"visit_use_tree","","",310,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":null}],[11,"visit_variant","","",310,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",310,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",310,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",310,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",310,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",310,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",310,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[0,"fold","syn::gen","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[5,"fold_ident","syn::gen::fold","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":{"name":"ident"}}],[5,"fold_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[5,"fold_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[5,"fold_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[5,"fold_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":{"name":"litchar"}}],[5,"fold_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[5,"fold_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":{"name":"litint"}}],[5,"fold_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":{"name":"litstr"}}],[5,"fold_abi","","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":{"name":"abi"}}],[5,"fold_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[5,"fold_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[5,"fold_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":{"name":"argself"}}],[5,"fold_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[5,"fold_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":{"name":"arm"}}],[5,"fold_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[5,"fold_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":{"name":"attribute"}}],[5,"fold_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[5,"fold_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[5,"fold_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":{"name":"binop"}}],[5,"fold_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":{"name":"binding"}}],[5,"fold_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":{"name":"block"}}],[5,"fold_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[5,"fold_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":{"name":"constparam"}}],[5,"fold_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":{"name":"data"}}],[5,"fold_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[5,"fold_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[5,"fold_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[5,"fold_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[5,"fold_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":{"name":"expr"}}],[5,"fold_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[5,"fold_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[5,"fold_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[5,"fold_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[5,"fold_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[5,"fold_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[5,"fold_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[5,"fold_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[5,"fold_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[5,"fold_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[5,"fold_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[5,"fold_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[5,"fold_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[5,"fold_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[5,"fold_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[5,"fold_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[5,"fold_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":{"name":"exprif"}}],[5,"fold_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[5,"fold_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[5,"fold_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[5,"fold_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[5,"fold_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[5,"fold_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[5,"fold_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[5,"fold_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[5,"fold_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[5,"fold_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[5,"fold_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[5,"fold_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[5,"fold_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[5,"fold_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[5,"fold_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[5,"fold_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[5,"fold_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[5,"fold_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[5,"fold_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[5,"fold_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[5,"fold_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[5,"fold_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[5,"fold_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":{"name":"expryield"}}],[5,"fold_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":{"name":"field"}}],[5,"fold_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[5,"fold_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[5,"fold_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":{"name":"fields"}}],[5,"fold_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[5,"fold_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[5,"fold_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":{"name":"file"}}],[5,"fold_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[5,"fold_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[5,"fold_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[5,"fold_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[5,"fold_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[5,"fold_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[5,"fold_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[5,"fold_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[5,"fold_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[5,"fold_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[5,"fold_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":{"name":"generics"}}],[5,"fold_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":{"name":"implitem"}}],[5,"fold_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[5,"fold_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[5,"fold_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[5,"fold_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[5,"fold_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[5,"fold_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":{"name":"index"}}],[5,"fold_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":{"name":"item"}}],[5,"fold_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[5,"fold_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[5,"fold_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[5,"fold_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[5,"fold_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[5,"fold_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[5,"fold_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[5,"fold_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[5,"fold_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[5,"fold_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[5,"fold_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[5,"fold_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[5,"fold_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[5,"fold_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[5,"fold_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[5,"fold_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[5,"fold_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":{"name":"label"}}],[5,"fold_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[5,"fold_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":{"name":"lit"}}],[5,"fold_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":{"name":"litbool"}}],[5,"fold_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[5,"fold_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":{"name":"local"}}],[5,"fold_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":{"name":"macro"}}],[5,"fold_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[5,"fold_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":{"name":"member"}}],[5,"fold_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":{"name":"meta"}}],[5,"fold_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":{"name":"metalist"}}],[5,"fold_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[5,"fold_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[5,"fold_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[5,"fold_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[5,"fold_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[5,"fold_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":{"name":"pat"}}],[5,"fold_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":{"name":"patbox"}}],[5,"fold_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":{"name":"patident"}}],[5,"fold_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":{"name":"patlit"}}],[5,"fold_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[5,"fold_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":{"name":"patpath"}}],[5,"fold_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":{"name":"patrange"}}],[5,"fold_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":{"name":"patref"}}],[5,"fold_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":{"name":"patslice"}}],[5,"fold_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[5,"fold_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[5,"fold_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[5,"fold_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[5,"fold_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":{"name":"patwild"}}],[5,"fold_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":{"name":"path"}}],[5,"fold_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[5,"fold_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[5,"fold_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[5,"fold_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[5,"fold_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[5,"fold_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":{"name":"qself"}}],[5,"fold_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[5,"fold_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":{"name":"returntype"}}],[5,"fold_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":{"name":"span"}}],[5,"fold_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":{"name":"stmt"}}],[5,"fold_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[5,"fold_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[5,"fold_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":{"name":"traititem"}}],[5,"fold_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[5,"fold_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[5,"fold_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[5,"fold_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[5,"fold_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[5,"fold_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":{"name":"type"}}],[5,"fold_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":{"name":"typearray"}}],[5,"fold_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[5,"fold_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[5,"fold_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[5,"fold_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[5,"fold_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[5,"fold_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":{"name":"typenever"}}],[5,"fold_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[5,"fold_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[5,"fold_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[5,"fold_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":{"name":"typepath"}}],[5,"fold_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[5,"fold_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":{"name":"typereference"}}],[5,"fold_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[5,"fold_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[5,"fold_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[5,"fold_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[5,"fold_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":{"name":"unop"}}],[5,"fold_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":{"name":"useglob"}}],[5,"fold_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":{"name":"uselist"}}],[5,"fold_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":{"name":"usepath"}}],[5,"fold_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":{"name":"usetree"}}],[5,"fold_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":{"name":"variant"}}],[5,"fold_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[5,"fold_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[5,"fold_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[5,"fold_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":{"name":"visibility"}}],[5,"fold_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[5,"fold_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[8,"Fold","","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[11,"fold_abi","","",311,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",311,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",311,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[11,"fold_arg_self","","",311,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"argself"}}],[11,"fold_arg_self_ref","","",311,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[11,"fold_arm","","",311,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_attr_style","","",311,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fold_attribute","","",311,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fold_bare_fn_arg","","",311,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",311,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[11,"fold_bin_op","","",311,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"binop"}}],[11,"fold_binding","","",311,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"binding"}}],[11,"fold_block","","",311,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"block"}}],[11,"fold_bound_lifetimes","","",311,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[11,"fold_const_param","","",311,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"constparam"}}],[11,"fold_data","","",311,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"data"}}],[11,"fold_data_enum","","",311,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[11,"fold_data_struct","","",311,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[11,"fold_data_union","","",311,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[11,"fold_derive_input","","",311,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[11,"fold_expr","","",311,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"fold_expr_addr_of","","",311,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[11,"fold_expr_array","","",311,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[11,"fold_expr_assign","","",311,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[11,"fold_expr_assign_op","","",311,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[11,"fold_expr_binary","","",311,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[11,"fold_expr_block","","",311,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[11,"fold_expr_box","","",311,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[11,"fold_expr_break","","",311,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[11,"fold_expr_call","","",311,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[11,"fold_expr_cast","","",311,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[11,"fold_expr_catch","","",311,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[11,"fold_expr_closure","","",311,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[11,"fold_expr_continue","","",311,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[11,"fold_expr_field","","",311,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[11,"fold_expr_for_loop","","",311,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[11,"fold_expr_group","","",311,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[11,"fold_expr_if","","",311,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"exprif"}}],[11,"fold_expr_if_let","","",311,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[11,"fold_expr_in_place","","",311,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[11,"fold_expr_index","","",311,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[11,"fold_expr_lit","","",311,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[11,"fold_expr_loop","","",311,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[11,"fold_expr_macro","","",311,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[11,"fold_expr_match","","",311,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[11,"fold_expr_method_call","","",311,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[11,"fold_expr_paren","","",311,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[11,"fold_expr_path","","",311,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[11,"fold_expr_range","","",311,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[11,"fold_expr_repeat","","",311,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[11,"fold_expr_return","","",311,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[11,"fold_expr_struct","","",311,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[11,"fold_expr_try","","",311,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[11,"fold_expr_tuple","","",311,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[11,"fold_expr_type","","",311,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[11,"fold_expr_unary","","",311,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[11,"fold_expr_unsafe","","",311,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[11,"fold_expr_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[11,"fold_expr_while","","",311,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[11,"fold_expr_while_let","","",311,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[11,"fold_expr_yield","","",311,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"expryield"}}],[11,"fold_field","","",311,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_field_pat","","",311,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fold_field_value","","",311,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[11,"fold_fields","","",311,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"fields"}}],[11,"fold_fields_named","","",311,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",311,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[11,"fold_file","","",311,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"file"}}],[11,"fold_fn_arg","","",311,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[11,"fold_fn_decl","","",311,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fold_foreign_item","","",311,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_foreign_item_fn","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",311,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[11,"fold_generic_method_argument","","",311,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[11,"fold_generic_param","","",311,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[11,"fold_generics","","",311,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_ident","","",311,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_impl_item","","",311,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fold_impl_item_const","","",311,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[11,"fold_impl_item_macro","","",311,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[11,"fold_impl_item_method","","",311,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[11,"fold_impl_item_type","","",311,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[11,"fold_index","","",311,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"index"}}],[11,"fold_item","","",311,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_item_const","","",311,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[11,"fold_item_enum","","",311,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[11,"fold_item_extern_crate","","",311,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[11,"fold_item_fn","","",311,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[11,"fold_item_foreign_mod","","",311,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[11,"fold_item_impl","","",311,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[11,"fold_item_macro","","",311,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[11,"fold_item_macro2","","",311,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[11,"fold_item_mod","","",311,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[11,"fold_item_static","","",311,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[11,"fold_item_struct","","",311,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[11,"fold_item_trait","","",311,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[11,"fold_item_type","","",311,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[11,"fold_item_union","","",311,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[11,"fold_item_use","","",311,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[11,"fold_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[11,"fold_label","","",311,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"label"}}],[11,"fold_lifetime","","",311,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",311,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_lit","","",311,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"lit"}}],[11,"fold_lit_bool","","",311,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":{"name":"litbool"}}],[11,"fold_lit_byte","","",311,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[11,"fold_lit_byte_str","","",311,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[11,"fold_lit_char","","",311,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":{"name":"litchar"}}],[11,"fold_lit_float","","",311,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[11,"fold_lit_int","","",311,{"inputs":[{"name":"self"},{"name":"litint"}],"output":{"name":"litint"}}],[11,"fold_lit_str","","",311,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":{"name":"litstr"}}],[11,"fold_lit_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[11,"fold_local","","",311,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"local"}}],[11,"fold_macro","","",311,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"macro"}}],[11,"fold_macro_delimiter","","",311,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[11,"fold_member","","",311,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"member"}}],[11,"fold_meta","","",311,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"meta"}}],[11,"fold_meta_list","","",311,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"metalist"}}],[11,"fold_meta_name_value","","",311,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[11,"fold_method_sig","","",311,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fold_method_turbofish","","",311,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[11,"fold_nested_meta","","",311,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",311,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",311,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pat"}}],[11,"fold_pat_box","","",311,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"patbox"}}],[11,"fold_pat_ident","","",311,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"patident"}}],[11,"fold_pat_lit","","",311,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"patlit"}}],[11,"fold_pat_macro","","",311,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[11,"fold_pat_path","","",311,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"patpath"}}],[11,"fold_pat_range","","",311,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"patrange"}}],[11,"fold_pat_ref","","",311,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"patref"}}],[11,"fold_pat_slice","","",311,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"patslice"}}],[11,"fold_pat_struct","","",311,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[11,"fold_pat_tuple","","",311,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[11,"fold_pat_tuple_struct","","",311,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[11,"fold_pat_wild","","",311,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"patwild"}}],[11,"fold_path","","",311,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_arguments","","",311,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[11,"fold_path_segment","","",311,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fold_predicate_eq","","",311,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[11,"fold_predicate_lifetime","","",311,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[11,"fold_predicate_type","","",311,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[11,"fold_qself","","",311,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"qself"}}],[11,"fold_range_limits","","",311,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[11,"fold_return_type","","",311,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"returntype"}}],[11,"fold_span","","",311,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_stmt","","",311,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"stmt"}}],[11,"fold_trait_bound","","",311,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[11,"fold_trait_bound_modifier","","",311,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fold_trait_item","","",311,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fold_trait_item_const","","",311,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[11,"fold_trait_item_macro","","",311,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[11,"fold_trait_item_method","","",311,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[11,"fold_trait_item_type","","",311,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[11,"fold_type","","",311,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"fold_type_array","","",311,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"typearray"}}],[11,"fold_type_bare_fn","","",311,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[11,"fold_type_group","","",311,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[11,"fold_type_impl_trait","","",311,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[11,"fold_type_infer","","",311,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[11,"fold_type_macro","","",311,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[11,"fold_type_never","","",311,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"typenever"}}],[11,"fold_type_param","","",311,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[11,"fold_type_param_bound","","",311,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[11,"fold_type_paren","","",311,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[11,"fold_type_path","","",311,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"typepath"}}],[11,"fold_type_ptr","","",311,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[11,"fold_type_reference","","",311,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"typereference"}}],[11,"fold_type_slice","","",311,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[11,"fold_type_trait_object","","",311,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[11,"fold_type_tuple","","",311,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[11,"fold_type_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[11,"fold_un_op","","",311,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"unop"}}],[11,"fold_use_glob","","",311,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"useglob"}}],[11,"fold_use_list","","",311,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"uselist"}}],[11,"fold_use_path","","",311,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"usepath"}}],[11,"fold_use_tree","","",311,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"usetree"}}],[11,"fold_variant","","",311,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_vis_crate","","",311,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[11,"fold_vis_public","","",311,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[11,"fold_vis_restricted","","",311,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[11,"fold_visibility","","",311,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fold_where_clause","","",311,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",311,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[0,"helper","syn::gen","",null,null],[0,"fold","syn::gen::helper","",null,null],[5,"tokens_helper","syn::gen::helper::fold","",null,{"inputs":[{"name":"f"},{"name":"s"}],"output":{"name":"s"}}],[8,"FoldHelper","","",null,null],[16,"Item","","",312,null],[10,"lift","","",312,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"Spans","","",null,null],[10,"fold","","",313,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"lift","syn::punctuated","",298,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"visit","syn::gen::helper","",null,null],[5,"tokens_helper","syn::gen::helper::visit","",null,{"inputs":[{"name":"v"},{"name":"s"}],"output":null}],[8,"Spans","","",null,null],[10,"visit","","",314,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":null}],[5,"visit_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":null}],[5,"visit_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":null}],[5,"visit_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":null}],[5,"visit_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":null}],[5,"visit_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":null}],[5,"visit_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":null}],[5,"visit_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":null}],[5,"visit_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":null}],[5,"visit_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":null}],[5,"visit_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":null}],[5,"visit_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":null}],[5,"visit_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":null}],[5,"visit_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":null}],[5,"visit_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":null}],[5,"visit_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":null}],[5,"visit_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":null}],[5,"visit_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":null}],[5,"visit_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":null}],[5,"visit_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":null}],[5,"visit_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":null}],[5,"visit_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":null}],[5,"visit_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":null}],[5,"visit_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":null}],[5,"visit_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":null}],[5,"visit_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":null}],[5,"visit_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":null}],[5,"visit_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":null}],[5,"visit_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":null}],[5,"visit_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":null}],[5,"visit_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"visit_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"visit_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":null}],[5,"visit_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":null}],[5,"visit_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":null}],[5,"visit_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"visit_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":null}],[5,"visit_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":null}],[5,"visit_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":null}],[5,"visit_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":null}],[5,"visit_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"visit_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":null}],[5,"visit_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":null}],[5,"visit_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":null}],[5,"visit_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":null}],[5,"visit_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":null}],[5,"visit_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":null}],[5,"visit_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":null}],[5,"visit_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":null}],[5,"visit_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":null}],[5,"visit_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":null}],[5,"visit_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":null}],[5,"visit_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":null}],[5,"visit_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":null}],[5,"visit_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":null}],[5,"visit_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":null}],[5,"visit_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":null}],[5,"visit_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"visit_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"visit_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":null}],[5,"visit_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":null}],[5,"visit_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":null}],[5,"visit_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":null}],[5,"visit_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":null}],[5,"visit_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":null}],[5,"visit_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":null}],[5,"visit_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":null}],[5,"visit_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":null}],[5,"visit_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":null}],[5,"visit_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":null}],[5,"visit_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":null}],[5,"visit_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"visit_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":null}],[5,"visit_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":null}],[5,"visit_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":null}],[5,"visit_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":null}],[5,"visit_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":null}],[5,"visit_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":null}],[5,"visit_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":null}],[5,"visit_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","syn::gen::visit","",310,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",310,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_arg_captured","","",310,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":null}],[11,"visit_arg_self","","",310,{"inputs":[{"name":"self"},{"name":"argself"}],"output":null}],[11,"visit_arg_self_ref","","",310,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":null}],[11,"visit_arm","","",310,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_attr_style","","",310,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",310,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",310,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",310,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",310,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",310,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_block","","",310,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_bound_lifetimes","","",310,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",310,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",310,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",310,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",310,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",310,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",310,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",310,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_addr_of","","",310,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":null}],[11,"visit_expr_array","","",310,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":null}],[11,"visit_expr_assign","","",310,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":null}],[11,"visit_expr_assign_op","","",310,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":null}],[11,"visit_expr_binary","","",310,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_block","","",310,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":null}],[11,"visit_expr_box","","",310,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":null}],[11,"visit_expr_break","","",310,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":null}],[11,"visit_expr_call","","",310,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",310,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_catch","","",310,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":null}],[11,"visit_expr_closure","","",310,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":null}],[11,"visit_expr_continue","","",310,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":null}],[11,"visit_expr_field","","",310,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_for_loop","","",310,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":null}],[11,"visit_expr_group","","",310,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":null}],[11,"visit_expr_if","","",310,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":null}],[11,"visit_expr_if_let","","",310,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":null}],[11,"visit_expr_in_place","","",310,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":null}],[11,"visit_expr_index","","",310,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",310,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_loop","","",310,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":null}],[11,"visit_expr_macro","","",310,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":null}],[11,"visit_expr_match","","",310,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":null}],[11,"visit_expr_method_call","","",310,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":null}],[11,"visit_expr_paren","","",310,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",310,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_range","","",310,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":null}],[11,"visit_expr_repeat","","",310,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":null}],[11,"visit_expr_return","","",310,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":null}],[11,"visit_expr_struct","","",310,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":null}],[11,"visit_expr_try","","",310,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":null}],[11,"visit_expr_tuple","","",310,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":null}],[11,"visit_expr_type","","",310,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":null}],[11,"visit_expr_unary","","",310,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_unsafe","","",310,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":null}],[11,"visit_expr_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_expr_while","","",310,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":null}],[11,"visit_expr_while_let","","",310,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":null}],[11,"visit_expr_yield","","",310,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":null}],[11,"visit_field","","",310,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_field_pat","","",310,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":null}],[11,"visit_field_value","","",310,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":null}],[11,"visit_fields","","",310,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",310,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",310,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_file","","",310,{"inputs":[{"name":"self"},{"name":"file"}],"output":null}],[11,"visit_fn_arg","","",310,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":null}],[11,"visit_fn_decl","","",310,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_foreign_item","","",310,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_foreign_item_fn","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":null}],[11,"visit_foreign_item_static","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":null}],[11,"visit_foreign_item_type","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":null}],[11,"visit_foreign_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":null}],[11,"visit_generic_argument","","",310,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_method_argument","","",310,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":null}],[11,"visit_generic_param","","",310,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",310,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",310,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_impl_item","","",310,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_const","","",310,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":null}],[11,"visit_impl_item_macro","","",310,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":null}],[11,"visit_impl_item_method","","",310,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":null}],[11,"visit_impl_item_type","","",310,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":null}],[11,"visit_impl_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":null}],[11,"visit_index","","",310,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_item","","",310,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_item_const","","",310,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":null}],[11,"visit_item_enum","","",310,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":null}],[11,"visit_item_extern_crate","","",310,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":null}],[11,"visit_item_fn","","",310,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":null}],[11,"visit_item_foreign_mod","","",310,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":null}],[11,"visit_item_impl","","",310,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":null}],[11,"visit_item_macro","","",310,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":null}],[11,"visit_item_macro2","","",310,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":null}],[11,"visit_item_mod","","",310,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":null}],[11,"visit_item_static","","",310,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":null}],[11,"visit_item_struct","","",310,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":null}],[11,"visit_item_trait","","",310,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":null}],[11,"visit_item_type","","",310,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":null}],[11,"visit_item_union","","",310,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":null}],[11,"visit_item_use","","",310,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":null}],[11,"visit_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":null}],[11,"visit_label","","",310,{"inputs":[{"name":"self"},{"name":"label"}],"output":null}],[11,"visit_lifetime","","",310,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",310,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",310,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",310,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",310,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",310,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",310,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",310,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",310,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",310,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_local","","",310,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_macro","","",310,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",310,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",310,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",310,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",310,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",310,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_method_sig","","",310,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_method_turbofish","","",310,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":null}],[11,"visit_nested_meta","","",310,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",310,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_pat","","",310,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_pat_box","","",310,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":null}],[11,"visit_pat_ident","","",310,{"inputs":[{"name":"self"},{"name":"patident"}],"output":null}],[11,"visit_pat_lit","","",310,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":null}],[11,"visit_pat_macro","","",310,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":null}],[11,"visit_pat_path","","",310,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":null}],[11,"visit_pat_range","","",310,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":null}],[11,"visit_pat_ref","","",310,{"inputs":[{"name":"self"},{"name":"patref"}],"output":null}],[11,"visit_pat_slice","","",310,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":null}],[11,"visit_pat_struct","","",310,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":null}],[11,"visit_pat_tuple","","",310,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":null}],[11,"visit_pat_tuple_struct","","",310,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":null}],[11,"visit_pat_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":null}],[11,"visit_pat_wild","","",310,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":null}],[11,"visit_path","","",310,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",310,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",310,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",310,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",310,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",310,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",310,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_range_limits","","",310,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":null}],[11,"visit_return_type","","",310,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",310,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_stmt","","",310,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_trait_bound","","",310,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",310,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_trait_item","","",310,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_const","","",310,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":null}],[11,"visit_trait_item_macro","","",310,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":null}],[11,"visit_trait_item_method","","",310,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":null}],[11,"visit_trait_item_type","","",310,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":null}],[11,"visit_trait_item_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":null}],[11,"visit_type","","",310,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",310,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",310,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",310,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",310,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",310,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",310,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",310,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",310,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",310,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",310,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",310,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",310,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",310,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",310,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",310,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",310,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",310,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",310,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_use_glob","","",310,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":null}],[11,"visit_use_list","","",310,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":null}],[11,"visit_use_path","","",310,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":null}],[11,"visit_use_tree","","",310,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":null}],[11,"visit_variant","","",310,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",310,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",310,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",310,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",310,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",310,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",310,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[0,"fold","syn","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[5,"fold_ident","syn::fold","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":{"name":"ident"}}],[5,"fold_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[5,"fold_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[5,"fold_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[5,"fold_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":{"name":"litchar"}}],[5,"fold_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[5,"fold_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":{"name":"litint"}}],[5,"fold_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":{"name":"litstr"}}],[5,"fold_abi","","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":{"name":"abi"}}],[5,"fold_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[5,"fold_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[5,"fold_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":{"name":"argself"}}],[5,"fold_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[5,"fold_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":{"name":"arm"}}],[5,"fold_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[5,"fold_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":{"name":"attribute"}}],[5,"fold_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[5,"fold_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[5,"fold_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":{"name":"binop"}}],[5,"fold_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":{"name":"binding"}}],[5,"fold_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":{"name":"block"}}],[5,"fold_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[5,"fold_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":{"name":"constparam"}}],[5,"fold_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":{"name":"data"}}],[5,"fold_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[5,"fold_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[5,"fold_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[5,"fold_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[5,"fold_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":{"name":"expr"}}],[5,"fold_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[5,"fold_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[5,"fold_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[5,"fold_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[5,"fold_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[5,"fold_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[5,"fold_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[5,"fold_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[5,"fold_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[5,"fold_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[5,"fold_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[5,"fold_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[5,"fold_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[5,"fold_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[5,"fold_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[5,"fold_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[5,"fold_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":{"name":"exprif"}}],[5,"fold_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[5,"fold_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[5,"fold_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[5,"fold_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[5,"fold_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[5,"fold_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[5,"fold_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[5,"fold_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[5,"fold_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[5,"fold_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[5,"fold_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[5,"fold_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[5,"fold_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[5,"fold_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[5,"fold_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[5,"fold_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[5,"fold_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[5,"fold_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[5,"fold_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[5,"fold_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[5,"fold_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[5,"fold_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[5,"fold_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":{"name":"expryield"}}],[5,"fold_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":{"name":"field"}}],[5,"fold_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[5,"fold_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[5,"fold_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":{"name":"fields"}}],[5,"fold_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[5,"fold_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[5,"fold_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":{"name":"file"}}],[5,"fold_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[5,"fold_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[5,"fold_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[5,"fold_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[5,"fold_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[5,"fold_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[5,"fold_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[5,"fold_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[5,"fold_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[5,"fold_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[5,"fold_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":{"name":"generics"}}],[5,"fold_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":{"name":"implitem"}}],[5,"fold_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[5,"fold_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[5,"fold_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[5,"fold_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[5,"fold_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[5,"fold_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":{"name":"index"}}],[5,"fold_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":{"name":"item"}}],[5,"fold_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[5,"fold_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[5,"fold_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[5,"fold_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[5,"fold_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[5,"fold_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[5,"fold_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[5,"fold_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[5,"fold_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[5,"fold_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[5,"fold_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[5,"fold_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[5,"fold_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[5,"fold_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[5,"fold_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[5,"fold_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[5,"fold_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":{"name":"label"}}],[5,"fold_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[5,"fold_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":{"name":"lit"}}],[5,"fold_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":{"name":"litbool"}}],[5,"fold_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[5,"fold_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":{"name":"local"}}],[5,"fold_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":{"name":"macro"}}],[5,"fold_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[5,"fold_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":{"name":"member"}}],[5,"fold_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":{"name":"meta"}}],[5,"fold_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":{"name":"metalist"}}],[5,"fold_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[5,"fold_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[5,"fold_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[5,"fold_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[5,"fold_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[5,"fold_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":{"name":"pat"}}],[5,"fold_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":{"name":"patbox"}}],[5,"fold_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":{"name":"patident"}}],[5,"fold_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":{"name":"patlit"}}],[5,"fold_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[5,"fold_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":{"name":"patpath"}}],[5,"fold_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":{"name":"patrange"}}],[5,"fold_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":{"name":"patref"}}],[5,"fold_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":{"name":"patslice"}}],[5,"fold_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[5,"fold_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[5,"fold_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[5,"fold_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[5,"fold_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":{"name":"patwild"}}],[5,"fold_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":{"name":"path"}}],[5,"fold_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[5,"fold_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[5,"fold_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[5,"fold_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[5,"fold_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[5,"fold_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":{"name":"qself"}}],[5,"fold_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[5,"fold_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":{"name":"returntype"}}],[5,"fold_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":{"name":"span"}}],[5,"fold_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":{"name":"stmt"}}],[5,"fold_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[5,"fold_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[5,"fold_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":{"name":"traititem"}}],[5,"fold_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[5,"fold_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[5,"fold_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[5,"fold_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[5,"fold_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[5,"fold_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":{"name":"type"}}],[5,"fold_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":{"name":"typearray"}}],[5,"fold_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[5,"fold_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[5,"fold_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[5,"fold_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[5,"fold_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[5,"fold_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":{"name":"typenever"}}],[5,"fold_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[5,"fold_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[5,"fold_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[5,"fold_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":{"name":"typepath"}}],[5,"fold_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[5,"fold_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":{"name":"typereference"}}],[5,"fold_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[5,"fold_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[5,"fold_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[5,"fold_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[5,"fold_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":{"name":"unop"}}],[5,"fold_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":{"name":"useglob"}}],[5,"fold_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":{"name":"uselist"}}],[5,"fold_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":{"name":"usepath"}}],[5,"fold_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":{"name":"usetree"}}],[5,"fold_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":{"name":"variant"}}],[5,"fold_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[5,"fold_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[5,"fold_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[5,"fold_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":{"name":"visibility"}}],[5,"fold_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[5,"fold_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[8,"Fold","","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[11,"fold_abi","syn::gen::fold","",311,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",311,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",311,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[11,"fold_arg_self","","",311,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"argself"}}],[11,"fold_arg_self_ref","","",311,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[11,"fold_arm","","",311,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_attr_style","","",311,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fold_attribute","","",311,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fold_bare_fn_arg","","",311,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",311,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[11,"fold_bin_op","","",311,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"binop"}}],[11,"fold_binding","","",311,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"binding"}}],[11,"fold_block","","",311,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"block"}}],[11,"fold_bound_lifetimes","","",311,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[11,"fold_const_param","","",311,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"constparam"}}],[11,"fold_data","","",311,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"data"}}],[11,"fold_data_enum","","",311,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[11,"fold_data_struct","","",311,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[11,"fold_data_union","","",311,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[11,"fold_derive_input","","",311,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[11,"fold_expr","","",311,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"fold_expr_addr_of","","",311,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[11,"fold_expr_array","","",311,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[11,"fold_expr_assign","","",311,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[11,"fold_expr_assign_op","","",311,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[11,"fold_expr_binary","","",311,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[11,"fold_expr_block","","",311,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[11,"fold_expr_box","","",311,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[11,"fold_expr_break","","",311,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[11,"fold_expr_call","","",311,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[11,"fold_expr_cast","","",311,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[11,"fold_expr_catch","","",311,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[11,"fold_expr_closure","","",311,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[11,"fold_expr_continue","","",311,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[11,"fold_expr_field","","",311,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[11,"fold_expr_for_loop","","",311,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[11,"fold_expr_group","","",311,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[11,"fold_expr_if","","",311,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"exprif"}}],[11,"fold_expr_if_let","","",311,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[11,"fold_expr_in_place","","",311,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[11,"fold_expr_index","","",311,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[11,"fold_expr_lit","","",311,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[11,"fold_expr_loop","","",311,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[11,"fold_expr_macro","","",311,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[11,"fold_expr_match","","",311,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[11,"fold_expr_method_call","","",311,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[11,"fold_expr_paren","","",311,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[11,"fold_expr_path","","",311,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[11,"fold_expr_range","","",311,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[11,"fold_expr_repeat","","",311,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[11,"fold_expr_return","","",311,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[11,"fold_expr_struct","","",311,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[11,"fold_expr_try","","",311,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[11,"fold_expr_tuple","","",311,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[11,"fold_expr_type","","",311,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[11,"fold_expr_unary","","",311,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[11,"fold_expr_unsafe","","",311,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[11,"fold_expr_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[11,"fold_expr_while","","",311,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[11,"fold_expr_while_let","","",311,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[11,"fold_expr_yield","","",311,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"expryield"}}],[11,"fold_field","","",311,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_field_pat","","",311,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fold_field_value","","",311,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[11,"fold_fields","","",311,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"fields"}}],[11,"fold_fields_named","","",311,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",311,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[11,"fold_file","","",311,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"file"}}],[11,"fold_fn_arg","","",311,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[11,"fold_fn_decl","","",311,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fold_foreign_item","","",311,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_foreign_item_fn","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",311,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[11,"fold_generic_method_argument","","",311,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[11,"fold_generic_param","","",311,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[11,"fold_generics","","",311,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_ident","","",311,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_impl_item","","",311,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fold_impl_item_const","","",311,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[11,"fold_impl_item_macro","","",311,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[11,"fold_impl_item_method","","",311,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[11,"fold_impl_item_type","","",311,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[11,"fold_index","","",311,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"index"}}],[11,"fold_item","","",311,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_item_const","","",311,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[11,"fold_item_enum","","",311,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[11,"fold_item_extern_crate","","",311,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[11,"fold_item_fn","","",311,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[11,"fold_item_foreign_mod","","",311,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[11,"fold_item_impl","","",311,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[11,"fold_item_macro","","",311,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[11,"fold_item_macro2","","",311,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[11,"fold_item_mod","","",311,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[11,"fold_item_static","","",311,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[11,"fold_item_struct","","",311,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[11,"fold_item_trait","","",311,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[11,"fold_item_type","","",311,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[11,"fold_item_union","","",311,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[11,"fold_item_use","","",311,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[11,"fold_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[11,"fold_label","","",311,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"label"}}],[11,"fold_lifetime","","",311,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",311,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_lit","","",311,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"lit"}}],[11,"fold_lit_bool","","",311,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":{"name":"litbool"}}],[11,"fold_lit_byte","","",311,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[11,"fold_lit_byte_str","","",311,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[11,"fold_lit_char","","",311,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":{"name":"litchar"}}],[11,"fold_lit_float","","",311,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[11,"fold_lit_int","","",311,{"inputs":[{"name":"self"},{"name":"litint"}],"output":{"name":"litint"}}],[11,"fold_lit_str","","",311,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":{"name":"litstr"}}],[11,"fold_lit_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[11,"fold_local","","",311,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"local"}}],[11,"fold_macro","","",311,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"macro"}}],[11,"fold_macro_delimiter","","",311,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[11,"fold_member","","",311,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"member"}}],[11,"fold_meta","","",311,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"meta"}}],[11,"fold_meta_list","","",311,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"metalist"}}],[11,"fold_meta_name_value","","",311,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[11,"fold_method_sig","","",311,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fold_method_turbofish","","",311,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[11,"fold_nested_meta","","",311,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",311,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",311,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pat"}}],[11,"fold_pat_box","","",311,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"patbox"}}],[11,"fold_pat_ident","","",311,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"patident"}}],[11,"fold_pat_lit","","",311,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"patlit"}}],[11,"fold_pat_macro","","",311,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[11,"fold_pat_path","","",311,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"patpath"}}],[11,"fold_pat_range","","",311,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"patrange"}}],[11,"fold_pat_ref","","",311,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"patref"}}],[11,"fold_pat_slice","","",311,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"patslice"}}],[11,"fold_pat_struct","","",311,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[11,"fold_pat_tuple","","",311,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[11,"fold_pat_tuple_struct","","",311,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[11,"fold_pat_wild","","",311,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"patwild"}}],[11,"fold_path","","",311,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_arguments","","",311,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[11,"fold_path_segment","","",311,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fold_predicate_eq","","",311,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[11,"fold_predicate_lifetime","","",311,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[11,"fold_predicate_type","","",311,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[11,"fold_qself","","",311,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"qself"}}],[11,"fold_range_limits","","",311,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[11,"fold_return_type","","",311,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"returntype"}}],[11,"fold_span","","",311,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_stmt","","",311,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"stmt"}}],[11,"fold_trait_bound","","",311,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[11,"fold_trait_bound_modifier","","",311,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fold_trait_item","","",311,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fold_trait_item_const","","",311,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[11,"fold_trait_item_macro","","",311,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[11,"fold_trait_item_method","","",311,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[11,"fold_trait_item_type","","",311,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[11,"fold_type","","",311,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"fold_type_array","","",311,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"typearray"}}],[11,"fold_type_bare_fn","","",311,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[11,"fold_type_group","","",311,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[11,"fold_type_impl_trait","","",311,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[11,"fold_type_infer","","",311,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[11,"fold_type_macro","","",311,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[11,"fold_type_never","","",311,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"typenever"}}],[11,"fold_type_param","","",311,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[11,"fold_type_param_bound","","",311,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[11,"fold_type_paren","","",311,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[11,"fold_type_path","","",311,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"typepath"}}],[11,"fold_type_ptr","","",311,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[11,"fold_type_reference","","",311,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"typereference"}}],[11,"fold_type_slice","","",311,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[11,"fold_type_trait_object","","",311,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[11,"fold_type_tuple","","",311,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[11,"fold_type_verbatim","","",311,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[11,"fold_un_op","","",311,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"unop"}}],[11,"fold_use_glob","","",311,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"useglob"}}],[11,"fold_use_list","","",311,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"uselist"}}],[11,"fold_use_path","","",311,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"usepath"}}],[11,"fold_use_tree","","",311,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"usetree"}}],[11,"fold_variant","","",311,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_vis_crate","","",311,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[11,"fold_vis_public","","",311,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[11,"fold_vis_restricted","","",311,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[11,"fold_visibility","","",311,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fold_where_clause","","",311,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",311,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[0,"error","syn","",null,null],[3,"ParseError","syn::error","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[12,"0","","",295,null],[5,"parse_error","","An error with a default error message.",null,{"inputs":[],"output":{"name":"presult"}}],[6,"PResult","","The result of a `Synom` parser.",null,null],[11,"fmt","syn::synom","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",295,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",295,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_tokens","syn","",162,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"named","","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"tuple_parser","","",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"tap","","Run a parser, binding the result to a name, and then evaluating an expression.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"grouped","","",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprAddrOf"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"TypeGenerics"],[3,"Ident"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseList"],[3,"UsePath"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitByte"],[3,"LitByteStr"],[3,"LitChar"],[3,"LitFloat"],[3,"LitInt"],[3,"LitStr"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[3,"PathTokens"],[3,"TokensOrDefault"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"Rocket"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Underscore"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[8,"FromSpans"],[4,"Comment"],[8,"FilterAttrs"],[3,"NamedDecl"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Entry"],[3,"ParseError"],[8,"Synom"],[8,"Parser"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Pair"],[3,"TokenTreeHelper"],[3,"TokenStreamHelper"],[8,"ParseQuote"],[8,"Spanned"],[8,"Visit"],[8,"Fold"],[8,"FoldHelper"],[8,"Spans"],[8,"Spans"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[5,"many0","","",null,null],[0,"space","","",null,null],[5,"whitespace","synom::space","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"iresult"}}],[5,"block_comment","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"word_break","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"iresult"}}],[5,"skip_whitespace","","",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"is_whitespace","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"helper","synom","",null,null],[5,"punct","synom::helper","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"keyword","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"separated_list","","",null,null],[11,"fmt","synom","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"tap","","Run a parser, binding the result to a name, and then evaluating an expression.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"tuple_parser","","Internal parser, do not use directly.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[12,"field","","",0,null],[12,"generics","","",0,null],[12,"seen_generics","","",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[12,"bindings","","",2,null],[12,"omitted_fields","","",2,null],[12,"ast","","",2,null],[12,"generics","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[12,"variants","","",3,null],[12,"omitted_variants","","",3,null],[12,"ast","","",3,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",4,null],[13,"MoveMut","","`mut x`",4,null],[13,"Ref","","`ref x`",4,null],[13,"RefMut","","`ref mut x`",4,null],[5,"generics_fuse","","",null,null],[5,"fetch_generics","","",null,null],[5,"get_ty_params","","Helper function used by the VariantInfo constructor. Walks all of the types in `field` and returns a list of the type parameters from `ty_params` which are referenced in the field.",null,{"inputs":[{"name":"field"},{"name":"generics"}],"output":{"generics":["bool"],"name":"vec"}}],[0,"macros","","This module provides two utility macros for testing custom derives. They can be used together to eliminate some of the boilerplate required in order to declare and test custom derive implementations.",null,null],[0,"syn","synstructure::macros","",null,null],[0,"quote","","",null,null],[14,"quote_each_token","synstructure::macros::quote","",null,null],[14,"multi_zip_expr","","",null,null],[14,"pounded_var_names","","",null,null],[14,"nested_tuples_pat","","",null,null],[14,"quote","","The whole point.",null,null],[0,"proc_macro","synstructure::macros","",null,null],[11,"fmt","synstructure","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bindstyle"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"bindstyle"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"hash","","",4,null],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bindinginfo"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"hash","","",2,null],[11,"new","","",2,{"inputs":[{"name":"variantast"},{"generics":["ident"],"name":"option"},{"name":"generics"}],"output":{"name":"self"}}],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"hash","","",3,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",3,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",3,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",3,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",3,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",3,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",3,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",3,{"inputs":[{"name":"self"},{"name":"typarambound"},{"name":"vec"}],"output":null}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[3,"Structure"],[4,"BindStyle"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[0,"tables","unicode_xid","",null,null],[5,"bsearch_range_table","unicode_xid::tables","",null,null],[0,"derived_property","","",null,null],[5,"XID_Continue","unicode_xid::tables::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"XID_Start","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"XID_Continue_table","","",null,null],[17,"XID_Start_table","","",null,null],[17,"UNICODE_VERSION","unicode_xid::tables","The version of Unicode that this version of unicode-xid is based on.",null,null],[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[0,"coreprovider","","",null,null],[0,"fmt","void::coreprovider","Utilities for formatting and printing strings.",null,null],[4,"Alignment","void::coreprovider::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",0,null],[13,"Right","","Indication that contents should be right-aligned.",0,null],[13,"Center","","Indication that contents should be center-aligned.",0,null],[13,"Unknown","","No alignment was requested.",0,null],[0,"rt","","",null,null],[0,"v1","void::coreprovider::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are emitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","void::coreprovider::fmt::rt::v1","",null,null],[12,"position","","",1,null],[12,"format","","",1,null],[3,"FormatSpec","","",null,null],[12,"fill","","",2,null],[12,"align","","",2,null],[12,"flags","","",2,null],[12,"precision","","",2,null],[12,"width","","",2,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",3,null],[13,"Right","","Indication that contents should be right-aligned.",3,null],[13,"Center","","Indication that contents should be center-aligned.",3,null],[13,"Unknown","","No alignment was requested.",3,null],[4,"Count","","",null,null],[13,"Is","","",4,null],[13,"Param","","",4,null],[13,"NextParam","","",4,null],[13,"Implied","","",4,null],[4,"Position","","",null,null],[13,"Next","","",5,null],[13,"At","","",5,null],[6,"Result","void::coreprovider::fmt","The type returned by formatter methods.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",6,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",6,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",7,null],[12,"fill","","",7,null],[12,"align","","",7,null],[12,"width","","",7,null],[12,"precision","","",7,null],[12,"buf","","",7,null],[12,"curarg","","",7,null],[12,"args","","",7,null],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",8,null],[12,"formatter","","",8,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[12,"pieces","","",9,null],[12,"fmt","","",9,null],[12,"args","","",9,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",19,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",20,null],[12,"result","","",20,null],[12,"fields","","",20,null],[12,"empty_name","","",20,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",21,null],[12,"result","","",21,null],[12,"has_fields","","",21,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",22,null],[12,"result","","",22,null],[12,"has_fields","","",22,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",23,null],[0,"cmp","void::coreprovider","Functionality for ordering and comparison.",null,null],[8,"PartialEq","void::coreprovider::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",24,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",24,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[11,"assert_receiver_is_total_eq","","",25,null],[3,"AssertParamIsEq","","",null,null],[12,"_field","","",26,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",27,null],[13,"Equal","","An ordering where a compared value is equal [to another].",27,null],[13,"Greater","","An ordering where a compared value is greater [than another].",27,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",28,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"ResultVoidExt","void","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",31,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",32,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","void::coreprovider::fmt","",9,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","void::coreprovider::cmp","",27,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","void::coreprovider::cmp","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","void::coreprovider::cmp","",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","void::coreprovider::fmt","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","void::coreprovider::cmp","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","void::coreprovider::fmt","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"assert_receiver_is_total_eq","","",34,null],[11,"assert_receiver_is_total_eq","void::coreprovider::cmp","",28,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"write_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",7,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","void::coreprovider::cmp","",27,null],[11,"hash","void::coreprovider::fmt","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"error"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",7,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",7,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",7,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",7,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",7,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",7,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",7,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the Arguments structure.",9,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters. The `pieces` array must be at least as long as `fmt` to construct a valid Arguments structure. Also, any `Count` within `fmt` that is `CountIsParam` or `CountIsNextParam` has to point to an argument created with `argumentusize`. However, failing to do so doesn't cause unsafety, but will ignore invalid .",9,null],[11,"estimated_capacity","","Estimates the length of the formatted text.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"entry","","Adds a new entry to the set output.",19,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",20,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",21,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",22,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",22,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",22,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",23,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",23,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"reverse","void::coreprovider::cmp","Reverses the `Ordering`.",27,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}]],"paths":[[4,"Alignment"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[8,"Write"],[3,"Formatter"],[3,"ArgumentV1"],[3,"Arguments"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"DebugSet"],[3,"DebugTuple"],[3,"DebugStruct"],[3,"DebugMap"],[3,"DebugList"],[8,"PartialEq"],[8,"Eq"],[3,"AssertParamIsEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"],[3,"Error"]]};
initSearch(searchIndex);
