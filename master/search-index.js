var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"i":[{"n":"acautomaton"}],"o":{"n":"fullacautomaton"}}],[11,"next_state","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"get_match","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[11,"has_match","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"i":[{"n":"i"}],"o":{"g":["dense"],"n":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"i":[{"n":"i"}],"o":{"n":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"i":[{"n":"self"}],"o":{"n":"fullacautomaton"}}],[11,"next_state","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"get_match","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[11,"has_match","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"dense"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",9,{"i":[{"n":"u32"}],"o":{"n":"dense"}}],[11,"goto","","",9,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"set_goto","","",9,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[11,"heap_bytes","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"sparse"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",10,{"i":[{"n":"u32"}],"o":{"n":"sparse"}}],[11,"goto","","",10,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"set_goto","","",10,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[11,"heap_bytes","","",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"i":[{"n":"t"}],"o":{"n":"acautomaton"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",null,null],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"prefix"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"infix"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"suffix"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"prefix","","The prefix for this style.",0,{"i":[{"n":"self"}],"o":{"n":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"i":[{"n":"self"}],"o":{"n":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"i":[{"n":"self"}],"o":{"n":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"i":[{"n":"self"}],"o":{"n":"suffix"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"o":{"n":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",0,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"o":{"n":"style"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"colour"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"i":[{"n":"colour"}],"o":{"n":"style"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"ansigenericstring"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"ansigenericstring"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"ansigenericstring"}}],[11,"from","","",6,{"i":[{"n":"i"}],"o":{"n":"ansigenericstring"}}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ansigenericstring"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",null,null],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["arena"] = {"doc":"The arena, a fast but limited type of allocator.","items":[[3,"TypedArena","arena","An arena that can hold objects of only one type.",null,null],[3,"DroplessArena","","",null,null],[3,"SyncTypedArena","","",null,null],[3,"SyncDroplessArena","","",null,null],[11,"new","","Creates a new `TypedArena`.",0,{"o":{"n":"typedarena"}}],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copied into the `TypedArena`, returning a mutable reference to it. Will panic if passed a zero-sized types.",0,null],[11,"clear","","Clears the arena. Deallocates all but the longest chunk which may be reused.",0,{"i":[{"n":"self"}]}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","",1,{"o":{"n":"droplessarena"}}],[11,"in_arena","","",1,null],[11,"alloc_raw","","",1,null],[11,"alloc","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"alloc_slice","","Allocates a slice of objects that are copied into the `DroplessArena`, returning a mutable reference to it. Will panic if passed a zero-sized type.",1,null],[11,"new","","",2,{"o":{"n":"synctypedarena"}}],[11,"alloc","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"alloc_slice","","",2,null],[11,"clear","","",2,{"i":[{"n":"self"}]}],[11,"new","","",3,{"o":{"n":"syncdroplessarena"}}],[11,"in_arena","","",3,null],[11,"alloc_raw","","",3,null],[11,"alloc","","",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"alloc_slice","","",3,null]],"paths":[[3,"TypedArena"],[3,"DroplessArena"],[3,"SyncTypedArena"],[3,"SyncDroplessArena"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"o":{"n":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"o":{"n":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"i":[{"n":"str"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"i":[{"n":"a"}],"o":{"g":["utf8error"],"n":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"i":[{"n":"self"},{"n":"char"}]}],[11,"try_push","","Adds the given char to the end of the string.",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"i":[{"n":"self"},{"n":"str"}]}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["capacityerror"],"n":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"char"}}],[11,"clear","","Make the string empty.",0,{"i":[{"n":"self"}]}],[11,"set_len","","Set the strings’s length.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"borrow","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_char","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"write_str","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"arraystring"}}],[11,"clone_from","","",0,{"i":[{"n":"self"},{"n":"self"}]}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"capacityerror"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"ordering"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"capacityerror"}],"o":{"n":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"i":[{"n":"t"}],"o":{"n":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"i":[{"n":"self"}],"o":{"n":"capacityerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"end","","End index (exclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"new","","Create a new empty `ArrayVec`.",4,{"o":{"n":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"clear","","Remove all elements in the vector.",4,{"i":[{"n":"self"}]}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"i":[{"n":"self"}]}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"into_iter","","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",4,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone_from","","",4,{"i":[{"n":"self"},{"n":"self"}]}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","Return an empty array",4,{"o":{"n":"arrayvec"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"arrayvec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"arrayvec"}],"o":{"n":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"end","","End index (exclusive)",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["ast_node"] = {"doc":"","items":[[5,"derive_fold","ast_node","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_spanned","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_from_variant","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"ast_node","","Alias for `#[derive(Spanned, Fold, Clone, Debug, PartialEq)]` for a struct and `#[derive(Spanned, Fold, Clone, Debug, PartialEq, FromVariant)]` for an enum.",null,{"i":[{"n":"tokenstream"},{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"i":[{"n":"stream"}],"o":{"n":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"i":[{"n":"stream"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"stream"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigendian"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"ordering"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",3,{"o":{"n":"bigendian"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"littleendian"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",4,{"o":{"n":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",null,null],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,null],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,null],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,null],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,null],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",1,null],[13,"Tue","","Tuesday.",1,null],[13,"Wed","","Wednesday.",1,null],[13,"Thu","","Thursday.",1,null],[13,"Fri","","Friday.",1,null],[13,"Sat","","Saturday.",1,null],[13,"Sun","","Sunday.",1,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",null,null],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,null],[13,"Single","","Given local time representation has a single unique result.",2,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"utc"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"utc"}],"o":{"n":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",3,{"o":{"g":["utc"],"n":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,{"o":{"g":["utc"],"n":"datetime"}}],[11,"from_offset","","",3,{"i":[{"n":"utc"}],"o":{"n":"utc"}}],[11,"offset_from_local_date","","",3,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["utc"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["utc"],"n":"localresult"}}],[11,"offset_from_utc_date","","",3,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"utc"}}],[11,"offset_from_utc_datetime","","",3,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"utc"}}],[11,"fix","","",3,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,{"i":[{"n":"i32"}],"o":{"n":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,{"i":[{"n":"i32"}],"o":{"g":["fixedoffset"],"n":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,{"i":[{"n":"i32"}],"o":{"n":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,{"i":[{"n":"i32"}],"o":{"g":["fixedoffset"],"n":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_offset","","",4,{"i":[{"n":"fixedoffset"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_local_date","","",4,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_utc_date","","",4,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"fixedoffset"}}],[11,"fix","","",4,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"add","chrono","",5,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"datetime"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"datetime"}}],[11,"clone","chrono::offset","",6,{"i":[{"n":"self"}],"o":{"n":"local"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",6,{"o":{"g":["local"],"n":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,{"o":{"g":["local"],"n":"datetime"}}],[11,"from_offset","","",6,{"i":[{"n":"fixedoffset"}],"o":{"n":"local"}}],[11,"offset_from_local_date","","",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_utc_date","","",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"fixedoffset"}}],[11,"from_local_date","","",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["date"],"n":"localresult"}}],[11,"from_local_datetime","","",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"from_utc_date","","",6,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["local"],"n":"date"}}],[11,"from_utc_datetime","","",6,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["local"],"n":"datetime"}}],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["date"],"n":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"n":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"g":["date"],"n":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"n":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"g":["date"],"n":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,{"i":[{"n":"self"},{"n":"i64"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,{"i":[{"n":"self"},{"n":"i64"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",8,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["date"],"n":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"datetime"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"localresult"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"localresult"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"localresult"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"ordering"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,{"i":[{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,{"i":[{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,{"i":[{"n":"i32"},{"n":"u32"}],"o":{"n":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,{"i":[{"n":"i32"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,{"i":[{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"n":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,{"i":[{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,{"i":[{"n":"i32"}],"o":{"n":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,{"i":[{"n":"i32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",9,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"add","","",9,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedate"}}],[11,"add_assign","","",9,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",9,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedate"}}],[11,"sub_assign","","",9,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",9,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"oldduration"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"le","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"gt","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"ge","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"ordering"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"year","","Returns the year number for this ISO week.",10,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"week","","Returns the ISO week number starting from 1.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"week0","","Returns the ISO week number starting from 0.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"ordering"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"hash","","",11,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",11,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivetime"}}],[11,"add_assign","","",11,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivetime"}}],[11,"sub_assign","","",11,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"oldduration"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",11,{"i":[{"n":"str"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"ordering"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,{"i":[{"n":"naivedate"},{"n":"naivetime"}],"o":{"n":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[11,"date","","Retrieves a date component.",12,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"time","","Retrieves a time component.",12,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",12,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",12,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","Returns the month number starting from 1.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","Returns the month number starting from 0.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","Returns the day of month starting from 1.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","Returns the day of week.",12,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",12,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"hash","","",12,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",12,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedatetime"}}],[11,"add_assign","","",12,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",12,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedatetime"}}],[11,"sub_assign","","",12,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",12,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"oldduration"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",12,{"i":[{"n":"str"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"clone","chrono","",13,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",13,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",13,{"i":[{"n":"self"}],"o":{"g":["date"],"n":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",13,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,{"i":[{"n":"self"}],"o":{"g":["date"],"n":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",13,null],[11,"timezone","","Retrieves an associated time zone.",13,{"i":[{"n":"self"}],"o":{"n":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,{"i":[{"n":"self"},{"n":"tz2"}],"o":{"n":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["date"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["date"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",13,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",13,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",13,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","",13,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","",13,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",13,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_month","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_month0","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_day","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_day0","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_ordinal","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_ordinal0","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"ordering"}}],[11,"hash","","",13,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"date"}}],[11,"sub","","",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"date"}}],[11,"sub","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"oldduration"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"secondsformat"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"secondsformat"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,null],[11,"date","","Retrieves a date component.",5,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",5,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",5,null],[11,"timezone","","Retrieves an associated time zone.",5,{"i":[{"n":"self"}],"o":{"n":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,{"i":[{"n":"self"},{"n":"tz2"}],"o":{"n":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["datetime"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["datetime"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",5,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,{"i":[{"n":"self"},{"n":"secondsformat"},{"n":"bool"}],"o":{"n":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","",5,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","",5,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",5,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","",5,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_month","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_month0","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_day","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_day0","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_ordinal","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_ordinal0","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"hour","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_minute","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_second","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_nanosecond","","",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"ordering"}}],[11,"hash","","",5,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",5,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"datetime"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"datetime"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"oldduration"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",5,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from_str","","",5,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from_str","","",5,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from","","",5,{"i":[{"n":"systemtime"}],"o":{"g":["utc"],"n":"datetime"}}],[11,"from","","",5,{"i":[{"n":"systemtime"}],"o":{"g":["local"],"n":"datetime"}}],[0,"format","","Formatting (and parsing) utilities for date and time.",null,null],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",14,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear","","Year in the ISO week date.",14,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"month","","Month (1--12).",14,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,null],[12,"weekday","","Day of the week.",14,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,null],[12,"minute","","Minute number (0--59).",14,null],[12,"second","","Second number (0--60, accounting for leap seconds).",14,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,null],[12,"offset","","Offset from the local time to UTC, in seconds.",14,null],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",15,null],[13,"Zero","","Zero (`0`) padding.",15,null],[13,"Space","","Space padding.",15,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"Month","","Month (FW=PW=2).",16,null],[13,"Day","","Day of the month (FW=PW=2).",16,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,null],[13,"Ordinal","","Day of the year (FW=PW=3).",16,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,null],[13,"Internal","","Internal uses only.",16,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",17,null],[13,"LongMonthName","","Full month names.",17,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,null],[13,"LongWeekdayName","","Full day of the week names.",17,null],[13,"LowerAmPm","","AM/PM.",17,null],[13,"UpperAmPm","","AM/PM.",17,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,null],[13,"TimezoneName","","Timezone name.",17,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,null],[13,"Internal","","Internal uses only.",17,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",18,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,null],[13,"Fixed","","Fixed-format item.",18,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"i":[{"n":"parsed"},{"n":"str"},{"n":"i"}],"o":{"n":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"i":[{"n":"formatter"},{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"option"},{"n":"i"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"parsed"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"parsed"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"parsed"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",14,{"o":{"n":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",14,{"o":{"n":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,{"i":[{"n":"self"},{"n":"weekday"}],"o":{"n":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["fixedoffset"],"n":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,{"i":[{"n":"self"},{"n":"tz"}],"o":{"g":["datetime"],"n":"parseresult"}}],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"strftimeitems"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,{"i":[{"n":"str"}],"o":{"n":"strftimeitems"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["item"],"n":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"pad"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"pad"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"numeric"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"numeric"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"numeric"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"internalnumeric"}],"o":{"n":"bool"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"fixed"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"fixed"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"fixed"}],"o":{"n":"bool"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"internalfixed"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"internalfixed"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"internalfixed"}],"o":{"n":"bool"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"item"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",22,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,{"i":[{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,{"i":[{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"off"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","chrono","",1,{"i":[{"n":"str"}],"o":{"n":"result"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",null,null],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"self"}}],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"self"}}],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",25,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,null],[10,"month","","Returns the month number starting from 1.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"month0","","Returns the month number starting from 0.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"day","","Returns the day of month starting from 1.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"weekday","","Returns the day of week.",25,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[10,"iso_week","","Returns the ISO week.",25,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[10,"with_year","","Makes a new value with the year number changed.",25,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",25,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,null],[10,"minute","","Returns the minute number from 0 to 59.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"weekday"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"succ","","The next day in the week.",1,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"pred","","The previous day in the week.",1,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_i64","","",1,{"i":[{"n":"i64"}],"o":{"g":["weekday"],"n":"option"}}],[11,"from_u64","","",1,{"i":[{"n":"u64"}],"o":{"g":["weekday"],"n":"option"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"parseweekdayerror"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"parseweekdayerror"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"parseweekdayerror"}],"o":{"n":"bool"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",28,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,{"i":[{"n":"duration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,{"i":[{"n":"self"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul","","",28,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"div","","",28,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"add","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"neg","","",28,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"sub","","",28,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"add","chrono::naive","",11,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivetime"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivetime"}}],[11,"add","","",12,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivedatetime"}}],[11,"sub","","",12,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivedatetime"}}]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formatted error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[13,"HiddenShortHelp","","The argument should not be shown in short help text",1,null],[13,"HiddenLongHelp","","The argument should not be shown in long help text",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcommands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[13,"Elvish","","Generates a completion file for Elvish",4,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"appsettings"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"get_name","","Get the name of the app",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"i":[{"n":"self"},{"n":"arggroup"}],"o":{"n":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"i":[{"n":"self"},{"n":"app"}],"o":{"n":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"i":[{"n":"self"}],"o":{"n":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"i":[{"n":"self"}],"o":{"n":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"i":[{"n":"self"},{"n":"s"},{"n":"shell"},{"n":"t"}]}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"i":[{"n":"self"},{"n":"s"},{"n":"shell"},{"n":"w"}]}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"i":[{"n":"self"}],"o":{"n":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"i":[{"n":"self"}],"o":{"g":["argmatches"],"n":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["argmatches"],"n":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["argmatches"],"n":"clapresult"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",6,{"o":{"n":"arg"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"i":[{"n":"self"},{"n":"osstr"}],"o":{"n":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"i":[{"n":"self"},{"n":"str"},{"g":["str"],"n":"option"},{"n":"str"}],"o":{"n":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"i":[{"n":"self"},{"n":"str"},{"g":["osstr"],"n":"option"},{"n":"osstr"}],"o":{"n":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,{"i":[{"n":"self"},{"n":"osstr"}],"o":{"n":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hidden_short_help","","Hides an argument from short help message output.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hidden_long_help","","Hides an argument from long help message output.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"arg"}],"o":{"n":"self"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"arg"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"argmatches"}}],[11,"default","","",7,{"o":{"n":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["str"],"n":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["cow"],"n":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["osstr"],"n":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["values"],"n":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["vec"],"n":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["osvalues"],"n":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"u64"}}],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["usize"],"n":"option"}}],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["indices"],"n":"option"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["argmatches"],"n":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"default","","",8,{"o":{"n":"self"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"osvalues"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"g":["osstr"],"n":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"g":["osstr"],"n":"option"}}],[11,"default","","",9,{"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"i":[{"n":"str"}],"o":{"n":"app"}}],[11,"default","","",11,{"o":{"n":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"arggroup"}],"o":{"n":"self"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"argsettings"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"i":[{"n":"str"},{"n":"errorkind"}],"o":{"n":"self"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Result","","Short hand for [`Result`] type",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"i":[{"n":"f"}],"o":{"n":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"o":{"n":"guard"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"null","","",0,{"o":{"n":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"i":[{"n":"t"}],"o":{"n":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"i":[{"n":"self"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["owned"],"n":"option"},{"n":"ordering"}]}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"i":[{"n":"self"},{"n":"owned"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"ordering"}]}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"g":["owned"],"n":"option"},{"n":"ordering"}],"o":{"g":["option"],"n":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"owned"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared","owned"],"n":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"g":["shared"],"n":"option"},{"n":"ordering"}],"o":{"n":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["owned"],"n":"option"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"i":[{"n":"self"},{"n":"shared"}]}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"i":[{"n":"self"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"i":[{"n":"t"}],"o":{"n":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"shared"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"shared"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_raw","","",3,null],[11,"fmt","crossbeam::mem","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",4,{"o":{"n":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"i":[{"n":"t"}],"o":{"n":"cachepadded"}}],[11,"deref","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",5,{"o":{"n":"atomicoption"}}],[11,"swap_box","","",5,{"i":[{"n":"self"},{"n":"box"},{"n":"ordering"}],"o":{"g":["box"],"n":"option"}}],[11,"swap","","",5,{"i":[{"n":"self"},{"n":"t"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"take","","",5,{"i":[{"n":"self"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty queue.",6,{"o":{"n":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",6,{"i":[{"n":"self"},{"n":"t"}]}],[11,"is_empty","","Check if this queue is empty.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty stack.",7,{"o":{"n":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"i":[{"n":"self"},{"n":"t"}]}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_empty","","Check if this queue is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty queue.",8,{"o":{"n":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"i":[{"n":"self"},{"n":"t"}]}],[11,"try_pop","","Attempt to dequeue from the front.",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",9,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",9,null],[13,"Data","","The stealer has successfully stolen some data.",9,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",10,{"i":[{"n":"self"},{"n":"t"}]}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",11,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","crossbeam::sync","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"new","","Creates a new `ArcCell`.",12,{"i":[{"n":"arc"}],"o":{"n":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",12,{"i":[{"n":"self"},{"n":"arc"}],"o":{"n":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",12,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"fmt","crossbeam","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",13,{"i":[{"n":"self"},{"n":"f"}]}],[11,"spawn","","Create a scoped thread.",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",14,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"thread","","Get the underlying thread handle.",14,{"i":[{"n":"self"}],"o":{"n":"thread"}}],[11,"drop","","",13,{"i":[{"n":"self"}]}]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"ordering"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"new","","Returns a new deque.",1,{"o":{"n":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"i":[{"n":"usize"}],"o":{"n":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"i":[{"n":"self"},{"n":"t"}]}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"clone","","Creates another stealer.",2,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"o":{"n":"guard"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"o":{"n":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"o":{"n":"bool"}}],[5,"pin","","Pins the current thread.",null,{"o":{"n":"guard"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"o":{"n":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"i":[{"n":"t"}],"o":{"n":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"i":[{"n":"self"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"i":[{"n":"self"},{"n":"p"},{"n":"ordering"}]}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"i":[{"n":"self"},{"n":"p"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"i":[{"n":"self"},{"n":"shared"},{"n":"p"},{"n":"o"},{"n":"guard"}],"o":{"g":["shared","compareandseterror"],"n":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"i":[{"n":"self"},{"n":"shared"},{"n":"p"},{"n":"o"},{"n":"guard"}],"o":{"g":["shared","compareandseterror"],"n":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"default","","",1,{"o":{"n":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"i":[{"n":"owned"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"box"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"i":[{"n":"shared"}],"o":{"n":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"i":[{"n":"t"}],"o":{"n":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"i":[{"n":"self"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"owned"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",2,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"i":[{"n":"box"}],"o":{"n":"self"}}],[11,"borrow","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"null","","Returns a new null pointer.",3,{"o":{"n":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"i":[{"n":"self"}],"o":{"n":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"self"}}],[11,"new","","Creates a new collector.",4,{"o":{"n":"self"}}],[11,"handle","","Creates a new handle for the collector.",4,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"pin","","Pins the handle.",5,{"i":[{"n":"self"}],"o":{"n":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"i":[{"n":"self"},{"n":"f"}]}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"i":[{"n":"self"}]}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"i":[{"n":"self"}]}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"guard"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"i":[{"n":"self"}],"o":{"n":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"i":[{"n":"self"}],"o":{"n":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","Pads a value to the length of a cache line.",0,{"i":[{"n":"t"}],"o":{"n":"cachepadded"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"default","","",0,{"o":{"n":"self"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"t"}],"o":{"n":"self"}}],[0,"atomic_option","crossbeam_utils","",null,null],[3,"AtomicOption","crossbeam_utils::atomic_option","",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"new","","",1,{"o":{"n":"self"}}],[11,"swap_box","","",1,{"i":[{"n":"self"},{"n":"box"},{"n":"ordering"}],"o":{"g":["box"],"n":"option"}}],[11,"swap","","",1,{"i":[{"n":"self"},{"n":"t"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"take","","",1,{"i":[{"n":"self"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"default","","",1,{"o":{"n":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"i":[{"n":"f"}],"o":{"n":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"i":[{"n":"builder"},{"n":"f"}],"o":{"g":["joinhandle"],"n":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",2,{"i":[{"n":"self"},{"n":"f"}]}],[11,"spawn","","Create a scoped thread.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,{"i":[{"n":"self"}],"o":{"n":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["scopedjoinhandle"],"n":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"thread","","Get the underlying thread handle.",3,{"i":[{"n":"self"}],"o":{"n":"thread"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["darling"] = {"doc":"Darling Darling is a tool for declarative attribute parsing in proc macro implementations.","items":[[8,"FromDeriveInput","darling","Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type.",null,null],[10,"from_derive_input","","Create an instance from `syn::DeriveInput`, or return an error.",0,{"i":[{"n":"deriveinput"}],"o":{"g":["error"],"n":"result"}}],[8,"FromField","","Creates an instance by parsing an individual field and its attributes.",null,null],[10,"from_field","","",1,{"i":[{"n":"field"}],"o":{"g":["error"],"n":"result"}}],[8,"FromGenericParam","","Creates an instance by parsing a specific `syn::GenericParam`. This can be a type param, a lifetime, or a const param.",null,null],[10,"from_generic_param","","",2,{"i":[{"n":"genericparam"}],"o":{"g":["error"],"n":"result"}}],[8,"FromGenerics","","Creates an instance by parsing an entire generics declaration, including the `where` clause.",null,null],[10,"from_generics","","",3,{"i":[{"n":"generics"}],"o":{"g":["error"],"n":"result"}}],[8,"FromMeta","","Create an instance from an item in an attribute declaration.",null,null],[11,"from_nested_meta","","",4,{"i":[{"n":"nestedmeta"}],"o":{"g":["error"],"n":"result"}}],[11,"from_meta","","Create an instance from a `syn::Meta` by dispatching to the format-appropriate trait function. This generally should not be overridden by implementers.",4,{"i":[{"n":"meta"}],"o":{"g":["error"],"n":"result"}}],[11,"from_word","","Create an instance from the presence of the word in the attribute with no additional options specified.",4,{"o":{"g":["error"],"n":"result"}}],[11,"from_list","","Create an instance from a list of nested meta items.",4,null],[11,"from_value","","Create an instance from a literal value of either `foo = \"bar\"` or `foo(\"bar\")`. This dispatches to the appropriate method based on the type of literal encountered, and generally should not be overridden by implementers.",4,{"i":[{"n":"lit"}],"o":{"g":["error"],"n":"result"}}],[11,"from_char","","Create an instance from a char literal in a value position.",4,{"i":[{"n":"char"}],"o":{"g":["error"],"n":"result"}}],[11,"from_string","","Create an instance from a string literal in a value position.",4,{"i":[{"n":"str"}],"o":{"g":["error"],"n":"result"}}],[11,"from_bool","","Create an instance from a bool literal in a value position.",4,{"i":[{"n":"bool"}],"o":{"g":["error"],"n":"result"}}],[8,"FromTypeParam","","Creates an instance by parsing an individual type_param and its attributes.",null,null],[10,"from_type_param","","",5,{"i":[{"n":"typeparam"}],"o":{"g":["error"],"n":"result"}}],[8,"FromVariant","","Creates an instance from a specified `syn::Variant`.",null,null],[10,"from_variant","","Create an instance from `syn::Variant`, or return an error.",6,{"i":[{"n":"variant"}],"o":{"g":["error"],"n":"result"}}],[3,"Error","","An error encountered during attribute parsing.",null,null],[6,"Result","","An alias of `Result` specific to attribute parsing.",null,null],[0,"ast","","Utility types for working with the AST.",null,null],[8,"GenericParamExt","darling::ast","Extension trait for `GenericParam` to support getting values by variant.",null,null],[16,"TypeParam","","The type this GenericParam uses to represent type params and their bounds",7,null],[16,"LifetimeDef","","",7,null],[16,"ConstParam","","",7,null],[11,"as_type_param","","If this GenericParam is a type param, get the underlying value.",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_lifetime_def","","If this GenericParam is a lifetime, get the underlying value.",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_const_param","","If this GenericParam is a const param, get the underlying value.",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[3,"Fields","","",null,null],[12,"style","","",8,null],[12,"fields","","",8,null],[6,"VariantData","","",null,null],[6,"Body","","",null,null],[4,"Style","","",null,null],[13,"Tuple","","",9,null],[13,"Struct","","",9,null],[13,"Unit","","",9,null],[3,"Generics","","A mirror of the `syn::Generics` type which can contain arbitrary representations of params and where clauses.",null,null],[12,"params","","",10,null],[12,"where_clause","","",10,null],[4,"GenericParam","","A mirror of `syn::GenericParam` which is generic over all its contents.",null,null],[13,"Type","","",11,null],[13,"Lifetime","","",11,null],[13,"Const","","",11,null],[4,"Data","","A struct or enum body.",null,null],[13,"Enum","","",12,null],[13,"Struct","","",12,null],[0,"error","darling","Types for working with darling errors and results.",null,null],[6,"Result","darling::error","An alias of `Result` specific to attribute parsing.",null,null],[3,"Error","","An error encountered during attribute parsing.",null,null],[3,"IntoIter","","An iterator that moves out of an `Error`.",null,null],[0,"usage","darling","Traits and types used for tracking the usage of generic parameters through a proc-macro input.",null,null],[3,"Options","darling::usage","Control struct for searching type parameters.",null,null],[6,"IdentSet","","A set of idents.",null,null],[8,"UsesLifetimes","","Searcher for finding lifetimes in a syntax tree. This can be used to determine which lifetimes must be emitted in generated code.",null,null],[10,"uses_lifetimes","","Returns the subset of the queried lifetimes that are used by the implementing syntax element.",13,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[11,"uses_lifetimes_cloned","","Find all used lifetimes, then clone them and return that set.",13,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[6,"IdentRefSet","","A set of references to idents.",null,null],[8,"CollectTypeParams","","Searcher for finding type params in an iterator.",null,null],[10,"collect_type_params","","Consume an iterator, accumulating all type parameters in the elements which occur in `type_set`.",14,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[10,"collect_type_params_cloned","","Consume an iterator using `collect_type_params`, then clone all found type params and return that set.",14,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[8,"CollectLifetimes","","Searcher for finding lifetimes in an iterator.",null,null],[10,"collect_lifetimes","","Consume an iterator, accumulating all lifetimes in the elements which occur in `lifetimes`.",15,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[10,"collect_lifetimes_cloned","","Consume an iterator using `collect_lifetimes`, then clone all found lifetimes and return that set.",15,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[6,"LifetimeSet","","A set of lifetimes.",null,null],[4,"Purpose","","The goal of tracing generic parameter usage.",null,null],[13,"BoundImpl","","The tracing is being used to generate an `impl` block.",16,null],[13,"Declare","","The tracing is being used to generate a new struct or enum.",16,null],[8,"GenericsExt","","Extension trait for pulling specific generics data from a generics AST representation.",null,null],[10,"declared_lifetimes","","Get the set of all lifetimes declared by the syntax element. This does not look for usage of the lifetime; see `UsesLifetimes` for that.",17,{"i":[{"n":"self"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[10,"declared_type_params","","Get the set of all type parameters declared by the syntax element. This does not look for usage of the type parameter; see `UsesTypeParams` for that.",17,{"i":[{"n":"self"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[8,"UsesTypeParams","","Searcher for finding type params in a syntax tree. This can be used to determine if a given type parameter needs to be bounded in a generated impl.",null,null],[10,"uses_type_params","","Returns the subset of the queried type parameters that are used by the implementing syntax element.",18,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[11,"uses_type_params_cloned","","Find all type params using `uses_type_params`, then clone the found values and return the set.",18,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[6,"LifetimeRefSet","","A set of references to lifetimes.",null,null],[0,"util","darling","Utility types for attribute parsing.",null,null],[3,"Flag","darling::util","Marker type equivalent to `Option<()>` for use in attribute parsing.",null,null],[3,"IdentList","","A list of `syn::Ident` instances. This type is used to extract a list of words from an attribute.",null,null],[4,"Override","","A value which can inherit a default value or have an explicit value specified.",null,null],[13,"Inherit","","Inherit the eventual value from an external source.",19,null],[13,"Explicit","","Explicitly set the value.",19,null],[3,"IdentString","","A wrapper for an `Ident` which also keeps the value as a string.",null,null],[3,"WithOriginal","","A container to parse some syntax and retain access to the original.",null,null],[12,"parsed","","",20,null],[12,"original","","",20,null],[3,"Ignored","","An efficient way of discarding data from a syntax element.",null,null],[14,"uses_type_params","darling","Generator for `UsesTypeParam` impls that unions the used type parameters of the selected fields.",null,null],[14,"uses_lifetimes","","Generator for `UsesLifetimes` impls that unions the used lifetimes of the selected fields.",null,null],[11,"fmt","darling::util","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::error","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","darling::util","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"ordering"}}],[11,"uses_lifetimes","darling::ast","",12,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[11,"uses_lifetimes","darling::util","",23,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[11,"uses_lifetimes","darling::ast","",8,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["lifetime","buildhasherdefault"],"n":"hashset"}}],[11,"from_meta","darling::util","",20,{"i":[{"n":"meta"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"from_meta","","",23,{"i":[{"n":"meta"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"from_meta","","",21,{"i":[{"n":"meta"}],"o":{"g":["identstring","error"],"n":"result"}}],[11,"from_list","","",24,null],[11,"from_word","","",19,{"o":{"g":["override","error"],"n":"result"}}],[11,"from_list","","",19,null],[11,"from_value","","",19,{"i":[{"n":"lit"}],"o":{"g":["override","error"],"n":"result"}}],[11,"from_meta","","",25,{"i":[{"n":"meta"}],"o":{"g":["flag","error"],"n":"result"}}],[11,"as_type_param","darling::ast","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_lifetime_def","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_const_param","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","darling::error","",26,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","darling::ast","",9,{"i":[{"n":"fields"}],"o":{"n":"style"}}],[11,"from","darling::util","",25,{"i":[{"n":"option"}],"o":{"n":"flag"}}],[11,"from","darling::ast","",8,{"i":[{"n":"style"}],"o":{"n":"fields"}}],[11,"from","darling::util","",21,{"i":[{"n":"ident"}],"o":{"n":"identstring"}}],[11,"from","darling::ast","",9,{"i":[{"n":"fields"}],"o":{"n":"style"}}],[11,"from","darling::util","",25,{"i":[{"n":"bool"}],"o":{"n":"flag"}}],[11,"from","darling::usage","",27,{"i":[{"n":"purpose"}],"o":{"n":"options"}}],[11,"from","darling::util","",19,{"i":[{"n":"option"}],"o":{"n":"override"}}],[11,"from","darling::ast","",8,null],[11,"from","darling::util","",24,{"i":[{"g":["ident"],"n":"vec"}],"o":{"n":"identlist"}}],[11,"from_variant","","",20,{"i":[{"n":"variant"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"from_variant","","",23,{"i":[{"n":"variant"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"to_tokens","","",21,null],[11,"from_type_param","darling::ast","",11,{"i":[{"n":"typeparam"}],"o":{"g":["genericparam","error"],"n":"result"}}],[11,"from_type_param","darling::util","",20,{"i":[{"n":"typeparam"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"from_type_param","","",23,{"i":[{"n":"typeparam"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"fmt","darling::ast","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::usage","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::ast","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::util","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::ast","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::error","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::util","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::usage","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::ast","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::util","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::ast","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","darling::util","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bitor","","",25,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"flag"}}],[11,"into_iter","darling::error","",22,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"deref","darling::util","",24,null],[11,"deref","","",25,null],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"le","","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"gt","","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"ge","","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"not","","",25,{"i":[{"n":"self"}],"o":{"n":"flag"}}],[11,"from_generics","","",20,{"i":[{"n":"generics"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"from_generics","","",23,{"i":[{"n":"generics"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"from_generics","darling::ast","",10,{"i":[{"n":"generics"}],"o":{"g":["generics","error"],"n":"result"}}],[11,"from_derive_input","darling::util","",20,{"i":[{"n":"deriveinput"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"from_derive_input","","",23,{"i":[{"n":"deriveinput"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"default","","",19,{"o":{"n":"override"}}],[11,"default","","",24,{"o":{"n":"identlist"}}],[11,"default","","",23,{"o":{"n":"ignored"}}],[11,"default","","",25,{"o":{"n":"flag"}}],[11,"description","darling::error","",22,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",22,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"bitand","darling::util","",25,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"flag"}}],[11,"hash","","",23,null],[11,"hash","","",21,null],[11,"from_generic_param","","",20,{"i":[{"n":"genericparam"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"from_generic_param","darling::ast","",11,{"i":[{"n":"genericparam"}],"o":{"g":["genericparam","error"],"n":"result"}}],[11,"from_generic_param","darling::util","",23,{"i":[{"n":"genericparam"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"as_ref","","",21,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"as_ref","","",21,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"uses_type_params","darling::ast","",12,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[11,"uses_type_params","","",8,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[11,"uses_type_params","darling::util","",23,{"i":[{"n":"self"},{"n":"options"},{"n":"hashset"}],"o":{"g":["ident","buildhasherdefault"],"n":"hashset"}}],[11,"eq","darling::ast","",10,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"eq","darling::util","",21,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"withoriginal"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"withoriginal"}],"o":{"n":"bool"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"eq","darling::usage","",16,{"i":[{"n":"self"},{"n":"purpose"}],"o":{"n":"bool"}}],[11,"eq","darling::util","",25,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"bool"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"ignored"}],"o":{"n":"bool"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"override"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"override"}],"o":{"n":"bool"}}],[11,"eq","darling::ast","",11,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"eq","darling::util","",24,{"i":[{"n":"self"},{"n":"identlist"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"identlist"}],"o":{"n":"bool"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"from_field","","",23,{"i":[{"n":"field"}],"o":{"g":["ignored","error"],"n":"result"}}],[11,"from_field","","",20,{"i":[{"n":"field"}],"o":{"g":["withoriginal","error"],"n":"result"}}],[11,"clone","darling::usage","",16,{"i":[{"n":"self"}],"o":{"n":"purpose"}}],[11,"clone","darling::ast","",12,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"clone","darling::util","",25,{"i":[{"n":"self"}],"o":{"n":"flag"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"override"}}],[11,"clone","darling::ast","",10,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"clone","darling::util","",21,{"i":[{"n":"self"}],"o":{"n":"identstring"}}],[11,"clone","darling::ast","",8,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"clone","darling::util","",23,{"i":[{"n":"self"}],"o":{"n":"ignored"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"identlist"}}],[11,"clone","darling::usage","",27,{"i":[{"n":"self"}],"o":{"n":"options"}}],[11,"clone","darling::util","",20,{"i":[{"n":"self"}],"o":{"n":"withoriginal"}}],[11,"custom","darling::error","Creates a new error with a custom message.",22,{"i":[{"n":"t"}],"o":{"n":"error"}}],[11,"duplicate_field","","Creates a new error for a field that appears twice in the input.",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"missing_field","","Creates a new error for a non-optional field that does not appear in the input.",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"unknown_field","","Creates a new error for a field name that appears in the input but does not correspond to a known field.",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"unsupported_shape","","Creates a new error for a struct or variant that does not adhere to the supported shape.",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"unsupported_format","","",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"unexpected_type","","Creates a new error for a field which has an unexpected literal type.",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"unknown_value","","Creates a new error for a value which doesn't match a set of expected literals.",22,{"i":[{"n":"str"}],"o":{"n":"error"}}],[11,"too_few_items","","Creates a new error for a list which did not get enough items to proceed.",22,{"i":[{"n":"usize"}],"o":{"n":"error"}}],[11,"too_many_items","","Creates a new error when a list got more items than it supports. The `max` argument is the largest number of items the receiver could accept.",22,{"i":[{"n":"usize"}],"o":{"n":"error"}}],[11,"multiple","","Bundle a set of multiple errors into a single `Error` instance.",22,{"i":[{"g":["error"],"n":"vec"}],"o":{"n":"error"}}],[11,"flatten","","Recursively converts a tree of errors to a flattened list.",22,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"at","","Adds a location to the error, such as a field or variant. Locations must be added in reverse order of specificity.",22,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"error"}}],[11,"len","","Gets the number of individual errors in this error.",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"empty_from","darling::ast","",8,{"i":[{"n":"fields"}],"o":{"n":"fields"}}],[11,"split","","Splits the `Fields` into its style and fields for further processing. Returns an empty `Vec` for `Unit` data.",8,null],[11,"is_newtype","","Returns true if this variant's data makes it a newtype.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unit","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_tuple","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_struct","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","",8,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"map","","",8,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"fields"}}],[11,"iter","","",8,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"try_from","","",8,{"i":[{"n":"fields"}],"o":{"g":["fields","error"],"n":"result"}}],[11,"is_unit","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_tuple","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_struct","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"type_params","","",10,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"empty_from","","Creates an empty body of the same shape as the passed-in body.",12,{"i":[{"n":"data"}],"o":{"n":"data"}}],[11,"as_ref","","Creates a new `Data<&'a V, &'a F>` instance from `Data<V, F>`.",12,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"map_enum_variants","","Applies a function `V -> U` on enum variants, if this is an enum.",12,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"data"}}],[11,"map_struct_fields","","Applies a function `F -> U` on struct fields, if this is a struct.",12,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"data"}}],[11,"map_struct","","Applies a function to the `Fields` if this is a struct.",12,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"data"}}],[11,"take_struct","","Consumes the `Data`, returning `Fields<F>` if it was a struct.",12,{"i":[{"n":"self"}],"o":{"g":["fields"],"n":"option"}}],[11,"take_enum","","Consumes the `Data`, returning `Vec<V>` if it was an enum.",12,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"is_enum","","Returns `true` if this instance is `Data::Enum`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_struct","","Returns `true` if this instance is `Data::Struct`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_from","","Attempt to convert from a `syn::Data` instance.",12,{"i":[{"n":"data"}],"o":{"g":["data","error"],"n":"result"}}],[11,"include_type_path_qself","darling::usage","Returns `true` if the implementer of `UseTypeParams` should search `<___ as ...>::...` when looking for type parameter uses.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"present","darling::util","Creates a new `Flag` which corresponds to the presence of a value.",25,{"o":{"n":"flag"}}],[11,"new","","Create a new list.",24,{"i":[{"n":"vec"}],"o":{"n":"identlist"}}],[11,"to_strings","","Create a new `Vec` containing the string representation of each ident.",24,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"vec"}}],[11,"as_ref","","Converts from `Override<T>` to `Override<&T>`.",19,{"i":[{"n":"self"}],"o":{"n":"override"}}],[11,"as_mut","","Converts from `Override<T>` to `Override<&mut T>`.",19,{"i":[{"n":"self"}],"o":{"n":"override"}}],[11,"is_explicit","","Returns `true` if the override is an `Explicit` value.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"explicit","","Converts from `Override<T>` to `Option<T>`.",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"unwrap_or","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it returns `optb`.",19,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"unwrap_or_else","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it calls `op`.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"unwrap_or_default","","Returns the contained value or the default value of `T`.",19,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new","","Create a new `IdentString`.",21,{"i":[{"n":"ident"}],"o":{"n":"identstring"}}],[11,"as_ident","","Get the ident as a `proc_macro2::Ident`.",21,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"as_str","","Get the ident as a string.",21,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"span","","Get the location of this `Ident` in source.",21,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"map","","Apply some transform to the ident's string representation.",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"identstring"}}],[11,"new","","",20,{"i":[{"n":"t"},{"n":"o"}],"o":{"n":"withoriginal"}}]],"paths":[[8,"FromDeriveInput"],[8,"FromField"],[8,"FromGenericParam"],[8,"FromGenerics"],[8,"FromMeta"],[8,"FromTypeParam"],[8,"FromVariant"],[8,"GenericParamExt"],[3,"Fields"],[4,"Style"],[3,"Generics"],[4,"GenericParam"],[4,"Data"],[8,"UsesLifetimes"],[8,"CollectTypeParams"],[8,"CollectLifetimes"],[4,"Purpose"],[8,"GenericsExt"],[8,"UsesTypeParams"],[4,"Override"],[3,"WithOriginal"],[3,"IdentString"],[3,"Error"],[3,"Ignored"],[3,"IdentList"],[3,"Flag"],[3,"IntoIter"],[3,"Options"]]};
searchIndex["darling_core"] = {"doc":"","items":[[0,"ast","darling_core","Utility types for working with the AST.",null,null],[3,"Fields","darling_core::ast","",null,null],[12,"style","","",0,null],[12,"fields","","",0,null],[3,"Generics","","A mirror of the `syn::Generics` type which can contain arbitrary representations of params and where clauses.",null,null],[12,"params","","",1,null],[12,"where_clause","","",1,null],[4,"Data","","A struct or enum body.",null,null],[13,"Enum","","",2,null],[13,"Struct","","",2,null],[4,"Style","","",null,null],[13,"Tuple","","",3,null],[13,"Struct","","",3,null],[13,"Unit","","",3,null],[4,"GenericParam","","A mirror of `syn::GenericParam` which is generic over all its contents.",null,null],[13,"Type","","",4,null],[13,"Lifetime","","",4,null],[13,"Const","","",4,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"empty_from","","Creates an empty body of the same shape as the passed-in body.",2,{"i":[{"n":"data"}],"o":{"n":"self"}}],[11,"as_ref","","Creates a new `Data<&'a V, &'a F>` instance from `Data<V, F>`.",2,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"map_enum_variants","","Applies a function `V -> U` on enum variants, if this is an enum.",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"data"}}],[11,"map_struct_fields","","Applies a function `F -> U` on struct fields, if this is a struct.",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"data"}}],[11,"map_struct","","Applies a function to the `Fields` if this is a struct.",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"data"}}],[11,"take_struct","","Consumes the `Data`, returning `Fields<F>` if it was a struct.",2,{"i":[{"n":"self"}],"o":{"g":["fields"],"n":"option"}}],[11,"take_enum","","Consumes the `Data`, returning `Vec<V>` if it was an enum.",2,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"is_enum","","Returns `true` if this instance is `Data::Enum`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_struct","","Returns `true` if this instance is `Data::Struct`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_from","","Attempt to convert from a `syn::Data` instance.",2,{"i":[{"n":"data"}],"o":{"n":"result"}}],[11,"uses_type_params","","",2,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[11,"uses_lifetimes","","",2,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimerefset"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"empty_from","","",0,{"i":[{"n":"fields"}],"o":{"n":"self"}}],[11,"split","","Splits the `Fields` into its style and fields for further processing. Returns an empty `Vec` for `Unit` data.",0,null],[11,"is_newtype","","Returns true if this variant's data makes it a newtype.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unit","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_tuple","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_struct","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"map","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"fields"}}],[11,"iter","","",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"try_from","","",0,{"i":[{"n":"fields"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"style"}],"o":{"n":"self"}}],[11,"from","","",0,null],[11,"uses_type_params","","",0,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[11,"uses_lifetimes","","",0,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimerefset"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"is_unit","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_tuple","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_struct","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from","","",3,{"i":[{"n":"fields"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"fields"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"from_type_param","","",4,{"i":[{"n":"typeparam"}],"o":{"n":"result"}}],[11,"from_generic_param","","",4,{"i":[{"n":"genericparam"}],"o":{"n":"result"}}],[11,"as_type_param","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_lifetime_def","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_const_param","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"type_params","","",1,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"from_generics","","",1,{"i":[{"n":"generics"}],"o":{"n":"result"}}],[6,"Body","","",null,null],[6,"VariantData","","",null,null],[8,"GenericParamExt","","Extension trait for `GenericParam` to support getting values by variant.",null,null],[16,"TypeParam","","The type this GenericParam uses to represent type params and their bounds",5,null],[16,"LifetimeDef","","",5,null],[16,"ConstParam","","",5,null],[11,"as_type_param","","If this GenericParam is a type param, get the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_lifetime_def","","If this GenericParam is a lifetime, get the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_const_param","","If this GenericParam is a const param, get the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"codegen","darling_core","",null,null],[3,"Field","darling_core::codegen","Properties needed to generate code for a field in all the contexts where one may appear.",null,null],[12,"name_in_attr","","The name presented to the user of the library. This will appear in error messages and will be looked when parsing names.",6,null],[12,"ident","","The name presented to the author of the library. This will appear in the setters or temporary variables which contain the values.",6,null],[12,"ty","","The type of the field in the input.",6,null],[12,"default_expression","","",6,null],[12,"with_path","","",6,null],[12,"map","","",6,null],[12,"skip","","",6,null],[12,"multiple","","",6,null],[3,"FromMetaImpl","","",null,null],[12,"base","","",7,null],[3,"FromDeriveInputImpl","","",null,null],[12,"ident","","",8,null],[12,"generics","","",8,null],[12,"vis","","",8,null],[12,"attrs","","",8,null],[12,"data","","",8,null],[12,"base","","",8,null],[12,"attr_names","","",8,null],[12,"forward_attrs","","",8,null],[12,"from_ident","","",8,null],[12,"supports","","",8,null],[3,"FromFieldImpl","","`impl FromField` generator. This is used for parsing an individual field and its attributes.",null,null],[12,"ident","","",9,null],[12,"vis","","",9,null],[12,"ty","","",9,null],[12,"attrs","","",9,null],[12,"base","","",9,null],[12,"attr_names","","",9,null],[12,"forward_attrs","","",9,null],[12,"from_ident","","",9,null],[3,"FromTypeParamImpl","","",null,null],[12,"base","","",10,null],[12,"ident","","",10,null],[12,"attrs","","",10,null],[12,"bounds","","",10,null],[12,"default","","",10,null],[12,"attr_names","","",10,null],[12,"forward_attrs","","",10,null],[12,"from_ident","","",10,null],[3,"FromVariantImpl","","",null,null],[12,"base","","",11,null],[12,"ident","","",11,null],[12,"fields","","",11,null],[12,"attrs","","",11,null],[12,"attr_names","","",11,null],[12,"forward_attrs","","",11,null],[12,"from_ident","","",11,null],[12,"supports","","",11,null],[3,"TraitImpl","","",null,null],[12,"ident","","",12,null],[12,"generics","","",12,null],[12,"data","","",12,null],[12,"default","","",12,null],[12,"map","","",12,null],[12,"bound","","",12,null],[3,"Variant","","An enum variant.",null,null],[12,"name_in_attr","","The name which will appear in code passed to the `FromMeta` input.",13,null],[12,"variant_ident","","The name of the variant which will be returned for a given `name_in_attr`.",13,null],[12,"ty_ident","","The name of the parent enum type.",13,null],[12,"data","","",13,null],[12,"skip","","Whether or not the variant should be skipped in the generated code.",13,null],[3,"FieldsGen","","",null,null],[12,"0","","",14,null],[4,"DefaultExpression","","The fallback value for a field or container.",null,null],[13,"Inherit","","Only valid on fields, `Inherit` indicates that the value should be taken from a pre-constructed fallback object. The value in the variant is the ident of the field.",15,null],[13,"Explicit","","",15,null],[13,"Trait","","",15,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"defaultexpression"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"defaultexpression"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"defaultexpression"}],"o":{"n":"bool"}}],[11,"as_declaration","","",15,{"i":[{"n":"self"}],"o":{"n":"defaultdeclaration"}}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"as_declaration","","",6,{"i":[{"n":"self"}],"o":{"n":"declaration"}}],[11,"as_match","","",6,{"i":[{"n":"self"}],"o":{"n":"matcharm"}}],[11,"as_initializer","","",6,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[11,"as_presence_check","","",6,{"i":[{"n":"self"}],"o":{"n":"checkmissing"}}],[11,"uses_type_params","","",6,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"trait_path","","",7,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"base","","",7,{"i":[{"n":"self"}],"o":{"n":"traitimpl"}}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"trait_path","","",8,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"trait_bound","","",8,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"base","","",8,{"i":[{"n":"self"}],"o":{"n":"traitimpl"}}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"trait_path","","",9,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"trait_bound","","",9,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"base","","",9,{"i":[{"n":"self"}],"o":{"n":"traitimpl"}}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"trait_path","","",10,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"trait_bound","","",10,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"base","","",10,{"i":[{"n":"self"}],"o":{"n":"traitimpl"}}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"trait_path","","",11,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"trait_bound","","",11,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"base","","",11,{"i":[{"n":"self"}],"o":{"n":"traitimpl"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"declared_type_params","","Get all declared type parameters.",12,{"i":[{"n":"self"}],"o":{"n":"identset"}}],[11,"used_type_params","","Get the type parameters which are used by non-skipped fields.",12,{"i":[{"n":"self"}],"o":{"n":"identset"}}],[11,"skipped_type_params","","Get the type parameters which are used by skipped fields.",12,{"i":[{"n":"self"}],"o":{"n":"identset"}}],[11,"declare_errors","","Gets the `let` declaration for errors accumulated during parsing.",12,{"i":[{"n":"self"}],"o":{"n":"errordeclaration"}}],[11,"check_errors","","Gets the check which performs an early return if errors occurred during parsing.",12,{"i":[{"n":"self"}],"o":{"n":"errorcheck"}}],[11,"require_fields","","",12,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"as_unit_match_arm","","",13,{"i":[{"n":"self"}],"o":{"n":"unitmatcharm"}}],[11,"as_data_match_arm","","",13,{"i":[{"n":"self"}],"o":{"n":"datamatcharm"}}],[11,"uses_type_params","","",13,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[11,"require_fields","","",14,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[8,"OuterFromImpl","","Wrapper for \"outer From\" traits, such as `FromDeriveInput`, `FromVariant`, and `FromField`.",null,null],[10,"trait_path","","Gets the path of the trait being implemented.",16,{"i":[{"n":"self"}],"o":{"n":"path"}}],[10,"base","","",16,{"i":[{"n":"self"}],"o":{"n":"traitimpl"}}],[11,"trait_bound","","",16,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"wrap","","",16,{"i":[{"n":"self"},{"n":"t"},{"n":"tokenstream"}]}],[0,"error","darling_core","Types for working with darling errors and results.",null,null],[3,"Error","darling_core::error","An error encountered during attribute parsing.",null,null],[3,"IntoIter","","An iterator that moves out of an `Error`.",null,null],[6,"Result","","An alias of `Result` specific to attribute parsing.",null,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"custom","","Creates a new error with a custom message.",17,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"duplicate_field","","Creates a new error for a field that appears twice in the input.",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"missing_field","","Creates a new error for a non-optional field that does not appear in the input.",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"unknown_field","","Creates a new error for a field name that appears in the input but does not correspond to a known field.",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"unsupported_shape","","Creates a new error for a struct or variant that does not adhere to the supported shape.",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"unsupported_format","","",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"unexpected_type","","Creates a new error for a field which has an unexpected literal type.",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"unknown_value","","Creates a new error for a value which doesn't match a set of expected literals.",17,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"too_few_items","","Creates a new error for a list which did not get enough items to proceed.",17,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"too_many_items","","Creates a new error when a list got more items than it supports. The `max` argument is the largest number of items the receiver could accept.",17,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"multiple","","Bundle a set of multiple errors into a single `Error` instance.",17,{"i":[{"g":["error"],"n":"vec"}],"o":{"n":"self"}}],[11,"flatten","","Recursively converts a tree of errors to a flattened list.",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"at","","Adds a location to the error, such as a field or variant. Locations must be added in reverse order of specificity.",17,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"self"}}],[11,"len","","Gets the number of individual errors in this error.",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"description","","",17,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",17,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","","",17,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from_generics","darling_core::from_generics","",19,{"i":[{"n":"generics"}],"o":{"n":"result"}}],[11,"from_meta","darling_core::from_meta","",19,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[0,"options","darling_core","",null,null],[3,"Core","darling_core::options","A struct or enum which should have `FromMeta` or `FromDeriveInput` implementations generated.",null,null],[12,"ident","","The type identifier.",20,null],[12,"generics","","The type's generics. If the type does not use any generics, this will be an empty instance.",20,null],[12,"default","","Controls whether missing properties should cause errors or should be filled by the result of a function call. This can be overridden at the field level.",20,null],[12,"rename_rule","","The rule that should be used to rename all fields/variants in the container.",20,null],[12,"map","","An infallible function with the signature `FnOnce(T) -> T` which will be called after the target instance is successfully constructed.",20,null],[12,"data","","The body of the deriving type.",20,null],[12,"bound","","The custom bound to apply to the generated impl",20,null],[3,"FdiOptions","","",null,null],[12,"base","","",21,null],[12,"vis","","The field on the target struct which should receive the type visibility, if any.",21,null],[12,"generics","","The field on the target struct which should receive the type generics, if any.",21,null],[12,"data","","",21,null],[12,"supports","","",21,null],[3,"FromFieldOptions","","",null,null],[12,"base","","",22,null],[12,"vis","","",22,null],[12,"ty","","",22,null],[3,"FromMetaOptions","","",null,null],[3,"FromTypeParamOptions","","",null,null],[12,"base","","",23,null],[12,"bounds","","",23,null],[12,"default","","",23,null],[3,"FromVariantOptions","","",null,null],[12,"base","","",24,null],[12,"fields","","",24,null],[12,"supports","","",24,null],[3,"InputField","","",null,null],[12,"ident","","",25,null],[12,"attr_name","","",25,null],[12,"ty","","",25,null],[12,"default","","",25,null],[12,"with","","",25,null],[12,"skip","","If `true`, generated code will not look for this field in the input meta item, instead always falling back to either `InputField::default` or `Default::default`.",25,null],[12,"map","","",25,null],[12,"multiple","","",25,null],[3,"InputVariant","","",null,null],[3,"OuterFrom","","Reusable base for `FromDeriveInput`, `FromVariant`, `FromField`, and other top-level `From*` traits.",null,null],[12,"ident","","The field on the target struct which should receive the type identifier, if any.",26,null],[12,"attrs","","The field on the target struct which should receive the type attributes, if any.",26,null],[12,"container","","",26,null],[12,"attr_names","","The attribute names that should be searched.",26,null],[12,"forward_attrs","","The attribute names that should be forwarded. The presence of the word with no additional filtering will cause all attributes to be cloned and exposed to the struct after parsing.",26,null],[12,"from_ident","","Whether or not the container can be made through conversion from the type `Ident`.",26,null],[3,"DataShape","","",null,null],[3,"Shape","","",null,null],[4,"ForwardAttrs","","A rule about which attributes to forward to the generated struct.",null,null],[13,"All","","",27,null],[13,"Only","","",27,null],[4,"DefaultExpression","","A default/fallback expression encountered in attributes during parsing.",null,null],[13,"Inherit","","The value should be taken from the `default` instance of the containing struct. This is not valid in container options.",28,null],[13,"Explicit","","",28,null],[13,"Trait","","",28,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"core"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"core"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"core"}],"o":{"n":"bool"}}],[11,"start","","Partially initializes `Core` by reading the identity, generics, and body shape.",20,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"parse_nested","","",20,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_variant","","",20,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"result"}}],[11,"parse_field","","",20,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"from","darling_core::codegen","",12,{"i":[{"n":"core"}],"o":{"n":"self"}}],[11,"fmt","darling_core::options","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"forwardattrs"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"forwardattrs"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"forwardattrs"}],"o":{"n":"bool"}}],[11,"is_empty","","Returns `true` if this will not forward any attributes.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_word","","",27,{"o":{"n":"result"}}],[11,"from_list","","",27,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",21,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"parse_nested","","",21,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_variant","","",21,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"result"}}],[11,"parse_field","","",21,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"from","darling_core::codegen","",8,{"i":[{"n":"fdioptions"}],"o":{"n":"self"}}],[11,"fmt","darling_core::options","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",22,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"parse_nested","","",22,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_variant","","",22,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"result"}}],[11,"parse_field","","",22,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"from","darling_core::codegen","",9,{"i":[{"n":"fromfieldoptions"}],"o":{"n":"self"}}],[11,"new","darling_core::options","",29,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"parse_nested","","",29,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_variant","","",29,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"result"}}],[11,"parse_field","","",29,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"from","darling_core::codegen","",7,{"i":[{"n":"frommetaoptions"}],"o":{"n":"self"}}],[11,"fmt","darling_core::options","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",23,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"parse_nested","","",23,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_variant","","",23,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"result"}}],[11,"parse_field","","",23,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"from","darling_core::codegen","",10,{"i":[{"n":"fromtypeparamoptions"}],"o":{"n":"self"}}],[11,"fmt","darling_core::options","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"fromvariantoptions"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"fromvariantoptions"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"fromvariantoptions"}],"o":{"n":"bool"}}],[11,"new","","",24,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"from","darling_core::codegen","",11,{"i":[{"n":"fromvariantoptions"}],"o":{"n":"self"}}],[11,"parse_nested","darling_core::options","",24,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_field","","",24,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"inputfield"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"inputfield"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"inputfield"}],"o":{"n":"bool"}}],[11,"as_codegen_field","","Generate a view into this field that can be used for code generation.",25,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"from_field","","",25,{"i":[{"n":"field"},{"g":["core"],"n":"option"}],"o":{"n":"result"}}],[11,"parse_nested","","",25,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"inputvariant"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"inputvariant"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"inputvariant"}],"o":{"n":"bool"}}],[11,"as_codegen_variant","","",30,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"variant"}}],[11,"from_variant","","",30,{"i":[{"n":"variant"},{"g":["core"],"n":"option"}],"o":{"n":"result"}}],[11,"parse_nested","","",30,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"outerfrom"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"outerfrom"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"outerfrom"}],"o":{"n":"bool"}}],[11,"start","","",26,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"parse_nested","","",26,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[11,"parse_field","","",26,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"shape"}}],[11,"all","","",31,{"o":{"n":"self"}}],[11,"default","","",31,{"o":{"n":"self"}}],[11,"from_list","","",31,null],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"datashape"}}],[11,"default","","",32,{"o":{"n":"datashape"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"datashape"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"datashape"}],"o":{"n":"bool"}}],[11,"from_list","","",32,null],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[8,"ParseAttribute","","Middleware for extracting attribute values.",null,null],[11,"parse_attributes","","",33,null],[10,"parse_nested","","Read a meta-item, and apply its values to the current instance.",33,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"result"}}],[8,"ParseData","","",null,null],[11,"parse_body","","",34,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"result"}}],[11,"parse_variant","","Apply the next found variant to the object, returning an error if parsing goes wrong.",34,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"result"}}],[11,"parse_field","","Apply the next found struct field to the object, returning an error if parsing goes wrong.",34,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"defaultexpression"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"defaultexpression"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"defaultexpression"}],"o":{"n":"bool"}}],[0,"usage","darling_core","Traits and types used for tracking the usage of generic parameters through a proc-macro input.",null,null],[3,"Options","darling_core::usage","Control struct for searching type parameters.",null,null],[4,"Purpose","","The goal of tracing generic parameter usage.",null,null],[13,"BoundImpl","","The tracing is being used to generate an `impl` block.",35,null],[13,"Declare","","The tracing is being used to generate a new struct or enum.",35,null],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"purpose"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"purpose"}],"o":{"n":"bool"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"options"}}],[11,"from","","",36,{"i":[{"n":"purpose"}],"o":{"n":"self"}}],[11,"include_type_path_qself","","Returns `true` if the implementer of `UseTypeParams` should search `<___ as ...>::...` when looking for type parameter uses.",36,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[6,"IdentRefSet","","A set of references to idents.",null,null],[6,"IdentSet","","A set of idents.",null,null],[6,"LifetimeRefSet","","A set of references to lifetimes.",null,null],[6,"LifetimeSet","","A set of lifetimes.",null,null],[8,"GenericsExt","","Extension trait for pulling specific generics data from a generics AST representation.",null,null],[10,"declared_lifetimes","","Get the set of all lifetimes declared by the syntax element. This does not look for usage of the lifetime; see `UsesLifetimes` for that.",37,{"i":[{"n":"self"}],"o":{"n":"lifetimeset"}}],[10,"declared_type_params","","Get the set of all type parameters declared by the syntax element. This does not look for usage of the type parameter; see `UsesTypeParams` for that.",37,{"i":[{"n":"self"}],"o":{"n":"identset"}}],[8,"CollectLifetimes","","Searcher for finding lifetimes in an iterator.",null,null],[10,"collect_lifetimes","","Consume an iterator, accumulating all lifetimes in the elements which occur in `lifetimes`.",38,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimerefset"}}],[10,"collect_lifetimes_cloned","","Consume an iterator using `collect_lifetimes`, then clone all found lifetimes and return that set.",38,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimeset"}}],[8,"UsesLifetimes","","Searcher for finding lifetimes in a syntax tree. This can be used to determine which lifetimes must be emitted in generated code.",null,null],[10,"uses_lifetimes","","Returns the subset of the queried lifetimes that are used by the implementing syntax element.",39,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimerefset"}}],[11,"uses_lifetimes_cloned","","Find all used lifetimes, then clone them and return that set.",39,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimeset"}}],[8,"CollectTypeParams","","Searcher for finding type params in an iterator.",null,null],[10,"collect_type_params","","Consume an iterator, accumulating all type parameters in the elements which occur in `type_set`.",40,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[10,"collect_type_params_cloned","","Consume an iterator using `collect_type_params`, then clone all found type params and return that set.",40,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identset"}}],[8,"UsesTypeParams","","Searcher for finding type params in a syntax tree. This can be used to determine if a given type parameter needs to be bounded in a generated impl.",null,null],[10,"uses_type_params","","Returns the subset of the queried type parameters that are used by the implementing syntax element.",41,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[11,"uses_type_params_cloned","","Find all type params using `uses_type_params`, then clone the found values and return the set.",41,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identset"}}],[0,"util","darling_core","Utility types for attribute parsing.",null,null],[3,"IdentList","darling_core::util","A list of `syn::Ident` instances. This type is used to extract a list of words from an attribute.",null,null],[3,"IdentString","","A wrapper for an `Ident` which also keeps the value as a string.",null,null],[3,"Ignored","","An efficient way of discarding data from a syntax element.",null,null],[3,"WithOriginal","","A container to parse some syntax and retain access to the original.",null,null],[12,"parsed","","",42,null],[12,"original","","",42,null],[3,"Flag","","Marker type equivalent to `Option<()>` for use in attribute parsing.",null,null],[4,"Override","","A value which can inherit a default value or have an explicit value specified.",null,null],[13,"Inherit","","Inherit the eventual value from an external source.",43,null],[13,"Explicit","","Explicitly set the value.",43,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",44,{"o":{"n":"identlist"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"identlist"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"identlist"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"identlist"}],"o":{"n":"bool"}}],[11,"new","","Create a new list.",44,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"to_strings","","Create a new `Vec` containing the string representation of each ident.",44,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"vec"}}],[11,"deref","","",44,null],[11,"from","","",44,{"i":[{"g":["ident"],"n":"vec"}],"o":{"n":"self"}}],[11,"from_list","","",44,null],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"identstring"}}],[11,"hash","","",45,null],[11,"partial_cmp","","",45,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",45,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"le","","",45,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"gt","","",45,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"ge","","",45,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"bool"}}],[11,"cmp","","",45,{"i":[{"n":"self"},{"n":"identstring"}],"o":{"n":"ordering"}}],[11,"new","","Create a new `IdentString`.",45,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"as_ident","","Get the ident as a `proc_macro2::Ident`.",45,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"as_str","","Get the ident as a string.",45,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"span","","Get the location of this `Ident` in source.",45,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"map","","Apply some transform to the ident's string representation.",45,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"as_ref","","",45,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"as_ref","","",45,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",45,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_meta","","",45,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"ignored"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"ignored"}],"o":{"n":"bool"}}],[11,"hash","","",46,null],[11,"default","","",46,{"o":{"n":"ignored"}}],[11,"from_generic_param","","",46,{"i":[{"n":"genericparam"}],"o":{"n":"result"}}],[11,"from_generics","","",46,{"i":[{"n":"generics"}],"o":{"n":"result"}}],[11,"from_type_param","","",46,{"i":[{"n":"typeparam"}],"o":{"n":"result"}}],[11,"from_meta","","",46,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[11,"from_derive_input","","",46,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"from_field","","",46,{"i":[{"n":"field"}],"o":{"n":"result"}}],[11,"from_variant","","",46,{"i":[{"n":"variant"}],"o":{"n":"result"}}],[11,"uses_type_params","","",46,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identrefset"}}],[11,"uses_lifetimes","","",46,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimerefset"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"override"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"override"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"override"}],"o":{"n":"bool"}}],[11,"as_ref","","Converts from `Override<T>` to `Override<&T>`.",43,{"i":[{"n":"self"}],"o":{"n":"override"}}],[11,"as_mut","","Converts from `Override<T>` to `Override<&mut T>`.",43,{"i":[{"n":"self"}],"o":{"n":"override"}}],[11,"is_explicit","","Returns `true` if the override is an `Explicit` value.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"explicit","","Converts from `Override<T>` to `Option<T>`.",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"unwrap_or","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it returns `optb`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"unwrap_or_else","","Unwraps an override, yielding the content of an `Explicit`. Otherwise, it calls `op`.",43,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"unwrap_or_default","","Returns the contained value or the default value of `T`.",43,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"default","","",43,{"o":{"n":"self"}}],[11,"from","","",43,{"i":[{"n":"option"}],"o":{"n":"self"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_word","","",43,{"o":{"n":"result"}}],[11,"from_list","","",43,null],[11,"from_value","","",43,{"i":[{"n":"lit"}],"o":{"n":"result"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"withoriginal"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"withoriginal"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"withoriginal"}],"o":{"n":"bool"}}],[11,"new","","",42,{"i":[{"n":"t"},{"n":"o"}],"o":{"n":"self"}}],[11,"from_derive_input","","",42,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[11,"from_field","","",42,{"i":[{"n":"field"}],"o":{"n":"result"}}],[11,"from_generics","","",42,{"i":[{"n":"generics"}],"o":{"n":"result"}}],[11,"from_generic_param","","",42,{"i":[{"n":"genericparam"}],"o":{"n":"result"}}],[11,"from_meta","","",42,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[11,"from_type_param","","",42,{"i":[{"n":"typeparam"}],"o":{"n":"result"}}],[11,"from_variant","","",42,{"i":[{"n":"variant"}],"o":{"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"flag"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"flag"}],"o":{"n":"bool"}}],[11,"default","","",47,{"o":{"n":"flag"}}],[11,"present","","Creates a new `Flag` which corresponds to the presence of a value.",47,{"o":{"n":"self"}}],[11,"deref","","",47,null],[11,"from_meta","","",47,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[11,"from","","",47,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","",47,{"i":[{"n":"option"}],"o":{"n":"self"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"option"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"not","","",47,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"bitand","","",47,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"bitor","","",47,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"FromDeriveInput","darling_core","Creates an instance by parsing an entire proc-macro `derive` input, including the, identity, generics, and visibility of the type.",null,null],[10,"from_derive_input","","Create an instance from `syn::DeriveInput`, or return an error.",48,{"i":[{"n":"deriveinput"}],"o":{"n":"result"}}],[8,"FromField","","Creates an instance by parsing an individual field and its attributes.",null,null],[10,"from_field","","",49,{"i":[{"n":"field"}],"o":{"n":"result"}}],[8,"FromGenericParam","","Creates an instance by parsing a specific `syn::GenericParam`. This can be a type param, a lifetime, or a const param.",null,null],[10,"from_generic_param","","",50,{"i":[{"n":"genericparam"}],"o":{"n":"result"}}],[8,"FromGenerics","","Creates an instance by parsing an entire generics declaration, including the `where` clause.",null,null],[10,"from_generics","","",51,{"i":[{"n":"generics"}],"o":{"n":"result"}}],[8,"FromMeta","","Create an instance from an item in an attribute declaration.",null,null],[11,"from_nested_meta","","",52,{"i":[{"n":"nestedmeta"}],"o":{"n":"result"}}],[11,"from_meta","","Create an instance from a `syn::Meta` by dispatching to the format-appropriate trait function. This generally should not be overridden by implementers.",52,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[11,"from_word","","Create an instance from the presence of the word in the attribute with no additional options specified.",52,{"o":{"n":"result"}}],[11,"from_list","","Create an instance from a list of nested meta items.",52,null],[11,"from_value","","Create an instance from a literal value of either `foo = \"bar\"` or `foo(\"bar\")`. This dispatches to the appropriate method based on the type of literal encountered, and generally should not be overridden by implementers.",52,{"i":[{"n":"lit"}],"o":{"n":"result"}}],[11,"from_char","","Create an instance from a char literal in a value position.",52,{"i":[{"n":"char"}],"o":{"n":"result"}}],[11,"from_string","","Create an instance from a string literal in a value position.",52,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_bool","","Create an instance from a bool literal in a value position.",52,{"i":[{"n":"bool"}],"o":{"n":"result"}}],[8,"FromTypeParam","","Creates an instance by parsing an individual type_param and its attributes.",null,null],[10,"from_type_param","","",53,{"i":[{"n":"typeparam"}],"o":{"n":"result"}}],[8,"FromVariant","","Creates an instance from a specified `syn::Variant`.",null,null],[10,"from_variant","","Create an instance from `syn::Variant`, or return an error.",54,{"i":[{"n":"variant"}],"o":{"n":"result"}}],[14,"uses_type_params","","Generator for `UsesTypeParam` impls that unions the used type parameters of the selected fields.",null,null],[14,"uses_lifetimes","","Generator for `UsesLifetimes` impls that unions the used lifetimes of the selected fields.",null,null],[11,"as_type_param","darling_core::ast","If this GenericParam is a type param, get the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_lifetime_def","","If this GenericParam is a lifetime, get the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_const_param","","If this GenericParam is a const param, get the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"trait_bound","darling_core::codegen","",16,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"wrap","","",16,{"i":[{"n":"self"},{"n":"t"},{"n":"tokenstream"}]}],[11,"from_nested_meta","darling_core","",52,{"i":[{"n":"nestedmeta"}],"o":{"n":"result"}}],[11,"from_meta","","Create an instance from a `syn::Meta` by dispatching to the format-appropriate trait function. This generally should not be overridden by implementers.",52,{"i":[{"n":"meta"}],"o":{"n":"result"}}],[11,"from_word","","Create an instance from the presence of the word in the attribute with no additional options specified.",52,{"o":{"n":"result"}}],[11,"from_list","","Create an instance from a list of nested meta items.",52,null],[11,"from_value","","Create an instance from a literal value of either `foo = \"bar\"` or `foo(\"bar\")`. This dispatches to the appropriate method based on the type of literal encountered, and generally should not be overridden by implementers.",52,{"i":[{"n":"lit"}],"o":{"n":"result"}}],[11,"from_char","","Create an instance from a char literal in a value position.",52,{"i":[{"n":"char"}],"o":{"n":"result"}}],[11,"from_string","","Create an instance from a string literal in a value position.",52,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_bool","","Create an instance from a bool literal in a value position.",52,{"i":[{"n":"bool"}],"o":{"n":"result"}}],[11,"uses_lifetimes_cloned","darling_core::usage","Find all used lifetimes, then clone them and return that set.",39,{"i":[{"n":"self"},{"n":"options"},{"n":"lifetimeset"}],"o":{"n":"lifetimeset"}}],[11,"uses_type_params_cloned","","Find all type params using `uses_type_params`, then clone the found values and return the set.",41,{"i":[{"n":"self"},{"n":"options"},{"n":"identset"}],"o":{"n":"identset"}}]],"paths":[[3,"Fields"],[3,"Generics"],[4,"Data"],[4,"Style"],[4,"GenericParam"],[8,"GenericParamExt"],[3,"Field"],[3,"FromMetaImpl"],[3,"FromDeriveInputImpl"],[3,"FromFieldImpl"],[3,"FromTypeParamImpl"],[3,"FromVariantImpl"],[3,"TraitImpl"],[3,"Variant"],[3,"FieldsGen"],[4,"DefaultExpression"],[8,"OuterFromImpl"],[3,"Error"],[3,"IntoIter"],[6,"Result"],[3,"Core"],[3,"FdiOptions"],[3,"FromFieldOptions"],[3,"FromTypeParamOptions"],[3,"FromVariantOptions"],[3,"InputField"],[3,"OuterFrom"],[4,"ForwardAttrs"],[4,"DefaultExpression"],[3,"FromMetaOptions"],[3,"InputVariant"],[3,"Shape"],[3,"DataShape"],[8,"ParseAttribute"],[8,"ParseData"],[4,"Purpose"],[3,"Options"],[8,"GenericsExt"],[8,"CollectLifetimes"],[8,"UsesLifetimes"],[8,"CollectTypeParams"],[8,"UsesTypeParams"],[3,"WithOriginal"],[4,"Override"],[3,"IdentList"],[3,"IdentString"],[3,"Ignored"],[3,"Flag"],[8,"FromDeriveInput"],[8,"FromField"],[8,"FromGenericParam"],[8,"FromGenerics"],[8,"FromMeta"],[8,"FromTypeParam"],[8,"FromVariant"]]};
searchIndex["darling_macro"] = {"doc":"","items":[[5,"derive_from_meta","darling_macro","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_from_meta_item","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_from_input","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_field","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_type_param","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_variant","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[14,"debug_unreachable","debug_unreachable","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"self"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"extend","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize"],"n":"result"}}],[11,"fill_buf","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"consume","","",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"write","","",0,null],[11,"flush","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["ena"] = {"doc":"An implementation of union-find. See the `unify` module for more details.","items":[[0,"snapshot_vec","ena","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.",null,null],[3,"SnapshotVec","ena::snapshot_vec","",null,null],[3,"Snapshot","","",null,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",0,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",0,null],[13,"NewElem","","New variable with given index was created.",0,null],[13,"SetElem","","Variable with given index was changed from the given value.",0,null],[13,"Other","","Extensible set of actions",0,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",1,null],[16,"Undo","","",1,null],[10,"reverse","","",1,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",2,{"o":{"n":"snapshotvec"}}],[11,"with_capacity","","",2,{"i":[{"n":"usize"}],"o":{"n":"snapshotvec"}}],[11,"record","","",2,null],[11,"len","","",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"push","","",2,null],[11,"get","","",2,null],[11,"reserve","","Reserve space for new values, just like an ordinary vec.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone automatically, so you should be sure call `record()` with some sort of suitable undo action.",2,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if a snapshot is active.",2,null],[11,"set_all","","Updates all elements. Potentially more efficient -- but otherwise equivalent to -- invoking `set` for each element.",2,null],[11,"update","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"op"}]}],[11,"start_snapshot","","",2,{"i":[{"n":"self"}],"o":{"n":"snapshot"}}],[11,"actions_since_snapshot","","",2,null],[11,"rollback_to","","",2,{"i":[{"n":"self"},{"n":"snapshot"}]}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",2,{"i":[{"n":"self"},{"n":"snapshot"}]}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"extend","","",2,{"i":[{"n":"self"},{"n":"t"}]}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"unify","ena","Union-find implementation. The main type is `UnificationTable`.",null,null],[3,"InPlace","ena::unify","Backing store for an in-place unification table. Not typically used directly.",null,null],[3,"NoError","","A struct which can never be instantiated. Used for the error type for infallible cases.",null,null],[3,"VarValue","","Value of a unification key. We implement Tarjan's union-find algorithm: when two keys are unified, one of them is converted into a \"redirect\" pointing at the other. These redirects form a DAG: the roots of the DAG (nodes that are not redirected) are each associated with a value of type `V` and a rank. The rank is used to keep the DAG relatively balanced, which helps keep the running time of the algorithm under control. For more information, see http://en.wikipedia.org/wiki/Disjoint-set_data_structure.",null,null],[3,"UnificationTable","","Table of unification keys and their values. You must define a key type K that implements the `UnifyKey` trait. Unification tables can be used in two-modes:",null,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes made during the snapshot may either be committed or rolled back.",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"inplace"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",3,{"o":{"n":"self"}}],[11,"start_snapshot","","",3,null],[11,"rollback_to","","",3,null],[11,"commit","","",3,null],[11,"reset_unifications","","",3,null],[11,"len","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"push","","",3,{"i":[{"n":"self"},{"n":"varvalue"}]}],[11,"reserve","","",3,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"update","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}]}],[11,"index","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"varvalue"}}],[6,"InPlaceUnificationTable","","A unification table that uses an \"in-place\" vector.",null,null],[8,"UnificationStore","","Largely internal trait implemented by the unification table backing store types. The most common such type is `InPlace`, which indicates a standard, mutable unification table.",null,null],[16,"Key","","",4,null],[16,"Value","","",4,null],[16,"Snapshot","","",4,null],[10,"new","","",4,{"o":{"n":"self"}}],[10,"start_snapshot","","",4,null],[10,"rollback_to","","",4,null],[10,"commit","","",4,null],[10,"reset_unifications","","",4,null],[10,"len","","",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"push","","",4,{"i":[{"n":"self"},{"n":"varvalue"}]}],[10,"reserve","","",4,{"i":[{"n":"self"},{"n":"usize"}]}],[10,"update","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}]}],[11,"tag","","",4,{"o":{"n":"str"}}],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type variable. We call such variables unification keys. For example, this trait is implemented by `IntVid`, which represents integral variables.",null,null],[16,"Value","","",5,null],[10,"index","","",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"from_index","","",5,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"tag","","",5,{"o":{"n":"str"}}],[11,"order_roots","","If true, then `self` should be preferred as root to `other`. Note that we assume a consistent partial ordering, so returning true implies that `other.prefer_as_root_to(self)` would return false.  If there is no ordering between two keys (i.e., `a.prefer_as_root_to(b)` and `b.prefer_as_root_to(a)` both return false) then the rank will be used to determine the root in an optimal way.",5,null],[8,"UnifyValue","","Trait implemented for values associated with a unification key. This trait defines how to merge the values from two keys that are unioned together. This merging can be fallible. If you attempt to union two keys whose values cannot be merged, then the error is propagated up and the two keys are not unioned.",null,null],[16,"Error","","Defines the type to return when merging of two values fails. If merging is infallible, use the special struct `NoError` found in this crate, which unlocks various more convenient methods on the unification table.",6,null],[10,"unify_values","","Given two values, produce a new value that combines them. If that is not possible, produce an error.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"result"}}],[8,"EqUnifyValue","","A convenient helper for unification values which must be equal or else an error occurs. For example, if you are unifying types in a simple functional language, this may be appropriate, since (e.g.) you can't unify a type variable bound to `int` with one bound to `float` (but you can unify two type variables both bound to `int`).",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"varvalue"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"varvalue"}],"o":{"n":"bool"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"varvalue"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"unificationtable"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",9,{"o":{"n":"self"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either rolled back or committed in a \"LIFO\" (stack) order.",9,{"i":[{"n":"self"}],"o":{"n":"snapshot"}}],[11,"rollback_to","","Reverses all changes since the last snapshot. Also removes any keys that have been created since then.",9,{"i":[{"n":"self"},{"n":"snapshot"}]}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",9,{"i":[{"n":"self"},{"n":"snapshot"}]}],[11,"new_key","","Creates a fresh key with the given value.",9,null],[11,"reserve","","Reserve memory for `num_new_keys` to be created. Does not actually create the new keys; you must then invoke `new_key`.",9,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reset_unifications","","Clears all unifications that have been performed, resetting to the initial state. The values of each variable are given by the closure.",9,null],[11,"len","","Returns the number of keys created so far.",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"union","","Unions two keys without the possibility of failure; only applicable when unify values use `NoError` as their error type.",9,{"i":[{"n":"self"},{"n":"k1"},{"n":"k2"}]}],[11,"union_value","","Unions a key and a value without the possibility of failure; only applicable when unify values use `NoError` as their error type.",9,{"i":[{"n":"self"},{"n":"k1"},{"n":"v"}]}],[11,"unioned","","Given two keys, indicates whether they have been unioned together.",9,{"i":[{"n":"self"},{"n":"k1"},{"n":"k2"}],"o":{"n":"bool"}}],[11,"find","","Given a key, returns the (current) root key.",9,{"i":[{"n":"self"},{"n":"k1"}],"o":{"n":"k"}}],[11,"unify_var_var","","Unions together two variables, merging their values. If merging the values fails, the error is propagated and this method has no effect.",9,{"i":[{"n":"self"},{"n":"k1"},{"n":"k2"}],"o":{"n":"result"}}],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`, attempting to merge with the previous value.",9,{"i":[{"n":"self"},{"n":"k1"},{"n":"v"}],"o":{"n":"result"}}],[11,"probe_value","","Returns the current value for the given key. If the key has been union'd, this will give the value from the current root.",9,{"i":[{"n":"self"},{"n":"k1"}],"o":{"n":"v"}}],[11,"tag","","",4,{"o":{"n":"str"}}]],"paths":[[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"],[3,"InPlace"],[8,"UnificationStore"],[8,"UnifyKey"],[8,"UnifyValue"],[3,"NoError"],[3,"VarValue"],[3,"UnificationTable"]]};
searchIndex["enum_kind"] = {"doc":"","items":[[5,"derive_kind","enum_kind","Atributes on enum ## functions `#[kind(functions(name = \"return_type\"))]`",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"o":{"n":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"i":[{"n":"u64"}],"o":{"n":"fnvhasher"}}],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["ident_case"] = {"doc":"Crate for changing case of Rust identifiers.","items":[[4,"RenameRule","ident_case","A casing rule for renaming Rust identifiers.",null,null],[13,"None","","No-op rename rule.",0,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",0,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",0,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",0,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",0,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",0,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"renamerule"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"renamerule"}}],[11,"apply_to_variant","","Change case of a `PascalCase` variant.",0,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"string"}}],[11,"apply_to_field","","Change case of a `snake_case` field.",0,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"string"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"self"}}]],"paths":[[4,"RenameRule"]]};
searchIndex["isatty"] = {"doc":"This crate provides the following three functions:","items":[[5,"stdin_isatty","isatty","",null,{"o":{"n":"bool"}}],[5,"stdout_isatty","","",null,{"o":{"n":"bool"}}],[5,"stderr_isatty","","",null,{"o":{"n":"bool"}}]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"i":[{"n":"t"}]}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",36,null],[12,"ifa_name","","",36,null],[12,"ifa_flags","","",36,null],[12,"ifa_addr","","",36,null],[12,"ifa_netmask","","",36,null],[12,"ifa_ifu","","",36,null],[12,"ifa_data","","",36,null],[3,"in6_rtmsg","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"dirent64","","",null,null],[12,"d_ino","","",38,null],[12,"d_off","","",38,null],[12,"d_reclen","","",38,null],[12,"d_type","","",38,null],[12,"d_name","","",38,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",39,null],[12,"rlim_max","","",39,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",92,null],[12,"rt_dst","","",92,null],[12,"rt_gateway","","",92,null],[12,"rt_genmask","","",92,null],[12,"rt_flags","","",92,null],[12,"rt_pad2","","",92,null],[12,"rt_pad3","","",92,null],[12,"rt_tos","","",92,null],[12,"rt_class","","",92,null],[12,"rt_pad4","","",92,null],[12,"rt_metric","","",92,null],[12,"rt_dev","","",92,null],[12,"rt_mtu","","",92,null],[12,"rt_window","","",92,null],[12,"rt_irtt","","",92,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",93,null],[12,"loads","","",93,null],[12,"totalram","","",93,null],[12,"freeram","","",93,null],[12,"sharedram","","",93,null],[12,"bufferram","","",93,null],[12,"totalswap","","",93,null],[12,"freeswap","","",93,null],[12,"procs","","",93,null],[12,"pad","","",93,null],[12,"totalhigh","","",93,null],[12,"freehigh","","",93,null],[12,"mem_unit","","",93,null],[12,"_f","","",93,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",94,null],[12,"msg_stime","","",94,null],[12,"msg_rtime","","",94,null],[12,"msg_ctime","","",94,null],[12,"msg_qnum","","",94,null],[12,"msg_qbytes","","",94,null],[12,"msg_lspid","","",94,null],[12,"msg_lrpid","","",94,null],[3,"stat","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"stat64","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[3,"statfs64","","",null,null],[12,"f_type","","",97,null],[12,"f_bsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_fsid","","",97,null],[12,"f_namelen","","",97,null],[12,"f_frsize","","",97,null],[12,"f_flags","","",97,null],[12,"f_spare","","",97,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",98,null],[12,"f_frsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_favail","","",98,null],[12,"f_fsid","","",98,null],[12,"f_flag","","",98,null],[12,"f_namemax","","",98,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",99,null],[12,"exponent","","",99,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",100,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"_st","","",101,null],[12,"_xmm","","",101,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",102,null],[12,"swd","","",102,null],[12,"ftw","","",102,null],[12,"fop","","",102,null],[12,"rip","","",102,null],[12,"rdp","","",102,null],[12,"mxcsr","","",102,null],[12,"mxcr_mask","","",102,null],[12,"st_space","","",102,null],[12,"xmm_space","","",102,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",103,null],[12,"r14","","",103,null],[12,"r13","","",103,null],[12,"r12","","",103,null],[12,"rbp","","",103,null],[12,"rbx","","",103,null],[12,"r11","","",103,null],[12,"r10","","",103,null],[12,"r9","","",103,null],[12,"r8","","",103,null],[12,"rax","","",103,null],[12,"rcx","","",103,null],[12,"rdx","","",103,null],[12,"rsi","","",103,null],[12,"rdi","","",103,null],[12,"orig_rax","","",103,null],[12,"rip","","",103,null],[12,"cs","","",103,null],[12,"eflags","","",103,null],[12,"rsp","","",103,null],[12,"ss","","",103,null],[12,"fs_base","","",103,null],[12,"gs_base","","",103,null],[12,"ds","","",103,null],[12,"es","","",103,null],[12,"fs","","",103,null],[12,"gs","","",103,null],[3,"user","","",null,null],[12,"regs","","",104,null],[12,"u_fpvalid","","",104,null],[12,"i387","","",104,null],[12,"u_tsize","","",104,null],[12,"u_dsize","","",104,null],[12,"u_ssize","","",104,null],[12,"start_code","","",104,null],[12,"start_stack","","",104,null],[12,"signal","","",104,null],[12,"u_ar0","","",104,null],[12,"u_fpstate","","",104,null],[12,"magic","","",104,null],[12,"u_comm","","",104,null],[12,"u_debugreg","","",104,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",105,null],[12,"fpregs","","",105,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",106,null],[12,"uc_link","","",106,null],[12,"uc_stack","","",106,null],[12,"uc_mcontext","","",106,null],[12,"uc_sigmask","","",106,null],[3,"ipc_perm","","",null,null],[12,"__key","","",107,null],[12,"uid","","",107,null],[12,"gid","","",107,null],[12,"cuid","","",107,null],[12,"cgid","","",107,null],[12,"mode","","",107,null],[12,"__seq","","",107,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",108,null],[12,"shm_segsz","","",108,null],[12,"shm_atime","","",108,null],[12,"shm_dtime","","",108,null],[12,"shm_ctime","","",108,null],[12,"shm_cpid","","",108,null],[12,"shm_lpid","","",108,null],[12,"shm_nattch","","",108,null],[3,"termios2","","",null,null],[12,"c_iflag","","",109,null],[12,"c_oflag","","",109,null],[12,"c_cflag","","",109,null],[12,"c_lflag","","",109,null],[12,"c_line","","",109,null],[12,"c_cc","","",109,null],[12,"c_ispeed","","",109,null],[12,"c_ospeed","","",109,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",110,null],[12,"f_frsize","","",110,null],[12,"f_blocks","","",110,null],[12,"f_bfree","","",110,null],[12,"f_bavail","","",110,null],[12,"f_files","","",110,null],[12,"f_ffree","","",110,null],[12,"f_favail","","",110,null],[12,"f_fsid","","",110,null],[12,"f_flag","","",110,null],[12,"f_namemax","","",110,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WSTOPSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFCONTINUED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WIFSIGNALED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WTERMSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFEXITED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WEXITSTATUS","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WCOREDUMP","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"QCMD","","",null,{"i":[{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"IPOPT_COPIED","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_CLASS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPOPT_NUMBER","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"i":[{"n":"usize"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"CPU_EQUAL","","",null,{"i":[{"n":"cpu_set_t"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"major","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"minor","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"makedev","","",null,{"i":[{"n":"c_uint"},{"n":"c_uint"}],"o":{"n":"dev_t"}}],[5,"IPTOS_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"IPTOS_PREC","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_TOS","","",null,{"i":[{"n":"u8"}],"o":{"n":"u8"}}],[5,"RT_ADDRCLASS","","",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"RT_LOCALADDR","","",null,{"i":[{"n":"u32"}],"o":{"n":"bool"}}],[5,"NLA_ALIGN","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"stat64"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"statfs64"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"statvfs64"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"pthread_attr_t"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"_libc_fpxreg"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"_libc_xmmreg"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"_libc_fpstate"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"user_fpregs_struct"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"user_regs_struct"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"user"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"mcontext_t"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"ucontext_t"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"ipc_perm"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"shmid_ds"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"termios2"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"sysinfo"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"msqid_ds"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"aiocb"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"__exit_status"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"__timeval"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"utmpx"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"sigaction"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"stack_t"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"siginfo_t"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"glob64_t"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"msghdr"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"cmsghdr"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"sem_t"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"mallinfo"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"nlmsghdr"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"nlmsgerr"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"nl_pktinfo"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_req"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"nl_mmap_hdr"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"nlattr"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"rtentry"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"dirent"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"dirent64"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"rlimit64"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"glob_t"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"pthread_mutex_t"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlock_t"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"pthread_mutexattr_t"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlockattr_t"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pthread_cond_t"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"pthread_condattr_t"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"passwd"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"spwd"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"signalfd_siginfo"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"itimerspec"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"fsid_t"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"mq_attr"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"cpu_set_t"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"if_nameindex"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"msginfo"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"mmsghdr"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"sembuf"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"input_event"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"input_id"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"input_absinfo"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"input_keymap_entry"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"input_mask"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ff_replay"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ff_trigger"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ff_envelope"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ff_constant_effect"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ff_ramp_effect"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ff_condition_effect"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"ff_periodic_effect"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ff_rumble_effect"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"ff_effect"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"dl_phdr_info"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"elf32_phdr"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"elf64_phdr"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"mntent"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"posix_spawn_file_actions_t"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"posix_spawnattr_t"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"genlmsghdr"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"in6_pktinfo"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"addrinfo"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sockaddr_nl"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"sockaddr_ll"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"fd_set"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"sched_param"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"dl_info"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"epoll_event"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"lconv"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"sigevent"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"in_pktinfo"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"ifaddrs"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"in6_rtmsg"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utimbuf"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rlimit"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rusage"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ipv6_mreq"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hostent"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"iovec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"winsize"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"sigval"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"itimerval"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"tms"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"servent"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"o":{"n":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"i":[{"n":"m"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"i":[{"n":"m"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"o":{"g":["box","shutdownloggererror"],"n":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"o":{"g":["shutdownloggererror"],"n":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"i":[{"n":"self"},{"n":"logmetadata"}],"o":{"n":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"i":[{"n":"self"},{"n":"logrecord"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"ordering"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["loglevel"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"o":{"n":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"ordering"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["loglevelfilter"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"o":{"n":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"i":[{"n":"self"}],"o":{"g":["loglevel"],"n":"option"}}],[11,"args","","The message body.",3,{"i":[{"n":"self"}],"o":{"n":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"level","","The verbosity level of the message.",4,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"loglocation"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"module_path","","The module path of the message.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"file","","The source file containing the message.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"line","","The line containing the message.",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"i":[{"n":"self"},{"n":"loglevelfilter"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"i":[{"n":"t"}],"o":{"n":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"o":{"n":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"o":{"n":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"i":[{"n":"t"},{"n":"u32"}],"o":{"n":"t"}}],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"i":[{"n":"self"}],"o":{"n":"self"}}]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"o":{"n":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",15,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"inv","","Returns the multiplicative inverse of `self`.",17,null],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",18,null],[10,"mul_add","","Performs the fused multiply-add operation.",18,null],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",19,{"i":[{"n":"self"},{"n":"a"},{"n":"b"}]}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"o":{"n":"self"}}],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",21,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns negative infinity.",21,{"o":{"n":"self"}}],[10,"nan","","Returns NaN.",21,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",21,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"o":{"n":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",21,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"trunc","","Return the integer part of a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fract","","Returns the fractional part of a number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",21,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"max","","Returns the maximum of the two numbers.",21,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"powi","","Raise a number to an integer power.",21,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",21,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",22,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",22,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",22,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",22,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",22,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",22,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",22,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",22,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",22,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",22,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",22,{"o":{"n":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",23,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",23,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",23,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",23,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",23,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",23,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",23,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",23,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",23,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",23,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",23,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",23,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",23,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",23,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"i128"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"u128"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",24,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",25,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",26,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",27,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",28,null],[10,"pow","","Returns `self` to the power `rhs`.",28,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",29,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",29,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Bounded"],[8,"FloatCore"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Pow"],[8,"Num"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["owningref"],"n":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"i":[{"n":"self"}],"o":{"n":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["owningref"],"n":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["owningrefmut"],"n":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"i":[{"n":"self"}],"o":{"n":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"i":[{"n":"o"},{"n":"f"}],"o":{"n":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"i":[{"n":"o"},{"n":"f"}],"o":{"n":"result"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",3,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"owningrefmut"}],"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"hash","","",3,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"waittimeoutresult"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"waittimeoutresult"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"o":{"n":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"i":[{"n":"self"}]}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"i":[{"n":"self"}]}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"i":[{"n":"self"},{"n":"mutexguard"}]}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"i":[{"n":"self"},{"n":"mutexguard"},{"n":"instant"}],"o":{"n":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"i":[{"n":"self"},{"n":"mutexguard"},{"n":"duration"}],"o":{"n":"waittimeoutresult"}}],[11,"default","","",2,{"o":{"n":"condvar"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",3,{"i":[{"n":"t"}],"o":{"n":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"i":[{"n":"self"}],"o":{"n":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"i":[{"n":"self"}],"o":{"g":["mutexguard"],"n":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["mutexguard"],"n":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["mutexguard"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"i":[{"n":"self"}]}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"i":[{"n":"self"}]}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"i":[{"n":"self"}]}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",3,{"o":{"n":"mutex"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"i":[{"n":"self"}]}],[11,"map","","Make a new `MutexGuard` for a component of the locked data.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"mutexguard"}}],[11,"deref","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",5,{"i":[{"n":"t"}],"o":{"n":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",5,{"i":[{"n":"self"}],"o":{"n":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",5,{"i":[{"n":"self"}],"o":{"g":["reentrantmutexguard"],"n":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",5,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["reentrantmutexguard"],"n":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",5,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["reentrantmutexguard"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"raw_unlock","","Releases the mutex.",5,{"i":[{"n":"self"}]}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",5,{"i":[{"n":"self"}]}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",5,{"i":[{"n":"self"}]}],[11,"raw_try_lock","","Attempts to acquire this lock.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",5,{"o":{"n":"reentrantmutex"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",6,{"i":[{"n":"self"}]}],[11,"map","","Make a new `ReentrantMutexGuard` for a component of the locked data.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"reentrantmutexguard"}}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"i":[{"n":"t"}],"o":{"n":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}],"o":{"n":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"i":[{"n":"self"}],"o":{"g":["rwlockreadguard"],"n":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["rwlockreadguard"],"n":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["rwlockreadguard"],"n":"option"}}],[11,"read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}],"o":{"n":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"i":[{"n":"self"}],"o":{"g":["rwlockreadguard"],"n":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["rwlockreadguard"],"n":"option"}}],[11,"try_read_recursive_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["rwlockreadguard"],"n":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}],"o":{"n":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"i":[{"n":"self"}],"o":{"g":["rwlockwriteguard"],"n":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["rwlockwriteguard"],"n":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["rwlockwriteguard"],"n":"option"}}],[11,"upgradable_read","","Locks this rwlock with upgradable read access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}],"o":{"n":"rwlockupgradablereadguard"}}],[11,"try_upgradable_read","","Attempts to acquire this rwlock with upgradable read access.",7,{"i":[{"n":"self"}],"o":{"g":["rwlockupgradablereadguard"],"n":"option"}}],[11,"try_upgradable_read_for","","Attempts to acquire this rwlock with upgradable read access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["rwlockupgradablereadguard"],"n":"option"}}],[11,"try_upgradable_read_until","","Attempts to acquire this rwlock with upgradable read access until a timeout is reached.",7,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["rwlockupgradablereadguard"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"i":[{"n":"self"}]}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"i":[{"n":"self"}]}],[11,"raw_unlock_upgradable_read","","Releases upgradable read access of the rwlock.",7,{"i":[{"n":"self"}]}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"i":[{"n":"self"}]}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"i":[{"n":"self"}]}],[11,"raw_unlock_upgradable_read_fair","","Releases upgradable read access of the rwlock using a fair unlock protocol.",7,{"i":[{"n":"self"}]}],[11,"raw_downgrade","","Atomically downgrades a write lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"i":[{"n":"self"}]}],[11,"raw_downgrade_upgradable_read","","Atomically downgrades an upgradable read lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"i":[{"n":"self"}]}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}]}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raw_read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}]}],[11,"raw_try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}]}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raw_upgradable_read","","Locks this rwlock with upgradable read access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}]}],[11,"raw_try_upgradable_read","","Attempts to acquire this rwlock with upgradable read access.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raw_upgrade","","Upgrades this rwlock from upgradable read access to exclusive write access, blocking the current thread until it can be acquired.",7,{"i":[{"n":"self"}]}],[11,"raw_try_upgrade","","Attempts to upgrade this rwlock from upgradable read access to exclusive write access.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",7,{"o":{"n":"rwlock"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"i":[{"n":"self"}]}],[11,"map","","Make a new `RwLockReadGuard` for a component of the locked data.",8,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"rwlockreadguard"}}],[11,"deref","","",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"i":[{"n":"self"}],"o":{"n":"rwlockreadguard"}}],[11,"map","","Make a new `RwLockWriteGuard` for a component of the locked data.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"rwlockwriteguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"i":[{"n":"self"}]}],[11,"deref","","",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",9,{"i":[{"n":"self"}]}],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",10,{"i":[{"n":"self"}],"o":{"n":"rwlockreadguard"}}],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",10,{"i":[{"n":"self"}],"o":{"n":"rwlockwriteguard"}}],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",10,{"i":[{"n":"self"}],"o":{"g":["rwlockwriteguard"],"n":"result"}}],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["rwlockwriteguard"],"n":"result"}}],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",10,{"i":[{"n":"self"},{"n":"instant"}],"o":{"g":["rwlockwriteguard"],"n":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,{"i":[{"n":"self"}]}],[11,"deref","","",10,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",10,{"i":[{"n":"self"}]}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"oncestate"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"oncestate"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Once` value.",11,{"o":{"n":"once"}}],[11,"state","","Returns the current state of this `Once`.",11,{"i":[{"n":"self"}],"o":{"n":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",11,{"i":[{"n":"self"},{"n":"f"}]}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",11,{"i":[{"n":"self"},{"n":"f"}]}],[11,"default","","",11,{"o":{"n":"once"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"RwLockUpgradableReadGuardRef","","Typedef of an owning reference that uses a `RwLockUpgradableReadGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",0,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",4,null],[13,"Invalid","","The validation callback returned false.",4,null],[13,"TimedOut","","The timeout expired.",4,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",5,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"i":[{"n":"usize"},{"n":"v"},{"n":"b"},{"n":"t"},{"n":"parktoken"},{"g":["instant"],"n":"option"}],"o":{"n":"parkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"i":[{"n":"usize"},{"n":"unparktoken"}],"o":{"n":"usize"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"i":[{"n":"usize"},{"n":"f"},{"n":"c"}],"o":{"n":"unparkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"i":[{"n":"usize"},{"n":"c"}],"o":{"n":"unparkresult"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"i":[{"n":"usize"},{"n":"usize"},{"n":"v"},{"n":"c"}],"o":{"n":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"o":{"n":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"i":[{"n":"self"}]}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"i":[{"n":"self"}]}],[11,"default","","",6,{"o":{"n":"spinwait"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"parkresult"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"parkresult"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"parkresult"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"unparkresult"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"unparkresult"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"unparkresult"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"requeueop"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"requeueop"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"filterop"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"filterop"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"unparktoken"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"unparktoken"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"unparktoken"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"parktoken"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"parktoken"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"parktoken"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"i":[{"n":"usize"}]}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"i":[{"n":"usize"}]}],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["parser_macros"] = {"doc":"Simulates unhygienic macro to make parser's code cleaner. It lives here because it's not a generic purpose macro (at all).","items":[[5,"parser","parser_macros","This attribute macro injects first argument of function (typically `self`) to all known macros invocation in a function.",null,{"i":[{"n":"tokenstream"},{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"i":[{"n":"t"},{"n":"u64"}],"o":{"n":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["pmutil"] = {"doc":"Utils for implementing proc-macro. Works on stable.","items":[[3,"Quote","pmutil","Buffer for quasi quotting.",null,null],[0,"comment","","",null,null],[5,"comment","pmutil::comment","Creates a comment from `s`.",null,{"i":[{"n":"s"}],"o":{"n":"attribute"}}],[0,"prelude","pmutil","Prelude for convenience.",null,null],[3,"Group","pmutil::prelude","A delimited token stream.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"TokenStream","","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[8,"SpanExt","","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","","",1,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",1,{"i":[{"n":"self"}],"o":{"n":"token"}}],[10,"into_pm2_span","","",1,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"respan","pmutil","Span support for quasi-quotting.",null,null],[3,"FirstLast","pmutil::respan","",null,null],[8,"Respan","","",null,null],[10,"next_span","","Used while quasi quotting.",2,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"respan","","",2,{"i":[{"n":"self"},{"n":"tokentree"}],"o":{"n":"tokentree"}}],[11,"next_span","pmutil::prelude","",3,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fmt","pmutil::respan","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"firstlast"}}],[11,"next_span","","",4,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"from_tokens","","",4,{"i":[{"n":"totokens"}],"o":{"n":"self"}}],[11,"new_ident","pmutil::prelude","",1,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",1,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"into_pm2_span","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"spanned_quote","pmutil","Span-aware quasi quotting built on top of `quote` crate.",null,null],[3,"Location","pmutil::spanned_quote","Location of `smart_quote!` macro invocation.",null,null],[12,"file_name","","",5,null],[12,"line","","",5,null],[12,"col","","",5,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"location"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","pmutil","",6,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"new_call_site","","Shorthand for",6,{"o":{"n":"self"}}],[11,"from_tokens","","Shorthand for",6,{"i":[{"n":"totokens"}],"o":{"n":"self"}}],[11,"from_tokens_or","","Shorthand for",6,{"i":[{"n":"option"},{"n":"span"}],"o":{"n":"self"}}],[11,"parse","","Parse tokens as `Node`. Panics if parsing failed.",6,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"quote_with","","",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"push_parsed","","Parse `token` and append it to `self`.",6,{"i":[{"n":"self"},{"n":"str"}]}],[11,"push_tt","","Append `tt` to `self`.",6,{"i":[{"n":"self"},{"n":"tokentree"}]}],[11,"push_sym","","Respan symbol and append it to `self`.",6,{"i":[{"n":"self"},{"n":"str"}]}],[11,"push_group","","Respan and append `TokenStream::Group`",6,{"i":[{"n":"self"},{"n":"delimiter"},{"n":"f"}]}],[11,"push_tokens","","Appends node into `self` without respanning.",6,{"i":[{"n":"self"},{"n":"t"}]}],[11,"into_iter","","",6,null],[11,"from","pmutil::prelude","",7,{"i":[{"n":"quote"}],"o":{"n":"self"}}],[11,"to_tokens","pmutil","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","",6,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[0,"synom_ext","","Utils for tokens from synom::tokens.",null,null],[8,"FromSpan","pmutil::synom_ext","See [SpanExt#as_token][] for usage. Create tokens from [Span][].",null,null],[10,"from_span","","",8,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from_span","pmutil::prelude","",3,{"i":[{"n":"span"}],"o":{"n":"self"}}],[8,"SpanExt","pmutil","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","pmutil::prelude","",1,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",1,{"i":[{"n":"self"}],"o":{"n":"token"}}],[10,"into_pm2_span","pmutil","",1,{"i":[{"n":"self"}],"o":{"n":"span"}}],[8,"IdentExt","","Extension trait for [syn::Ident][].",null,null],[10,"new_ident_with","","Creates a new ident with same span by applying `map` to `self`.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"ident"}}],[8,"ToTokensExt","","",null,null],[11,"dump","","",10,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"first_last","","Usage: `Quote::new(body.first_last())`",10,{"i":[{"n":"self"}],"o":{"n":"firstlast"}}],[11,"new_ident_with","pmutil::prelude","Creates a new ident with same span by applying `map` to `self`.",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"ident"}}],[14,"smart_quote","pmutil","ide-friendly quasi quotting.",null,null],[11,"new","pmutil::prelude","Creates a new `Group` with the given delimiter and token stream.",12,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",12,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",12,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",12,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",12,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from_iter","","",7,{"i":[{"n":"i"}],"o":{"n":"tokenstream"}}],[11,"from_str","","",7,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"from","","",0,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",3,{"i":[{"n":"span"}],"o":{"n":"span"}}],[11,"from","","",7,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"from","","",0,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"extend","","",7,null],[11,"hash","","",11,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"into_iter","","",7,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"append","","For use by `ToTokens` implementations.",7,null],[11,"append_all","","For use by `ToTokens` implementations.",7,null],[11,"append_separated","","For use by `ToTokens` implementations.",7,null],[11,"append_terminated","","For use by `ToTokens` implementations.",7,null],[11,"to_tokens","","",7,null],[11,"into_token_stream","","",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"to_tokens","","",0,null],[11,"to_tokens","","",13,null],[11,"to_tokens","","",11,null],[11,"to_tokens","","",14,null],[11,"to_tokens","","",12,null],[11,"from","","",11,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",11,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",11,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"from","","",11,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"parse","","",0,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",0,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",11,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",11,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",12,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",12,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",13,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",13,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",7,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",7,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",14,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",14,{"o":{"g":["str"],"n":"option"}}],[11,"parse_any","","",11,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",13,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",13,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",13,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",13,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",13,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",13,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",13,null],[11,"span","","",13,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",13,null],[11,"new","","Creates a new `Punct` from the given character and spacing.",14,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",14,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",14,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",14,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",14,null],[11,"call_site","","The span of the invocation of the current procedural macro.",3,{"o":{"n":"span"}}],[11,"def_site","","A span that resolves at the macro definition site.",3,{"o":{"n":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",3,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",3,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",3,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"source_file","","The original source file into which this span points.",3,{"i":[{"n":"self"}],"o":{"n":"sourcefile"}}],[11,"start","","Get the starting line/column in the source file for this span.",3,{"i":[{"n":"self"}],"o":{"n":"linecolumn"}}],[11,"end","","Get the ending line/column in the source file for this span.",3,{"i":[{"n":"self"}],"o":{"n":"linecolumn"}}],[11,"join","","Create a new span encompassing `self` and `other`.",3,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"eq","","Compares to spans to see if they're equal.",3,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"new","","Returns an empty `TokenStream` containing no token trees.",7,{"o":{"n":"tokenstream"}}],[11,"empty","","",7,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",0,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",11,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"new_raw","","Same as `Ident::new`, but creates a raw identifier (`r#ident`).",11,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",11,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",11,null]],"paths":[[4,"TokenTree"],[8,"SpanExt"],[8,"Respan"],[3,"Span"],[3,"FirstLast"],[3,"Location"],[3,"Quote"],[3,"TokenStream"],[8,"FromSpan"],[8,"IdentExt"],[8,"ToTokensExt"],[3,"Ident"],[3,"Group"],[3,"Literal"],[3,"Punct"]]};
searchIndex["precomputed_hash"] = {"doc":"A base trait to expose a precomputed hash for a type.","items":[[8,"PrecomputedHash","precomputed_hash","A trait to expose a precomputed hash for a type.",null,null],[10,"precomputed_hash","","Return the precomputed hash for this item.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}]],"paths":[[8,"PrecomputedHash"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"FileName","","",null,null],[3,"SourceFile","","The source file of a given `Span`.",null,null],[3,"LineColumn","","A line-column pair representing the start or end of a `Span`.",null,null],[12,"line","","The 1-indexed line in the source file on which the span starts or ends (inclusive).",0,null],[12,"column","","The 0-indexed column (in UTF-8 characters) in the source file on which the span starts or ends (inclusive).",0,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",1,null],[13,"Ident","","An identifier.",1,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",1,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",1,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",2,null],[13,"Brace","","`{ ... }`",2,null],[13,"Bracket","","`[ ... ]`",2,null],[13,"None","","`Ø ... Ø`",2,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",3,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",3,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"filename"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",5,{"i":[{"n":"span"}],"o":{"n":"span"}}],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"g":["tokentree"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","proc_macro2","",7,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"new","","Returns an empty `TokenStream` containing no token trees.",7,{"o":{"n":"tokenstream"}}],[11,"empty","","",7,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",7,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"from","","",7,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"extend","","",7,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",7,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"sourcefile"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"sourcefile"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"sourcefile"}],"o":{"n":"bool"}}],[11,"path","","Get the path to this source file.",9,{"i":[{"n":"self"}],"o":{"n":"filename"}}],[11,"is_real","","Returns `true` if this source file is a real source file, and not generated by an external macro's expansion.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","",9,{"i":[{"n":"self"}],"o":{"n":"filename"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",5,{"o":{"n":"span"}}],[11,"def_site","","A span that resolves at the macro definition site.",5,{"o":{"n":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",5,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",5,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",5,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"source_file","","The original source file into which this span points.",5,{"i":[{"n":"self"}],"o":{"n":"sourcefile"}}],[11,"start","","Get the starting line/column in the source file for this span.",5,{"i":[{"n":"self"}],"o":{"n":"linecolumn"}}],[11,"end","","Get the ending line/column in the source file for this span.",5,{"i":[{"n":"self"}],"o":{"n":"linecolumn"}}],[11,"join","","Create a new span encompassing `self` and `other`.",5,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"eq","","Compares to spans to see if they're equal.",5,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",1,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",1,{"i":[{"n":"self"},{"n":"span"}]}],[11,"from","","",1,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",1,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",1,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",1,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",10,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",10,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",10,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",10,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"spacing"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",11,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",11,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",11,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",11,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",11,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",12,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"new_raw","","Same as `Ident::new`, but creates a raw identifier (`r#ident`).",12,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",12,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",12,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",12,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",13,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",13,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",13,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",13,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",13,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",13,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",13,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",13,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",13,null],[11,"span","","",13,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",13,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"LineColumn"],[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"FileName"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"SourceFile"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"i":[{"n":"self"},{"n":"u"}]}],[10,"append_all","","",0,{"i":[{"n":"self"},{"n":"i"}]}],[10,"append_separated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[10,"append_terminated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"o":{"n":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"o":{"n":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"o":{"n":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"n":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"i":[{"n":"range"},{"n":"r"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"range"}}],[11,"sample","","",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","","",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"gamma"}}],[11,"sample","","",5,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",5,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"chisquared"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"i":[{"n":"f64"}],"o":{"n":"chisquared"}}],[11,"sample","","",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"fisherf"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"fisherf"}}],[11,"sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"studentt"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"i":[{"n":"f64"}],"o":{"n":"studentt"}}],[11,"sample","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"standardnormal"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",9,{"i":[{"n":"r"}],"o":{"n":"standardnormal"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"normal"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"normal"}}],[11,"sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"lognormal"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"lognormal"}}],[11,"sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exp1"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",12,{"i":[{"n":"r"}],"o":{"n":"exp1"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exp"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"i":[{"n":"f64"}],"o":{"n":"exp"}}],[11,"sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"new","","",16,{"o":{"n":"randsample"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"weighted"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when `test_timer` fails.",null,null],[13,"NoTimer","","No timer available.",18,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",18,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",18,null],[13,"TinyVariantions","","Variations of deltas of time too small.",18,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",18,null],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"timererror"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"timererror"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",19,{"o":{"g":["jitterrng","timererror"],"n":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",19,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",19,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",19,{"i":[{"n":"self"}],"o":{"g":["u32","timererror"],"n":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",19,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"i64"}}],[11,"next_u32","","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",19,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",19,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",20,{"o":{"g":["osrng"],"n":"result"}}],[11,"next_u32","","",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",20,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",20,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",21,{"i":[{"n":"r"}],"o":{"n":"readrng"}}],[11,"next_u32","","",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",21,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",21,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",22,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",23,{"i":[{"n":"self"},{"n":"r"}]}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",22,{"i":[{"n":"r"},{"n":"u64"},{"n":"rsdr"}],"o":{"n":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",22,{"i":[{"n":"self"}]}],[11,"next_u32","","",22,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",22,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",22,null],[11,"reseed","","",22,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",22,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"reseedwithdefault"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reseed","","",24,{"i":[{"n":"self"},{"n":"r"}]}],[11,"default","","",24,{"o":{"n":"reseedwithdefault"}}],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"g":["vec","vec"],"n":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"i":[{"n":"r"},{"n":"usize"},{"n":"usize"}],"o":{"g":["usize"],"n":"vec"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"rand","rand","",0,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"open01"}}],[11,"rand","","",1,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"closed01"}}],[11,"rand","","",0,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"open01"}}],[11,"rand","","",1,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"closed01"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"chacharng"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,{"o":{"n":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"i":[{"n":"self"},{"n":"u64"},{"n":"u64"}]}],[11,"next_u32","","",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"i":[{"n":"r"}],"o":{"n":"chacharng"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,{"o":{"n":"isaacrng"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"isaacrng"}}],[11,"next_u32","","",26,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","",26,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,null],[11,"rand","","",26,{"i":[{"n":"r"}],"o":{"n":"isaacrng"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"o":{"n":"isaac64rng"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"isaac64rng"}}],[11,"next_u32","","",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",27,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"i":[{"n":"r"}],"o":{"n":"isaac64rng"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"xorshiftrng"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,{"o":{"n":"xorshiftrng"}}],[11,"next_u32","","",28,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"rand","","",28,{"i":[{"n":"r"}],"o":{"n":"xorshiftrng"}}],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,{"i":[{"n":"r"}],"o":{"n":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",30,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","Return the next random u64.",30,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",30,null],[11,"gen","","Return a random value of a `Rand` type.",30,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,{"i":[{"n":"self"}],"o":{"n":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",30,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,null],[11,"shuffle","","Shuffle a mutable slice in place.",30,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",31,{"i":[{"n":"self"},{"n":"seed"}]}],[10,"from_seed","","Create a new RNG with the given seed.",31,{"i":[{"n":"seed"}],"o":{"n":"self"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"stdrng"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"o":{"g":["stdrng"],"n":"result"}}],[11,"next_u32","","",34,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",34,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"threadrng"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",35,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",35,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rayon"] = {"doc":"Data-parallelism library that is easy to convert sequential computations into parallel.","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"o":{"n":"usize"}}],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"i":[{"n":"configuration"}],"o":{"g":["box"],"n":"result"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"i":[{"n":"op"}],"o":{"n":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"collections","","This module contains the parallel iterator types for standard collections. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",15,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",18,null],[13,"Right","","A value of type `R`.",18,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`ParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`ParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`ParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"i":[{"n":"d"},{"n":"s"}],"o":{"n":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"i":[{"n":"t"}],"o":{"n":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"o":{"n":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"i":[{"n":"t"}],"o":{"n":"once"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"chain"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",19,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",20,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",21,null],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"filtermap"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",22,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"flatmap"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",23,null],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"drive_unindexed","","",24,null],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::iter::plumbing","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",25,null],[10,"callback","","",25,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[16,"Item","","",26,null],[16,"IntoIter","","",26,null],[10,"into_iter","","",26,null],[11,"min_len","","",26,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"max_len","","",26,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",26,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"f"}}],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",27,null],[16,"Reducer","","",27,null],[16,"Result","","",27,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",27,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",27,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",28,null],[10,"consume","","Consume next item and return new sequential state.",28,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",28,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[10,"complete","","Finish consuming items, produce final result.",28,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",29,{"i":[{"n":"self"},{"n":"result"},{"n":"result"}],"o":{"n":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off_left","","",30,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_reducer","","",30,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[16,"Item","","",31,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",31,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",31,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"f"}}],[11,"clone","rayon::iter","",32,{"i":[{"n":"self"}],"o":{"n":"fold"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",32,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"foldwith"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",33,null],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"skip"}}],[11,"drive_unindexed","","",34,null],[11,"opt_len","","",34,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","",34,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drive","","",34,null],[11,"with_producer","","",34,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"split"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",35,null],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"take"}}],[11,"drive_unindexed","","",36,null],[11,"opt_len","","",36,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","",36,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drive","","",36,null],[11,"with_producer","","",36,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"map"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",37,null],[11,"len","","",37,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",37,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"mapwith"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",38,null],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"zip"}}],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",39,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"zipeq"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",40,null],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"interleave"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",41,null],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"interleaveshortest"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",42,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"intersperse"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",43,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",44,null],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"minlen"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",45,null],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"maxlen"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",46,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",47,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"inspect"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",48,null],[11,"opt_len","","",48,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",48,null],[11,"len","","",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",48,null],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"drive_unindexed","","",49,null],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",50,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",50,{"i":[{"n":"self"},{"n":"z"}],"o":{"g":["repeatn"],"n":"zip"}}],[11,"drive_unindexed","","",50,null],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"repeatn"}}],[11,"drive_unindexed","","",51,null],[11,"opt_len","","",51,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",51,null],[11,"with_producer","","",51,null],[11,"len","","",51,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",52,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"once"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",53,null],[11,"len","","",53,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",53,null],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","",54,null],[16,"Item","","",54,null],[10,"into_par_iter","","",54,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","",55,null],[16,"Item","","",55,null],[10,"par_iter","","",55,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","",56,null],[16,"Item","","",56,null],[10,"par_iter_mut","","",56,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",57,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",57,{"i":[{"n":"self"},{"n":"op"}]}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",57,{"i":[{"n":"self"},{"n":"t"},{"n":"op"}]}],[11,"count","","Counts the number of items in this parallel iterator.",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",57,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",57,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",57,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"inspect"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",57,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",57,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",57,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",57,{"i":[{"n":"self"},{"n":"id"},{"n":"f"}],"o":{"n":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",57,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",57,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"product","","Multiplies all the items in the iterator.",57,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",57,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",57,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",57,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",57,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",57,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",57,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",57,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",57,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",57,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",57,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",57,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",58,{"i":[{"n":"self"},{"n":"vec"}]}],[11,"unzip_into","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",58,{"i":[{"n":"self"},{"n":"vec"},{"n":"vec"}]}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",58,{"i":[{"n":"self"},{"n":"z"}],"o":{"n":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",58,{"i":[{"n":"self"},{"n":"z"}],"o":{"n":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"interleaveshortest"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",58,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"enumerate","","Yields an index along with each item.",58,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",58,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",58,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",58,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",58,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",58,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",58,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",58,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",58,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the conversion from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","",59,{"i":[{"n":"i"}],"o":{"n":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","",60,{"i":[{"n":"self"},{"n":"i"}]}],[0,"option","rayon","This module contains the parallel iterator types for options (`Option<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::option","Parallel iterator over an option",null,null],[3,"Iter","","Parallel iterator over an immutable reference to an option",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to an option",null,null],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",61,null],[11,"opt_len","","",61,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",61,null],[11,"len","","",61,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",61,null],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",62,null],[11,"opt_len","","",62,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",62,null],[11,"len","","",62,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",62,null],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",63,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","This module contains the parallel iterator types for ranges (`Range<T>`); this is the type for values created by a `a..b` expression. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",64,null],[11,"drive_unindexed","","",64,null],[0,"result","rayon","This module contains the parallel iterator types for results (`Result<T, E>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",65,null],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",67,null],[11,"opt_len","","",67,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",67,null],[11,"len","","",67,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",67,null],[0,"slice","rayon","This module contains the parallel iterator types for slices (`[T]`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",68,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",68,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",68,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",69,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",69,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",69,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",69,{"i":[{"n":"self"}]}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",69,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",69,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",69,{"i":[{"n":"self"}]}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",69,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",69,{"i":[{"n":"self"},{"n":"f"}]}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",70,null],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",71,null],[11,"opt_len","","",71,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",71,null],[11,"len","","",71,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",71,null],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",72,null],[11,"opt_len","","",72,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",72,null],[11,"len","","",72,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",72,null],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",73,null],[11,"opt_len","","",73,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",73,null],[11,"len","","",73,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",73,null],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",74,null],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",75,null],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",76,null],[0,"str","rayon","This module contains extension methods for `String` that expose parallel iterators, such as `par_split_whitespace()`. You will rarely need to interact with it directly, since if you add `use rayon::prelude::*` to your file, that will include the helper traits defined in this module.",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",77,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",77,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",77,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",77,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",77,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",77,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"drive_unindexed","","",78,null],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"split"}}],[11,"drive_unindexed","","",79,null],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"splitterminator"}}],[11,"drive_unindexed","","",80,null],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"drive_unindexed","","",81,null],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"drive_unindexed","","",82,null],[0,"vec","rayon","This module contains the parallel iterator types for vectors (`Vec<T>`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",83,null],[11,"opt_len","","",83,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",83,null],[11,"len","","",83,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",83,null],[11,"drive_unindexed","rayon::iter","",18,null],[11,"opt_len","","",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",18,null],[11,"len","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",18,null],[11,"par_extend","","",18,{"i":[{"n":"self"},{"n":"i"}]}],[11,"new","rayon","Creates and return a valid rayon thread pool configuration, but does not initialize it.",84,{"o":{"n":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",84,{"i":[{"n":"self"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",84,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"configuration"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",84,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",84,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",84,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"configuration"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",84,{"i":[{"n":"self"}],"o":{"n":"configuration"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",84,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",84,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"default","","",84,{"o":{"n":"configuration"}}],[11,"drop","","",85,null],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","rayon::iter","",18,null],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","","",18,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",18,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"from","","",18,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"write","","",18,null],[11,"flush","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",18,null],[11,"read_to_end","","",18,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"extend","","",18,null],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"hash","","",18,null],[11,"fill_buf","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"consume","","",18,null],[11,"next_back","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_ref","","",18,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"deref_mut","","",18,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"into","","",18,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",85,{"i":[{"n":"configuration"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",85,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",85,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",85,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",85,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",85,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",85,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",85,null],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",87,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",86,null],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,{"i":[{"n":"self"}],"o":{"n":"t"}}]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"Configuration"],[3,"ThreadPool"],[3,"Scope"],[3,"FnContext"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"o":{"g":["usize"],"n":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"o":{"g":["bool"],"n":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"i":[{"n":"op"}],"o":{"n":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"i":[{"n":"f"}]}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"o":{"n":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"i":[{"n":"configuration"}],"o":{"g":["box"],"n":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,{"i":[{"n":"self"},{"n":"body"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,{"i":[{"n":"configuration"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"i":[{"n":"self"},{"n":"op"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"threadpoolbuilder"}}],[11,"default","","",4,{"o":{"n":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,{"o":{"n":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,{"i":[{"n":"self"}],"o":{"g":["threadpool","threadpoolbuilderror"],"n":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,{"i":[{"n":"self"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,{"o":{"n":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,{"i":[{"n":"self"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["bool","error"],"n":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"fmt","regex","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"i":[{"n":"str"}],"o":{"n":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"i":[{"n":"self"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"i":[{"n":"str"}],"o":{"n":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"i":[{"n":"self"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"i":[{"n":"usize"},{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"i":[{"n":"self"}],"o":{"n":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"g":["captures"],"n":"option"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"i":[{"n":"self"}],"o":{"n":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"i":[{"n":"self"}],"o":{"n":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"i":[{"n":"self"}],"o":{"n":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"replace_append","","",2,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","",2,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"clone","regex","",16,{"i":[{"n":"self"}],"o":{"n":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"i":[{"n":"i"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"setmatches"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","regex::bytes","",20,{"i":[{"n":"self"}],"o":{"n":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"i":[{"n":"i"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"setmatches"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",22,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"next","","",23,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",23,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","regex","",24,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"regex"}],"o":{"n":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"i":[{"n":"usize"},{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["captures"],"n":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"i":[{"n":"self"},{"n":"str"},{"n":"r"}],"o":{"n":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"i":[{"n":"self"},{"n":"str"},{"n":"r"}],"o":{"n":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"r"}],"o":{"n":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["usize"],"n":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"i":[{"n":"self"}],"o":{"n":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"i":[{"n":"self"},{"n":"captures"}],"o":{"g":["str"],"n":"cow"}}],[11,"no_expand","","",0,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["str"],"n":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["str"],"n":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"i":[{"n":"self"}],"o":{"n":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"i":[{"n":"self"}],"o":{"n":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"i":[{"n":"self"}],"o":{"n":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",28,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"str"}}],[11,"index","","",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"str"}}],[11,"next","","",29,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"next","","",30,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"g":["captures"],"n":"option"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"i":[{"n":"self"},{"n":"captures"}],"o":{"g":["str"],"n":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"o":{"n":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["literals"],"n":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"union","","Unions this set with another set.",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"i":[{"n":"self"},{"n":"charclass"}],"o":{"n":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"i":[{"n":"self"},{"n":"byteclass"}],"o":{"n":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"i":[{"n":"self"}]}],[11,"reverse","","Reverses all members in place.",5,{"i":[{"n":"self"}]}],[11,"clear","","Clears this set of all members.",5,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"o":{"n":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cut","","Cuts this literal.",6,{"i":[{"n":"self"}]}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"lit"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"repeater"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"repeater"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"repeater"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"charclass"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"charclass"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"charclass"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"classrange"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"ordering"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"byteclass"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"byteclass"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"byteclass"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"byterange"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"ordering"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"exprbuilder"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"o":{"n":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["expr"],"n":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"i":[{"n":"str"}],"o":{"g":["expr"],"n":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"deref","","",7,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"into_iter","","",7,{"i":[{"n":"self"}],"o":{"g":["classrange"],"n":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"i":[{"g":["classrange"],"n":"vec"}],"o":{"n":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"i":[{"n":"self"},{"n":"char"}]}],[11,"negate","","Negates the character class.",7,{"i":[{"n":"self"}],"o":{"n":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"i":[{"n":"self"}],"o":{"n":"charclass"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["ordering"],"n":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"i":[{"g":["byterange"],"n":"vec"}],"o":{"n":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"negate","","Negates the byte class.",8,{"i":[{"n":"self"}],"o":{"n":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"i":[{"n":"self"}],"o":{"n":"byteclass"}}],[11,"deref","","",8,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"into_iter","","",8,{"i":[{"n":"self"}],"o":{"g":["byterange"],"n":"intoiter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rustc_cratesio_shim"] = {"doc":"","items":[],"paths":[]};
searchIndex["rustc_data_structures"] = {"doc":"Various data structures used by the Rust compiler. The intention is that code in here should be not be specific to rustc, so that it can be easily unit tested and so forth.","items":[[8,"ToHex","rustc_data_structures","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"i":[{"n":"self"}],"o":{"n":"string"}}],[0,"snapshot_vec","","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.",null,null],[4,"UndoLog","rustc_data_structures::snapshot_vec","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",1,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",1,null],[13,"NewElem","","New variable with given index was created.",1,null],[13,"SetElem","","Variable with given index was changed from the given value.",1,null],[13,"Other","","Extensible set of actions",1,null],[3,"SnapshotVec","","",null,null],[3,"Snapshot","","",null,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",2,null],[16,"Undo","","",2,null],[10,"reverse","","",2,null],[0,"unify","rustc_data_structures","Union-find implementation. The main type is `UnificationTable`.",null,null],[8,"UnifyKey","rustc_data_structures::unify","This trait is implemented by any type that can serve as a type variable. We call such variables unification keys. For example, this trait is implemented by `IntVid`, which represents integral variables.",null,null],[16,"Value","","",3,null],[10,"index","","",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"from_index","","",3,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"tag","","",3,{"o":{"n":"str"}}],[11,"order_roots","","If true, then `self` should be preferred as root to `other`. Note that we assume a consistent partial ordering, so returning true implies that `other.prefer_as_root_to(self)` would return false.  If there is no ordering between two keys (i.e., `a.prefer_as_root_to(b)` and `b.prefer_as_root_to(a)` both return false) then the rank will be used to determine the root in an optimal way.",3,null],[8,"UnifyValue","","Trait implemented for values associated with a unification key. This trait defines how to merge the values from two keys that are unioned together. This merging can be fallible. If you attempt to union two keys whose values cannot be merged, then the error is propagated up and the two keys are not unioned.",null,null],[16,"Error","","Defines the type to return when merging of two values fails. If merging is infallible, use the special struct `NoError` found in this crate, which unlocks various more convenient methods on the unification table.",4,null],[10,"unify_values","","Given two values, produce a new value that combines them. If that is not possible, produce an error.",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"result"}}],[8,"EqUnifyValue","","A convenient helper for unification values which must be equal or else an error occurs. For example, if you are unifying types in a simple functional language, this may be appropriate, since (e.g.) you can't unify a type variable bound to `int` with one bound to `float` (but you can unify two type variables both bound to `int`).",null,null],[3,"NoError","","A struct which can never be instantiated. Used for the error type for infallible cases.",null,null],[3,"VarValue","","Value of a unification key. We implement Tarjan's union-find algorithm: when two keys are unified, one of them is converted into a \"redirect\" pointing at the other. These redirects form a DAG: the roots of the DAG (nodes that are not redirected) are each associated with a value of type `V` and a rank. The rank is used to keep the DAG relatively balanced, which helps keep the running time of the algorithm under control. For more information, see http://en.wikipedia.org/wiki/Disjoint-set_data_structure.",null,null],[3,"UnificationTable","","Table of unification keys and their values. You must define a key type K that implements the `UnifyKey` trait. Unification tables can be used in two-modes:",null,null],[6,"InPlaceUnificationTable","","A unification table that uses an \"in-place\" vector.",null,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes made during the snapshot may either be committed or rolled back.",null,null],[8,"UnificationStore","","Largely internal trait implemented by the unification table backing store types. The most common such type is `InPlace`, which indicates a standard, mutable unification table.",null,null],[16,"Key","","",5,null],[16,"Value","","",5,null],[16,"Snapshot","","",5,null],[10,"new","","",5,{"o":{"n":"self"}}],[10,"start_snapshot","","",5,null],[10,"rollback_to","","",5,null],[10,"commit","","",5,null],[10,"reset_unifications","","",5,null],[10,"len","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"push","","",5,null],[10,"reserve","","",5,null],[10,"update","","",5,null],[11,"tag","","",5,{"o":{"n":"str"}}],[3,"InPlace","","Backing store for an in-place unification table. Not typically used directly.",null,null],[3,"OnDrop","rustc_data_structures","",null,null],[12,"0","","",6,null],[0,"array_vec","","A stack-allocated vector, allowing storage of N elements on the stack.",null,null],[3,"ArrayVec","rustc_data_structures::array_vec","",null,null],[3,"Iter","","",null,null],[3,"Drain","","",null,null],[8,"Array","","",null,null],[16,"Element","","",7,null],[16,"PartialStorage","","",7,null],[18,"LEN","","",7,null],[11,"hash","","",8,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","",8,{"o":{"n":"self"}}],[11,"len","","",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_len","","",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"push","","Panics when the stack vector is full.",8,null],[11,"pop","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drain","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"drain"}}],[11,"default","","",8,{"o":{"n":"self"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",8,null],[11,"deref_mut","","",8,null],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"extend","","",8,{"i":[{"n":"self"},{"n":"i"}]}],[11,"drop","","",9,{"i":[{"n":"self"}]}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"drop","","",10,{"i":[{"n":"self"}]}],[11,"into_iter","","",8,null],[0,"accumulate_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"IntoIter","rustc_data_structures::accumulate_vec","",null,null],[4,"AccumulateVec","","",null,null],[13,"Array","","",11,null],[13,"Heap","","",11,null],[4,"Drain","","",null,null],[13,"Array","","",12,null],[13,"Heap","","",12,null],[11,"hash","","",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","",11,{"o":{"n":"accumulatevec"}}],[11,"one","","",11,null],[11,"many","","",11,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"len","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"pop","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drain","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"drain"}}],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[11,"from_iter","","",11,{"i":[{"n":"i"}],"o":{"n":"accumulatevec"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"into_iter","","",11,null],[11,"from","","",11,{"i":[{"n":"vec"}],"o":{"n":"accumulatevec"}}],[11,"default","","",11,{"o":{"n":"accumulatevec"}}],[11,"encode","","",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",11,{"i":[{"n":"d"}],"o":{"g":["accumulatevec"],"n":"result"}}],[0,"small_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"SmallVec","rustc_data_structures::small_vec","",null,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",14,{"o":{"n":"self"}}],[11,"with_capacity","","",14,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"one","","",14,null],[11,"many","","",14,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"expect_one","","",14,null],[11,"push","","Will reallocate onto the heap if needed.",14,null],[11,"reserve","","",14,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"set_len","","",14,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"insert","","",14,null],[11,"truncate","","",14,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"deref","","",14,null],[11,"deref_mut","","",14,{"i":[{"n":"self"}],"o":{"n":"accumulatevec"}}],[11,"from_iter","","",14,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",14,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",14,null],[11,"default","","",14,{"o":{"n":"smallvec"}}],[11,"encode","","",14,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",14,{"i":[{"n":"d"}],"o":{"g":["smallvec"],"n":"result"}}],[0,"base_n","rustc_data_structures","",null,null],[5,"push_str","rustc_data_structures::base_n","",null,{"i":[{"n":"u128"},{"n":"usize"},{"n":"string"}]}],[5,"encode","","",null,{"i":[{"n":"u128"},{"n":"usize"}],"o":{"n":"string"}}],[17,"MAX_BASE","","",null,null],[17,"ALPHANUMERIC_ONLY","","",null,null],[17,"CASE_INSENSITIVE","","",null,null],[0,"bitslice","rustc_data_structures","",null,null],[3,"Intersect","rustc_data_structures::bitslice","",null,null],[3,"Union","","",null,null],[3,"Subtract","","",null,null],[5,"bits_to_string","","",null,null],[5,"bitwise","","",null,null],[6,"Word","","",null,null],[8,"BitSlice","","`BitSlice` provides helper methods for treating a `[Word]` as a bitvector.",null,null],[10,"clear_bit","","",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[10,"set_bit","","",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[10,"get_bit","","",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[8,"BitwiseOperator","","",null,null],[10,"join","","Applies some bit-operation pointwise to each of the bits in the two inputs.",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"join","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"join","","",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"join","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[0,"bitvec","rustc_data_structures","",null,null],[3,"BitVector","rustc_data_structures::bitvec","A very simple BitVector type.",null,null],[3,"BitVectorIter","","",null,null],[3,"BitMatrix","","A \"bit matrix\" is basically a matrix of booleans represented as one gigantic bitvector. In other words, it is as if you have `rows` bitvectors, each of length `columns`.",null,null],[3,"SparseBitMatrix","","",null,null],[3,"SparseBitSet","","",null,null],[3,"SparseChunk","","",null,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"bitvector"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"bitvector"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"bitvector"}],"o":{"n":"bool"}}],[11,"new","","",20,{"i":[{"n":"usize"}],"o":{"n":"bitvector"}}],[11,"clear","","",20,{"i":[{"n":"self"}]}],[11,"count","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains","","",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"insert","","Returns true if the bit has changed.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"remove","","Returns true if the bit has changed.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"insert_all","","",20,{"i":[{"n":"self"},{"n":"bitvector"}],"o":{"n":"bool"}}],[11,"grow","","",20,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"iter","","Iterates over indexes of set bits in a sorted order",20,{"i":[{"n":"self"}],"o":{"n":"bitvectoriter"}}],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",21,null],[11,"from_iter","","",20,{"i":[{"n":"i"}],"o":{"n":"bitvector"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"bitmatrix"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `rows x columns` matrix, initially empty.",22,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"bitmatrix"}}],[11,"add","","Sets the cell at `(row, column)` to true. Put another way, add `column` to the bitset for `row`.",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"contains","","Do the bits from `row` contain `column`? Put another way, is the matrix cell at `(row, column)` true?  Put yet another way, if the matrix represents (transitive) reachability, can `row` reach `column`?",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"intersection","","Returns those indices that are true in rows `a` and `b`.  This is an O(n) operation where `n` is the number of elements (somewhat independent from the actual size of the intersection, in particular).",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"g":["usize"],"n":"vec"}}],[11,"merge","","Add the bits from row `read` to the bits from row `write`, return true if anything changed.",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"iter","","Iterates through all the columns set to true in a given row of the matrix.",22,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bitvectoriter"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sparsebitmatrix"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `rows x columns` matrix, initially empty.",23,{"i":[{"n":"r"},{"n":"c"}],"o":{"n":"sparsebitmatrix"}}],[11,"add","","Sets the cell at `(row, column)` to true. Put another way, insert `column` to the bitset for `row`.",23,{"i":[{"n":"self"},{"n":"r"},{"n":"c"}],"o":{"n":"bool"}}],[11,"contains","","Do the bits from `row` contain `column`? Put another way, is the matrix cell at `(row, column)` true?  Put yet another way, if the matrix represents (transitive) reachability, can `row` reach `column`?",23,{"i":[{"n":"self"},{"n":"r"},{"n":"c"}],"o":{"n":"bool"}}],[11,"merge","","Add the bits from row `read` to the bits from row `write`, return true if anything changed.",23,{"i":[{"n":"self"},{"n":"r"},{"n":"r"}],"o":{"n":"bool"}}],[11,"is_subset","","True if `sub` is a subset of `sup`",23,{"i":[{"n":"self"},{"n":"r"},{"n":"r"}],"o":{"n":"bool"}}],[11,"iter","","Iterates through all the columns set to true in a given row of the matrix.",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sparsebitset"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"sparsechunk"}}],[11,"one","","",25,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"any","","",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bits_eq","","",25,{"i":[{"n":"self"},{"n":"sparsechunk"}],"o":{"n":"bool"}}],[11,"iter","","",25,null],[11,"new","","",24,{"o":{"n":"self"}}],[11,"capacity","","",24,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains_chunk","","Returns a chunk containing only those bits that are already present. You can test therefore if `self` contains all the bits in chunk already by doing `chunk == self.contains_chunk(chunk)`.",24,{"i":[{"n":"self"},{"n":"sparsechunk"}],"o":{"n":"sparsechunk"}}],[11,"insert_chunk","","Modifies `self` to contain all the bits from `chunk` (in addition to any pre-existing bits); returns a new chunk that contains only those bits that were newly added. You can test if anything was inserted by invoking `any()` on the returned value.",24,{"i":[{"n":"self"},{"n":"sparsechunk"}],"o":{"n":"sparsechunk"}}],[11,"remove_chunk","","",24,{"i":[{"n":"self"},{"n":"sparsechunk"}],"o":{"n":"sparsechunk"}}],[11,"clear","","",24,{"i":[{"n":"self"}]}],[11,"chunks","","",24,null],[11,"contains","","",24,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"insert","","",24,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"remove","","",24,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"iter","","",24,null],[0,"graph","rustc_data_structures","A graph module for use in dataflow, region resolution, and elsewhere.",null,null],[3,"Graph","rustc_data_structures::graph","",null,null],[3,"Node","","",null,null],[12,"data","","",26,null],[3,"Edge","","",null,null],[12,"data","","",27,null],[3,"NodeIndex","","",null,null],[12,"0","","",28,null],[3,"EdgeIndex","","",null,null],[12,"0","","",29,null],[3,"Direction","","",null,null],[3,"AdjacentEdges","","",null,null],[3,"DepthFirstTraversal","","",null,null],[17,"INVALID_EDGE_INDEX","","",null,null],[17,"OUTGOING","","",null,null],[17,"INCOMING","","",null,null],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reverse","","",26,null],[11,"reverse","","",27,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",28,null],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"edgeindex"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"bool"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",29,null],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"direction"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"bool"}}],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",28,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","",31,{"o":{"n":"graph"}}],[11,"with_capacity","","",31,{"i":[{"n":"usize"},{"n":"usize"}],"o":{"n":"graph"}}],[11,"all_nodes","","",31,null],[11,"len_nodes","","",31,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"all_edges","","",31,null],[11,"len_edges","","",31,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next_node_index","","",31,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"add_node","","",31,{"i":[{"n":"self"},{"n":"n"}],"o":{"n":"nodeindex"}}],[11,"mut_node_data","","",31,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"node_data","","",31,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"n"}}],[11,"node","","",31,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"node"}}],[11,"next_edge_index","","",31,{"i":[{"n":"self"}],"o":{"n":"edgeindex"}}],[11,"add_edge","","",31,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"nodeindex"},{"n":"e"}],"o":{"n":"edgeindex"}}],[11,"edge","","",31,{"i":[{"n":"self"},{"n":"edgeindex"}],"o":{"n":"edge"}}],[11,"enumerated_nodes","","",31,null],[11,"enumerated_edges","","",31,null],[11,"each_node","","Iterates over all edges defined in the graph.",31,null],[11,"each_edge","","Iterates over all edges defined in the graph",31,null],[11,"outgoing_edges","","",31,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"adjacentedges"}}],[11,"incoming_edges","","",31,{"i":[{"n":"self"},{"n":"nodeindex"}],"o":{"n":"adjacentedges"}}],[11,"adjacent_edges","","",31,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"adjacentedges"}}],[11,"successor_nodes","","",31,null],[11,"predecessor_nodes","","",31,null],[11,"depth_traverse","","",31,{"i":[{"n":"self"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"depthfirsttraversal"}}],[11,"nodes_in_postorder","","",31,{"i":[{"n":"self"},{"n":"direction"},{"n":"nodeindex"}],"o":{"g":["nodeindex"],"n":"vec"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",32,null],[11,"with_start_node","","",33,{"i":[{"n":"graph"},{"n":"nodeindex"},{"n":"direction"}],"o":{"n":"self"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"g":["nodeindex"],"n":"option"}}],[11,"size_hint","","",33,null],[11,"source","","",27,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"target","","",27,{"i":[{"n":"self"}],"o":{"n":"nodeindex"}}],[11,"source_or_target","","",27,{"i":[{"n":"self"},{"n":"direction"}],"o":{"n":"nodeindex"}}],[0,"indexed_set","rustc_data_structures","",null,null],[3,"IdxSetBuf","rustc_data_structures::indexed_set","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[3,"IdxSet","","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[3,"Iter","","",null,null],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"idxsetbuf"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"idxsetbuf"}],"o":{"n":"bool"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"encode","","",34,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"decode","","",34,{"i":[{"n":"d"}],"o":{"g":["idxsetbuf"],"n":"result"}}],[11,"borrow","","",34,{"i":[{"n":"self"}],"o":{"n":"idxset"}}],[11,"borrow_mut","","",34,{"i":[{"n":"self"}],"o":{"n":"idxset"}}],[11,"to_owned","","",35,null],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_filled","","Creates set holding every element whose index falls in range 0..universe_size.",34,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"new_empty","","Creates set holding no elements.",34,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"deref","","",34,{"i":[{"n":"self"}],"o":{"n":"idxset"}}],[11,"deref_mut","","",34,{"i":[{"n":"self"}],"o":{"n":"idxset"}}],[11,"to_owned","","",35,{"i":[{"n":"self"}],"o":{"n":"idxsetbuf"}}],[11,"clear","","Removes all elements",35,{"i":[{"n":"self"}]}],[11,"set_up_to","","Sets all elements up to `universe_size`",35,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remove","","Removes `elem` from the set `self`; returns true iff this changed `self`.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"add","","Adds `elem` to the set `self`; returns true iff this changed `self`.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"range","","",35,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"self"}}],[11,"range_mut","","",35,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"self"}}],[11,"contains","","Returns true iff set `self` contains `elem`.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"words","","",35,null],[11,"words_mut","","",35,null],[11,"clone_from","","",35,{"i":[{"n":"self"},{"n":"idxset"}]}],[11,"union","","",35,{"i":[{"n":"self"},{"n":"idxset"}],"o":{"n":"bool"}}],[11,"subtract","","",35,{"i":[{"n":"self"},{"n":"idxset"}],"o":{"n":"bool"}}],[11,"intersect","","",35,{"i":[{"n":"self"},{"n":"idxset"}],"o":{"n":"bool"}}],[11,"iter","","",35,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"next","","",36,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"indexed_vec","rustc_data_structures","",null,null],[3,"IndexVec","rustc_data_structures::indexed_vec","",null,null],[12,"raw","","",37,null],[3,"IntoIdx","","",null,null],[6,"Enumerated","","",null,null],[8,"Idx","","Represents some newtyped `usize` wrapper.",null,null],[10,"new","","",38,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[10,"index","","",38,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"indexvec"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"indexvec"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"indexvec"}],"o":{"n":"bool"}}],[11,"hash","","",37,null],[11,"encode","","",37,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",37,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",37,{"o":{"n":"self"}}],[11,"with_capacity","","",37,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from_elem","","",37,{"i":[{"n":"t"},{"n":"indexvec"}],"o":{"n":"self"}}],[11,"from_elem_n","","",37,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"self"}}],[11,"push","","",37,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"i"}}],[11,"pop","","",37,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",37,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_iter","","",37,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"into_iter_enumerated","","",37,{"i":[{"n":"self"}],"o":{"g":["intoiter"],"n":"enumerated"}}],[11,"iter","","",37,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_enumerated","","",37,{"i":[{"n":"self"}],"o":{"g":["iter"],"n":"enumerated"}}],[11,"indices","","",37,{"i":[{"n":"self"}],"o":{"g":["range","intoidx"],"n":"map"}}],[11,"iter_mut","","",37,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"iter_enumerated_mut","","",37,{"i":[{"n":"self"}],"o":{"g":["itermut"],"n":"enumerated"}}],[11,"drain","","",37,null],[11,"drain_enumerated","","",37,null],[11,"last","","",37,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"shrink_to_fit","","",37,{"i":[{"n":"self"}]}],[11,"swap","","",37,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}]}],[11,"truncate","","",37,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"get","","",37,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"get_mut","","",37,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"pick2_mut","","Return mutable references to two distinct elements, a and b. Panics if a == b.",37,null],[11,"convert_index_type","","",37,{"i":[{"n":"self"}],"o":{"n":"indexvec"}}],[11,"resize","","",37,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"binary_search","","",37,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"index","","",37,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"t"}}],[11,"index_mut","","",37,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"t"}}],[11,"default","","",37,{"o":{"n":"self"}}],[11,"extend","","",37,{"i":[{"n":"self"},{"n":"j"}]}],[11,"from_iter","","",37,{"i":[{"n":"j"}],"o":{"n":"self"}}],[11,"into_iter","","",37,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"call_once","","",39,null],[11,"call_mut","","",39,null],[11,"call_once","","",39,null],[11,"call_mut","","",39,null],[0,"obligation_forest","rustc_data_structures","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the \"backtrace\" of each pending obligation (why we are trying to figure this out in the first place). See README.md for a general overview of how to use this class.",null,null],[3,"ObligationForest","rustc_data_structures::obligation_forest","",null,null],[3,"Outcome","","",null,null],[12,"completed","","Obligations that were completely evaluated, including all (transitive) subobligations.",40,null],[12,"errors","","Backtrace of obligations that were found to be in error.",40,null],[12,"stalled","","If true, then we saw no successful obligations, which means there is no point in further iteration. This is based on the assumption that when trait matching returns `Err` or `Ok(None)`, those results do not affect environmental inference state. (Note that if we invoke `process_obligations` with no pending obligations, stalled will be true.)",40,null],[3,"Error","","",null,null],[12,"error","","",41,null],[12,"backtrace","","",41,null],[8,"ForestObligation","","",null,null],[16,"Predicate","","",42,null],[10,"as_predicate","","",42,null],[8,"ObligationProcessor","","",null,null],[16,"Obligation","","",43,null],[16,"Error","","",43,null],[10,"process_obligation","","",43,null],[10,"process_backedge","","As we do the cycle check, we invoke this callback when we encounter an actual cycle. `cycle` is an iterator that starts at the start of the cycle in the stack and walks toward the top.",43,{"i":[{"n":"self"},{"n":"i"},{"n":"phantomdata"}]}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"new","","",44,{"o":{"n":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not yet been fully resolved.",44,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"register_obligation","","Registers an obligation",44,{"i":[{"n":"self"},{"n":"o"}]}],[11,"to_errors","","Convert all remaining obligations to the given error.",44,{"i":[{"n":"self"},{"n":"e"}],"o":{"g":["error"],"n":"vec"}}],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",44,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"process_obligations","","Perform a pass through the obligation list. This must be called in a loop until `outcome.stalled` is false.",44,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"outcome"}}],[0,"sip128","rustc_data_structures","This is a copy of `core::hash::sip` adapted to providing 128 bit hashes.",null,null],[3,"SipHasher128","rustc_data_structures::sip128","",null,null],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"siphasher128"}}],[11,"new_with_keys","","",45,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher128"}}],[11,"finish128","","",45,null],[11,"write_u8","","",45,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"write_u16","","",45,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"write_u32","","",45,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"write_u64","","",45,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"write_usize","","",45,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"write_i8","","",45,{"i":[{"n":"self"},{"n":"i8"}]}],[11,"write_i16","","",45,{"i":[{"n":"self"},{"n":"i16"}]}],[11,"write_i32","","",45,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"write_i64","","",45,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"write_isize","","",45,{"i":[{"n":"self"},{"n":"isize"}]}],[11,"write","","",45,null],[11,"finish","","",45,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[0,"snapshot_map","rustc_data_structures","",null,null],[3,"SnapshotMap","rustc_data_structures::snapshot_map","",null,null],[3,"Snapshot","","",null,null],[11,"new","","",46,{"o":{"n":"self"}}],[11,"clear","","",46,{"i":[{"n":"self"}]}],[11,"insert","","",46,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"bool"}}],[11,"insert_noop","","",46,{"i":[{"n":"self"}]}],[11,"remove","","",46,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"bool"}}],[11,"get","","",46,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"snapshot","","",46,{"i":[{"n":"self"}],"o":{"n":"snapshot"}}],[11,"commit","","",46,{"i":[{"n":"self"},{"n":"snapshot"}]}],[11,"partial_rollback","","",46,{"i":[{"n":"self"},{"n":"snapshot"},{"n":"f"}]}],[11,"rollback_to","","",46,{"i":[{"n":"self"},{"n":"snapshot"}]}],[11,"index","","",46,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"v"}}],[0,"stable_hasher","rustc_data_structures","",null,null],[3,"StableHasher","rustc_data_structures::stable_hasher","When hashing something that ends up affecting properties like symbol names, we want these symbol names to be calculated independently of other factors like what architecture you're compiling from.",null,null],[3,"StableVec","","A vector container that makes sure that its items are hashed in a stable order.",null,null],[5,"hash_stable_hashmap","","",null,{"i":[{"n":"hcx"},{"n":"stablehasher"},{"n":"hashmap"},{"n":"f"}]}],[8,"StableHasherResult","","",null,null],[10,"finish","","",47,{"i":[{"n":"stablehasher"}],"o":{"n":"self"}}],[8,"HashStable","","Something that implements `HashStable<CTX>` can be hashed in a way that is stable across multiple compilation sessions.",null,null],[10,"hash_stable","","",48,{"i":[{"n":"self"},{"n":"ctx"},{"n":"stablehasher"}]}],[8,"ToStableHashKey","","Implement this for types that can be turned into stable keys like, for example, for DefId that can be converted to a DefPathHash. This is used for bringing maps into a predictable order before hashing them.",null,null],[16,"KeyType","","",49,null],[10,"to_stable_hash_key","","",49,null],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",50,{"o":{"n":"self"}}],[11,"finish","","",50,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"finalize","","",50,null],[11,"bytes_hashed","","",50,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"finish","","",50,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",50,null],[11,"write_u8","","",50,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"write_u16","","",50,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"write_u32","","",50,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"write_u64","","",50,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"write_u128","","",50,{"i":[{"n":"self"},{"n":"u128"}]}],[11,"write_usize","","",50,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"write_i8","","",50,{"i":[{"n":"self"},{"n":"i8"}]}],[11,"write_i16","","",50,{"i":[{"n":"self"},{"n":"i16"}]}],[11,"write_i32","","",50,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"write_i64","","",50,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"write_i128","","",50,{"i":[{"n":"self"},{"n":"i128"}]}],[11,"write_isize","","",50,{"i":[{"n":"self"},{"n":"isize"}]}],[11,"hash_stable","rustc_data_structures::indexed_vec","",37,{"i":[{"n":"self"},{"n":"ctx"},{"n":"stablehasher"}]}],[11,"hash_stable","rustc_data_structures::indexed_set","",34,{"i":[{"n":"self"},{"n":"ctx"},{"n":"stablehasher"}]}],[11,"new","rustc_data_structures::stable_hasher","",51,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"deref","","",51,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"hash_stable","","",51,{"i":[{"n":"self"},{"n":"hcx"},{"n":"stablehasher"}]}],[0,"transitive_relation","rustc_data_structures","",null,null],[3,"TransitiveRelation","rustc_data_structures::transitive_relation","",null,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"transitiverelation"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",52,{"o":{"n":"transitiverelation"}}],[11,"is_empty","","",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"maybe_map","","Applies the (partial) function to each edge and returns a new relation.  If `f` returns `None` for any end-point, returns `None`.",52,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["transitiverelation"],"n":"option"}}],[11,"add","","Indicate that `a < b` (where `<` is this relation)",52,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}]}],[11,"contains","","Check whether `a < target` (transitively)",52,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"bool"}}],[11,"reachable_from","","Thinking of `x R y` as an edge `x -> y` in a graph, this returns all things reachable from `a`.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"vec"}}],[11,"postdom_upper_bound","","Picks what I am referring to as the \"postdominating\" upper-bound for `a` and `b`. This is usually the least upper bound, but in cases where there is no single least upper bound, it is the \"mutual immediate postdominator\", if you imagine a graph where `a < b` means `a -> b`.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"option"}}],[11,"mutual_immediate_postdominator","","Viewing the relation as a graph, computes the \"mutual immediate postdominator\" of a set of points (if one exists). See `postdom_upper_bound` for details.",52,{"i":[{"n":"self"},{"n":"vec"}],"o":{"n":"option"}}],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",52,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"vec"}}],[11,"parents","","Given an element A, returns the maximal set {B} of elements B such that",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"vec"}}],[11,"postdom_parent","","A \"best\" parent in some sense. See `parents` and `postdom_upper_bound` for more details.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"encode","","",52,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"decode","","",52,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"hash_stable","","",52,{"i":[{"n":"self"},{"n":"ctx"},{"n":"stablehasher"}]}],[0,"fx","rustc_data_structures","",null,null],[6,"FxHashMap","rustc_data_structures::fx","Type alias for a hashmap using the `fx` hash algorithm.",null,null],[6,"FxHashSet","","Type alias for a hashmap using the `fx` hash algorithm.",null,null],[3,"FxHasher","","A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",null,null],[5,"FxHashMap","","",null,{"o":{"n":"fxhashmap"}}],[5,"FxHashSet","","",null,{"o":{"n":"fxhashset"}}],[0,"tuple_slice","rustc_data_structures","",null,null],[8,"TupleSlice","rustc_data_structures::tuple_slice","Allows to view uniform tuples as slices",null,null],[10,"as_slice","","",53,null],[10,"as_mut_slice","","",53,null],[0,"control_flow_graph","rustc_data_structures","",null,null],[0,"dominators","rustc_data_structures::control_flow_graph","Algorithm citation: A Simple, Fast Dominance Algorithm. Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy Rice Computer Science TS-06-33870 https://www.cs.rice.edu/~keith/EMBED/dom.pdf",null,null],[3,"Dominators","rustc_data_structures::control_flow_graph::dominators","",null,null],[3,"Iter","","",null,null],[3,"DominatorTree","","",null,null],[5,"dominators","","",null,{"i":[{"n":"g"}],"o":{"n":"dominators"}}],[5,"dominators_given_rpo","","",null,null],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"dominators"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_reachable","","",54,{"i":[{"n":"self"},{"n":"node"}],"o":{"n":"bool"}}],[11,"immediate_dominator","","",54,{"i":[{"n":"self"},{"n":"node"}],"o":{"n":"node"}}],[11,"dominators","","",54,{"i":[{"n":"self"},{"n":"node"}],"o":{"n":"iter"}}],[11,"is_dominated_by","","",54,{"i":[{"n":"self"},{"n":"node"},{"n":"node"}],"o":{"n":"bool"}}],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"children","","",56,null],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"iterate","rustc_data_structures::control_flow_graph","",null,null],[5,"post_order_from","rustc_data_structures::control_flow_graph::iterate","",null,null],[5,"post_order_from_to","","",null,null],[5,"reverse_post_order","","",null,null],[8,"ControlFlowGraph","rustc_data_structures::control_flow_graph","",null,null],[16,"Node","","",57,null],[10,"num_nodes","","",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"start_node","","",57,null],[10,"predecessors","","",57,null],[10,"successors","","",57,null],[8,"GraphPredecessors","","",null,null],[16,"Item","","",58,null],[16,"Iter","","",58,null],[8,"GraphSuccessors","","",null,null],[16,"Item","","",59,null],[16,"Iter","","",59,null],[0,"flock","rustc_data_structures","Simple file-locking apis for each OS.",null,null],[3,"Lock","rustc_data_structures::flock","",null,null],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",60,{"i":[{"n":"path"},{"n":"bool"},{"n":"bool"},{"n":"bool"}],"o":{"g":["lock"],"n":"result"}}],[11,"drop","","",60,{"i":[{"n":"self"}]}],[11,"panicking_new","","",60,{"i":[{"n":"path"},{"n":"bool"},{"n":"bool"},{"n":"bool"}],"o":{"n":"lock"}}],[0,"sync","rustc_data_structures","This module defines types which are thread safe if cfg!(parallel_queries) is true.",null,null],[8,"ParallelIterator","rustc_data_structures::sync","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",61,null],[10,"next","","Advances the iterator and returns the next value.",61,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",61,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",61,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",61,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",61,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",61,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",61,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",61,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",61,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",61,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",61,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",61,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",61,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",61,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",61,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",61,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",61,{"i":[{"n":"self"},{"n":"st"},{"n":"f"}],"o":{"n":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"flatmap"}}],[11,"flatten","","Creates an iterator that flattens nested structure.",61,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",61,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",61,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"collect","","Transforms an iterator into a collection.",61,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",61,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",61,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"r"}}],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",61,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",61,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",61,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",61,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"max","","Returns the maximum element of an iterator.",61,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"min","","Returns the minimum element of an iterator.",61,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"rev","","Reverses an iterator's direction.",61,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",61,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",61,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",61,{"i":[{"n":"self"}],"o":{"n":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",61,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",61,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",61,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[3,"Lrc","","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning reference to the managed value. The value is accessed by calling [`upgrade`] on the `Weak` pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.",null,null],[3,"ReadGuard","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[3,"WriteGuard","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"LockGuard","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[3,"SerialScope","","",null,null],[3,"MTLock","","",null,null],[3,"LockCell","","",null,null],[3,"Once","","A type whose inner value can be written once and then will stay read-only",null,null],[3,"Lock","","",null,null],[3,"RwLock","","",null,null],[3,"OneThread","","A type which only allows its inner value to be used in one thread. It will panic if it is used on multiple threads.",null,null],[5,"serial_join","","",null,null],[5,"serial_scope","","",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[5,"par_iter","","",null,null],[5,"assert_sync","","",null,{}],[5,"assert_send_val","","",null,{"i":[{"n":"t"}]}],[5,"assert_send_sync_val","","",null,{"i":[{"n":"t"}]}],[6,"MetadataRef","","",null,null],[8,"Send","","",null,null],[8,"Sync","","",null,null],[8,"HashMapExt","","",null,null],[10,"insert_same","","Same as HashMap::insert, but it may panic if there's already an entry for `key` with a value not equal to `value`",62,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}]}],[11,"spawn","","",63,{"i":[{"n":"self"},{"n":"f"}]}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",64,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"into_inner","","",64,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","",64,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"lock","","",64,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow","","",64,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow_mut","","",64,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","",65,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"into_inner","","",65,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"set","","",65,{"i":[{"n":"self"},{"n":"t"}]}],[11,"get","","",65,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"set_mut","","",65,{"i":[{"n":"self"},{"n":"t"}]}],[11,"get_mut","","",65,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"take","","",65,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates an Once value which is uninitialized",66,{"o":{"n":"self"}}],[11,"into_inner","","Consumes the value and returns Some(T) if it was initialized",66,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"try_set","","Tries to initialize the inner value to `value`. Returns `None` if the inner value was uninitialized and `value` was consumed setting it otherwise if the inner value was already set it returns `value` back to the caller",66,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"try_set_same","","Tries to initialize the inner value to `value`. Returns `None` if the inner value was uninitialized and `value` was consumed setting it otherwise if the inner value was already set it asserts that `value` is equal to the inner value and then returns `value` back to the caller",66,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"set","","Tries to initialize the inner value to `value` and panics if it was already initialized",66,{"i":[{"n":"self"},{"n":"t"}]}],[11,"init_locking","","Tries to initialize the inner value by calling the closure while ensuring that no-one else can access the value in the mean time by holding a lock for the duration of the closure. If the value was already initialized the closure is not called and `false` is returned, otherwise if the value from the closure initializes the inner value, `true` is returned",66,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"init_nonlocking","","Tries to initialize the inner value by calling the closure without ensuring that no-one else can access it. This mean when this is called from multiple threads, multiple closures may concurrently be computing a value which the inner value should take. Only one of these closures are used to actually initialize the value. If some other closure already set the value, we return the value our closure computed wrapped in a `Option`. If our closure set the value, `None` is returned. If the value is already initialized, the closure is not called and `None` is returned.",66,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"init_nonlocking_same","","Tries to initialize the inner value by calling the closure without ensuring that no-one else can access it. This mean when this is called from multiple threads, multiple closures may concurrently be computing a value which the inner value should take. Only one of these closures are used to actually initialize the value. If some other closure already set the value, we assert that it our closure computed a value equal to the value aready set and then we return the value our closure computed wrapped in a `Option`. If our closure set the value, `None` is returned. If the value is already initialized, the closure is not called and `None` is returned.",66,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"try_get","","Tries to get a reference to the inner value, returns `None` if it is not yet initialized",66,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get","","Gets reference to the inner value, panics if it is not yet initialized",66,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow","","Gets reference to the inner value, panics if it is not yet initialized",66,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","Creates a `LockCell<T>`, with the `Default` value for T.",65,{"o":{"n":"lockcell"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"n":"bool"}}],[11,"le","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"n":"bool"}}],[11,"gt","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"n":"bool"}}],[11,"ge","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"n":"bool"}}],[11,"cmp","","",65,{"i":[{"n":"self"},{"n":"lockcell"}],"o":{"n":"ordering"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",67,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"into_inner","","",67,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","",67,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"lock","","",67,{"i":[{"n":"self"}],"o":{"n":"lockguard"}}],[11,"with_lock","","",67,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"borrow","","",67,{"i":[{"n":"self"}],"o":{"n":"lockguard"}}],[11,"borrow_mut","","",67,{"i":[{"n":"self"}],"o":{"n":"lockguard"}}],[11,"default","","",67,{"o":{"n":"self"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",68,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"into_inner","","",68,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","",68,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"read","","",68,{"i":[{"n":"self"}],"o":{"n":"readguard"}}],[11,"with_read_lock","","",68,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"try_write","","",68,{"i":[{"n":"self"}],"o":{"g":["writeguard"],"n":"result"}}],[11,"write","","",68,{"i":[{"n":"self"}],"o":{"n":"writeguard"}}],[11,"with_write_lock","","",68,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"borrow","","",68,{"i":[{"n":"self"}],"o":{"n":"readguard"}}],[11,"borrow_mut","","",68,{"i":[{"n":"self"}],"o":{"n":"writeguard"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"onethread"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"onethread"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"onethread"}],"o":{"n":"bool"}}],[11,"new","","",69,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"into_inner","","",69,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",69,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",69,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"owning_ref","rustc_data_structures","An owning reference.",null,null],[8,"StableAddress","rustc_data_structures::owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner dereferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",70,null],[10,"into_erased","","Perform the type erasure.",70,null],[8,"IntoErasedSend","","Helper trait for erasing the concrete type of what an owner dereferences to, for example `Box<T> -> Box<Erased + Send>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased + Send`.",71,null],[10,"into_erased_send","","Perform the type erasure.",71,null],[8,"IntoErasedSendSync","","Helper trait for erasing the concrete type of what an owner dereferences to, for example `Box<T> -> Box<Erased + Send + Sync>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased + Send + Sync`.",72,null],[10,"into_erased_send_sync","","Perform the type erasure.",72,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",73,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",73,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",74,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",74,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",75,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",75,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",75,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",75,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["owningref"],"n":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",75,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",75,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",75,{"i":[{"n":"self"}],"o":{"n":"owningref"}}],[11,"erase_send_owner","","Erases the concrete base type of the owner with a trait object which implements `Send`.",75,{"i":[{"n":"self"}],"o":{"n":"owningref"}}],[11,"erase_send_sync_owner","","Erases the concrete base type of the owner with a trait object which implements `Send` and `Sync`.",75,{"i":[{"n":"self"}],"o":{"n":"owningref"}}],[11,"owner","","A getter for the underlying owner.",75,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",75,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",76,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",76,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",76,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",76,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",76,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["owningref"],"n":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",76,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["owningrefmut"],"n":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",76,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",76,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",76,{"i":[{"n":"self"}],"o":{"n":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",76,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",76,{"i":[{"n":"self"}],"o":{"n":"o"}}],[11,"deref","","",77,null],[11,"deref_mut","","",77,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",77,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",77,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",77,{"i":[{"n":"o"},{"n":"f"}],"o":{"n":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",77,{"i":[{"n":"o"},{"n":"f"}],"o":{"n":"result"}}],[11,"deref","","",75,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",76,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",76,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",75,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",76,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_mut","","",76,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"borrow","","",75,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"from","","",75,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"from","","",76,{"i":[{"n":"o"}],"o":{"n":"self"}}],[11,"from","","",75,{"i":[{"n":"owningrefmut"}],"o":{"n":"self"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",75,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",75,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"hash","","",75,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",76,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",76,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"hash","","",76,{"i":[{"n":"self"},{"n":"h"}]}],[11,"into_erased","rustc_data_structures::sync","",79,null],[0,"sorted_map","rustc_data_structures","",null,null],[3,"SortedMap","rustc_data_structures::sorted_map","`SortedMap` is a data structure with similar characteristics as BTreeMap but slightly different trade-offs: lookup, inseration, and removal are O(log(N)) and elements can be iterated in order cheaply.",null,null],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"sortedmap"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"bool"}}],[11,"le","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"bool"}}],[11,"gt","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"bool"}}],[11,"ge","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"bool"}}],[11,"cmp","","",80,{"i":[{"n":"self"},{"n":"sortedmap"}],"o":{"n":"ordering"}}],[11,"hash","","",80,null],[11,"default","","",80,{"o":{"n":"sortedmap"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",80,{"i":[{"n":"self"},{"n":"__skv"}],"o":{"n":"result"}}],[11,"decode","","",80,{"i":[{"n":"__dkv"}],"o":{"g":["sortedmap"],"n":"result"}}],[11,"new","","",80,{"o":{"n":"sortedmap"}}],[11,"from_presorted_elements","","Construct a `SortedMap` from a presorted set of elements. This is faster than creating an empty map and then inserting the elements individually.",80,{"i":[{"n":"vec"}],"o":{"n":"sortedmap"}}],[11,"insert","","",80,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"option"}}],[11,"remove","","",80,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get","","",80,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_mut","","",80,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"clear","","",80,{"i":[{"n":"self"}]}],[11,"iter","","Iterate over elements, sorted by key",80,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"keys","","Iterate over the keys, sorted",80,null],[11,"values","","Iterate over values, sorted by key",80,null],[11,"len","","",80,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"range","","",80,null],[11,"remove_range","","",80,{"i":[{"n":"self"},{"n":"r"}]}],[11,"offset_keys","","Mutate all keys with the given function `f`. This mutation must not change the sort-order of keys.",80,{"i":[{"n":"self"},{"n":"f"}]}],[11,"insert_presorted","","Inserts a presorted range of elements into the map. If the range can be inserted as a whole in between to existing elements of the map, this will be faster than inserting the elements individually.",80,{"i":[{"n":"self"},{"n":"vec"}]}],[11,"into_iter","","",80,null],[11,"index","","",80,null],[11,"index_mut","","",80,null],[11,"from","","",80,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"drop","rustc_data_structures","",6,{"i":[{"n":"self"}]}],[14,"newtype_index","","",null,null],[14,"rustc_erase_owner","","",null,null],[11,"from","rustc_data_structures::sync","",79,{"i":[{"n":"osstring"}],"o":{"g":["osstr"],"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"cstring"}],"o":{"g":["cstr"],"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"path"}],"o":{"g":["path"],"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"osstr"}],"o":{"g":["osstr"],"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"pathbuf"}],"o":{"g":["path"],"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"cstr"}],"o":{"g":["cstr"],"n":"rc"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref_mut","","",82,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",82,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",81,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","","Drops the `Weak` pointer.",83,null],[11,"drop","","Drops the `Rc`.",79,null],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"borrow","","",79,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"cmp","","Comparison for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"ordering"}}],[11,"clone","","Makes a clone of the `Weak` pointer that points to the same value.",83,{"i":[{"n":"self"}],"o":{"n":"weak"}}],[11,"clone","","Makes a clone of the `Rc` pointer.",79,{"i":[{"n":"self"}],"o":{"n":"rc"}}],[11,"as_ref","","",79,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"hash","","",79,null],[11,"default","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",83,{"o":{"n":"weak"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",79,{"o":{"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"t"}],"o":{"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"vec"}],"o":{"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"box"}],"o":{"n":"rc"}}],[11,"from","","",79,null],[11,"from","","",79,{"i":[{"n":"string"}],"o":{"g":["str"],"n":"rc"}}],[11,"from","","",79,{"i":[{"n":"str"}],"o":{"g":["str"],"n":"rc"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","Equality for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"partial_cmp","","Partial comparison for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",79,{"i":[{"n":"self"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"deref","","",79,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","rustc_data_structures::snapshot_vec","",84,null],[11,"extend","","",84,null],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","rustc_data_structures::unify","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","",87,{"o":{"n":"inplace"}}],[11,"start_snapshot","","",87,null],[11,"rollback_to","","",87,null],[11,"commit","","",87,null],[11,"reset_unifications","","",87,null],[11,"len","","",87,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"push","","",87,null],[11,"reserve","","",87,null],[11,"update","","",87,null],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"varvalue"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"varvalue"}],"o":{"n":"bool"}}],[11,"deref_mut","rustc_data_structures::snapshot_vec","",84,null],[11,"clone","rustc_data_structures::unify","",87,{"i":[{"n":"self"}],"o":{"n":"inplace"}}],[11,"clone","rustc_data_structures::snapshot_vec","",84,{"i":[{"n":"self"}],"o":{"n":"snapshotvec"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"undolog"}}],[11,"clone","rustc_data_structures::unify","",86,{"i":[{"n":"self"}],"o":{"n":"varvalue"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"unificationtable"}}],[11,"index_mut","rustc_data_structures::snapshot_vec","",84,null],[11,"index","","",84,null],[11,"index","rustc_data_structures::unify","",87,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"varvalue"}}],[11,"decode","rustc_data_structures::sync","",79,{"i":[{"n":"d"}],"o":{"g":["rc"],"n":"result"}}],[11,"decode","","",79,{"i":[{"n":"d"}],"o":{"g":["rc"],"n":"result"}}],[11,"encode","","",79,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"encode","","",79,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"into_erased","","",79,null],[11,"default","rustc_data_structures::fx","",89,{"o":{"n":"fxhasher"}}],[11,"write","","",89,null],[11,"write_u8","","",89,null],[11,"write_u16","","",89,null],[11,"write_u32","","",89,null],[11,"write_u64","","",89,null],[11,"write_usize","","",89,null],[11,"finish","","",89,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"new","rustc_data_structures::snapshot_vec","",84,{"o":{"n":"snapshotvec"}}],[11,"with_capacity","","",84,{"i":[{"n":"usize"}],"o":{"n":"snapshotvec"}}],[11,"record","","",84,null],[11,"len","","",84,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"push","","",84,null],[11,"get","","",84,null],[11,"reserve","","Reserve space for new values, just like an ordinary vec.",84,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone automatically, so you should be sure call `record()` with some sort of suitable undo action.",84,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if a snapshot is active.",84,null],[11,"set_all","","Updates all elements. Potentially more efficient -- but otherwise equivalent to -- invoking `set` for each element.",84,null],[11,"update","","",84,null],[11,"start_snapshot","","",84,{"i":[{"n":"self"}],"o":{"n":"snapshot"}}],[11,"actions_since_snapshot","","",84,null],[11,"rollback_to","","",84,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",84,null],[11,"new","rustc_data_structures::unify","",85,{"o":{"n":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either rolled back or committed in a \"LIFO\" (stack) order.",85,{"i":[{"n":"self"}],"o":{"n":"snapshot"}}],[11,"rollback_to","","Reverses all changes since the last snapshot. Also removes any keys that have been created since then.",85,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",85,null],[11,"new_key","","Creates a fresh key with the given value.",85,null],[11,"reserve","","Reserve memory for `num_new_keys` to be created. Does not actually create the new keys; you must then invoke `new_key`.",85,null],[11,"reset_unifications","","Clears all unifications that have been performed, resetting to the initial state. The values of each variable are given by the closure.",85,null],[11,"len","","Returns the number of keys created so far.",85,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"union","","Unions two keys without the possibility of failure; only applicable when unify values use `NoError` as their error type.",85,null],[11,"union_value","","Unions a key and a value without the possibility of failure; only applicable when unify values use `NoError` as their error type.",85,null],[11,"unioned","","Given two keys, indicates whether they have been unioned together.",85,{"i":[{"n":"self"},{"n":"k1"},{"n":"k2"}],"o":{"n":"bool"}}],[11,"find","","Given a key, returns the (current) root key.",85,{"i":[{"n":"self"},{"n":"k1"}],"o":{"n":"k"}}],[11,"unify_var_var","","Unions together two variables, merging their values. If merging the values fails, the error is propagated and this method has no effect.",85,{"i":[{"n":"self"},{"n":"k1"},{"n":"k2"}],"o":{"n":"result"}}],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`, attempting to merge with the previous value.",85,{"i":[{"n":"self"},{"n":"k1"},{"n":"v"}],"o":{"n":"result"}}],[11,"probe_value","","Returns the current value for the given key. If the key has been union'd, this will give the value from the current root.",85,{"i":[{"n":"self"},{"n":"k1"}],"o":{"n":"v"}}],[11,"hash_stable","rustc_data_structures::sync","",79,{"i":[{"n":"self"},{"n":"ctx"},{"n":"stablehasher"}]}],[11,"new","","Constructs a new `Rc<T>`.",79,{"i":[{"n":"t"}],"o":{"n":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",79,{"i":[{"n":"rc"}],"o":{"g":["rc"],"n":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",79,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",79,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",79,{"i":[{"n":"rc"}],"o":{"n":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",79,{"i":[{"n":"rc"}],"o":{"n":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",79,{"i":[{"n":"rc"}],"o":{"n":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",79,{"i":[{"n":"rc"}],"o":{"n":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",79,{"i":[{"n":"rc"},{"n":"rc"}],"o":{"n":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",79,{"i":[{"n":"rc"}],"o":{"n":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",79,{"i":[{"n":"self"}],"o":{"g":["rc","rc"],"n":"result"}}],[11,"new","","Constructs a new `Weak<T>`, allocating memory for `T` without initializing it. Calling [`upgrade`] on the return value always gives [`None`].",83,{"o":{"n":"weak"}}],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`], extending the lifetime of the value if successful.",83,{"i":[{"n":"self"}],"o":{"g":["rc"],"n":"option"}}],[11,"clone","","Copies a `Ref`.",81,{"i":[{"n":"ref"}],"o":{"n":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",81,{"i":[{"n":"ref"},{"n":"f"}],"o":{"n":"ref"}}],[11,"map_split","","Split a `Ref` into multiple `Ref`s for different components of the borrowed data.",81,null],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",82,{"i":[{"n":"refmut"},{"n":"f"}],"o":{"n":"refmut"}}],[11,"map_split","","Split a `RefMut` into multiple `RefMut`s for different components of the borrowed data.",82,null]],"paths":[[8,"ToHex"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"UnifyKey"],[8,"UnifyValue"],[8,"UnificationStore"],[3,"OnDrop"],[8,"Array"],[3,"ArrayVec"],[3,"Iter"],[3,"Drain"],[4,"AccumulateVec"],[4,"Drain"],[3,"IntoIter"],[3,"SmallVec"],[8,"BitSlice"],[8,"BitwiseOperator"],[3,"Intersect"],[3,"Union"],[3,"Subtract"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"SparseBitMatrix"],[3,"SparseBitSet"],[3,"SparseChunk"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"AdjacentEdges"],[3,"DepthFirstTraversal"],[3,"IdxSetBuf"],[3,"IdxSet"],[3,"Iter"],[3,"IndexVec"],[8,"Idx"],[3,"IntoIdx"],[3,"Outcome"],[3,"Error"],[8,"ForestObligation"],[8,"ObligationProcessor"],[3,"ObligationForest"],[3,"SipHasher128"],[3,"SnapshotMap"],[8,"StableHasherResult"],[8,"HashStable"],[8,"ToStableHashKey"],[3,"StableHasher"],[3,"StableVec"],[3,"TransitiveRelation"],[8,"TupleSlice"],[3,"Dominators"],[3,"Iter"],[3,"DominatorTree"],[8,"ControlFlowGraph"],[8,"GraphPredecessors"],[8,"GraphSuccessors"],[3,"Lock"],[8,"ParallelIterator"],[8,"HashMapExt"],[3,"SerialScope"],[3,"MTLock"],[3,"LockCell"],[3,"Once"],[3,"Lock"],[3,"RwLock"],[3,"OneThread"],[8,"IntoErased"],[8,"IntoErasedSend"],[8,"IntoErasedSendSync"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"],[3,"Lrc"],[3,"SortedMap"],[3,"ReadGuard"],[3,"LockGuard"],[3,"Weak"],[3,"SnapshotVec"],[3,"UnificationTable"],[3,"VarValue"],[3,"InPlace"],[3,"NoError"],[3,"FxHasher"]]};
searchIndex["rustc_errors"] = {"doc":"","items":[[3,"CodeSuggestion","rustc_errors","",null,null],[12,"substitutions","","Each substitute can have multiple variants due to multiple applicable suggestions",0,null],[12,"msg","","",0,null],[12,"show_code_when_inline","","",0,null],[12,"applicability","","Whether or not the suggestion is approximate",0,null],[3,"Substitution","","See the docs on `CodeSuggestion::substitutions`",null,null],[12,"parts","","",1,null],[3,"SubstitutionPart","","",null,null],[12,"span","","",2,null],[12,"snippet","","",2,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"FatalErrorMarker","","",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"Diagnostic","","",null,null],[12,"level","","",3,null],[12,"message","","",3,null],[12,"code","","",3,null],[12,"span","","",3,null],[12,"children","","",3,null],[12,"suggestions","","",3,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",4,null],[12,"message","","",4,null],[12,"span","","",4,null],[12,"render_span","","",4,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",5,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"handler","","",6,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"flags","","",7,null],[3,"HandlerFlags","","",null,null],[12,"can_emit_warnings","","",8,null],[12,"treat_err_as_bug","","",8,null],[12,"external_macro_backtrace","","",8,null],[4,"Applicability","","",null,null],[13,"MachineApplicable","","",9,null],[13,"HasPlaceholders","","",9,null],[13,"MaybeIncorrect","","",9,null],[13,"Unspecified","","",9,null],[4,"DiagnosticId","","",null,null],[13,"Error","","",10,null],[13,"Lint","","",10,null],[4,"Level","","",null,null],[13,"Bug","","",11,null],[13,"Fatal","","",11,null],[13,"PhaseFatal","","",11,null],[13,"Error","","",11,null],[13,"Warning","","",11,null],[13,"Note","","",11,null],[13,"Help","","",11,null],[13,"Cancelled","","",11,null],[13,"FailureNote","","",11,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"diagnostic"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"diagnostic"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"diagnostic"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",3,{"i":[{"n":"__d"}],"o":{"g":["diagnostic"],"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"diagnosticid"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"bool"}}],[11,"hash","","",10,null],[11,"encode","","",10,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",10,{"i":[{"n":"__d"}],"o":{"g":["diagnosticid"],"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"subdiagnostic"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"subdiagnostic"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"subdiagnostic"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"encode","","",4,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",4,{"i":[{"n":"__d"}],"o":{"g":["subdiagnostic"],"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"diagnosticstyledstring"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"diagnosticstyledstring"}],"o":{"n":"bool"}}],[11,"new","","",5,{"o":{"n":"diagnosticstyledstring"}}],[11,"push_normal","","",5,{"i":[{"n":"self"},{"n":"s"}]}],[11,"push_highlighted","","",5,{"i":[{"n":"self"},{"n":"s"}]}],[11,"normal","","",5,{"i":[{"n":"s"}],"o":{"n":"diagnosticstyledstring"}}],[11,"highlighted","","",5,{"i":[{"n":"s"}],"o":{"n":"diagnosticstyledstring"}}],[11,"content","","",5,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"new","","",3,{"i":[{"n":"level"},{"n":"str"}],"o":{"n":"self"}}],[11,"new_with_code","","",3,{"i":[{"n":"level"},{"g":["diagnosticid"],"n":"option"},{"n":"str"}],"o":{"n":"self"}}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or canceled or it will panic when dropped).",3,{"i":[{"n":"self"}]}],[11,"cancelled","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",3,{"i":[{"n":"self"},{"n":"span"},{"n":"t"}],"o":{"n":"self"}}],[11,"note_expected_found","","",3,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"}],"o":{"n":"self"}}],[11,"note_expected_found_extra","","",3,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"},{"n":"display"},{"n":"display"}],"o":{"n":"self"}}],[11,"note_trait_signature","","",3,{"i":[{"n":"self"},{"n":"string"},{"n":"string"}],"o":{"n":"self"}}],[11,"note","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"highlighted_note","","",3,{"i":[{"n":"self"},{"n":"vec"}],"o":{"n":"self"}}],[11,"span_note","","",3,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"warn","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_warn","","",3,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"help","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_help","","",3,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_suggestion_short","","Prints out a message with a suggested edit of the code. If the suggestion is presented inline it will only show the text message and not the text.",3,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",3,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"multipart_suggestion","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"vec"}],"o":{"n":"self"}}],[11,"span_suggestions","","Prints out a message with multiple suggested edits of the code.",3,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"g":["string"],"n":"vec"}],"o":{"n":"self"}}],[11,"span_suggestion_with_applicability","","This is a suggestion that may contain mistakes or fillers and should be read and understood by a human.",3,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"},{"n":"applicability"}],"o":{"n":"self"}}],[11,"span_suggestions_with_applicability","","",3,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"g":["string"],"n":"vec"},{"n":"applicability"}],"o":{"n":"self"}}],[11,"span_suggestion_short_with_applicability","","",3,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"},{"n":"applicability"}],"o":{"n":"self"}}],[11,"set_span","","",3,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"code","","",3,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"self"}}],[11,"get_code","","",3,{"i":[{"n":"self"}],"o":{"g":["diagnosticid"],"n":"option"}}],[11,"message","","",3,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"styled_message","","",3,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"copy_details_not_message","","Used by a lint. Copies over all details but the \"main message\".",3,{"i":[{"n":"self"},{"n":"diagnostic"}]}],[11,"message","","",4,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"styled_message","","",4,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"diagnosticbuilder"}}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"diagnostic"}}],[11,"deref_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"diagnostic"}}],[11,"emit","","Emit the diagnostic.",6,{"i":[{"n":"self"}]}],[11,"is_error","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"sub","","Convenience function for internal use, clients should use one of the span_* methods instead.",6,{"i":[{"n":"self"},{"n":"level"},{"n":"str"},{"n":"option"}],"o":{"n":"self"}}],[11,"delay_as_bug","","Delay emission of this diagnostic as a bug.",6,{"i":[{"n":"self"}]}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",6,{"i":[{"n":"self"},{"n":"span"},{"n":"t"}],"o":{"n":"self"}}],[11,"note_expected_found","","",6,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"}],"o":{"n":"self"}}],[11,"note_expected_found_extra","","",6,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"},{"n":"display"},{"n":"display"}],"o":{"n":"self"}}],[11,"note","","",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_note","","",6,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"warn","","",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_warn","","",6,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"help","","",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_help","","",6,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_suggestion_short","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"multipart_suggestion","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"vec"}],"o":{"n":"self"}}],[11,"span_suggestion","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"span_suggestions","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"g":["string"],"n":"vec"}],"o":{"n":"self"}}],[11,"span_suggestion_with_applicability","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"},{"n":"applicability"}],"o":{"n":"self"}}],[11,"span_suggestions_with_applicability","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"g":["string"],"n":"vec"},{"n":"applicability"}],"o":{"n":"self"}}],[11,"span_suggestion_short_with_applicability","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"},{"n":"applicability"}],"o":{"n":"self"}}],[11,"set_span","","",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"code","","",6,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"self"}}],[11,"new","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"i":[{"n":"handler"},{"n":"level"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"new_with_code","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"i":[{"n":"handler"},{"n":"level"},{"g":["diagnosticid"],"n":"option"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"new_diagnostic","","Creates a new `DiagnosticBuilder` with an already constructed diagnostic.",6,{"i":[{"n":"handler"},{"n":"diagnostic"}],"o":{"n":"diagnosticbuilder"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[0,"emitter","","",null,null],[3,"EmitterWriter","rustc_errors::emitter","",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",12,null],[13,"Always","","",12,null],[13,"Never","","",12,null],[4,"Destination","","",null,null],[13,"Terminal","","",13,null],[13,"Buffered","","",13,null],[13,"Raw","","",13,null],[4,"WritableDst","","",null,null],[13,"Terminal","","",14,null],[13,"Buffered","","",14,null],[13,"Raw","","",14,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[17,"MAX_SUGGESTIONS","","maximum number of suggestions to be shown",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",15,{"i":[{"n":"self"},{"n":"diagnosticbuilder"}]}],[11,"should_show_explain","","Check if should show explanations about \"rustc --explain\"",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"emit","","",16,{"i":[{"n":"self"},{"n":"diagnosticbuilder"}]}],[11,"should_show_explain","","",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"colorconfig"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"colorconfig"}],"o":{"n":"bool"}}],[11,"stderr","","",16,{"i":[{"n":"colorconfig"},{"g":["lrc"],"n":"option"},{"n":"bool"},{"n":"bool"}],"o":{"n":"emitterwriter"}}],[11,"new","","",16,{"i":[{"g":["write"],"n":"box"},{"g":["lrc"],"n":"option"},{"n":"bool"},{"n":"bool"}],"o":{"n":"emitterwriter"}}],[11,"ui_testing","","",16,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"write","","",14,null],[11,"flush","","",14,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",14,{"i":[{"n":"self"}]}],[0,"registry","rustc_errors","",null,null],[3,"Registry","rustc_errors::registry","",null,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"registry"}}],[11,"new","","",17,null],[11,"find_description","","",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["str"],"n":"option"}}],[6,"CodeMapperDyn","rustc_errors","",null,null],[17,"TRACK_DIAGNOSTICS","","",null,null],[8,"CodeMapper","","",null,null],[10,"lookup_char_pos","","",18,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"loc"}}],[10,"span_to_lines","","",18,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filelinesresult"}}],[10,"span_to_string","","",18,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"string"}}],[10,"span_to_filename","","",18,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filename"}}],[10,"merge_spans","","",18,{"i":[{"n":"self"},{"n":"span"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[10,"call_span_if_macro","","",18,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[10,"ensure_filemap_source_present","","",18,{"i":[{"n":"self"},{"g":["filemap"],"n":"lrc"}],"o":{"n":"bool"}}],[10,"doctest_offset_line","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"applicability"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"applicability"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"encode","","",9,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",9,{"i":[{"n":"__d"}],"o":{"g":["applicability"],"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"codesuggestion"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"codesuggestion"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"codesuggestion"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",0,{"i":[{"n":"__d"}],"o":{"g":["codesuggestion"],"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"substitution"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"substitution"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"substitution"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",1,{"i":[{"n":"__d"}],"o":{"g":["substitution"],"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"substitutionpart"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"substitutionpart"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"substitutionpart"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",2,{"i":[{"n":"__d"}],"o":{"g":["substitutionpart"],"n":"result"}}],[11,"splice_lines","","Returns the assembled code suggestions and whether they should be shown with an underline.",0,{"i":[{"n":"self"},{"n":"codemapperdyn"}],"o":{"n":"vec"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"fatalerror"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"raise","","",19,null],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"explicitbug"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"default","","",8,{"o":{"n":"handlerflags"}}],[11,"with_tty_emitter","","",7,{"i":[{"n":"colorconfig"},{"n":"bool"},{"n":"bool"},{"g":["lrc"],"n":"option"}],"o":{"n":"handler"}}],[11,"with_tty_emitter_and_flags","","",7,{"i":[{"n":"colorconfig"},{"g":["lrc"],"n":"option"},{"n":"handlerflags"}],"o":{"n":"handler"}}],[11,"with_emitter","","",7,{"i":[{"n":"bool"},{"n":"bool"},{"g":["emitter"],"n":"box"}],"o":{"n":"handler"}}],[11,"with_emitter_and_flags","","",7,{"i":[{"g":["emitter"],"n":"box"},{"n":"handlerflags"}],"o":{"n":"handler"}}],[11,"set_continue_after_error","","",7,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"reset_err_count","","Resets the diagnostic error count as well as the cached emitted diagnostics.",7,{"i":[{"n":"self"}]}],[11,"struct_dummy","","",7,{"i":[{"n":"self"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_span_warn","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"},{"n":"diagnosticid"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_warn","","",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_span_err","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"},{"n":"diagnosticid"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_err","","",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_err_with_code","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"diagnosticid"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"},{"n":"diagnosticid"}],"o":{"n":"diagnosticbuilder"}}],[11,"struct_fatal","","",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"cancel","","",7,{"i":[{"n":"self"},{"n":"diagnosticbuilder"}]}],[11,"span_fatal","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"fatalerror"}}],[11,"span_fatal_with_code","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"},{"n":"diagnosticid"}],"o":{"n":"fatalerror"}}],[11,"span_err","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}]}],[11,"mut_span_err","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"span_err_with_code","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"},{"n":"diagnosticid"}]}],[11,"span_warn","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}]}],[11,"span_warn_with_code","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"},{"n":"diagnosticid"}]}],[11,"span_bug","","",7,null],[11,"delay_span_bug","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}]}],[11,"span_bug_no_panic","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}]}],[11,"span_note_without_error","","",7,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}]}],[11,"span_note_diag","","",7,{"i":[{"n":"self"},{"n":"span"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"span_unimpl","","",7,null],[11,"failure","","",7,{"i":[{"n":"self"},{"n":"str"}]}],[11,"fatal","","",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"fatalerror"}}],[11,"err","","",7,{"i":[{"n":"self"},{"n":"str"}]}],[11,"warn","","",7,{"i":[{"n":"self"},{"n":"str"}]}],[11,"note_without_error","","",7,{"i":[{"n":"self"},{"n":"str"}]}],[11,"bug","","",7,null],[11,"unimpl","","",7,null],[11,"err_count","","",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"has_errors","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"print_error_count","","",7,{"i":[{"n":"self"}]}],[11,"abort_if_errors","","",7,{"i":[{"n":"self"}]}],[11,"emit","","",7,{"i":[{"n":"self"},{"n":"multispan"},{"n":"str"},{"n":"level"}]}],[11,"emit_with_code","","",7,{"i":[{"n":"self"},{"n":"multispan"},{"n":"str"},{"n":"diagnosticid"},{"n":"level"}]}],[11,"must_teach","","`true` if we haven't taught a diagnostic with this code already. The caller must then teach the user about such a diagnostic.",7,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"bool"}}],[11,"force_print_db","","",7,{"i":[{"n":"self"},{"n":"diagnosticbuilder"}]}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",11,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",11,{"i":[{"n":"__d"}],"o":{"g":["level"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_str","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_failure_note","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"CodeSuggestion"],[3,"Substitution"],[3,"SubstitutionPart"],[3,"Diagnostic"],[3,"SubDiagnostic"],[3,"DiagnosticStyledString"],[3,"DiagnosticBuilder"],[3,"Handler"],[3,"HandlerFlags"],[4,"Applicability"],[4,"DiagnosticId"],[4,"Level"],[4,"ColorConfig"],[4,"Destination"],[4,"WritableDst"],[8,"Emitter"],[3,"EmitterWriter"],[3,"Registry"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["rustc_hash"] = {"doc":"Fast, non-cryptographic hash used by rustc and Firefox.","items":[[3,"FxHasher","rustc_hash","A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",null,null],[6,"FxHashMap","","Type alias for a hashmap using the `fx` hash algorithm.",null,null],[6,"FxHashSet","","Type alias for a hashmap using the `fx` hash algorithm.",null,null],[11,"default","","",0,{"o":{"n":"fxhasher"}}],[11,"write","","",0,null],[11,"write_u8","","",0,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"write_u16","","",0,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"write_u32","","",0,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"write_u64","","",0,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"write_usize","","",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}]],"paths":[[3,"FxHasher"]]};
searchIndex["rustc_rayon"] = {"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rustc_rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"o":{"n":"usize"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"i":[{"n":"op"}],"o":{"n":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",null,null],[0,"binary_heap","rustc_rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rustc_rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"btree_set","rustc_rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"hash_map","rustc_rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"hash_set","rustc_rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"linked_list","rustc_rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[0,"vec_deque","rustc_rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rustc_rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",15,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rustc_rayon","Traits for writing parallel programs using an iterator-style interface",null,null],[4,"Either","rustc_rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",18,null],[13,"Right","","A value of type `R`.",18,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",null,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"i":[{"n":"d"},{"n":"s"}],"o":{"n":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"i":[{"n":"t"}],"o":{"n":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"o":{"n":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"i":[{"n":"t"}],"o":{"n":"once"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"chain"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",19,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"chunks"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",20,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"drive_unindexed","","",21,null],[11,"opt_len","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",21,null],[11,"len","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",21,null],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",22,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"filtermap"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"flatmap"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",24,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"drive_unindexed","","",25,null],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",null,null],[5,"bridge","rustc_rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",null,null],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",null,null],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",null,null],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",null,null],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",26,null],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",26,null],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",null,null],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",27,null],[16,"IntoIter","","The type of iterator we will become.",27,null],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",27,null],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",27,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",27,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"f"}}],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",null,null],[16,"Folder","","The type of folder that this consumer can be converted into.",28,null],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",28,null],[16,"Result","","The type of result that this consumer will ultimately produce.",28,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",28,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",28,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",null,null],[16,"Result","","The type of result that will ultimately be produced by the folder.",29,null],[10,"consume","","Consume next item and return new sequential state.",29,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",29,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[10,"complete","","Finish consuming items, produce final result.",29,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",30,{"i":[{"n":"self"},{"n":"result"},{"n":"result"}],"o":{"n":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",null,null],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",31,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",31,null],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",null,null],[16,"Item","","The type of item returned by this producer.",32,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",32,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",32,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"f"}}],[11,"clone","rustc_rayon::iter","",33,{"i":[{"n":"self"}],"o":{"n":"fold"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",33,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"foldwith"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",34,null],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"skip"}}],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","",35,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"split"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",36,null],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"take"}}],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"len","","",37,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"drive","","",37,null],[11,"with_producer","","",37,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"map"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",38,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"mapwith"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",39,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"zip"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",40,null],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"zipeq"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",41,null],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"interleave"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",42,null],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"interleaveshortest"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",43,null],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"intersperse"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",44,null],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"update"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",45,null],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",46,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"minlen"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",47,null],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"maxlen"}}],[11,"drive_unindexed","","",48,null],[11,"opt_len","","",48,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",48,null],[11,"len","","",48,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",48,null],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",49,null],[11,"len","","",49,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",49,null],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"inspect"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",50,null],[11,"len","","",50,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",50,null],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"drive_unindexed","","",51,null],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",52,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",52,{"i":[{"n":"self"},{"n":"z"}],"o":{"g":["repeatn"],"n":"zip"}}],[11,"drive_unindexed","","",52,null],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"repeatn"}}],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",53,null],[11,"with_producer","","",53,null],[11,"len","","",53,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",54,null],[11,"opt_len","","",54,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",54,null],[11,"len","","",54,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",54,null],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"once"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",55,null],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","The parallel iterator type that will be created.",56,null],[16,"Item","","The type of item that the parallel iterator will produce.",56,null],[10,"into_par_iter","","Converts `self` into a parallel iterator.",56,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","The type of the parallel iterator that will be returned.",57,null],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",57,null],[10,"par_iter","","Converts `self` into a parallel iterator.",57,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","The type of iterator that will be created.",58,null],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",58,null],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",58,null],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",null,null],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",59,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",59,{"i":[{"n":"self"},{"n":"op"}]}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",59,{"i":[{"n":"self"},{"n":"t"},{"n":"op"}]}],[11,"count","","Counts the number of items in this parallel iterator.",59,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",59,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",59,{"i":[{"n":"self"}],"o":{"n":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",59,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"inspect"}}],[11,"update","","Mutates each item of this iterator before yielding it.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"update"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",59,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",59,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",59,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",59,{"i":[{"n":"self"},{"n":"id"},{"n":"f"}],"o":{"n":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",59,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",59,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"product","","Multiplies all the items in the iterator.",59,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",59,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",59,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",59,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",59,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",59,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",59,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",59,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",59,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",59,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",59,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",59,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",59,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",60,{"i":[{"n":"self"},{"n":"vec"}]}],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",60,{"i":[{"n":"self"},{"n":"vec"},{"n":"vec"}]}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",60,{"i":[{"n":"self"},{"n":"z"}],"o":{"n":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",60,{"i":[{"n":"self"},{"n":"z"}],"o":{"n":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"interleaveshortest"}}],[11,"chunks","","Split an iterator up into fixed-size chunks.",60,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",60,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"enumerate","","Yields an index along with each item.",60,{"i":[{"n":"self"}],"o":{"n":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",60,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",60,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",60,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",60,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",60,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["usize"],"n":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",60,{"i":[{"n":"self"}],"o":{"n":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",60,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",60,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",60,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",60,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",60,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",61,{"i":[{"n":"i"}],"o":{"n":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",62,{"i":[{"n":"self"},{"n":"i"}]}],[0,"option","rustc_rayon","Parallel iterator types for [options][std::option]",null,null],[3,"IntoIter","rustc_rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",63,null],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",64,null],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",65,null],[0,"prelude","rustc_rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",null,null],[3,"Iter","rustc_rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"opt_len","","",66,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",66,null],[11,"len","","",66,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",66,null],[11,"drive_unindexed","","",66,null],[11,"drive_unindexed","","",66,null],[0,"result","rustc_rayon","Parallel iterator types for [results][std::result]",null,null],[3,"IntoIter","rustc_rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",67,null],[11,"opt_len","","",67,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",67,null],[11,"len","","",67,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",67,null],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",68,null],[11,"opt_len","","",68,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",68,null],[11,"len","","",68,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",68,null],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",69,null],[11,"opt_len","","",69,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",69,null],[11,"len","","",69,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",69,null],[0,"slice","rustc_rayon","Parallel iterator types for [slices][std::slice]",null,null],[3,"Iter","rustc_rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",70,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",70,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `window_size`. The windows overlap.",70,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks do not overlap.",70,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",71,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",71,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks are mutable and do not overlap.",71,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",71,{"i":[{"n":"self"}]}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",71,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",71,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",71,{"i":[{"n":"self"}]}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",71,{"i":[{"n":"self"},{"n":"f"}]}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",71,{"i":[{"n":"self"},{"n":"f"}]}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",72,null],[11,"opt_len","","",72,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",72,null],[11,"len","","",72,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",72,null],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",73,null],[11,"opt_len","","",73,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",73,null],[11,"len","","",73,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",73,null],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",74,null],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",75,null],[11,"opt_len","","",75,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",75,null],[11,"len","","",75,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",75,null],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",76,null],[11,"opt_len","","",76,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",76,null],[11,"len","","",76,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",76,null],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",77,null],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drive_unindexed","","",78,null],[0,"str","rustc_rayon","Parallel iterator types for [strings][std::str]",null,null],[3,"Chars","rustc_rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",79,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",79,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",79,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",79,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",79,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",79,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"drive_unindexed","","",80,null],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"split"}}],[11,"drive_unindexed","","",81,null],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"splitterminator"}}],[11,"drive_unindexed","","",82,null],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"lines"}}],[11,"drive_unindexed","","",83,null],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"splitwhitespace"}}],[11,"drive_unindexed","","",84,null],[0,"vec","rustc_rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",null,null],[3,"IntoIter","rustc_rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"drive_unindexed","","",85,null],[11,"opt_len","","",85,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",85,null],[11,"len","","",85,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",85,null],[11,"drive_unindexed","rustc_rayon::iter","",18,null],[11,"opt_len","","",18,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"drive","","",18,null],[11,"len","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"with_producer","","",18,null],[11,"par_extend","","",18,{"i":[{"n":"self"},{"n":"i"}]}],[11,"new","rustc_rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",86,{"i":[{"n":"configuration"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"scoped_pool","","Creates a scoped thread pool",86,{"i":[{"n":"threadpoolbuilder"},{"n":"h"},{"n":"f"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",86,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",86,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",86,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",86,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",86,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",86,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",86,null],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","",88,{"o":{"n":"threadpoolbuilder"}}],[11,"description","","",87,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"drop","","",86,null],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"deref","rustc_rayon::iter","",18,null],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","","",18,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",18,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"from","","",18,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"write","","",18,null],[11,"flush","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",18,null],[11,"read_to_end","","",18,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"extend","","",18,null],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"hash","","",18,null],[11,"fill_buf","","",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"consume","","",18,null],[11,"next_back","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_ref","","",18,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"deref_mut","","",18,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"into","","",18,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","rustc_rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",88,{"o":{"n":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",88,{"i":[{"n":"self"}],"o":{"g":["threadpool","threadpoolbuilderror"],"n":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",88,{"i":[{"n":"self"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",88,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"threadpoolbuilder"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",88,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",88,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",88,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",88,{"i":[{"n":"self"}],"o":{"n":"threadpoolbuilder"}}],[11,"deadlock_handler","","Set a callback to be invoked on current deadlock.",88,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",88,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",88,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"main_handler","","Set a callback to be invoked on thread main.",88,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",90,null],[11,"is_left","rustc_rayon::iter","Return true if the value is the `Left` variant.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",18,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,{"i":[{"n":"self"}],"o":{"n":"t"}}]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"FnContext"],[3,"Scope"]]};
searchIndex["rustc_rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rustc_rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"Registry","","",null,null],[3,"WorkerLocal","","Holds worker-locals values for each thread in a thread pool. You can only access the worker local value through the Deref impl on the thread pool it was constructed on. It will panic otherwise",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"o":{"g":["usize"],"n":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"o":{"g":["bool"],"n":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"i":[{"n":"op"}],"o":{"n":"r"}}],[5,"mark_blocked","","Mark a Rayon worker thread as blocked. This triggers the deadlock handler if no other worker thread is active",null,{}],[5,"mark_unblocked","","Mark a previously blocked Rayon worker thread as unblocked",null,{"i":[{"n":"registry"}]}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"i":[{"n":"f"}]}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"o":{"n":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"i":[{"n":"configuration"}],"o":{"g":["box"],"n":"result"}}],[11,"new","","",0,{"i":[{"n":"threadpoolbuilder"}],"o":{"g":["arc","threadpoolbuilderror"],"n":"result"}}],[11,"current","","",0,{"o":{"g":["registry"],"n":"arc"}}],[11,"current_num_threads","","Returns the number of threads in the current registry.  This is better than `Registry::current().num_threads()` because it avoids incrementing the `Arc`.",0,{"o":{"n":"usize"}}],[11,"id","","Returns an opaque identifier for this registry.",0,{"i":[{"n":"self"}],"o":{"n":"registryid"}}],[11,"num_threads","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"handle_panic","","",0,{"i":[{"n":"self"},{"g":["any"],"n":"box"}]}],[11,"wait_until_primed","","Waits for the worker threads to get up and running.  This is meant to be used for benchmarking purposes, primarily, so that you can get more consistent numbers by having everything \"ready to go\".",0,{"i":[{"n":"self"}]}],[11,"inject_or_push","","//////////////////////////////////////////////////////////////////////// MAIN LOOP",0,{"i":[{"n":"self"},{"n":"jobref"}]}],[11,"inject","","Push a job into the \"external jobs\" queue; it will be taken by whatever worker has nothing to do. Use this is you know that you are not on a worker of this registry.",0,null],[11,"in_worker","","If already in a worker-thread of this registry, just execute `op`. Otherwise, inject `op` in this thread-pool. Either way, block until `op` completes and return its return value. If `op` panics, that panic will be propagated as well.  The second argument indicates `true` if injection was performed, `false` if executed directly.",0,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"increment_terminate_count","","Increment the terminate counter. This increment should be balanced by a call to `terminate`, which will decrement. This is used when spawning asynchronous work, which needs to prevent the registry from terminating so long as it is active.",0,{"i":[{"n":"self"}]}],[11,"terminate","","Signals that the thread-pool which owns this registry has been dropped. The worker threads will gradually terminate, once any extant work is completed.",0,{"i":[{"n":"self"}]}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",1,{"i":[{"n":"self"},{"n":"body"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new worker local where the `initial` closure computes the value this worker local should take for each thread in the thread pool.",2,{"i":[{"n":"f"}],"o":{"n":"workerlocal"}}],[11,"into_inner","","Returns the worker-local value for each thread",2,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"join","","Joins the elements of all the worker locals into one Vec",2,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",3,{"i":[{"n":"configuration"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"scoped_pool","","Creates a scoped thread pool",3,{"i":[{"n":"threadpoolbuilder"},{"n":"h"},{"n":"f"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",3,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",3,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",3,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",3,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",3,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",3,{"i":[{"n":"self"},{"n":"op"}]}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"tlv","","Allows access to the Rayon's thread local value which is preserved when moving jobs across threads",null,null],[5,"with","rustc_rayon_core::tlv","Sets the current thread-local value to `value` inside the closure. The old value is restored when the closure ends",null,{"i":[{"n":"usize"},{"n":"f"}],"o":{"n":"r"}}],[5,"set","","Sets the current thread-local value",null,{"i":[{"n":"usize"}]}],[5,"get","","Returns the current thread-local value",null,{"o":{"n":"usize"}}],[11,"fmt","rustc_rayon_core","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",5,{"o":{"n":"threadpoolbuilder"}}],[11,"default","","",6,{"o":{"n":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",5,{"o":{"n":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",5,{"i":[{"n":"self"}],"o":{"g":["threadpool","threadpoolbuilderror"],"n":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",5,{"i":[{"n":"self"}],"o":{"g":["threadpoolbuilderror"],"n":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deadlock_handler","","Set a callback to be invoked on current deadlock.",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"main_handler","","Set a callback to be invoked on thread main.",5,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",6,{"o":{"n":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",6,{"i":[{"n":"self"}],"o":{"g":["threadpool","box"],"n":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",6,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",6,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",6,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"configuration"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"Registry"],[3,"Scope"],[3,"WorkerLocal"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["scoped_tls"] = {"doc":"Scoped thread-local storage","items":[[3,"ScopedKey","scoped_tls","Type representing a thread local storage key corresponding to a reference to the type parameter `T`.",null,null],[11,"set","","Inserts a value into this scoped thread local storage slot for a duration of a closure.",0,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"r"}}],[11,"with","","Gets a value out of this scoped variable.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"scoped_thread_local","","",null,null]],"paths":[[3,"ScopedKey"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"i":[{"n":"t"},{"n":"f"}],"o":{"g":["always"],"n":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"should_run","","",1,{"o":{"n":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"i":[{"n":"t"},{"n":"f"}],"o":{"n":"scopeguard"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",5,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",7,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",8,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",9,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",10,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",13,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",14,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",15,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",18,null],[11,"variant_seed","","",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",19,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given string.",20,{"i":[{"n":"str"}],"o":{"n":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",20,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",20,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",21,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_identifier","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",22,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,null],[11,"deserialize_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_identifier","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"seqdeserializer"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_element_seed","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"seqaccessdeserializer"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_key_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"next_entry_seed","","",26,{"i":[{"n":"self"},{"n":"tk"},{"n":"tv"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_element_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"mapaccessdeserializer"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",27,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_identifier","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","serde::de","",28,{"i":[{"n":"self"}],"o":{"n":"ignoredany"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",28,{"o":{"n":"ignoredany"}}],[11,"expecting","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","",28,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i64","","",28,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_u64","","",28,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_f64","","",28,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_str","","",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_none","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_seq","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_bytes","","",28,null],[11,"deserialize","","",28,{"i":[{"n":"d"}],"o":{"g":["ignoredany"],"n":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"i":[{"n":"usize"},{"n":"expected"}],"o":{"n":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","The input contains a boolean.",34,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i8","","The input contains an `i8`.",34,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"visit_i16","","The input contains an `i16`.",34,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"visit_i32","","The input contains an `i32`.",34,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"visit_i64","","The input contains an `i64`.",34,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_i128","","The input contains a `i128`.",34,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[11,"visit_u8","","The input contains a `u8`.",34,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"visit_u16","","The input contains a `u16`.",34,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"visit_u32","","The input contains a `u32`.",34,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"visit_u64","","The input contains a `u64`.",34,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_u128","","The input contains a `u128`.",34,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[11,"visit_f32","","The input contains an `f32`.",34,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"visit_f64","","The input contains an `f64`.",34,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_char","","The input contains a `char`.",34,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","The input contains an optional that is present.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","The input contains a key-value map.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_enum","","The input contains an enum.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["option"],"n":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,null],[10,"unit_variant","","Called when deserializing a variant with no values.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",39,null],[10,"into_deserializer","","Convert this value into a deserializer.",39,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"unexpected"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_key","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_value","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a sequence element.",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a sequence.",44,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_element","","Serialize a tuple element.",45,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple struct field.",46,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple struct.",46,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a tuple variant field.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple variant.",47,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_key","","Serialize a map key.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_value","","Serialize a map value.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a map.",48,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct field.",49,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",49,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct.",49,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,null],[10,"serialize_field","","Serialize a struct variant field.",50,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct variant.",50,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"hex","serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,{"i":[{"n":"self"}],"o":{"g":["vec","fromhexerror"],"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"fromhexerror"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"json","serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of compact data",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",3,null],[13,"U64","","",3,null],[13,"F64","","",3,null],[13,"String","","",3,null],[13,"Boolean","","",3,null],[13,"Array","","",3,null],[13,"Object","","",3,null],[13,"Null","","",3,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",4,null],[13,"InvalidNumber","","",4,null],[13,"EOFWhileParsingObject","","",4,null],[13,"EOFWhileParsingArray","","",4,null],[13,"EOFWhileParsingValue","","",4,null],[13,"EOFWhileParsingString","","",4,null],[13,"KeyMustBeAString","","",4,null],[13,"ExpectedColon","","",4,null],[13,"TrailingCharacters","","",4,null],[13,"TrailingComma","","",4,null],[13,"InvalidEscape","","",4,null],[13,"InvalidUnicodeCodePoint","","",4,null],[13,"LoneLeadingSurrogateInHexEscape","","",4,null],[13,"UnexpectedEndOfHexEscape","","",4,null],[13,"UnrecognizedHex","","",4,null],[13,"NotFourDigit","","",4,null],[13,"NotUtf8","","",4,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",5,null],[13,"IoError","","",5,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",6,null],[13,"ExpectedError","","",6,null],[13,"MissingFieldError","","",6,null],[13,"UnknownVariantError","","",6,null],[13,"ApplicationError","","",6,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",7,null],[13,"BadHashmapKey","","",7,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",8,null],[13,"ObjectEnd","","",8,null],[13,"ArrayStart","","",8,null],[13,"ArrayEnd","","",8,null],[13,"BooleanValue","","",8,null],[13,"I64Value","","",8,null],[13,"U64Value","","",8,null],[13,"F64Value","","",8,null],[13,"StringValue","","",8,null],[13,"NullValue","","",8,null],[13,"Error","","",8,null],[4,"StackElement","","StackElements compose a Stack. For example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"), StackElement::Index(3) and StackElement::Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",9,null],[13,"Key","","",9,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"i":[{"n":"errorcode"}],"o":{"n":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"i":[{"n":"str"}],"o":{"n":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"i":[{"n":"t"}],"o":{"g":["string","encodererror"],"n":"result"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asprettyjson"}}],[5,"from_reader","","Decodes a json value from an `&mut io::Read`",null,{"i":[{"n":"read"}],"o":{"g":["json","buildererror"],"n":"result"}}],[5,"from_str","","Decodes a json value from a string",null,{"i":[{"n":"str"}],"o":{"g":["json","buildererror"],"n":"result"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",10,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"errorcode"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"errorcode"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"parsererror"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"parsererror"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"parsererror"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"decodererror"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"encodererror"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",7,{"i":[{"n":"error"}],"o":{"n":"encodererror"}}],[11,"new","","Creates a new JSON encoder whose output will be written to the writer specified.",11,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"emit_nil","","",11,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",11,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u128","","",11,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",11,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",11,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",11,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",11,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i128","","",11,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",11,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",11,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",11,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",11,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",11,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",11,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",11,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",11,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"emit_enum","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant_arg","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct_field","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_arg","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option","","",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option_none","","",11,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_option_some","","",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq_elt","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_key","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_val","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"new","","Creates a new encoder whose output will be written to the specified writer",12,{"i":[{"n":"write"}],"o":{"n":"prettyencoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",12,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"emit_nil","","",12,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u128","","",12,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",12,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",12,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",12,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",12,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",12,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i128","","",12,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",12,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",12,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",12,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",12,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",12,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",12,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",12,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",12,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"emit_enum","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant_arg","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct_field","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_arg","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option","","",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option_none","","",12,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_option_some","","",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq_elt","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_key","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_val","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",3,{"i":[{"n":"self"}],"o":{"n":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",3,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"json"}}],[11,"index","","",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"json"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"jsonevent"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"stackelement"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",13,{"o":{"n":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",13,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",13,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",13,null],[11,"top","","Returns the top-most element (if any).",13,{"i":[{"n":"self"}],"o":{"g":["stackelement"],"n":"option"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"g":["jsonevent"],"n":"option"}}],[11,"new","","Creates the JSON parser.",14,{"i":[{"n":"t"}],"o":{"n":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",14,{"i":[{"n":"self"}],"o":{"n":"stack"}}],[11,"new","","Create a JSON Builder.",15,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"build","","",15,{"i":[{"n":"self"}],"o":{"g":["json","buildererror"],"n":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",16,{"i":[{"n":"json"}],"o":{"n":"decoder"}}],[11,"read_nil","","",16,{"i":[{"n":"self"}],"o":{"n":"decoderesult"}}],[11,"read_usize","","",16,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"decoderesult"}}],[11,"read_u8","","",16,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"decoderesult"}}],[11,"read_u16","","",16,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"decoderesult"}}],[11,"read_u32","","",16,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"decoderesult"}}],[11,"read_u64","","",16,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"decoderesult"}}],[11,"read_u128","","",16,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"decoderesult"}}],[11,"read_isize","","",16,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"decoderesult"}}],[11,"read_i8","","",16,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"decoderesult"}}],[11,"read_i16","","",16,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"decoderesult"}}],[11,"read_i32","","",16,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"decoderesult"}}],[11,"read_i64","","",16,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"decoderesult"}}],[11,"read_i128","","",16,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"decoderesult"}}],[11,"read_f32","","",16,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"decoderesult"}}],[11,"read_f64","","",16,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"decoderesult"}}],[11,"read_bool","","",16,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"decoderesult"}}],[11,"read_char","","",16,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"decoderesult"}}],[11,"read_str","","",16,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"decoderesult"}}],[11,"read_enum","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_variant","","",16,null],[11,"read_enum_variant_arg","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_struct_variant","","",16,null],[11,"read_enum_struct_variant_field","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct_field","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_arg","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct_arg","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_option","","",16,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq","","",16,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq_elt","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map","","",16,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_key","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_val","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"error","","",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"decodererror"}}],[11,"to_json","","",3,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"fmt","","Encodes a json value into a string",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",19,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",3,{"i":[{"n":"str"}],"o":{"g":["json","buildererror"],"n":"result"}}],[0,"opaque","serialize","",null,null],[3,"Encoder","serialize::opaque","",null,null],[12,"cursor","","",20,null],[3,"Decoder","","",null,null],[12,"data","","",21,null],[6,"EncodeResult","","",null,null],[11,"new","","",20,{"i":[{"n":"cursor"}],"o":{"n":"encoder"}}],[11,"emit_raw_bytes","","",20,null],[11,"emit_nil","","",20,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u128","","",20,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",20,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",20,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",20,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",20,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",20,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i128","","",20,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",20,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",20,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",20,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",20,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",20,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",20,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",20,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",20,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",20,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"position","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","",21,null],[11,"position","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_position","","",21,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"advance","","",21,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"read_raw_bytes","","",21,null],[11,"read_nil","","",21,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read_u128","","",21,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"result"}}],[11,"read_u64","","",21,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_u32","","",21,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_u16","","",21,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_u8","","",21,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_usize","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[11,"read_i128","","",21,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"result"}}],[11,"read_i64","","",21,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_i32","","",21,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_i16","","",21,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_i8","","",21,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_isize","","",21,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"result"}}],[11,"read_bool","","",21,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"read_f64","","",21,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_f32","","",21,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_char","","",21,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"result"}}],[11,"read_str","","",21,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"result"}}],[11,"error","","",21,null],[0,"leb128","serialize","",null,null],[5,"write_to_vec","serialize::leb128","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"u8"}]}],[5,"write_u16_leb128","","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"u16"}],"o":{"n":"usize"}}],[5,"write_u32_leb128","","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"u32"}],"o":{"n":"usize"}}],[5,"write_u64_leb128","","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"u64"}],"o":{"n":"usize"}}],[5,"write_u128_leb128","","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"u128"}],"o":{"n":"usize"}}],[5,"write_usize_leb128","","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"usize"}],"o":{"n":"usize"}}],[5,"read_u16_leb128","","",null,null],[5,"read_u32_leb128","","",null,null],[5,"read_u64_leb128","","",null,null],[5,"read_u128_leb128","","",null,null],[5,"read_usize_leb128","","",null,null],[5,"write_signed_leb128_to","","encodes an integer using signed leb128 encoding and stores the result using a callback function.",null,{"i":[{"n":"i128"},{"n":"w"}],"o":{"n":"usize"}}],[5,"write_signed_leb128","","",null,{"i":[{"n":"vec"},{"n":"usize"},{"n":"i128"}],"o":{"n":"usize"}}],[5,"read_signed_leb128","","",null,null],[8,"Decoder","serialize","",null,null],[16,"Error","","",22,null],[10,"read_nil","","",22,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"read_usize","","",22,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"read_u128","","",22,{"i":[{"n":"self"}],"o":{"g":["u128"],"n":"result"}}],[10,"read_u64","","",22,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[10,"read_u32","","",22,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"read_u16","","",22,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[10,"read_u8","","",22,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[10,"read_isize","","",22,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"result"}}],[10,"read_i128","","",22,{"i":[{"n":"self"}],"o":{"g":["i128"],"n":"result"}}],[10,"read_i64","","",22,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[10,"read_i32","","",22,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[10,"read_i16","","",22,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[10,"read_i8","","",22,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[10,"read_bool","","",22,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"read_f64","","",22,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[10,"read_f32","","",22,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[10,"read_char","","",22,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"result"}}],[10,"read_str","","",22,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"result"}}],[11,"read_enum","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_struct_field","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple_arg","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple_struct_arg","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_option","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_seq","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_seq_elt","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_map","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_map_elt_key","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_map_elt_val","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"error","","",22,null],[8,"Encoder","","",null,null],[16,"Error","","",23,null],[10,"emit_nil","","",23,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_usize","","",23,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"emit_u128","","",23,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"emit_u64","","",23,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"emit_u32","","",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"emit_u16","","",23,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"emit_u8","","",23,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"emit_isize","","",23,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"result"}}],[10,"emit_i128","","",23,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"emit_i64","","",23,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"emit_i32","","",23,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"emit_i16","","",23,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"emit_i8","","",23,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"emit_bool","","",23,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"emit_f64","","",23,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"emit_f32","","",23,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"emit_char","","",23,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"emit_str","","",23,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"emit_enum","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_variant","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_variant_arg","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_struct_variant","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_struct_field","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple_arg","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_option","","",23,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_option_none","","",23,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"emit_option_some","","",23,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_seq","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_seq_elt","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_map","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_map_elt_key","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_map_elt_val","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",24,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",25,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"SpecializationError","","Implement this trait on your `{Encodable,Decodable}::Error` types to override the default panic behavior for missing specializations.",null,null],[10,"not_found","","Create an error for a missing method specialization. Defaults to panicking with type, trait & method names. `S` is the encoder/decoder state type, `T` is the type being encoded/decoded, and the arguments are the names of the trait and method that should've been overridden.",26,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[8,"SpecializedEncoder","","Implement this trait on encoders, with `T` being the type you want to encode (employing `UseSpecializedEncodable`), using a strategy specific to the encoder.",null,null],[10,"specialized_encode","","Encode the value in a manner specific to this encoder state.",27,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[8,"SpecializedDecoder","","Implement this trait on decoders, with `T` being the type you want to decode (employing `UseSpecializedDecodable`), using a strategy specific to the decoder.",null,null],[10,"specialized_decode","","Decode a value in a manner specific to this decoder state.",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"UseSpecializedEncodable","","Implement this trait on your type to get an `Encodable` implementation which goes through `SpecializedEncoder`.",null,null],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[8,"UseSpecializedDecodable","","Implement this trait on your type to get an `Decodable` implementation which goes through `SpecializedDecoder`.",null,null],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"emit_enum","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_variant","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_variant_arg","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_struct_variant","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_enum_struct_variant_field","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_struct_field","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple_arg","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_tuple_struct_arg","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_option","","",23,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_option_none","","",23,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"emit_option_some","","",23,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_seq","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_seq_elt","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_map","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_map_elt_key","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"emit_map_elt_val","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_enum","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_enum_variant","","",22,null],[11,"read_enum_variant_arg","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_enum_struct_variant","","",22,null],[11,"read_enum_struct_variant_field","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_struct_field","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple_arg","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_tuple_struct_arg","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_option","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_seq","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_seq_elt","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_map","","",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_map_elt_key","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"read_map_elt_val","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",29,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",30,{"i":[{"n":"d"}],"o":{"n":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"Decoder"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"SpecializationError"],[8,"SpecializedEncoder"],[8,"SpecializedDecoder"],[8,"UseSpecializedEncodable"],[8,"UseSpecializedDecodable"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"siphasher13"}}],[11,"default","","",0,{"o":{"n":"siphasher13"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"siphasher24"}}],[11,"default","","",1,{"o":{"n":"siphasher24"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"siphasher"}}],[11,"default","","",2,{"o":{"n":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"o":{"n":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"o":{"n":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"o":{"n":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"default","","",3,{"o":{"n":"hash128"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"siphasher13"}}],[11,"default","","",5,{"o":{"n":"siphasher13"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"siphasher24"}}],[11,"default","","",6,{"o":{"n":"siphasher24"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"siphasher"}}],[11,"default","","",7,{"o":{"n":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"o":{"n":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"o":{"n":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"o":{"n":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slog"] = {"doc":"Slog -  Structured, extensible, composable logging for Rust","items":[[3,"Logger","slog","Logging handle used to execute logging statements",null,null],[3,"Discard","","`Drain` discarding everything",null,null],[3,"Filter","","`Drain` filtering records",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"MapError","","`Drain` mapping error returned by another `Drain`",null,null],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"Fuse","","`Drain` panicking on error",null,null],[12,"0","","",3,null],[3,"IgnoreResult","","`Drain` ignoring result",null,null],[3,"Record","","One logging record",null,null],[3,"FnValue","","Explicit lazy-closure `Value`",null,null],[12,"0","","",4,null],[3,"PushFnValueSerializer","","Handle passed to `PushFnValue` closure",null,null],[3,"PushFnValue","","Lazy `Value` that writes to Serializer",null,null],[12,"0","","",5,null],[3,"SingleKV","","Single pair `Key` and `Value`",null,null],[12,"0","","",6,null],[12,"1","","",6,null],[3,"OwnedKV","","Owned KV",null,null],[3,"BorrowedKV","","Borrowed `KV`",null,null],[3,"OwnedKVList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its ancestors",null,null],[4,"MutexDrainError","","Error returned by `Mutex<D : Drain>`",null,null],[13,"Mutex","","Error acquiring mutex",7,null],[13,"Drain","","Error returned by drain",7,null],[4,"Level","","Logging level associated with a logging `Record`",null,null],[13,"Critical","","Critical",8,null],[13,"Error","","Error",8,null],[13,"Warning","","Warning",8,null],[13,"Info","","Info",8,null],[13,"Debug","","Debug",8,null],[13,"Trace","","Trace",8,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",9,null],[13,"Critical","","Log critical level only",9,null],[13,"Error","","Log only error level and above",9,null],[13,"Warning","","Log only warning level and above",9,null],[13,"Info","","Log only info level and above",9,null],[13,"Debug","","Log only debug level and above",9,null],[13,"Trace","","Log everything",9,null],[4,"Error","","Serialization Error",null,null],[13,"Io","","`io::Error` (not available in ![no_std] mode)",10,null],[13,"Fmt","","`fmt::Error`",10,null],[13,"Other","","Other error",10,null],[0,"ser","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"Key","","Key type",null,null],[6,"PushFnSerializer","","Old name of `PushFnValueSerializer`",null,null],[6,"Result","","Serialization `Result`",null,null],[6,"Serialize","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"PushLazy","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"ValueSerializer","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"OwnedKeyValueList","","Compatibility name to ease upgrading from `slog v1`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[8,"Drain","","Logging drain",null,null],[16,"Ok","","Type returned by this drain",11,null],[16,"Err","","Type of potential errors that can be returned by this `Drain`",11,null],[10,"log","","Handle one logging statement (`Record`)",11,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"is_enabled","","Avoid: Check if messages at the specified log level are maybe enabled for this logger.",11,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"is_critical_enabled","","Avoid: See `is_enabled`",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_error_enabled","","Avoid: See `is_enabled`",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_warning_enabled","","Avoid: See `is_enabled`",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_info_enabled","","Avoid: See `is_enabled`",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_debug_enabled","","Avoid: See `is_enabled`",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_trace_enabled","","Avoid: See `is_enabled`",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"map","","Pass `Drain` through a closure, eg. to wrap into another `Drain`.",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"filter","","Filter logging records passed to `Drain`",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filter"}}],[11,"filter_level","","Filter logging records passed to `Drain` (by level)",11,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"levelfilter"}}],[11,"map_err","","Map logging errors returned by this drain",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperror"}}],[11,"ignore_res","","Ignore results returned by this drain",11,{"i":[{"n":"self"}],"o":{"n":"ignoreresult"}}],[11,"fuse","","Make `Self` panic when returning any errors",11,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[8,"SendSyncUnwindSafe","","`Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncUnwindSafeDrain","","`Drain + Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncRefUnwindSafeDrain","","`Drain + Send + Sync + RefUnwindSafe` bound",null,null],[8,"MapErrFn","","Function that can be used in `MapErr` drain",null,null],[8,"FilterFn","","Function that can be used in `Filter` drain",null,null],[8,"SendRefUnwindSafeDrain","","`Drain + Send + RefUnwindSafe` bound",null,null],[8,"Serializer","","Serializer",null,null],[11,"emit_usize","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"usize"}],"o":{"n":"result"}}],[11,"emit_isize","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"isize"}],"o":{"n":"result"}}],[11,"emit_bool","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"bool"}],"o":{"n":"result"}}],[11,"emit_char","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"char"}],"o":{"n":"result"}}],[11,"emit_u8","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"u8"}],"o":{"n":"result"}}],[11,"emit_i8","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"i8"}],"o":{"n":"result"}}],[11,"emit_u16","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"u16"}],"o":{"n":"result"}}],[11,"emit_i16","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"i16"}],"o":{"n":"result"}}],[11,"emit_u32","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"u32"}],"o":{"n":"result"}}],[11,"emit_i32","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"i32"}],"o":{"n":"result"}}],[11,"emit_f32","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"f32"}],"o":{"n":"result"}}],[11,"emit_u64","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"u64"}],"o":{"n":"result"}}],[11,"emit_i64","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"i64"}],"o":{"n":"result"}}],[11,"emit_f64","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"f64"}],"o":{"n":"result"}}],[11,"emit_str","","Emit $t",12,{"i":[{"n":"self"},{"n":"key"},{"n":"str"}],"o":{"n":"result"}}],[11,"emit_unit","","Emit `()`",12,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"result"}}],[11,"emit_none","","Emit `None`",12,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"result"}}],[10,"emit_arguments","","Emit `fmt::Arguments`",12,{"i":[{"n":"self"},{"n":"key"},{"n":"arguments"}],"o":{"n":"result"}}],[8,"Value","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",13,{"i":[{"n":"self"},{"n":"record"},{"n":"key"},{"n":"serializer"}],"o":{"n":"result"}}],[8,"KV","","Key-value pair(s) for log events",null,null],[10,"serialize","","Serialize self into `Serializer`",14,{"i":[{"n":"self"},{"n":"record"},{"n":"serializer"}],"o":{"n":"result"}}],[8,"SendSyncRefUnwindSafeKV","","Thread-local safety bound for `KV`",null,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"logger"}}],[11,"root","","Build a root `Logger`",15,{"i":[{"n":"d"},{"n":"ownedkv"}],"o":{"n":"logger"}}],[11,"root_typed","","Build a root `Logger` that retains `drain` type",15,{"i":[{"n":"d"},{"n":"ownedkv"}],"o":{"n":"logger"}}],[11,"new","","Build a child logger",15,{"i":[{"n":"self"},{"n":"ownedkv"}],"o":{"n":"logger"}}],[11,"log","","Log one logging `Record`",15,{"i":[{"n":"self"},{"n":"record"}]}],[11,"list","","Get list of key-value pairs assigned to this `Logger`",15,{"i":[{"n":"self"}],"o":{"n":"ownedkvlist"}}],[11,"into_erased","","Convert to default, \"erased\" type: `Logger<Arc<SendSyncUnwindSafeDrain>>`",15,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"logger"}}],[11,"to_erased","","Create a copy with \"erased\" type",15,{"i":[{"n":"self"}],"o":{"g":["arc"],"n":"logger"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"log","","",15,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"is_enabled","","",15,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"discard"}}],[11,"log","","",16,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"g":["never"],"n":"result"}}],[11,"is_enabled","","",16,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"new","","Create `Filter` wrapping given `drain`",0,{"i":[{"n":"d"},{"n":"f"}],"o":{"n":"self"}}],[11,"log","","",0,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"is_enabled","","",0,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"new","","Create `LevelFilter`",1,{"i":[{"n":"d"},{"n":"level"}],"o":{"n":"self"}}],[11,"log","","",1,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"is_enabled","","",1,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"new","","Create `Filter` wrapping given `drain`",17,{"i":[{"n":"d"},{"n":"f"}],"o":{"n":"self"}}],[11,"log","","",17,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"is_enabled","","",17,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"duplicate"}}],[11,"new","","Create `Duplicate`",2,{"i":[{"n":"d1"},{"n":"d2"}],"o":{"n":"self"}}],[11,"log","","",2,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"is_enabled","","",2,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"new","","Create `Fuse` wrapping given `drain`",3,{"i":[{"n":"d"}],"o":{"n":"self"}}],[11,"log","","",3,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"g":["never"],"n":"result"}}],[11,"is_enabled","","",3,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"ignoreresult"}}],[11,"new","","Create `IgnoreResult` wrapping `drain`",18,{"i":[{"n":"d"}],"o":{"n":"self"}}],[11,"log","","",18,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"g":["never"],"n":"result"}}],[11,"is_enabled","","",18,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"mutexdrainerror"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",7,{"i":[{"g":["mutexguard"],"n":"poisonerror"}],"o":{"n":"mutexdrainerror"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"filterlevel"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"filterlevel"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"filterlevel"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"filterlevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_usize","","Cast `Level` to ordering integer",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_usize","","Get a `Level` from an `usize`",8,{"i":[{"n":"usize"}],"o":{"g":["level"],"n":"option"}}],[11,"as_usize","","Convert to `usize` value",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_usize","","Get a `FilterLevel` from an `usize`",9,{"i":[{"n":"usize"}],"o":{"g":["filterlevel"],"n":"option"}}],[11,"max","","Maximum logging level (log everything)",9,{"o":{"n":"self"}}],[11,"min","","Minimum logging level (log nothing)",9,{"o":{"n":"self"}}],[11,"from_str","","",8,{"i":[{"n":"str"}],"o":{"g":["level"],"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["filterlevel"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"msg","","Get a log record message",19,{"i":[{"n":"self"}],"o":{"n":"arguments"}}],[11,"level","","Get record logging level",19,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"line","","Get line number",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"location","","Get line number",19,{"i":[{"n":"self"}],"o":{"n":"recordlocation"}}],[11,"column","","Get error column",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"file","","Get file path",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"tag","","Get tag",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"module","","Get module",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"function","","Get function (placeholder)",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"kv","","Get key-value pairs",19,{"i":[{"n":"self"}],"o":{"n":"borrowedkv"}}],[11,"serialize","","",4,{"i":[{"n":"self"},{"n":"record"},{"n":"key"},{"n":"serializer"}],"o":{"n":"result"}}],[11,"serialize","","Emit a value",20,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"emit","","Emit a value",20,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"drop","","",20,{"i":[{"n":"self"}]}],[11,"serialize","","",5,{"i":[{"n":"self"},{"n":"record"},{"n":"key"},{"n":"serializer"}],"o":{"n":"result"}}],[11,"from","","",6,null],[11,"serialize","","",6,{"i":[{"n":"self"},{"n":"record"},{"n":"serializer"}],"o":{"n":"result"}}],[11,"serialize","","",21,{"i":[{"n":"self"},{"n":"record"},{"n":"serializer"}],"o":{"n":"result"}}],[11,"serialize","","",22,{"i":[{"n":"self"},{"n":"record"},{"n":"serializer"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"ownedkvlist"}}],[11,"serialize","","",23,{"i":[{"n":"self"},{"n":"record"},{"n":"serializer"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",23,{"i":[{"n":"ownedkv"}],"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",10,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",10,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",10,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"o","","Macro for building group of key-value pairs: `OwnedKV`",null,null],[14,"slog_o","","Macro for building group of key-value pairs (alias)",null,null],[14,"b","","Macro for building group of key-value pairs in `BorrowedKV`",null,null],[14,"slog_b","","Alias of `b`",null,null],[14,"kv","","Macro for build `KV` implementing type",null,null],[14,"slog_kv","","Alias of `kv`",null,null],[14,"record_static","","Create `RecordStatic` at the given code location",null,null],[14,"slog_record_static","","Create `RecordStatic` at the given code location (alias)",null,null],[14,"record","","Create `Record` at the given code location",null,null],[14,"slog_record","","Create `Record` at the given code location (alias)",null,null],[14,"log","","Log message a logging record",null,null],[14,"slog_log","","Log message a logging record (alias)",null,null],[14,"crit","","Log critical level record",null,null],[14,"slog_crit","","Log critical level record (alias)",null,null],[14,"error","","Log error level record",null,null],[14,"slog_error","","Log error level record",null,null],[14,"warn","","Log warning level record",null,null],[14,"slog_warn","","Log warning level record (alias)",null,null],[14,"info","","Log info level record",null,null],[14,"slog_info","","Log info level record (alias)",null,null],[14,"debug","","Log debug level record",null,null],[14,"slog_debug","","Log debug level record (alias)",null,null],[14,"trace","","Log trace level record",null,null],[14,"slog_trace","","Log trace level record (alias)",null,null]],"paths":[[3,"Filter"],[3,"LevelFilter"],[3,"Duplicate"],[3,"Fuse"],[3,"FnValue"],[3,"PushFnValue"],[3,"SingleKV"],[4,"MutexDrainError"],[4,"Level"],[4,"FilterLevel"],[4,"Error"],[8,"Drain"],[8,"Serializer"],[8,"Value"],[8,"KV"],[3,"Logger"],[3,"Discard"],[3,"MapError"],[3,"IgnoreResult"],[3,"Record"],[3,"PushFnValueSerializer"],[3,"OwnedKV"],[3,"BorrowedKV"],[3,"OwnedKVList"]]};
searchIndex["slog_async"] = {"doc":"Async drain for slog-rs","items":[[3,"AsyncCoreBuilder","slog_async","`AsyncCore` builder",null,null],[3,"AsyncGuard","","Async guard",null,null],[3,"AsyncCore","","Core of `Async` drain",null,null],[3,"AsyncBuilder","","`Async` builder",null,null],[3,"Async","","Async drain",null,null],[4,"AsyncError","","Errors reported by `Async`",null,null],[13,"Full","","Could not send record to worker thread due to full queue",0,null],[13,"Fatal","","Fatal problem - mutex or channel poisoning issue",0,null],[4,"OverflowStrategy","","Behavior used when the channel is full.",null,null],[13,"DropAndReport","","The message gets dropped and a message with number of dropped is produced once there's space.",1,null],[13,"Drop","","The message gets dropped silently.",1,null],[13,"Block","","The caller is blocked until there's enough space.",1,null],[6,"AsyncResult","","`AsyncResult` alias",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"trysenderror"}],"o":{"n":"asyncerror"}}],[11,"from","","",0,{"i":[{"n":"trylockerror"}],"o":{"n":"asyncerror"}}],[11,"from","","",0,{"i":[{"n":"senderror"}],"o":{"n":"asyncerror"}}],[11,"from","","",0,{"i":[{"n":"poisonerror"}],"o":{"n":"asyncerror"}}],[11,"thread_name","","Configure a name to be used for the background thread.",2,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"self"}}],[11,"chan_size","","Set channel size used to send logging records to worker thread. When buffer is full `AsyncCore` will start returning `AsyncError::Full` or block, depending on the `blocking` configuration.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"blocking","","Should the logging call be blocking if the channel is full?",2,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"build","","Build `AsyncCore`",2,{"i":[{"n":"self"}],"o":{"n":"asynccore"}}],[11,"build_no_guard","","Build `AsyncCore`",2,{"i":[{"n":"self"}],"o":{"n":"asynccore"}}],[11,"build_with_guard","","Build `AsyncCore` with `AsyncGuard`",2,null],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"new","","New `AsyncCore` with default parameters",4,{"i":[{"n":"d"}],"o":{"n":"self"}}],[11,"custom","","Build `AsyncCore` drain with custom parameters",4,{"i":[{"n":"d"}],"o":{"n":"asynccorebuilder"}}],[11,"log","","",4,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"asyncresult"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"overflowstrategy"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"overflowstrategy"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"overflowstrategy"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"overflowstrategy"}],"o":{"g":["ordering"],"n":"option"}}],[11,"chan_size","","Set channel size used to send logging records to worker thread. When buffer is full `AsyncCore` will start returning `AsyncError::Full`.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"overflow_strategy","","Sets what will happen if the channel is full.",5,{"i":[{"n":"self"},{"n":"overflowstrategy"}],"o":{"n":"self"}}],[11,"thread_name","","Configure a name to be used for the background thread.",5,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"self"}}],[11,"build","","Complete building `Async`",5,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"build_no_guard","","Complete building `Async`",5,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"build_with_guard","","Complete building `Async` with `AsyncGuard`",5,null],[11,"default","","New `AsyncCore` with default parameters",6,{"i":[{"n":"d"}],"o":{"n":"self"}}],[11,"new","","Build `Async` drain with custom parameters",6,{"i":[{"n":"d"}],"o":{"n":"asyncbuilder"}}],[11,"log","","",6,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"asyncresult"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}]],"paths":[[4,"AsyncError"],[4,"OverflowStrategy"],[3,"AsyncCoreBuilder"],[3,"AsyncGuard"],[3,"AsyncCore"],[3,"AsyncBuilder"],[3,"Async"]]};
searchIndex["slog_envlogger"] = {"doc":"A logger configured via an environment variable.","items":[[3,"EnvLogger","slog_envlogger","`EnvLogger` drain.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the EnvLogger. It can be used change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[5,"new","","Create a `EnvLogger` using `RUST_LOG` environment variable",null,{"i":[{"n":"t"}],"o":{"n":"envlogger"}}],[5,"init","","Use a default `EnvLogger` as global logging drain",null,{"o":{"g":["globalloggerguard","setloggererror"],"n":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"filter","","Adds filters to the logger",0,{"i":[{"n":"self"},{"g":["str"],"n":"option"},{"n":"filterlevel"}],"o":{"n":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"build","","Build an env logger.",0,{"i":[{"n":"self"}],"o":{"n":"envlogger"}}],[11,"new","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"filter","","",1,{"i":[{"n":"self"}],"o":{"n":"filterlevel"}}],[11,"log","","",1,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}]],"paths":[[3,"LogBuilder"],[3,"EnvLogger"]]};
searchIndex["slog_scope"] = {"doc":"Logging scopes for slog-rs","items":[[3,"GlobalLoggerGuard","slog_scope","Guard resetting global logger",null,null],[5,"set_global_logger","","Set global `Logger` that is returned by calls like `logger()` outside of any logging scope.",null,{"i":[{"n":"logger"}],"o":{"n":"globalloggerguard"}}],[5,"logger","","Access the `Logger` for the current logging scope",null,{"o":{"n":"logger"}}],[5,"with_logger","","Access the `Logger` for the current logging scope",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[5,"scope","","Execute code in a logging scope",null,{"i":[{"n":"logger"},{"n":"sf"}],"o":{"n":"r"}}],[11,"cancel_reset","","Cancel resetting global logger",0,{"i":[{"n":"self"}]}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[14,"crit","","Log a critical level message using current scope logger",null,null],[14,"error","","Log a error level message using current scope logger",null,null],[14,"warn","","Log a warning level message using current scope logger",null,null],[14,"info","","Log a info level message using current scope logger",null,null],[14,"debug","","Log a debug level message using current scope logger",null,null],[14,"trace","","Log a trace level message using current scope logger",null,null]],"paths":[[3,"GlobalLoggerGuard"]]};
searchIndex["slog_stdlog"] = {"doc":"`log` crate adapter for slog-rs","items":[[3,"StdLog","slog_stdlog","Drain logging `Record`s into `log` crate",null,null],[5,"init","","Register `slog-stdlog` as `log` backend.",null,{"o":{"g":["setloggererror"],"n":"result"}}],[11,"log","","",0,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}]],"paths":[[3,"StdLog"]]};
searchIndex["slog_term"] = {"doc":"`slog-rs`'s `Drain` for terminal output","items":[[3,"FullFormat","slog_term","Terminal-output formatting `Drain`",null,null],[3,"FullFormatBuilder","","Streamer builder",null,null],[3,"CompactFormat","","Compact terminal-output formatting `Drain`",null,null],[3,"CompactFormatBuilder","","Streamer builder",null,null],[3,"PlainDecorator","","Plain (no-op) `Decorator` implementation",null,null],[3,"PlainRecordDecorator","","Record decorator used by `PlainDecorator`",null,null],[3,"PlainSyncDecorator","","PlainSync `Decorator` implementation",null,null],[3,"PlainSyncRecordDecorator","","`RecordDecorator` used by `PlainSyncDecorator`",null,null],[3,"TermDecoratorBuilder","","`TermDecorator` builder",null,null],[3,"TermDecorator","","`Decorator` implemented using `term` crate",null,null],[3,"TermRecordDecorator","","Record decorator used by `TermDecorator`",null,null],[3,"TestStdoutWriter","","Replacement for `std::io::stdout()` for when output capturing by rust's test harness is required.",null,null],[5,"timestamp_local","","Default local timezone timestamp function",null,{"i":[{"n":"write"}],"o":{"n":"result"}}],[5,"timestamp_utc","","Default UTC timestamp function",null,{"i":[{"n":"write"}],"o":{"n":"result"}}],[5,"term_compact","","Create a `CompactFormat` drain with default settings",null,{"o":{"g":["termdecorator"],"n":"compactformat"}}],[5,"term_full","","Create a `FullFormat` drain with default settings",null,{"o":{"g":["termdecorator"],"n":"fullformat"}}],[8,"Decorator","","Output decorator",null,null],[10,"with_record","","Get a `RecordDecorator` for a given `record`",0,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"},{"n":"f"}],"o":{"n":"result"}}],[8,"RecordDecorator","","Per-record decorator",null,null],[10,"reset","","Reset formatting to defaults",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_whitespace","","Format normal text",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_msg","","Format `Record` message",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_timestamp","","Format timestamp",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_level","","Format `Record` level",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_comma","","Format a comma between key-value pairs",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_key","","Format key",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_value","","Format a value",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_separator","","Format value",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"ThreadSafeTimestampFn","","Threadsafe timestamp formatting function type",null,null],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"use_original_order","","Use the original ordering of key-value pairs",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"build","","Build `FullFormat`",2,{"i":[{"n":"self"}],"o":{"n":"fullformat"}}],[11,"log","","",3,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"new","","New `TermBuilder`",3,{"i":[{"n":"d"}],"o":{"n":"fullformatbuilder"}}],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"build","","Build the streamer",4,{"i":[{"n":"self"}],"o":{"n":"compactformat"}}],[11,"log","","",5,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"}],"o":{"n":"result"}}],[11,"new","","New `CompactFormatBuilder`",5,{"i":[{"n":"d"}],"o":{"n":"compactformatbuilder"}}],[11,"new","","Create `PlainDecorator` instance",6,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"with_record","","",6,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"},{"n":"f"}],"o":{"n":"result"}}],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}],[11,"reset","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create `PlainSyncDecorator` instance",8,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"with_record","","",8,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"},{"n":"f"}],"o":{"n":"result"}}],[11,"write","","",9,null],[11,"flush","","",9,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",9,{"i":[{"n":"self"}]}],[11,"reset","","",9,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"stderr","","Output to `stderr`",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"stdout","","Output to `stdout`",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"force_color","","Force colored output",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"force_plain","","Force colored output",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"try_build","","Try to build `TermDecorator`",10,{"i":[{"n":"self"}],"o":{"g":["termdecorator"],"n":"option"}}],[11,"build","","Build `TermDecorator`",10,{"i":[{"n":"self"}],"o":{"n":"termdecorator"}}],[11,"new","","Start building `TermDecorator`",11,{"o":{"n":"termdecoratorbuilder"}}],[11,"level_to_color","","`Level` color",11,{"i":[{"n":"level"}],"o":{"n":"u16"}}],[11,"with_record","","",11,{"i":[{"n":"self"},{"n":"record"},{"n":"ownedkvlist"},{"n":"f"}],"o":{"n":"result"}}],[11,"write","","",12,null],[11,"flush","","",12,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"reset","","",12,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_level","","",12,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_key","","",12,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"start_msg","","",12,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write","","",13,null],[11,"flush","","",13,{"i":[{"n":"self"}],"o":{"n":"result"}}]],"paths":[[8,"Decorator"],[8,"RecordDecorator"],[3,"FullFormatBuilder"],[3,"FullFormat"],[3,"CompactFormatBuilder"],[3,"CompactFormat"],[3,"PlainDecorator"],[3,"PlainRecordDecorator"],[3,"PlainSyncDecorator"],[3,"PlainSyncRecordDecorator"],[3,"TermDecoratorBuilder"],[3,"TermDecorator"],[3,"TermRecordDecorator"],[3,"TestStdoutWriter"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"i":[{"n":"self"},{"n":"t"}]}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"o":{"n":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"new","","Construct an empty vector",4,{"o":{"n":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"i":[{"n":"vec"}],"o":{"n":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"i":[{"n":"a"}],"o":{"n":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"i":[{"n":"self"}]}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"i":[{"n":"self"}]}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"i"}]}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"i":[{"n":"self"}]}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,null],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"i":[{"n":"vec"}],"o":{"n":"smallvec"}}],[11,"from","","",4,{"i":[{"n":"a"}],"o":{"n":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"smallvec"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",4,{"o":{"n":"smallvec"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"smallvec"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"smallvec"}],"o":{"n":"ordering"}}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_iter","","",4,null],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"PhfStrSet","string_cache::atom","",null,null],[12,"key","","",0,null],[12,"disps","","",0,null],[12,"atoms","","",0,null],[12,"hashes","","",0,null],[3,"EmptyStaticAtomSet","","",null,null],[3,"Atom","","",null,null],[6,"DefaultAtom","","Use this if you don’t care about static atoms.",null,null],[8,"StaticAtomSet","","",null,null],[10,"get","","",1,{"o":{"n":"phfstrset"}}],[10,"empty_string_index","","",1,{"o":{"n":"u32"}}],[11,"get","","",2,{"o":{"n":"phfstrset"}}],[11,"empty_string_index","","",2,{"o":{"n":"u32"}}],[11,"precomputed_hash","","",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_hash","","",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"default","","",3,{"o":{"n":"self"}}],[11,"hash","","",3,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"from","","",3,{"i":[{"g":["str"],"n":"cow"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"as_ref","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"serialize","","",3,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",3,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"to_ascii_uppercase","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_ascii_lowercase","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq_ignore_ascii_case","","",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"eq_str_ignore_ascii_case","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}]],"paths":[[3,"PhfStrSet"],[8,"StaticAtomSet"],[3,"EmptyStaticAtomSet"],[3,"Atom"]]};
searchIndex["string_cache_shared"] = {"doc":"","items":[[5,"pack_static","string_cache_shared","",null,{"i":[{"n":"u32"}],"o":{"n":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null]],"paths":[]};
searchIndex["string_enum"] = {"doc":"","items":[[5,"derive_string_enum","string_enum","Creates `.as_str()` and then implements `Debug` and `Display` using it.",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"usize"}}],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"usize"}}],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"usize"}}],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"strsimerror"}],"o":{"n":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["swc"] = {"doc":"","items":[[3,"Compiler","swc","",null,null],[11,"new","","",0,{"i":[{"n":"logger"},{"g":["codemap"],"n":"lrc"},{"n":"handler"},{"n":"threadpool"}],"o":{"n":"self"}}],[11,"parse_js","","TODO",0,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["module"],"n":"presult"}}]],"paths":[[3,"Compiler"]]};
searchIndex["swc_atoms"] = {"doc":"","items":[[3,"JsWordStaticSet","swc_atoms","",null,null],[6,"JsWord","","",null,null],[11,"get","","",0,{"o":{"n":"phfstrset"}}],[11,"empty_string_index","","",0,{"o":{"n":"u32"}}],[14,"js_word","","",null,null]],"paths":[[3,"JsWordStaticSet"]]};
searchIndex["swc_common"] = {"doc":"","items":[[0,"errors","swc_common","Error reporting for the swc project.",null,null],[4,"DiagnosticId","swc_common::errors","",null,null],[13,"Error","","",0,null],[13,"Lint","","",0,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",1,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",2,null],[11,"should_show_explain","","Check if should show explanations about \"rustc --explain\"",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[3,"EmitterWriter","","",null,null],[3,"HandlerFlags","","",null,null],[12,"can_emit_warnings","","",3,null],[12,"treat_err_as_bug","","",3,null],[12,"external_macro_backtrace","","",3,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",4,null],[13,"Always","","",4,null],[13,"Never","","",4,null],[4,"Level","","",null,null],[13,"Bug","","",5,null],[13,"Fatal","","",5,null],[13,"PhaseFatal","","",5,null],[13,"Error","","",5,null],[13,"Warning","","",5,null],[13,"Note","","",5,null],[13,"Help","","",5,null],[13,"Cancelled","","",5,null],[13,"FailureNote","","",5,null],[3,"CodeMap","","",null,null],[3,"FilePathMapping","","",null,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"Diagnostic","","",null,null],[3,"DiagnosticBuilder","","",null,null],[3,"Handler","","A handler deals with errors.",null,null],[11,"new","","",6,{"i":[{"n":"filepathmapping"}],"o":{"n":"self"}}],[11,"with_file_loader","","",6,{"i":[{"g":["fileloader"],"n":"box"},{"n":"filepathmapping"}],"o":{"n":"self"}}],[11,"path_mapping","","",6,{"i":[{"n":"self"}],"o":{"n":"filepathmapping"}}],[11,"file_exists","","",6,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"load_file","","",6,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["lrc"],"n":"result"}}],[11,"load_file_and_lines","","",6,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["lrc"],"n":"result"}}],[11,"files","","",6,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"ref"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",6,{"i":[{"n":"self"},{"n":"filename"},{"n":"string"}],"o":{"g":["filemap"],"n":"lrc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",6,{"i":[{"n":"self"},{"n":"filename"},{"n":"string"}],"o":{"g":["filemap"],"n":"lrc"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"loc"}}],[11,"lookup_line","","",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"g":["filemapandline","lrc"],"n":"result"}}],[11,"lookup_char_pos_adj","","",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"locwithopt"}}],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If there are gaps between lhs and rhs, the resulting union will cross these gaps. For this to work, the spans have to be:",6,{"i":[{"n":"self"},{"n":"span"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"span_to_string","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"string"}}],[11,"span_to_filename","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filename"}}],[11,"span_to_unmapped_path","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filename"}}],[11,"is_multiline","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"span_to_lines","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filelinesresult"}}],[11,"span_to_snippet","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["string","spansnippeterror"],"n":"result"}}],[11,"span_until_char","","Given a `Span`, try to get a shorter span ending before the first occurrence of `c` `char`",6,{"i":[{"n":"self"},{"n":"span"},{"n":"char"}],"o":{"n":"span"}}],[11,"span_through_char","","Given a `Span`, try to get a shorter span ending just after the first occurrence of `char` `c`.",6,{"i":[{"n":"self"},{"n":"span"},{"n":"char"}],"o":{"n":"span"}}],[11,"def_span","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"get_filemap","","",6,{"i":[{"n":"self"},{"n":"filename"}],"o":{"g":["lrc"],"n":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"charpos"}}],[11,"lookup_filemap_idx","","",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"usize"}}],[11,"count_lines","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"filepathmapping"}}],[11,"empty","","",7,{"o":{"n":"filepathmapping"}}],[11,"new","","",7,{"i":[{"n":"vec"}],"o":{"n":"filepathmapping"}}],[11,"map_prefix","","Applies any path prefix substitution as defined by the mapping. The return value is the remapped path and a boolean indicating whether the path was affected by the mapping.",7,null],[11,"file_exists","","",8,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"abs_path","","",8,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["pathbuf"],"n":"option"}}],[11,"read_file","","",8,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["string"],"n":"result"}}],[11,"lookup_char_pos","","",6,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"loc"}}],[11,"span_to_lines","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filelinesresult"}}],[11,"span_to_string","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"string"}}],[11,"span_to_filename","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"filename"}}],[11,"merge_spans","","",6,{"i":[{"n":"self"},{"n":"span"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"call_span_if_macro","","",6,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"ensure_filemap_source_present","","",6,{"i":[{"n":"self"},{"g":["filemap"],"n":"lrc"}],"o":{"n":"bool"}}],[11,"doctest_offset_line","","No op.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"usize"}}],[11,"new","","",9,{"i":[{"n":"level"},{"n":"str"}],"o":{"n":"self"}}],[11,"new_with_code","","",9,{"i":[{"n":"level"},{"g":["diagnosticid"],"n":"option"},{"n":"str"}],"o":{"n":"self"}}],[11,"new_note","","",9,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"new_warn","","",9,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"new_error","","",9,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"new_fatal","","",9,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"emit_to","","",9,{"i":[{"n":"self"},{"n":"handler"}]}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or canceled or it will panic when dropped).",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cancelled","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",9,{"i":[{"n":"self"},{"n":"span"},{"n":"t"}],"o":{"n":"self"}}],[11,"note_expected_found","","",9,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"}],"o":{"n":"self"}}],[11,"note_expected_found_extra","","",9,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"},{"n":"display"},{"n":"display"}],"o":{"n":"self"}}],[11,"note","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_note","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"warn","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_warn","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"help","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_help","","",9,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_suggestion_short","","Prints out a message with a suggested edit of the code. If the suggestion is presented inline it will only show the text message and not the text.",9,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",9,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"span_suggestions","","Prints out a message with multiple suggested edits of the code.",9,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"g":["string"],"n":"vec"}],"o":{"n":"self"}}],[11,"span","","",9,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"code","","",9,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"self"}}],[11,"from","","",9,{"i":[{"n":"rustcdiagnostic"}],"o":{"n":"self"}}],[11,"new","","",10,{"i":[{"n":"handler"},{"n":"level"},{"n":"str"}],"o":{"n":"self"}}],[11,"new_with_code","","",10,{"i":[{"n":"handler"},{"n":"level"},{"g":["diagnosticid"],"n":"option"},{"n":"str"}],"o":{"n":"self"}}],[11,"emit","","",10,{"i":[{"n":"self"}]}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or canceled or it will panic when dropped).",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"cancelled","","",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",10,{"i":[{"n":"self"},{"n":"span"},{"n":"t"}],"o":{"n":"self"}}],[11,"note_expected_found","","",10,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"}],"o":{"n":"self"}}],[11,"note_expected_found_extra","","",10,{"i":[{"n":"self"},{"n":"display"},{"n":"diagnosticstyledstring"},{"n":"diagnosticstyledstring"},{"n":"display"},{"n":"display"}],"o":{"n":"self"}}],[11,"note","","",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_note","","",10,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"warn","","",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_warn","","",10,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"help","","",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_help","","",10,{"i":[{"n":"self"},{"n":"s"},{"n":"str"}],"o":{"n":"self"}}],[11,"span_suggestion_short","","Prints out a message with a suggested edit of the code. If the suggestion is presented inline it will only show the text message and not the text.",10,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",10,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"n":"string"}],"o":{"n":"self"}}],[11,"span_suggestions","","Prints out a message with multiple suggested edits of the code.",10,{"i":[{"n":"self"},{"n":"span"},{"n":"str"},{"g":["string"],"n":"vec"}],"o":{"n":"self"}}],[11,"span","","",10,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"code","","",10,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"self"}}],[11,"from","","",10,{"i":[{"n":"builder"}],"o":{"n":"self"}}],[11,"should_show_explain","","Check if should show explanations about \"rustc --explain\"",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"with_tty_emitter","","",11,{"i":[{"n":"colorconfig"},{"n":"bool"},{"n":"bool"},{"g":["lrc"],"n":"option"}],"o":{"n":"self"}}],[11,"with_tty_emitter_and_flags","","",11,{"i":[{"n":"colorconfig"},{"g":["lrc"],"n":"option"},{"n":"handlerflags"}],"o":{"n":"self"}}],[11,"with_emitter","","",11,{"i":[{"g":["emitter"],"n":"box"},{"n":"handlerflags"}],"o":{"n":"self"}}],[11,"note","","",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"warn","","",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"error","","",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"fatal","","",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"diagnosticbuilder"}}],[11,"has_errors","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"abort_if_errors","","",11,{"i":[{"n":"self"}]}],[11,"from","","",11,{"i":[{"n":"rustchandler"}],"o":{"n":"self"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",12,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",12,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["pathbuf"],"n":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",12,{"i":[{"n":"self"},{"n":"path"}],"o":{"g":["string"],"n":"result"}}],[0,"pos","swc_common","",null,null],[0,"hygiene","swc_common::pos","Machinery for hygienic macros, inspired by the `MTWT[1]` paper.",null,null],[3,"SyntaxContext","swc_common::pos::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",13,null],[12,"prev_ctxt","","",13,null],[12,"modern","","",13,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[4,"MarkKind","","",null,null],[13,"Modern","","",14,null],[13,"Builtin","","",14,null],[13,"Legacy","","",14,null],[3,"HygieneData","","",null,null],[5,"default_edition","","",null,{"o":{"n":"edition"}}],[5,"set_default_edition","","",null,null],[5,"clear_markings","","",null,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",15,null],[12,"callee","","Information about the expansion.",15,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",16,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",16,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",16,null],[12,"edition","","Edition of the crate in which the macro is defined.",16,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",16,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",17,null],[13,"MacroBang","","e.g. `format!()`",17,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",17,null],[4,"CompilerDesugaringKind","","The kind of compiler desugaring.",null,null],[13,"DotFill","","",18,null],[13,"QuestionMark","","",18,null],[13,"Catch","","",18,null],[3,"BytePos","swc_common::pos","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",19,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",17,null],[13,"MacroBang","","e.g. `format!()`",17,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",17,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",15,null],[12,"callee","","Information about the expansion.",15,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",20,null],[12,"name_was_remapped","","True if the `name` field above has been modified by --remap-path-prefix",20,null],[12,"unmapped_path","","The unmapped path of the file that the source came from. Set to `None` if the FileMap was imported from an external crate.",20,null],[12,"crate_of_origin","","Indicates which crate this FileMap was imported from.",20,null],[12,"src","","The complete source code",20,null],[12,"src_hash","","The source code's hash",20,null],[12,"external_src","","The external source code (used for external crates, which will have a `None` value as `self.src`.",20,null],[12,"start_pos","","The start position of this source in the CodeMap",20,null],[12,"end_pos","","The end position of this source in the CodeMap",20,null],[12,"lines","","Locations of lines beginnings in the source code",20,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",20,null],[12,"non_narrow_chars","","Width of characters that are not narrow in the source code",20,null],[12,"name_hash","","A hash of the filename, used for speeding up the incr. comp. hashing.",20,null],[4,"FileName","","Differentiates between real files and common virtual files",null,null],[13,"Real","","",21,null],[13,"Macros","","e.g. \"std\" macros",21,null],[13,"QuoteExpansion","","call to `quote!`",21,null],[13,"Anon","","Command line",21,null],[13,"MacroExpansion","","Hack in src/libsyntax/parse.rs FIXME(jseyfried)",21,null],[13,"ProcMacroSourceCode","","",21,null],[13,"CfgSpec","","Strings provided as --cfg [cfgspec] stored in a crate_cfg",21,null],[13,"Custom","","Custom sources for explicit parser calls from plugins and drivers",21,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",16,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",16,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",16,null],[12,"edition","","Edition of the crate in which the macro is defined.",16,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",16,null],[3,"Span","","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[3,"SpanData","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",22,null],[12,"hi","","",22,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",22,null],[3,"SyntaxContext","","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[17,"NO_EXPANSION","","",null,null],[8,"Spanned","","Derive This trait can be derived with `#[derive(Spanned)]`.",null,null],[10,"span","","Get span of `self`.",23,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"span","","Creates a new single-byte span.",19,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","No op as span does not have any child.",24,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"span"}}],[8,"AstNode","swc_common","A marker trait for ast nodes.",null,null],[8,"Folder","","Folder based on a type system.",null,null],[10,"fold","","By default, this folds fields of `node` and reconstruct `node` with folded fields",25,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[8,"Fold","","Folder based on a type system.",null,null],[10,"fold","","By default, this folds fields of `node` and reconstruct `node` with folded fields",25,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[8,"FoldWith","","Trait implemented for types which know how to fold itself.",null,null],[10,"fold_children","","This is used by default implementation of `Fold<Self>::fold`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"fold_with","","Call `f.fold(self)`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"fmt","swc_common::errors","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","","",3,{"o":{"n":"handlerflags"}}],[11,"hash","","",5,null],[11,"hash","","",0,null],[11,"encode","","",0,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",5,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"colorconfig"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"diagnosticstyledstring"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"diagnosticstyledstring"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"diagnosticid"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"diagnosticid"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"colorconfig"}}],[11,"emit","","",27,null],[11,"should_show_explain","","",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"decode","","",0,{"i":[{"n":"__d"}],"o":{"g":["diagnosticid"],"n":"result"}}],[11,"decode","","",5,{"i":[{"n":"__d"}],"o":{"g":["level"],"n":"result"}}],[11,"fmt","swc_common::pos","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"ordering"}}],[11,"cmp","","",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"ordering"}}],[11,"cmp","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"ordering"}}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"ordering"}}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"le","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"gt","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"ge","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"le","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"gt","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"ge","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"le","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"gt","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"ge","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"from","","",29,{"i":[{"n":"span"}],"o":{"n":"multispan"}}],[11,"from","","",29,{"i":[{"g":["span"],"n":"vec"}],"o":{"n":"multispan"}}],[11,"from","","",21,{"i":[{"n":"pathbuf"}],"o":{"n":"filename"}}],[11,"default","","",28,{"o":{"n":"syntaxcontext"}}],[11,"default","","",24,{"o":{"n":"span"}}],[11,"decode","","",21,{"i":[{"n":"__d"}],"o":{"g":["filename"],"n":"result"}}],[11,"decode","","",20,{"i":[{"n":"d"}],"o":{"g":["filemap"],"n":"result"}}],[11,"decode","","",16,{"i":[{"n":"__d"}],"o":{"g":["nameandspan"],"n":"result"}}],[11,"decode","","",17,{"i":[{"n":"__d"}],"o":{"g":["expnformat"],"n":"result"}}],[11,"decode","","",15,{"i":[{"n":"__d"}],"o":{"g":["expninfo"],"n":"result"}}],[11,"decode","","",28,{"i":[{"n":"d"}],"o":{"g":["syntaxcontext"],"n":"result"}}],[11,"decode","swc_common::pos::hygiene","",30,{"i":[{"n":"__d"}],"o":{"g":["mark"],"n":"result"}}],[11,"decode","swc_common::pos","",19,{"i":[{"n":"d"}],"o":{"g":["bytepos"],"n":"result"}}],[11,"decode","swc_common::pos::hygiene","",18,{"i":[{"n":"__d"}],"o":{"g":["compilerdesugaringkind"],"n":"result"}}],[11,"decode","swc_common::pos","",29,{"i":[{"n":"__d"}],"o":{"g":["multispan"],"n":"result"}}],[11,"default_decode","","",24,{"i":[{"n":"d"}],"o":{"g":["span"],"n":"result"}}],[11,"add","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bytepos"}}],[11,"hash","","",24,null],[11,"hash","","",28,null],[11,"hash","","",29,null],[11,"hash","swc_common::pos::hygiene","",30,null],[11,"hash","swc_common::pos","",21,null],[11,"hash","","",19,null],[11,"hash","","",15,null],[11,"hash","swc_common::pos::hygiene","",18,null],[11,"hash","swc_common::pos","",22,null],[11,"hash","","",17,null],[11,"hash","","",16,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_common::pos::hygiene","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_common::pos","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_common::pos::hygiene","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"markkind"}],"o":{"n":"bool"}}],[11,"eq","swc_common::pos","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"expnformat"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"expnformat"}],"o":{"n":"bool"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"eq","swc_common::pos::hygiene","",30,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"bool"}}],[11,"eq","swc_common::pos","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"eq","swc_common::pos::hygiene","",18,{"i":[{"n":"self"},{"n":"compilerdesugaringkind"}],"o":{"n":"bool"}}],[11,"eq","swc_common::pos","",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"multispan"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"multispan"}],"o":{"n":"bool"}}],[11,"default_encode","","",24,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"sub","","",19,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bytepos"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"expnformat"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"expninfo"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"nameandspan"}}],[11,"clone","swc_common::pos::hygiene","",30,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"clone","swc_common::pos","",20,{"i":[{"n":"self"}],"o":{"n":"filemap"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"filename"}}],[11,"clone","swc_common::pos::hygiene","",18,{"i":[{"n":"self"}],"o":{"n":"compilerdesugaringkind"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"markkind"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"syntaxcontextdata"}}],[11,"clone","swc_common::pos","",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"multispan"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"spandata"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"syntaxcontext"}}],[11,"encode","","",21,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",15,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",17,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",16,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",29,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","","",20,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"encode","swc_common::pos::hygiene","",18,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","swc_common::pos","",28,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"encode","swc_common::pos::hygiene","",30,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"encode","swc_common::pos","",19,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"from_usize","","",19,{"i":[{"n":"usize"}],"o":{"n":"bytepos"}}],[11,"to_usize","","",19,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","swc_common::errors","",1,{"o":{"n":"diagnosticstyledstring"}}],[11,"push_normal","","",1,null],[11,"push_highlighted","","",1,null],[11,"normal","","",1,{"i":[{"n":"s"}],"o":{"n":"diagnosticstyledstring"}}],[11,"highlighted","","",1,{"i":[{"n":"s"}],"o":{"n":"diagnosticstyledstring"}}],[11,"content","","",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"stderr","","",27,{"i":[{"n":"colorconfig"},{"g":["rc"],"n":"option"},{"n":"bool"},{"n":"bool"}],"o":{"n":"emitterwriter"}}],[11,"new","","",27,{"i":[{"g":["write"],"n":"box"},{"g":["rc"],"n":"option"},{"n":"bool"},{"n":"bool"}],"o":{"n":"emitterwriter"}}],[11,"ui_testing","","",27,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"emitterwriter"}}],[11,"to_str","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_failure_note","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fold_with","swc_common","Call `f.fold(self)`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"empty","swc_common::pos","",28,{"o":{"n":"syntaxcontext"}}],[11,"allocate_directly","","",28,{"i":[{"n":"expninfo"}],"o":{"n":"syntaxcontext"}}],[11,"apply_mark","","Extend a syntax context with a given mark",28,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"syntaxcontext"}}],[11,"remove_mark","","Pulls a single mark off of the syntax context. This effectively moves the context up one macro definition level. That is, if we have a nested macro definition as follows:",28,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"marks","","",28,{"i":[{"n":"self"}],"o":{"g":["mark"],"n":"vec"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`:",28,{"i":[{"n":"self"},{"n":"mark"}],"o":{"g":["mark"],"n":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example:",28,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible:",28,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"modern","","",28,{"i":[{"n":"self"}],"o":{"n":"syntaxcontext"}}],[11,"outer","","",28,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"fresh","swc_common::pos::hygiene","",30,{"i":[{"n":"mark"}],"o":{"n":"mark"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",30,{"o":{"n":"mark"}}],[11,"as_u32","","",30,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_u32","","",30,{"i":[{"n":"u32"}],"o":{"n":"mark"}}],[11,"expn_info","","",30,{"i":[{"n":"self"}],"o":{"g":["expninfo"],"n":"option"}}],[11,"set_expn_info","","",30,null],[11,"modern","","",30,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"kind","","",30,{"i":[{"n":"self"}],"o":{"n":"markkind"}}],[11,"set_kind","","",30,null],[11,"is_descendant_of","","",30,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"bool"}}],[11,"least_ancestor","","Computes a mark such that both input marks are descendants of (or equal to) the returned mark. That is, the following holds:",30,{"i":[{"n":"mark"},{"n":"mark"}],"o":{"n":"mark"}}],[11,"new","","",31,{"o":{"n":"hygienedata"}}],[11,"name","swc_common::pos","",16,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"as_symbol","swc_common::pos::hygiene","",18,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"new","swc_common::pos","",20,{"i":[{"n":"filename"},{"n":"bool"},{"n":"filename"},{"n":"string"},{"n":"bytepos"}],"o":{"n":"filemap"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",20,null],[11,"line_begin_pos","","Return the BytePos of the beginning of the current line.",20,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"add_external_src","","Add externally loaded source. If the hash of the input doesn't match or no input is supplied via None, it is interpreted as an error and the corresponding enum variant is set. The return value signifies whether some kind of source is present.",20,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"get_line","","Get a line from the list of pre-computed line-beginnings. The line number here is 0-based.",20,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["cow"],"n":"option"}}],[11,"record_multibyte_char","","",20,null],[11,"record_width","","",20,null],[11,"is_real_file","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_imported","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"byte_length","","",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"count_lines","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",20,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"g":["usize"],"n":"option"}}],[11,"line_bounds","","",20,null],[11,"contains","","",20,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"is_real","","",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_macros","","",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","",29,{"o":{"n":"multispan"}}],[11,"from_span","","",29,{"i":[{"n":"span"}],"o":{"n":"multispan"}}],[11,"from_spans","","",29,{"i":[{"g":["span"],"n":"vec"}],"o":{"n":"multispan"}}],[11,"push_span_label","","",29,null],[11,"primary_span","","Selects the first primary span (if any)",29,{"i":[{"n":"self"}],"o":{"g":["span"],"n":"option"}}],[11,"primary_spans","","Returns all primary spans.",29,null],[11,"replace","","Replaces all occurrences of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",29,{"i":[{"n":"self"},{"n":"span"},{"n":"span"}],"o":{"n":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",29,{"i":[{"n":"self"}],"o":{"g":["spanlabel"],"n":"vec"}}],[11,"new","","",24,{"i":[{"n":"bytepos"},{"n":"bytepos"},{"n":"syntaxcontext"}],"o":{"n":"span"}}],[11,"data","","",24,{"i":[{"n":"self"}],"o":{"n":"spandata"}}],[11,"lo","","",24,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"with_lo","","",24,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"hi","","",24,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"with_hi","","",24,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"ctxt","","",24,{"i":[{"n":"self"}],"o":{"n":"syntaxcontext"}}],[11,"with_ctxt","","",24,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"span"}}],[11,"shrink_to_lo","","Returns a new span representing an empty span at the beginning of this span",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"shrink_to_hi","","Returns a new span representing an empty span at the end of this span",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"contains","","Return true if `self` fully encloses `other`.",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"parent","","The `Span` for the tokens in the previous macro expansion from which `self` was generated, if any",24,{"i":[{"n":"self"}],"o":{"g":["span"],"n":"option"}}],[11,"edition","","Edition of the crate from which this span came.",24,{"i":[{"n":"self"}],"o":{"n":"edition"}}],[11,"source_callee","","Return the source callee.",24,{"i":[{"n":"self"}],"o":{"g":["nameandspan"],"n":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_compiler_desugaring","","Check if this span arises from a compiler desugaring of kind `kind`.",24,{"i":[{"n":"self"},{"n":"compilerdesugaringkind"}],"o":{"n":"bool"}}],[11,"compiler_desugaring_kind","","Return the compiler desugaring that created this span, or None if this span is not from a desugaring.",24,{"i":[{"n":"self"}],"o":{"g":["compilerdesugaringkind"],"n":"option"}}],[11,"allows_unsafe","","Check if a span is \"internal\" to a macro in which `unsafe` can be used without triggering the `unsafe_code` lint",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"macro_backtrace","","",24,{"i":[{"n":"self"}],"o":{"g":["macrobacktrace"],"n":"vec"}}],[11,"to","","Return a `Span` that would enclose both `self` and `end`.",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"between","","Return a `Span` between the end of `self` to the beginning of `end`.",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"until","","Return a `Span` between the beginning of `self` to the beginning of `end`.",24,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"from_inner_byte_pos","","",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"span"}}],[11,"apply_mark","","",24,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"span"}}],[11,"remove_mark","","",24,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"adjust","","",24,{"i":[{"n":"self"},{"n":"mark"}],"o":{"g":["mark"],"n":"option"}}],[11,"glob_adjust","","",24,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"reverse_glob_adjust","","",24,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"modern","","",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"with_lo","","",22,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"with_hi","","",22,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"with_ctxt","","",22,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"span"}}]],"paths":[[4,"DiagnosticId"],[3,"DiagnosticStyledString"],[8,"Emitter"],[3,"HandlerFlags"],[4,"ColorConfig"],[4,"Level"],[3,"CodeMap"],[3,"FilePathMapping"],[3,"RealFileLoader"],[3,"Diagnostic"],[3,"DiagnosticBuilder"],[3,"Handler"],[8,"FileLoader"],[3,"SyntaxContextData"],[4,"MarkKind"],[3,"ExpnInfo"],[3,"NameAndSpan"],[4,"ExpnFormat"],[4,"CompilerDesugaringKind"],[3,"BytePos"],[3,"FileMap"],[4,"FileName"],[3,"SpanData"],[8,"Spanned"],[3,"Span"],[8,"Folder"],[8,"FoldWith"],[3,"EmitterWriter"],[3,"SyntaxContext"],[3,"MultiSpan"],[3,"Mark"],[3,"HygieneData"]]};
searchIndex["swc_ecma_ast"] = {"doc":"","items":[[3,"Class","swc_ecma_ast","",null,null],[12,"span","","",0,null],[12,"body","","",0,null],[12,"super_class","","",0,null],[3,"ClassMethod","","",null,null],[12,"span","","",1,null],[12,"key","","",1,null],[12,"function","","",1,null],[12,"kind","","",1,null],[12,"static_token","","",1,null],[3,"ClassDecl","","",null,null],[12,"ident","","",2,null],[12,"class","","",2,null],[3,"FnDecl","","",null,null],[12,"ident","","",3,null],[12,"function","","",3,null],[3,"VarDecl","","",null,null],[12,"span","","",4,null],[12,"kind","","",4,null],[12,"decls","","",4,null],[3,"VarDeclarator","","",null,null],[12,"span","","",5,null],[12,"name","","",5,null],[12,"init","","Initialization expresion.",5,null],[3,"ArrayLit","","Array literal.",null,null],[12,"span","","",6,null],[12,"elems","","",6,null],[3,"ArrowExpr","","",null,null],[12,"span","","",7,null],[12,"params","","",7,null],[12,"body","","",7,null],[12,"is_generator","","",7,null],[12,"is_async","","",7,null],[3,"AssignExpr","","",null,null],[12,"span","","",8,null],[12,"op","","",8,null],[12,"left","","",8,null],[12,"right","","",8,null],[3,"AwaitExpr","","",null,null],[12,"span","","",9,null],[12,"arg","","",9,null],[3,"BinExpr","","",null,null],[12,"span","","",10,null],[12,"op","","",10,null],[12,"left","","",10,null],[12,"right","","",10,null],[3,"CallExpr","","",null,null],[12,"span","","",11,null],[12,"callee","","",11,null],[12,"args","","",11,null],[3,"ClassExpr","","Class expression.",null,null],[12,"ident","","",12,null],[12,"class","","",12,null],[3,"CondExpr","","",null,null],[12,"test","","",13,null],[12,"cons","","",13,null],[12,"alt","","",13,null],[3,"ExprOrSpread","","",null,null],[12,"spread","","",14,null],[12,"expr","","",14,null],[3,"FnExpr","","Function expression.",null,null],[12,"ident","","",15,null],[12,"function","","",15,null],[3,"MemberExpr","","",null,null],[12,"span","","",16,null],[12,"obj","","",16,null],[12,"prop","","",16,null],[12,"computed","","",16,null],[3,"MetaPropExpr","","",null,null],[12,"meta","","",17,null],[12,"prop","","",17,null],[3,"NewExpr","","",null,null],[12,"span","","",18,null],[12,"callee","","",18,null],[12,"args","","",18,null],[3,"ObjectLit","","Object literal.",null,null],[12,"span","","",19,null],[12,"props","","",19,null],[3,"ParenExpr","","",null,null],[12,"span","","",20,null],[12,"expr","","",20,null],[3,"SeqExpr","","",null,null],[12,"span","","TODO: Calculate",21,null],[12,"exprs","","",21,null],[3,"ThisExpr","","",null,null],[12,"span","","",22,null],[3,"TplElement","","",null,null],[12,"span","","",23,null],[12,"tail","","",23,null],[12,"cooked","","",23,null],[12,"raw","","",23,null],[3,"TplLit","","",null,null],[12,"span","","",24,null],[12,"tag","","",24,null],[12,"exprs","","",24,null],[12,"quasis","","",24,null],[3,"UnaryExpr","","",null,null],[12,"span","","",25,null],[12,"op","","",25,null],[12,"arg","","",25,null],[3,"UpdateExpr","","",null,null],[12,"span","","",26,null],[12,"op","","",26,null],[12,"prefix","","",26,null],[12,"arg","","",26,null],[3,"YieldExpr","","",null,null],[12,"span","","",27,null],[12,"arg","","",27,null],[12,"delegate","","",27,null],[3,"Function","","Common parts of function and method.",null,null],[12,"params","","",28,null],[12,"span","","",28,null],[12,"body","","",28,null],[12,"generator","","`Some` if it's a generator.",28,null],[12,"async","","`Some` if it's an async function.",28,null],[3,"Bool","","",null,null],[12,"span","","",29,null],[12,"value","","",29,null],[3,"Null","","",null,null],[12,"span","","",30,null],[3,"Number","","",null,null],[12,"span","","",31,null],[12,"value","","",31,null],[3,"Regex","","",null,null],[12,"span","","",32,null],[12,"exp","","",32,null],[12,"flags","","",32,null],[3,"Str","","",null,null],[12,"span","","",33,null],[12,"value","","",33,null],[12,"has_escape","","This includes line escape.",33,null],[3,"Module","","",null,null],[12,"span","","",34,null],[12,"body","","",34,null],[3,"ExportAll","","`export * from 'mod'`",null,null],[12,"span","","",35,null],[12,"src","","",35,null],[3,"ExportSpecifier","","",null,null],[12,"span","","",36,null],[12,"orig","","`foo` in `export { foo as bar }`",36,null],[12,"exported","","`Some(bar)` in `export { foo as bar }`",36,null],[3,"ImportDecl","","",null,null],[12,"span","","",37,null],[12,"specifiers","","",37,null],[12,"src","","",37,null],[3,"ImportDefault","","e.g. `import foo from 'mod.js'`",null,null],[12,"span","","",38,null],[12,"local","","",38,null],[3,"ImportSpecific","","e.g. local = foo, imported = None `import { foo } from 'mod.js'` e.g. local = bar, imported = Some(foo) for `import { foo as bar } from 'mod.js'`",null,null],[12,"span","","",39,null],[12,"local","","",39,null],[12,"imported","","",39,null],[3,"ImportStarAs","","e.g. `import * as foo from 'mod.js'`.",null,null],[12,"span","","",40,null],[12,"local","","",40,null],[3,"NamedExport","","`export { foo } from 'mod'` `export { foo as bar } from 'mod'`",null,null],[12,"span","","",41,null],[12,"specifiers","","",41,null],[12,"src","","",41,null],[3,"ArrayPat","","",null,null],[12,"span","","",42,null],[12,"elems","","",42,null],[3,"AssignPat","","",null,null],[12,"span","","",43,null],[12,"left","","",43,null],[12,"right","","",43,null],[3,"AssignPatProp","","`{key}` or `{key = value}`",null,null],[12,"span","","",44,null],[12,"key","","",44,null],[12,"value","","",44,null],[3,"KeyValuePatProp","","`{key: value}`",null,null],[12,"key","","",45,null],[12,"value","","",45,null],[3,"ObjectPat","","",null,null],[12,"span","","",46,null],[12,"props","","",46,null],[3,"RestPat","","",null,null],[12,"dot3_token","","",47,null],[12,"pat","","",47,null],[3,"AssignProp","","",null,null],[12,"key","","",48,null],[12,"value","","",48,null],[3,"GetterProp","","",null,null],[12,"span","","",49,null],[12,"key","","",49,null],[12,"body","","",49,null],[3,"KeyValueProp","","",null,null],[12,"key","","",50,null],[12,"value","","",50,null],[3,"MethodProp","","",null,null],[12,"key","","",51,null],[12,"function","","",51,null],[3,"SetterProp","","",null,null],[12,"span","","",52,null],[12,"key","","",52,null],[12,"param","","",52,null],[12,"body","","",52,null],[3,"BlockStmt","","Use when only block statements are allowed.",null,null],[12,"span","","Span including the braces.",53,null],[12,"stmts","","",53,null],[3,"BreakStmt","","",null,null],[12,"span","","",54,null],[12,"label","","",54,null],[3,"CatchClause","","",null,null],[12,"span","","",55,null],[12,"param","","",55,null],[12,"body","","",55,null],[3,"ContinueStmt","","",null,null],[12,"span","","",56,null],[12,"label","","",56,null],[3,"DebuggerStmt","","",null,null],[12,"span","","",57,null],[3,"DoWhileStmt","","",null,null],[12,"span","","",58,null],[12,"test","","",58,null],[12,"body","","",58,null],[3,"EmptyStmt","","",null,null],[12,"span","","Span of semicolon.",59,null],[3,"ForInStmt","","",null,null],[12,"span","","",60,null],[12,"left","","",60,null],[12,"right","","",60,null],[12,"body","","",60,null],[3,"ForOfStmt","","",null,null],[12,"span","","",61,null],[12,"left","","",61,null],[12,"right","","",61,null],[12,"body","","",61,null],[3,"ForStmt","","",null,null],[12,"span","","",62,null],[12,"init","","",62,null],[12,"test","","",62,null],[12,"update","","",62,null],[12,"body","","",62,null],[3,"IfStmt","","",null,null],[12,"span","","",63,null],[12,"test","","",63,null],[12,"cons","","",63,null],[12,"alt","","",63,null],[3,"LabeledStmt","","",null,null],[12,"span","","",64,null],[12,"label","","",64,null],[12,"body","","",64,null],[3,"ReturnStmt","","",null,null],[12,"span","","",65,null],[12,"arg","","",65,null],[3,"SwitchCase","","",null,null],[12,"span","","",66,null],[12,"test","","None for `default:`",66,null],[12,"cons","","",66,null],[3,"SwitchStmt","","",null,null],[12,"span","","",67,null],[12,"discriminant","","",67,null],[12,"cases","","",67,null],[3,"ThrowStmt","","",null,null],[12,"span","","",68,null],[12,"arg","","",68,null],[3,"TryStmt","","",null,null],[12,"span","","",69,null],[12,"block","","",69,null],[12,"handler","","",69,null],[12,"finalizer","","",69,null],[3,"WhileStmt","","",null,null],[12,"span","","",70,null],[12,"test","","",70,null],[12,"body","","",70,null],[3,"WithStmt","","",null,null],[12,"span","","",71,null],[12,"obj","","",71,null],[12,"body","","",71,null],[3,"Ident","","Ident with span.",null,null],[12,"span","","",72,null],[12,"sym","","",72,null],[4,"ClassMethodKind","","",null,null],[13,"Constructor","","",73,null],[13,"Method","","",73,null],[13,"Getter","","",73,null],[13,"Setter","","",73,null],[4,"Decl","","",null,null],[13,"Class","","",74,null],[13,"Fn","","",74,null],[13,"Var","","",74,null],[4,"VarDeclKind","","",null,null],[13,"Var","","`var`",75,null],[13,"Let","","`let`",75,null],[13,"Const","","`const`",75,null],[4,"BlockStmtOrExpr","","",null,null],[13,"BlockStmt","","",76,null],[13,"Expr","","",76,null],[4,"Expr","","",null,null],[13,"This","","",77,null],[13,"Array","","",77,null],[13,"Object","","",77,null],[13,"Fn","","",77,null],[13,"Unary","","",77,null],[13,"Update","","`++v`, `--v`, `v++`, `v--`",77,null],[13,"Bin","","",77,null],[13,"Assign","","",77,null],[13,"Member","","A member expression. If computed is true, the node corresponds to a computed (a[b]) member expression and property is an Expression. If computed is false, the node corresponds to a static (a.b) member expression and property is an Identifier.",77,null],[13,"Cond","","true ? 'a' : 'b'",77,null],[13,"Call","","",77,null],[13,"New","","`new Cat()`",77,null],[13,"Seq","","",77,null],[13,"Ident","","",77,null],[13,"Lit","","",77,null],[13,"Tpl","","",77,null],[13,"Arrow","","",77,null],[13,"Class","","",77,null],[13,"Yield","","",77,null],[13,"MetaProp","","",77,null],[13,"Await","","",77,null],[13,"Paren","","",77,null],[4,"ExprOrSuper","","",null,null],[13,"Super","","",78,null],[13,"Expr","","",78,null],[4,"PatOrExpr","","",null,null],[13,"Pat","","",79,null],[13,"Expr","","",79,null],[4,"Lit","","",null,null],[13,"Str","","",80,null],[13,"Bool","","",80,null],[13,"Null","","",80,null],[13,"Num","","",80,null],[13,"Regex","","",80,null],[4,"ModuleItem","","",null,null],[13,"Stmt","","",81,null],[13,"ModuleDecl","","",81,null],[4,"ExportDefaultDecl","","",null,null],[13,"Class","","",82,null],[13,"Fn","","",82,null],[13,"Var","","",82,null],[4,"ImportSpecifier","","",null,null],[13,"Specific","","",83,null],[13,"Default","","",83,null],[13,"Namespace","","",83,null],[4,"ModuleDecl","","",null,null],[13,"Import","","",84,null],[13,"ExportDecl","","",84,null],[13,"ExportNamed","","",84,null],[13,"ExportDefaultDecl","","",84,null],[13,"ExportDefaultExpr","","",84,null],[13,"ExportAll","","",84,null],[4,"AssignOp","","",null,null],[13,"Assign","","`=`",85,null],[13,"AddAssign","","`+=`",85,null],[13,"SubAssign","","`-=`",85,null],[13,"MulAssign","","`*=`",85,null],[13,"DivAssign","","`/=`",85,null],[13,"ModAssign","","`%=`",85,null],[13,"LShiftAssign","","`<<=`",85,null],[13,"RShiftAssign","","`>>=`",85,null],[13,"ZeroFillRShiftAssign","","`>>>=`",85,null],[13,"BitOrAssign","","`|=`",85,null],[13,"BitXorAssign","","`^=`",85,null],[13,"BitAndAssign","","`&=`",85,null],[13,"ExpAssign","","`**=`",85,null],[4,"BinaryOp","","",null,null],[13,"EqEq","","`==`",86,null],[13,"NotEq","","`!=`",86,null],[13,"EqEqEq","","`===\"`",86,null],[13,"NotEqEq","","`!==`",86,null],[13,"Lt","","`<`",86,null],[13,"LtEq","","`<=`",86,null],[13,"Gt","","`>`",86,null],[13,"GtEq","","`>=`",86,null],[13,"LShift","","`<<`",86,null],[13,"RShift","","`>>`",86,null],[13,"ZeroFillRShift","","`>>>`",86,null],[13,"Add","","`+`",86,null],[13,"Sub","","`-`",86,null],[13,"Mul","","`*`",86,null],[13,"Div","","`/`",86,null],[13,"Mod","","`%`",86,null],[13,"BitOr","","`|`",86,null],[13,"BitXor","","`^`",86,null],[13,"BitAnd","","`&`",86,null],[13,"LogicalOr","","`||`",86,null],[13,"LogicalAnd","","`&&`",86,null],[13,"In","","`in`",86,null],[13,"InstanceOf","","`instanceof`",86,null],[13,"Exp","","`**`",86,null],[4,"UnaryOp","","",null,null],[13,"Minus","","`-`",87,null],[13,"Plus","","`+`",87,null],[13,"Bang","","`!`",87,null],[13,"Tilde","","`~`",87,null],[13,"TypeOf","","`typeof`",87,null],[13,"Void","","`void`",87,null],[13,"Delete","","`delete`",87,null],[4,"UpdateOp","","",null,null],[13,"PlusPlus","","`++`",88,null],[13,"MinusMinus","","`--`",88,null],[4,"ObjectPatProp","","",null,null],[13,"KeyValue","","",89,null],[13,"Assign","","",89,null],[4,"Pat","","",null,null],[13,"Ident","","",90,null],[13,"Array","","",90,null],[13,"Rest","","",90,null],[13,"Object","","",90,null],[13,"Assign","","",90,null],[13,"Expr","","Only for for-in / for-of loops. This is syntatically valid.",90,null],[4,"Prop","","",null,null],[13,"Shorthand","","`a` in `{ a, }`",91,null],[13,"KeyValue","","`key: value` in `{ key: value, }`",91,null],[13,"Assign","","This is invalid for object literal.",91,null],[13,"Getter","","",91,null],[13,"Setter","","",91,null],[13,"Method","","",91,null],[4,"PropName","","",null,null],[13,"Ident","","",92,null],[13,"Str","","String literal.",92,null],[13,"Num","","Numeric literal.",92,null],[13,"Computed","","",92,null],[4,"Stmt","","",null,null],[13,"Expr","","",93,null],[13,"Block","","",93,null],[13,"Empty","","",93,null],[13,"Debugger","","",93,null],[13,"With","","",93,null],[13,"Return","","",93,null],[13,"Labeled","","",93,null],[13,"Break","","",93,null],[13,"Continue","","",93,null],[13,"If","","",93,null],[13,"Switch","","",93,null],[13,"Throw","","",93,null],[13,"Try","","A try statement. If handler is null then finalizer must be a BlockStmt.",93,null],[13,"While","","",93,null],[13,"DoWhile","","",93,null],[13,"For","","",93,null],[13,"ForIn","","",93,null],[13,"ForOf","","",93,null],[13,"Decl","","",93,null],[4,"VarDeclOrExpr","","",null,null],[13,"VarDecl","","",94,null],[13,"Expr","","",94,null],[4,"VarDeclOrPat","","",null,null],[13,"VarDecl","","",95,null],[13,"Pat","","",95,null],[11,"span","","",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",0,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"class"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"class"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"class"}],"o":{"n":"bool"}}],[11,"span","","",1,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",1,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"classmethod"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"classmethod"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"classmethod"}],"o":{"n":"bool"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"classmethodkind"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"classmethodkind"}],"o":{"n":"bool"}}],[11,"hash","","",73,null],[11,"fold_children","","",73,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"from","","",74,{"i":[{"n":"classdecl"}],"o":{"n":"self"}}],[11,"from","","",74,{"i":[{"n":"fndecl"}],"o":{"n":"self"}}],[11,"from","","",74,{"i":[{"n":"vardecl"}],"o":{"n":"self"}}],[11,"span","","",74,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",74,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"decl"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"decl"}],"o":{"n":"bool"}}],[11,"ne","","",74,{"i":[{"n":"self"},{"n":"decl"}],"o":{"n":"bool"}}],[11,"span","","",3,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",3,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"fndecl"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"bool"}}],[11,"span","","",2,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",2,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"classdecl"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"classdecl"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"classdecl"}],"o":{"n":"bool"}}],[11,"span","","",4,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",4,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"vardecl"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"vardecl"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"vardecl"}],"o":{"n":"bool"}}],[11,"fold_children","","",75,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"as_str","","",75,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"vardeclkind"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"vardeclkind"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",75,{"i":[{"n":"self"},{"n":"vardeclkind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",75,{"i":[{"n":"self"},{"n":"vardeclkind"}],"o":{"n":"ordering"}}],[11,"hash","","",75,null],[11,"span","","",5,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",5,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"vardeclarator"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"vardeclarator"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"vardeclarator"}],"o":{"n":"bool"}}],[11,"from","","",77,{"i":[{"n":"thisexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"arraylit"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"objectlit"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"fnexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"unaryexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"updateexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"binexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"assignexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"memberexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"condexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"callexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"newexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"seqexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"lit"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"tpllit"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"arrowexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"classexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"yieldexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"metapropexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"awaitexpr"}],"o":{"n":"self"}}],[11,"from","","",77,{"i":[{"n":"parenexpr"}],"o":{"n":"self"}}],[11,"span","","",77,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",77,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"span","","",22,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",22,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"thisexpr"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"thisexpr"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"thisexpr"}],"o":{"n":"bool"}}],[11,"span","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",6,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"arraylit"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"arraylit"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"arraylit"}],"o":{"n":"bool"}}],[11,"span","","",19,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",19,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"objectlit"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"objectlit"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"objectlit"}],"o":{"n":"bool"}}],[11,"span","","",25,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",25,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"unaryexpr"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"unaryexpr"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"unaryexpr"}],"o":{"n":"bool"}}],[11,"span","","",26,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",26,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"updateexpr"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"updateexpr"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"updateexpr"}],"o":{"n":"bool"}}],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",10,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"binexpr"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"binexpr"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"binexpr"}],"o":{"n":"bool"}}],[11,"span","","",15,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",15,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"fnexpr"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"fnexpr"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"fnexpr"}],"o":{"n":"bool"}}],[11,"span","","",12,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",12,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"classexpr"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"classexpr"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"classexpr"}],"o":{"n":"bool"}}],[11,"span","","",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",8,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"assignexpr"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"assignexpr"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"assignexpr"}],"o":{"n":"bool"}}],[11,"span","","",16,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",16,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"memberexpr"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"memberexpr"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"memberexpr"}],"o":{"n":"bool"}}],[11,"span","","",13,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",13,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"condexpr"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"condexpr"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"condexpr"}],"o":{"n":"bool"}}],[11,"span","","",11,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",11,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"callexpr"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"callexpr"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"callexpr"}],"o":{"n":"bool"}}],[11,"span","","",18,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",18,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"newexpr"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"newexpr"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"newexpr"}],"o":{"n":"bool"}}],[11,"span","","",21,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",21,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"seqexpr"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"seqexpr"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"seqexpr"}],"o":{"n":"bool"}}],[11,"span","","",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",7,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"arrowexpr"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"arrowexpr"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"arrowexpr"}],"o":{"n":"bool"}}],[11,"span","","",27,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",27,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"yieldexpr"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"yieldexpr"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"yieldexpr"}],"o":{"n":"bool"}}],[11,"span","","",17,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",17,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"metapropexpr"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"metapropexpr"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"metapropexpr"}],"o":{"n":"bool"}}],[11,"span","","",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",9,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"awaitexpr"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"awaitexpr"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"awaitexpr"}],"o":{"n":"bool"}}],[11,"span","","",24,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",24,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"tpllit"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"tpllit"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"tpllit"}],"o":{"n":"bool"}}],[11,"span","","",23,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",23,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"tplelement"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"tplelement"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"tplelement"}],"o":{"n":"bool"}}],[11,"span","","",20,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",20,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"parenexpr"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"parenexpr"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"parenexpr"}],"o":{"n":"bool"}}],[11,"from","","",78,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","","",78,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"span","","",78,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",78,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"exprorsuper"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"exprorsuper"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"exprorsuper"}],"o":{"n":"bool"}}],[11,"fold_children","","",14,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprorspread"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"exprorspread"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"exprorspread"}],"o":{"n":"bool"}}],[11,"span","","",14,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"from","","",76,{"i":[{"n":"blockstmt"}],"o":{"n":"self"}}],[11,"from","","",76,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"span","","",76,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",76,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"blockstmtorexpr"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"blockstmtorexpr"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"blockstmtorexpr"}],"o":{"n":"bool"}}],[11,"from","","",79,{"i":[{"g":["pat"],"n":"box"}],"o":{"n":"self"}}],[11,"from","","",79,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"span","","",79,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",79,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"patorexpr"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"patorexpr"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"patorexpr"}],"o":{"n":"bool"}}],[11,"span","","",28,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",28,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"function"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"function"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"function"}],"o":{"n":"bool"}}],[11,"from","","",80,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",80,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","",80,{"i":[{"n":"null"}],"o":{"n":"self"}}],[11,"from","","",80,{"i":[{"n":"number"}],"o":{"n":"self"}}],[11,"from","","",80,{"i":[{"n":"regex"}],"o":{"n":"self"}}],[11,"span","","",80,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",80,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"span","","",33,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",33,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"span","","",29,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",29,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"span","","",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",30,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"null"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"null"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"null"}],"o":{"n":"bool"}}],[11,"span","","",32,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",32,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"regex"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"regex"}],"o":{"n":"bool"}}],[11,"span","","",31,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",31,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"number"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"span","","",34,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",34,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"module"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"module"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"module"}],"o":{"n":"bool"}}],[11,"from","","",81,{"i":[{"n":"stmt"}],"o":{"n":"self"}}],[11,"from","","",81,{"i":[{"n":"moduledecl"}],"o":{"n":"self"}}],[11,"span","","",81,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",81,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"moduleitem"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"moduleitem"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"moduleitem"}],"o":{"n":"bool"}}],[11,"from","","",84,{"i":[{"n":"importdecl"}],"o":{"n":"self"}}],[11,"from","","",84,{"i":[{"n":"decl"}],"o":{"n":"self"}}],[11,"from","","",84,{"i":[{"n":"namedexport"}],"o":{"n":"self"}}],[11,"from","","",84,{"i":[{"n":"exportdefaultdecl"}],"o":{"n":"self"}}],[11,"from","","",84,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"from","","",84,{"i":[{"n":"exportall"}],"o":{"n":"self"}}],[11,"span","","",84,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",84,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"moduledecl"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"moduledecl"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"moduledecl"}],"o":{"n":"bool"}}],[11,"span","","",37,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",37,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"importdecl"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"importdecl"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"importdecl"}],"o":{"n":"bool"}}],[11,"span","","",35,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",35,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"exportall"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"exportall"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"exportall"}],"o":{"n":"bool"}}],[11,"span","","",41,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",41,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"namedexport"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"namedexport"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"namedexport"}],"o":{"n":"bool"}}],[11,"from","","",82,{"i":[{"n":"classexpr"}],"o":{"n":"self"}}],[11,"from","","",82,{"i":[{"n":"fnexpr"}],"o":{"n":"self"}}],[11,"from","","",82,{"i":[{"n":"vardecl"}],"o":{"n":"self"}}],[11,"span","","",82,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",82,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"exportdefaultdecl"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"exportdefaultdecl"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"exportdefaultdecl"}],"o":{"n":"bool"}}],[11,"from","","",83,{"i":[{"n":"importspecific"}],"o":{"n":"self"}}],[11,"from","","",83,{"i":[{"n":"importdefault"}],"o":{"n":"self"}}],[11,"from","","",83,{"i":[{"n":"importstaras"}],"o":{"n":"self"}}],[11,"span","","",83,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",83,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"importspecifier"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"importspecifier"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"importspecifier"}],"o":{"n":"bool"}}],[11,"span","","",38,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",38,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"importdefault"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"importdefault"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"importdefault"}],"o":{"n":"bool"}}],[11,"span","","",40,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",40,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"importstaras"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"importstaras"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"importstaras"}],"o":{"n":"bool"}}],[11,"span","","",39,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",39,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"importspecific"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"importspecific"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"importspecific"}],"o":{"n":"bool"}}],[11,"span","","",36,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",36,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"exportspecifier"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"exportspecifier"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"exportspecifier"}],"o":{"n":"bool"}}],[11,"precedence","","",86,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"fold_children","","",86,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"as_str","","",86,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"binaryop"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"binaryop"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",86,{"i":[{"n":"self"},{"n":"binaryop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",86,{"i":[{"n":"self"},{"n":"binaryop"}],"o":{"n":"ordering"}}],[11,"hash","","",86,null],[11,"fold_children","","",85,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"as_str","","",85,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"assignop"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"assignop"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",85,{"i":[{"n":"self"},{"n":"assignop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",85,{"i":[{"n":"self"},{"n":"assignop"}],"o":{"n":"ordering"}}],[11,"hash","","",85,null],[11,"fold_children","","",88,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"as_str","","",88,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"updateop"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"updateop"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",88,{"i":[{"n":"self"},{"n":"updateop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",88,{"i":[{"n":"self"},{"n":"updateop"}],"o":{"n":"ordering"}}],[11,"hash","","",88,null],[11,"fold_children","","",87,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"as_str","","",87,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"unaryop"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"unaryop"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",87,{"i":[{"n":"self"},{"n":"unaryop"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",87,{"i":[{"n":"self"},{"n":"unaryop"}],"o":{"n":"ordering"}}],[11,"hash","","",87,null],[11,"from","","",90,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"arraypat"}],"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"restpat"}],"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"objectpat"}],"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"assignpat"}],"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"span","","",90,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",90,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"pat"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"bool"}}],[11,"span","","",42,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",42,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"arraypat"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"arraypat"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"arraypat"}],"o":{"n":"bool"}}],[11,"span","","",46,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",46,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"objectpat"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"objectpat"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"objectpat"}],"o":{"n":"bool"}}],[11,"span","","",43,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",43,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"assignpat"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"assignpat"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"assignpat"}],"o":{"n":"bool"}}],[11,"span","","",47,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",47,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"restpat"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"restpat"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"restpat"}],"o":{"n":"bool"}}],[11,"from","","",89,{"i":[{"n":"keyvaluepatprop"}],"o":{"n":"self"}}],[11,"from","","",89,{"i":[{"n":"assignpatprop"}],"o":{"n":"self"}}],[11,"span","","",89,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",89,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"objectpatprop"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"objectpatprop"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"objectpatprop"}],"o":{"n":"bool"}}],[11,"span","","",45,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",45,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"keyvaluepatprop"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"keyvaluepatprop"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"keyvaluepatprop"}],"o":{"n":"bool"}}],[11,"span","","",44,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",44,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"assignpatprop"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"assignpatprop"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"assignpatprop"}],"o":{"n":"bool"}}],[11,"from","","",91,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"keyvalueprop"}],"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"assignprop"}],"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"getterprop"}],"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"setterprop"}],"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"methodprop"}],"o":{"n":"self"}}],[11,"span","","",91,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",91,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"prop"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"prop"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"prop"}],"o":{"n":"bool"}}],[11,"span","","",50,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",50,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"keyvalueprop"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"keyvalueprop"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"keyvalueprop"}],"o":{"n":"bool"}}],[11,"span","","",48,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",48,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"assignprop"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"assignprop"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"assignprop"}],"o":{"n":"bool"}}],[11,"span","","",49,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",49,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"getterprop"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"getterprop"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"getterprop"}],"o":{"n":"bool"}}],[11,"span","","",52,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",52,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"setterprop"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"setterprop"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"setterprop"}],"o":{"n":"bool"}}],[11,"span","","",51,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",51,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"methodprop"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"methodprop"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"methodprop"}],"o":{"n":"bool"}}],[11,"from","","",92,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"from","","",92,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",92,{"i":[{"n":"number"}],"o":{"n":"self"}}],[11,"from","","",92,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"span","","",92,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",92,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"propname"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"propname"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"propname"}],"o":{"n":"bool"}}],[11,"span","","",53,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",53,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"blockstmt"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"blockstmt"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"blockstmt"}],"o":{"n":"bool"}}],[11,"from","","",93,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"blockstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"emptystmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"debuggerstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"withstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"returnstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"labeledstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"breakstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"continuestmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"ifstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"switchstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"throwstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"trystmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"whilestmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"dowhilestmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"forstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"forinstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"forofstmt"}],"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"decl"}],"o":{"n":"self"}}],[11,"span","","",93,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",93,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"stmt"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"bool"}}],[11,"ne","","",93,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"bool"}}],[11,"span","","",59,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",59,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"emptystmt"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"emptystmt"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"emptystmt"}],"o":{"n":"bool"}}],[11,"span","","",57,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",57,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"debuggerstmt"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"debuggerstmt"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"debuggerstmt"}],"o":{"n":"bool"}}],[11,"span","","",71,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",71,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"withstmt"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"withstmt"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"withstmt"}],"o":{"n":"bool"}}],[11,"span","","",65,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",65,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"returnstmt"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"returnstmt"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"returnstmt"}],"o":{"n":"bool"}}],[11,"span","","",64,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",64,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"labeledstmt"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"labeledstmt"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"labeledstmt"}],"o":{"n":"bool"}}],[11,"span","","",54,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",54,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"breakstmt"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"breakstmt"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"breakstmt"}],"o":{"n":"bool"}}],[11,"span","","",56,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",56,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"continuestmt"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"continuestmt"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"continuestmt"}],"o":{"n":"bool"}}],[11,"span","","",63,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",63,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ifstmt"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"ifstmt"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"ifstmt"}],"o":{"n":"bool"}}],[11,"span","","",67,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",67,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"switchstmt"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"switchstmt"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"switchstmt"}],"o":{"n":"bool"}}],[11,"span","","",68,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",68,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"throwstmt"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"throwstmt"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"throwstmt"}],"o":{"n":"bool"}}],[11,"span","","",69,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",69,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"trystmt"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"trystmt"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"trystmt"}],"o":{"n":"bool"}}],[11,"span","","",70,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",70,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"whilestmt"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"whilestmt"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"whilestmt"}],"o":{"n":"bool"}}],[11,"span","","",58,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",58,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"dowhilestmt"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"dowhilestmt"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"dowhilestmt"}],"o":{"n":"bool"}}],[11,"span","","",62,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",62,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"forstmt"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"forstmt"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"forstmt"}],"o":{"n":"bool"}}],[11,"span","","",60,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",60,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"forinstmt"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"forinstmt"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"forinstmt"}],"o":{"n":"bool"}}],[11,"span","","",61,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",61,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"forofstmt"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"forofstmt"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"forofstmt"}],"o":{"n":"bool"}}],[11,"span","","",66,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",66,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"switchcase"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"switchcase"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"switchcase"}],"o":{"n":"bool"}}],[11,"span","","",55,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",55,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"catchclause"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"catchclause"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"catchclause"}],"o":{"n":"bool"}}],[11,"from","","",95,{"i":[{"n":"vardecl"}],"o":{"n":"self"}}],[11,"from","","",95,{"i":[{"n":"pat"}],"o":{"n":"self"}}],[11,"span","","",95,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",95,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"vardeclorpat"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"vardeclorpat"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"vardeclorpat"}],"o":{"n":"bool"}}],[11,"from","","",94,{"i":[{"n":"vardecl"}],"o":{"n":"self"}}],[11,"from","","",94,{"i":[{"g":["expr"],"n":"box"}],"o":{"n":"self"}}],[11,"span","","",94,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",94,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"vardeclorexpr"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"vardeclorexpr"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"vardeclorexpr"}],"o":{"n":"bool"}}],[6,"RegexFlags","","",null,null],[11,"span","","",72,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"fold_children","","",72,{"i":[{"n":"self"},{"n":"__folder"}],"o":{"n":"self"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"le","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"gt","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"ge","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"cmp","","",72,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",72,{"i":[{"n":"jsword"},{"n":"span"}],"o":{"n":"self"}}],[14,"op","","Creates a corresponding operator.",null,null]],"paths":[[3,"Class"],[3,"ClassMethod"],[3,"ClassDecl"],[3,"FnDecl"],[3,"VarDecl"],[3,"VarDeclarator"],[3,"ArrayLit"],[3,"ArrowExpr"],[3,"AssignExpr"],[3,"AwaitExpr"],[3,"BinExpr"],[3,"CallExpr"],[3,"ClassExpr"],[3,"CondExpr"],[3,"ExprOrSpread"],[3,"FnExpr"],[3,"MemberExpr"],[3,"MetaPropExpr"],[3,"NewExpr"],[3,"ObjectLit"],[3,"ParenExpr"],[3,"SeqExpr"],[3,"ThisExpr"],[3,"TplElement"],[3,"TplLit"],[3,"UnaryExpr"],[3,"UpdateExpr"],[3,"YieldExpr"],[3,"Function"],[3,"Bool"],[3,"Null"],[3,"Number"],[3,"Regex"],[3,"Str"],[3,"Module"],[3,"ExportAll"],[3,"ExportSpecifier"],[3,"ImportDecl"],[3,"ImportDefault"],[3,"ImportSpecific"],[3,"ImportStarAs"],[3,"NamedExport"],[3,"ArrayPat"],[3,"AssignPat"],[3,"AssignPatProp"],[3,"KeyValuePatProp"],[3,"ObjectPat"],[3,"RestPat"],[3,"AssignProp"],[3,"GetterProp"],[3,"KeyValueProp"],[3,"MethodProp"],[3,"SetterProp"],[3,"BlockStmt"],[3,"BreakStmt"],[3,"CatchClause"],[3,"ContinueStmt"],[3,"DebuggerStmt"],[3,"DoWhileStmt"],[3,"EmptyStmt"],[3,"ForInStmt"],[3,"ForOfStmt"],[3,"ForStmt"],[3,"IfStmt"],[3,"LabeledStmt"],[3,"ReturnStmt"],[3,"SwitchCase"],[3,"SwitchStmt"],[3,"ThrowStmt"],[3,"TryStmt"],[3,"WhileStmt"],[3,"WithStmt"],[3,"Ident"],[4,"ClassMethodKind"],[4,"Decl"],[4,"VarDeclKind"],[4,"BlockStmtOrExpr"],[4,"Expr"],[4,"ExprOrSuper"],[4,"PatOrExpr"],[4,"Lit"],[4,"ModuleItem"],[4,"ExportDefaultDecl"],[4,"ImportSpecifier"],[4,"ModuleDecl"],[4,"AssignOp"],[4,"BinaryOp"],[4,"UnaryOp"],[4,"UpdateOp"],[4,"ObjectPatProp"],[4,"Pat"],[4,"Prop"],[4,"PropName"],[4,"Stmt"],[4,"VarDeclOrExpr"],[4,"VarDeclOrPat"]]};
searchIndex["swc_ecma_parser"] = {"doc":"","items":[[3,"FileMapInput","swc_ecma_parser","",null,null],[3,"Parser","","EcmaScript parser.",null,null],[3,"Config","","",null,null],[12,"num_sep","","Support numeric separator.",0,null],[12,"fn_bind","","Support function bind expression.",0,null],[3,"Session","","",null,null],[12,"cfg","","",1,null],[12,"logger","","",1,null],[12,"handler","","",1,null],[0,"input","","",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"filemapinput"}}],[11,"from","","",2,{"i":[{"n":"filemap"}],"o":{"n":"self"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"peek","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"peek_ahead","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"uncons_while","","",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["str"],"n":"option"}}],[11,"record_new_line","","",2,{"i":[{"n":"self"},{"n":"bytepos"}]}],[11,"start_pos","","",2,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"parse_expr","","",3,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"presult"}}],[11,"new","","",3,{"i":[{"n":"session"},{"n":"i"}],"o":{"n":"self"}}],[11,"parse_script","","",3,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"presult"}}],[11,"parse_module","","",3,{"i":[{"n":"self"}],"o":{"g":["module"],"n":"presult"}}],[6,"PResult","","",null,null],[8,"Input","","",null,null],[10,"peek","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"peek_ahead","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"record_new_line","","",4,{"i":[{"n":"self"},{"n":"bytepos"}]}],[10,"start_pos","","",4,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[10,"uncons_while","","Takes items from stream, testing each one with predicate. returns the range of items which passed predicate.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["str"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"default","","",0,{"o":{"n":"config"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"session"}}],[11,"record_new_line","","",4,{"i":[{"n":"self"},{"n":"bytepos"}]}]],"paths":[[3,"Config"],[3,"Session"],[3,"FileMapInput"],[3,"Parser"],[8,"Input"]]};
searchIndex["swc_ecmascript"] = {"doc":"","items":[],"paths":[]};
searchIndex["swc_macros"] = {"doc":"Macros used by swc project.","items":[],"paths":[]};
searchIndex["swc_macros_common"] = {"doc":"","items":[[5,"call_site","swc_macros_common","",null,{"o":{"n":"t"}}],[5,"def_site","","`Span::def_site().located_at(Span::call_site()).as_token()`",null,{"o":{"n":"t"}}],[5,"print","","`attr` - tokens inside `#[]`. e.g. `derive(EqIgnoreSpan)`, ast_node",null,{"i":[{"n":"str"},{"n":"t"}],"o":{"n":"tokenstream"}}],[5,"is_attr_name","","",null,{"i":[{"n":"attribute"},{"n":"str"}],"o":{"n":"bool"}}],[5,"doc_str","","Returns `None` if `attr` is not a doc attribute.",null,{"i":[{"n":"attribute"}],"o":{"g":["string"],"n":"option"}}],[0,"binder","","Example",null,null],[3,"Binder","swc_macros_common::binder","Used to bind whole struct or enum.",null,null],[3,"VariantBinder","","Variant.",null,null],[3,"BindedField","","Binded field. Note that this struct acts like a binded variable for `quote!`.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"binder"}}],[11,"new","","`attrs`",0,null],[11,"new_from","","",0,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"variants","","",0,{"i":[{"n":"self"}],"o":{"g":["variantbinder"],"n":"vec"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"variantbinder"}}],[11,"new","","",1,null],[11,"variant_name","","",1,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"data","","",1,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"attrs","","",1,null],[11,"qual_path","","`EnumName::VariantName` for enum, and `StructName` for struct.",1,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"bind","","`prefix`",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"bindedfield"}}],[11,"idx","","",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"name","","Name of field binding.",2,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"field","","",2,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[0,"derive","swc_macros_common","",null,null],[3,"Derive","swc_macros_common::derive","Generics of derived impl item.",null,null],[11,"all_generic_fields","","",3,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"vec"}}],[11,"add_where_predicates","","",3,{"i":[{"n":"self"},{"n":"i"}]}],[11,"bound_self","","Add `Self: #trait_`.",3,{"i":[{"n":"self"},{"n":"path"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"derive"}}],[11,"new","","",3,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"defaultness","","Set `defaultness`",3,{"i":[{"n":"self"},{"g":["default"],"n":"option"}]}],[11,"unsafety","","Set `unsafety`",3,{"i":[{"n":"self"},{"g":["unsafe"],"n":"option"}]}],[11,"input","","",3,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"append_to","","",3,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"itemimpl"}}],[0,"prelude","swc_macros_common","",null,null],[3,"TokenStream","swc_macros_common::prelude","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",4,null],[13,"Ident","","An identifier.",4,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",4,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",4,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[8,"SpanExt","","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","","",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",5,{"i":[{"n":"self"}],"o":{"n":"token"}}],[10,"into_pm2_span","","",5,{"i":[{"n":"self"}],"o":{"n":"span"}}],[3,"Group","","A delimited token stream.",null,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[8,"IdentExt","","Extension trait for [syn::Ident][].",null,null],[10,"new_ident_with","","Creates a new ident with same span by applying `map` to `self`.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"ident"}}],[8,"ToTokensExt","","",null,null],[11,"dump","","",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"first_last","","Usage: `Quote::new(body.first_last())`",7,{"i":[{"n":"self"}],"o":{"n":"firstlast"}}],[5,"comment","","Creates a comment from `s`.",null,{"i":[{"n":"s"}],"o":{"n":"attribute"}}],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",8,null],[13,"Brace","","`{ ... }`",8,null],[13,"Bracket","","`[ ... ]`",8,null],[13,"None","","`Ø ... Ø`",8,null],[3,"Group","","A delimited token stream.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"TokenStream","","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",4,null],[13,"Ident","","An identifier.",4,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",4,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",4,null],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",9,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",9,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[4,"Element","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",10,null],[13,"End","","",10,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",10,null],[13,"End","","",10,null],[3,"Punctuated","","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","swc_macros_common::prelude::token","`_`",null,null],[12,"0","","",11,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",12,null],[3,"Add","","`+`",null,null],[12,"0","","",13,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",14,null],[3,"And","","`&`",null,null],[12,"0","","",15,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",16,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",17,null],[3,"At","","`@`",null,null],[12,"0","","",18,null],[3,"Bang","","`!`",null,null],[12,"0","","",19,null],[3,"Caret","","`^`",null,null],[12,"0","","",20,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",21,null],[3,"Colon","","`:`",null,null],[12,"0","","",22,null],[3,"Colon2","","`::`",null,null],[12,"0","","",23,null],[3,"Comma","","`,`",null,null],[12,"0","","",24,null],[3,"Div","","`/`",null,null],[12,"0","","",25,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",26,null],[3,"Dollar","","`$`",null,null],[12,"0","","",27,null],[3,"Dot","","`.`",null,null],[12,"0","","",28,null],[3,"Dot2","","`..`",null,null],[12,"0","","",29,null],[3,"Dot3","","`...`",null,null],[12,"0","","",30,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",31,null],[3,"Eq","","`=`",null,null],[12,"0","","",32,null],[3,"EqEq","","`==`",null,null],[12,"0","","",33,null],[3,"Ge","","`>=`",null,null],[12,"0","","",34,null],[3,"Gt","","`>`",null,null],[12,"0","","",35,null],[3,"Le","","`<=`",null,null],[12,"0","","",36,null],[3,"Lt","","`<`",null,null],[12,"0","","",37,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",38,null],[3,"Ne","","`!=`",null,null],[12,"0","","",39,null],[3,"Or","","`|`",null,null],[12,"0","","",40,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",41,null],[3,"OrOr","","`||`",null,null],[12,"0","","",42,null],[3,"Pound","","`#`",null,null],[12,"0","","",43,null],[3,"Question","","`?`",null,null],[12,"0","","",44,null],[3,"RArrow","","`->`",null,null],[12,"0","","",45,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",46,null],[3,"Rem","","`%`",null,null],[12,"0","","",47,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",48,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",49,null],[3,"Semi","","`;`",null,null],[12,"0","","",50,null],[3,"Shl","","`<<`",null,null],[12,"0","","",51,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",52,null],[3,"Shr","","`>>`",null,null],[12,"0","","",53,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",54,null],[3,"Star","","`*`",null,null],[12,"0","","",55,null],[3,"Sub","","`-`",null,null],[12,"0","","",56,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",57,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",58,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",59,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",60,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",61,null],[3,"As","","`as`",null,null],[12,"0","","",62,null],[3,"Auto","","`auto`",null,null],[12,"0","","",63,null],[3,"Box","","`box`",null,null],[12,"0","","",64,null],[3,"Break","","`break`",null,null],[12,"0","","",65,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",66,null],[3,"Catch","","`catch`",null,null],[12,"0","","",67,null],[3,"Const","","`const`",null,null],[12,"0","","",68,null],[3,"Continue","","`continue`",null,null],[12,"0","","",69,null],[3,"Crate","","`crate`",null,null],[12,"0","","",70,null],[3,"Default","","`default`",null,null],[12,"0","","",71,null],[3,"Do","","`do`",null,null],[12,"0","","",72,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",73,null],[3,"Else","","`else`",null,null],[12,"0","","",74,null],[3,"Enum","","`enum`",null,null],[12,"0","","",75,null],[3,"Extern","","`extern`",null,null],[12,"0","","",76,null],[3,"Fn","","`fn`",null,null],[12,"0","","",77,null],[3,"For","","`for`",null,null],[12,"0","","",78,null],[3,"If","","`if`",null,null],[12,"0","","",79,null],[3,"Impl","","`impl`",null,null],[12,"0","","",80,null],[3,"In","","`in`",null,null],[12,"0","","",81,null],[3,"Let","","`let`",null,null],[12,"0","","",82,null],[3,"Loop","","`loop`",null,null],[12,"0","","",83,null],[3,"Macro","","`macro`",null,null],[12,"0","","",84,null],[3,"Match","","`match`",null,null],[12,"0","","",85,null],[3,"Mod","","`mod`",null,null],[12,"0","","",86,null],[3,"Move","","`move`",null,null],[12,"0","","",87,null],[3,"Mut","","`mut`",null,null],[12,"0","","",88,null],[3,"Pub","","`pub`",null,null],[12,"0","","",89,null],[3,"Ref","","`ref`",null,null],[12,"0","","",90,null],[3,"Return","","`return`",null,null],[12,"0","","",91,null],[3,"Self_","","`self`",null,null],[12,"0","","",92,null],[3,"Static","","`static`",null,null],[12,"0","","",93,null],[3,"Struct","","`struct`",null,null],[12,"0","","",94,null],[3,"Super","","`super`",null,null],[12,"0","","",95,null],[3,"Trait","","`trait`",null,null],[12,"0","","",96,null],[3,"Type","","`type`",null,null],[12,"0","","",97,null],[3,"Union","","`union`",null,null],[12,"0","","",98,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",99,null],[3,"Use","","`use`",null,null],[12,"0","","",100,null],[3,"Where","","`where`",null,null],[12,"0","","",101,null],[3,"While","","`while`",null,null],[12,"0","","",102,null],[3,"Yield","","`yield`",null,null],[12,"0","","",103,null],[0,"buffer","swc_macros_common::prelude","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","swc_macros_common::prelude::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[0,"punctuated","swc_macros_common::prelude","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","swc_macros_common::prelude::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",10,null],[13,"End","","",10,null],[0,"synom","swc_macros_common::prelude","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[8,"Synom","swc_macros_common::prelude::synom","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","A short name of the type being parsed.",104,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",105,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",105,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",105,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",105,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","swc_macros_common::prelude::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",106,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[6,"PResult","swc_macros_common::prelude::synom","The result of a `Synom` parser.",null,null],[3,"ParseError","","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"spanned","swc_macros_common::prelude","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","swc_macros_common::prelude::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",107,{"i":[{"n":"self"}],"o":{"n":"span"}}],[5,"parse","swc_macros_common::prelude","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_file","","Parse the content of a file of Rust code.",null,{"i":[{"n":"str"}],"o":{"g":["file","parseerror"],"n":"result"}}],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",108,null],[12,"ident","","",108,null],[12,"colon_token","","",108,null],[12,"bounds","","",108,null],[12,"eq_token","","",108,null],[12,"default","","",108,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",109,null],[12,"block","","",109,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",110,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",110,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",110,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",110,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",110,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",111,null],[12,"name","","",111,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",112,null],[12,"const_token","","",112,null],[12,"ident","","",112,null],[12,"colon_token","","",112,null],[12,"ty","","",112,null],[12,"default","","",112,null],[12,"semi_token","","",112,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",113,null],[12,"limits","","",113,null],[12,"hi","","",113,null],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",null,null],[12,"ident","","",114,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",115,null],[12,"let_token","","",115,null],[12,"pats","","",115,null],[12,"ty","","",115,null],[12,"init","","",115,null],[12,"semi_token","","",115,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",116,null],[12,"expr","","",116,null],[12,"as_token","","",116,null],[12,"ty","","",116,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",117,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",117,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",117,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",118,null],[12,"if_token","","",118,null],[12,"cond","","",118,null],[12,"then_branch","","",118,null],[12,"else_branch","","",118,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",119,null],[13,"Array","","A fixed size array type: `[T; n]`.",119,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",119,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",119,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",119,null],[13,"Never","","The never type: `!`.",119,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",119,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",119,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",119,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",119,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",119,null],[13,"Group","","A type contained within invisible delimiters.",119,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",119,null],[13,"Macro","","A macro in the type position.",119,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",119,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",120,null],[12,"vis","","",120,null],[12,"defaultness","","",120,null],[12,"type_token","","",120,null],[12,"ident","","",120,null],[12,"generics","","",120,null],[12,"eq_token","","",120,null],[12,"ty","","",120,null],[12,"semi_token","","",120,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",121,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",122,null],[12,"unsafe_token","","",122,null],[12,"block","","",122,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",123,null],[12,"mutability","","",123,null],[12,"ident","","",123,null],[12,"subpat","","",123,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",124,null],[12,"type_token","","",124,null],[12,"ident","","",124,null],[12,"generics","","",124,null],[12,"colon_token","","",124,null],[12,"bounds","","",124,null],[12,"default","","",124,null],[12,"semi_token","","",124,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",125,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",125,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",126,null],[12,"brace_token","","",126,null],[12,"fields","","",126,null],[12,"dot2_token","","",126,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",127,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",128,null],[12,"lifetime","","",128,null],[12,"mutability","","",128,null],[12,"self_token","","",128,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",129,null],[12,"continue_token","","",129,null],[12,"label","","",129,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",130,null],[12,"predicates","","",130,null],[5,"parse_error","","An error with a default error message.",null,{"o":{"g":["parseerror"],"n":"result"}}],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",131,null],[12,"left","","",131,null],[12,"op","","",131,null],[12,"right","","",131,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",132,null],[13,"Brace","","",132,null],[13,"Bracket","","",132,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",133,null],[12,"elem","","",133,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",134,null],[12,"colon_token","","",134,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",135,null],[12,"vis","","",135,null],[12,"const_token","","",135,null],[12,"ident","","",135,null],[12,"colon_token","","",135,null],[12,"ty","","",135,null],[12,"eq_token","","",135,null],[12,"expr","","",135,null],[12,"semi_token","","",135,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",136,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",137,null],[12,"label","","",137,null],[12,"while_token","","",137,null],[12,"let_token","","",137,null],[12,"pats","","",137,null],[12,"eq_token","","",137,null],[12,"expr","","",137,null],[12,"body","","",137,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",138,null],[12,"lt_token","","",138,null],[12,"lifetimes","","",138,null],[12,"gt_token","","",138,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",139,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",139,null],[13,"Unit","","Unit struct or unit variant such as `None`.",139,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",140,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",140,null],[13,"Byte","","A byte literal: `b'f'`.",140,null],[13,"Char","","A character literal: `'a'`.",140,null],[13,"Int","","An integer literal: `1` or `1u16`.",140,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",140,null],[13,"Bool","","A boolean literal: `true` or `false`.",140,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",140,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",141,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",142,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",143,null],[12,"from","","",143,null],[12,"limits","","",143,null],[12,"to","","",143,null],[0,"visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[8,"Visit","swc_macros_common::prelude::visit","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",144,null],[11,"visit_angle_bracketed_generic_arguments","","",144,null],[11,"visit_arg_captured","","",144,null],[11,"visit_arg_self","","",144,null],[11,"visit_arg_self_ref","","",144,null],[11,"visit_arm","","",144,null],[11,"visit_attr_style","","",144,null],[11,"visit_attribute","","",144,null],[11,"visit_bare_fn_arg","","",144,null],[11,"visit_bare_fn_arg_name","","",144,null],[11,"visit_bin_op","","",144,null],[11,"visit_binding","","",144,null],[11,"visit_block","","",144,null],[11,"visit_bound_lifetimes","","",144,null],[11,"visit_const_param","","",144,null],[11,"visit_data","","",144,null],[11,"visit_data_enum","","",144,null],[11,"visit_data_struct","","",144,null],[11,"visit_data_union","","",144,null],[11,"visit_derive_input","","",144,null],[11,"visit_expr","","",144,null],[11,"visit_expr_array","","",144,null],[11,"visit_expr_assign","","",144,null],[11,"visit_expr_assign_op","","",144,null],[11,"visit_expr_binary","","",144,null],[11,"visit_expr_block","","",144,null],[11,"visit_expr_box","","",144,null],[11,"visit_expr_break","","",144,null],[11,"visit_expr_call","","",144,null],[11,"visit_expr_cast","","",144,null],[11,"visit_expr_catch","","",144,null],[11,"visit_expr_closure","","",144,null],[11,"visit_expr_continue","","",144,null],[11,"visit_expr_field","","",144,null],[11,"visit_expr_for_loop","","",144,null],[11,"visit_expr_group","","",144,null],[11,"visit_expr_if","","",144,null],[11,"visit_expr_if_let","","",144,null],[11,"visit_expr_in_place","","",144,null],[11,"visit_expr_index","","",144,null],[11,"visit_expr_lit","","",144,null],[11,"visit_expr_loop","","",144,null],[11,"visit_expr_macro","","",144,null],[11,"visit_expr_match","","",144,null],[11,"visit_expr_method_call","","",144,null],[11,"visit_expr_paren","","",144,null],[11,"visit_expr_path","","",144,null],[11,"visit_expr_range","","",144,null],[11,"visit_expr_reference","","",144,null],[11,"visit_expr_repeat","","",144,null],[11,"visit_expr_return","","",144,null],[11,"visit_expr_struct","","",144,null],[11,"visit_expr_try","","",144,null],[11,"visit_expr_tuple","","",144,null],[11,"visit_expr_type","","",144,null],[11,"visit_expr_unary","","",144,null],[11,"visit_expr_unsafe","","",144,null],[11,"visit_expr_verbatim","","",144,null],[11,"visit_expr_while","","",144,null],[11,"visit_expr_while_let","","",144,null],[11,"visit_expr_yield","","",144,null],[11,"visit_field","","",144,null],[11,"visit_field_pat","","",144,null],[11,"visit_field_value","","",144,null],[11,"visit_fields","","",144,null],[11,"visit_fields_named","","",144,null],[11,"visit_fields_unnamed","","",144,null],[11,"visit_file","","",144,null],[11,"visit_fn_arg","","",144,null],[11,"visit_fn_decl","","",144,null],[11,"visit_foreign_item","","",144,null],[11,"visit_foreign_item_fn","","",144,null],[11,"visit_foreign_item_static","","",144,null],[11,"visit_foreign_item_type","","",144,null],[11,"visit_foreign_item_verbatim","","",144,null],[11,"visit_generic_argument","","",144,null],[11,"visit_generic_method_argument","","",144,null],[11,"visit_generic_param","","",144,null],[11,"visit_generics","","",144,null],[11,"visit_ident","","",144,null],[11,"visit_impl_item","","",144,null],[11,"visit_impl_item_const","","",144,null],[11,"visit_impl_item_macro","","",144,null],[11,"visit_impl_item_method","","",144,null],[11,"visit_impl_item_type","","",144,null],[11,"visit_impl_item_verbatim","","",144,null],[11,"visit_index","","",144,null],[11,"visit_item","","",144,null],[11,"visit_item_const","","",144,null],[11,"visit_item_enum","","",144,null],[11,"visit_item_extern_crate","","",144,null],[11,"visit_item_fn","","",144,null],[11,"visit_item_foreign_mod","","",144,null],[11,"visit_item_impl","","",144,null],[11,"visit_item_macro","","",144,null],[11,"visit_item_macro2","","",144,null],[11,"visit_item_mod","","",144,null],[11,"visit_item_static","","",144,null],[11,"visit_item_struct","","",144,null],[11,"visit_item_trait","","",144,null],[11,"visit_item_type","","",144,null],[11,"visit_item_union","","",144,null],[11,"visit_item_use","","",144,null],[11,"visit_item_verbatim","","",144,null],[11,"visit_label","","",144,null],[11,"visit_lifetime","","",144,null],[11,"visit_lifetime_def","","",144,null],[11,"visit_lit","","",144,null],[11,"visit_lit_bool","","",144,null],[11,"visit_lit_byte","","",144,null],[11,"visit_lit_byte_str","","",144,null],[11,"visit_lit_char","","",144,null],[11,"visit_lit_float","","",144,null],[11,"visit_lit_int","","",144,null],[11,"visit_lit_str","","",144,null],[11,"visit_lit_verbatim","","",144,null],[11,"visit_local","","",144,null],[11,"visit_macro","","",144,null],[11,"visit_macro_delimiter","","",144,null],[11,"visit_member","","",144,null],[11,"visit_meta","","",144,null],[11,"visit_meta_list","","",144,null],[11,"visit_meta_name_value","","",144,null],[11,"visit_method_sig","","",144,null],[11,"visit_method_turbofish","","",144,null],[11,"visit_nested_meta","","",144,null],[11,"visit_parenthesized_generic_arguments","","",144,null],[11,"visit_pat","","",144,null],[11,"visit_pat_box","","",144,null],[11,"visit_pat_ident","","",144,null],[11,"visit_pat_lit","","",144,null],[11,"visit_pat_macro","","",144,null],[11,"visit_pat_path","","",144,null],[11,"visit_pat_range","","",144,null],[11,"visit_pat_ref","","",144,null],[11,"visit_pat_slice","","",144,null],[11,"visit_pat_struct","","",144,null],[11,"visit_pat_tuple","","",144,null],[11,"visit_pat_tuple_struct","","",144,null],[11,"visit_pat_verbatim","","",144,null],[11,"visit_pat_wild","","",144,null],[11,"visit_path","","",144,null],[11,"visit_path_arguments","","",144,null],[11,"visit_path_segment","","",144,null],[11,"visit_predicate_eq","","",144,null],[11,"visit_predicate_lifetime","","",144,null],[11,"visit_predicate_type","","",144,null],[11,"visit_qself","","",144,null],[11,"visit_range_limits","","",144,null],[11,"visit_return_type","","",144,null],[11,"visit_span","","",144,null],[11,"visit_stmt","","",144,null],[11,"visit_trait_bound","","",144,null],[11,"visit_trait_bound_modifier","","",144,null],[11,"visit_trait_item","","",144,null],[11,"visit_trait_item_const","","",144,null],[11,"visit_trait_item_macro","","",144,null],[11,"visit_trait_item_method","","",144,null],[11,"visit_trait_item_type","","",144,null],[11,"visit_trait_item_verbatim","","",144,null],[11,"visit_type","","",144,null],[11,"visit_type_array","","",144,null],[11,"visit_type_bare_fn","","",144,null],[11,"visit_type_group","","",144,null],[11,"visit_type_impl_trait","","",144,null],[11,"visit_type_infer","","",144,null],[11,"visit_type_macro","","",144,null],[11,"visit_type_never","","",144,null],[11,"visit_type_param","","",144,null],[11,"visit_type_param_bound","","",144,null],[11,"visit_type_paren","","",144,null],[11,"visit_type_path","","",144,null],[11,"visit_type_ptr","","",144,null],[11,"visit_type_reference","","",144,null],[11,"visit_type_slice","","",144,null],[11,"visit_type_trait_object","","",144,null],[11,"visit_type_tuple","","",144,null],[11,"visit_type_verbatim","","",144,null],[11,"visit_un_op","","",144,null],[11,"visit_use_glob","","",144,null],[11,"visit_use_group","","",144,null],[11,"visit_use_name","","",144,null],[11,"visit_use_path","","",144,null],[11,"visit_use_rename","","",144,null],[11,"visit_use_tree","","",144,null],[11,"visit_variant","","",144,null],[11,"visit_vis_crate","","",144,null],[11,"visit_vis_public","","",144,null],[11,"visit_vis_restricted","","",144,null],[11,"visit_visibility","","",144,null],[11,"visit_where_clause","","",144,null],[11,"visit_where_predicate","","",144,null],[5,"visit_abi","","",null,null],[5,"visit_angle_bracketed_generic_arguments","","",null,null],[5,"visit_arg_captured","","",null,null],[5,"visit_arg_self","","",null,null],[5,"visit_arg_self_ref","","",null,null],[5,"visit_arm","","",null,null],[5,"visit_attr_style","","",null,null],[5,"visit_attribute","","",null,null],[5,"visit_bare_fn_arg","","",null,null],[5,"visit_bare_fn_arg_name","","",null,null],[5,"visit_bin_op","","",null,null],[5,"visit_binding","","",null,null],[5,"visit_block","","",null,null],[5,"visit_bound_lifetimes","","",null,null],[5,"visit_const_param","","",null,null],[5,"visit_data","","",null,null],[5,"visit_data_enum","","",null,null],[5,"visit_data_struct","","",null,null],[5,"visit_data_union","","",null,null],[5,"visit_derive_input","","",null,null],[5,"visit_expr","","",null,null],[5,"visit_expr_array","","",null,null],[5,"visit_expr_assign","","",null,null],[5,"visit_expr_assign_op","","",null,null],[5,"visit_expr_binary","","",null,null],[5,"visit_expr_block","","",null,null],[5,"visit_expr_box","","",null,null],[5,"visit_expr_break","","",null,null],[5,"visit_expr_call","","",null,null],[5,"visit_expr_cast","","",null,null],[5,"visit_expr_catch","","",null,null],[5,"visit_expr_closure","","",null,null],[5,"visit_expr_continue","","",null,null],[5,"visit_expr_field","","",null,null],[5,"visit_expr_for_loop","","",null,null],[5,"visit_expr_group","","",null,null],[5,"visit_expr_if","","",null,null],[5,"visit_expr_if_let","","",null,null],[5,"visit_expr_in_place","","",null,null],[5,"visit_expr_index","","",null,null],[5,"visit_expr_lit","","",null,null],[5,"visit_expr_loop","","",null,null],[5,"visit_expr_macro","","",null,null],[5,"visit_expr_match","","",null,null],[5,"visit_expr_method_call","","",null,null],[5,"visit_expr_paren","","",null,null],[5,"visit_expr_path","","",null,null],[5,"visit_expr_range","","",null,null],[5,"visit_expr_reference","","",null,null],[5,"visit_expr_repeat","","",null,null],[5,"visit_expr_return","","",null,null],[5,"visit_expr_struct","","",null,null],[5,"visit_expr_try","","",null,null],[5,"visit_expr_tuple","","",null,null],[5,"visit_expr_type","","",null,null],[5,"visit_expr_unary","","",null,null],[5,"visit_expr_unsafe","","",null,null],[5,"visit_expr_verbatim","","",null,null],[5,"visit_expr_while","","",null,null],[5,"visit_expr_while_let","","",null,null],[5,"visit_expr_yield","","",null,null],[5,"visit_field","","",null,null],[5,"visit_field_pat","","",null,null],[5,"visit_field_value","","",null,null],[5,"visit_fields","","",null,null],[5,"visit_fields_named","","",null,null],[5,"visit_fields_unnamed","","",null,null],[5,"visit_file","","",null,null],[5,"visit_fn_arg","","",null,null],[5,"visit_fn_decl","","",null,null],[5,"visit_foreign_item","","",null,null],[5,"visit_foreign_item_fn","","",null,null],[5,"visit_foreign_item_static","","",null,null],[5,"visit_foreign_item_type","","",null,null],[5,"visit_foreign_item_verbatim","","",null,null],[5,"visit_generic_argument","","",null,null],[5,"visit_generic_method_argument","","",null,null],[5,"visit_generic_param","","",null,null],[5,"visit_generics","","",null,null],[5,"visit_ident","","",null,null],[5,"visit_impl_item","","",null,null],[5,"visit_impl_item_const","","",null,null],[5,"visit_impl_item_macro","","",null,null],[5,"visit_impl_item_method","","",null,null],[5,"visit_impl_item_type","","",null,null],[5,"visit_impl_item_verbatim","","",null,null],[5,"visit_index","","",null,null],[5,"visit_item","","",null,null],[5,"visit_item_const","","",null,null],[5,"visit_item_enum","","",null,null],[5,"visit_item_extern_crate","","",null,null],[5,"visit_item_fn","","",null,null],[5,"visit_item_foreign_mod","","",null,null],[5,"visit_item_impl","","",null,null],[5,"visit_item_macro","","",null,null],[5,"visit_item_macro2","","",null,null],[5,"visit_item_mod","","",null,null],[5,"visit_item_static","","",null,null],[5,"visit_item_struct","","",null,null],[5,"visit_item_trait","","",null,null],[5,"visit_item_type","","",null,null],[5,"visit_item_union","","",null,null],[5,"visit_item_use","","",null,null],[5,"visit_item_verbatim","","",null,null],[5,"visit_label","","",null,null],[5,"visit_lifetime","","",null,null],[5,"visit_lifetime_def","","",null,null],[5,"visit_lit","","",null,null],[5,"visit_lit_bool","","",null,null],[5,"visit_lit_byte","","",null,null],[5,"visit_lit_byte_str","","",null,null],[5,"visit_lit_char","","",null,null],[5,"visit_lit_float","","",null,null],[5,"visit_lit_int","","",null,null],[5,"visit_lit_str","","",null,null],[5,"visit_lit_verbatim","","",null,null],[5,"visit_local","","",null,null],[5,"visit_macro","","",null,null],[5,"visit_macro_delimiter","","",null,null],[5,"visit_member","","",null,null],[5,"visit_meta","","",null,null],[5,"visit_meta_list","","",null,null],[5,"visit_meta_name_value","","",null,null],[5,"visit_method_sig","","",null,null],[5,"visit_method_turbofish","","",null,null],[5,"visit_nested_meta","","",null,null],[5,"visit_parenthesized_generic_arguments","","",null,null],[5,"visit_pat","","",null,null],[5,"visit_pat_box","","",null,null],[5,"visit_pat_ident","","",null,null],[5,"visit_pat_lit","","",null,null],[5,"visit_pat_macro","","",null,null],[5,"visit_pat_path","","",null,null],[5,"visit_pat_range","","",null,null],[5,"visit_pat_ref","","",null,null],[5,"visit_pat_slice","","",null,null],[5,"visit_pat_struct","","",null,null],[5,"visit_pat_tuple","","",null,null],[5,"visit_pat_tuple_struct","","",null,null],[5,"visit_pat_verbatim","","",null,null],[5,"visit_pat_wild","","",null,null],[5,"visit_path","","",null,null],[5,"visit_path_arguments","","",null,null],[5,"visit_path_segment","","",null,null],[5,"visit_predicate_eq","","",null,null],[5,"visit_predicate_lifetime","","",null,null],[5,"visit_predicate_type","","",null,null],[5,"visit_qself","","",null,null],[5,"visit_range_limits","","",null,null],[5,"visit_return_type","","",null,null],[5,"visit_span","","",null,null],[5,"visit_stmt","","",null,null],[5,"visit_trait_bound","","",null,null],[5,"visit_trait_bound_modifier","","",null,null],[5,"visit_trait_item","","",null,null],[5,"visit_trait_item_const","","",null,null],[5,"visit_trait_item_macro","","",null,null],[5,"visit_trait_item_method","","",null,null],[5,"visit_trait_item_type","","",null,null],[5,"visit_trait_item_verbatim","","",null,null],[5,"visit_type","","",null,null],[5,"visit_type_array","","",null,null],[5,"visit_type_bare_fn","","",null,null],[5,"visit_type_group","","",null,null],[5,"visit_type_impl_trait","","",null,null],[5,"visit_type_infer","","",null,null],[5,"visit_type_macro","","",null,null],[5,"visit_type_never","","",null,null],[5,"visit_type_param","","",null,null],[5,"visit_type_param_bound","","",null,null],[5,"visit_type_paren","","",null,null],[5,"visit_type_path","","",null,null],[5,"visit_type_ptr","","",null,null],[5,"visit_type_reference","","",null,null],[5,"visit_type_slice","","",null,null],[5,"visit_type_trait_object","","",null,null],[5,"visit_type_tuple","","",null,null],[5,"visit_type_verbatim","","",null,null],[5,"visit_un_op","","",null,null],[5,"visit_use_glob","","",null,null],[5,"visit_use_group","","",null,null],[5,"visit_use_name","","",null,null],[5,"visit_use_path","","",null,null],[5,"visit_use_rename","","",null,null],[5,"visit_use_tree","","",null,null],[5,"visit_variant","","",null,null],[5,"visit_vis_crate","","",null,null],[5,"visit_vis_public","","",null,null],[5,"visit_vis_restricted","","",null,null],[5,"visit_visibility","","",null,null],[5,"visit_where_clause","","",null,null],[5,"visit_where_predicate","","",null,null],[3,"ImplGenerics","swc_macros_common::prelude","Returned by `Generics::split_for_impl`.",null,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",145,null],[12,"lt_token","","",145,null],[12,"args","","",145,null],[12,"gt_token","","",145,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",146,null],[12,"bang_token","","",146,null],[12,"delimiter","","",146,null],[12,"tts","","",146,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",147,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",148,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",148,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",148,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",148,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",148,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",148,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",148,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",148,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",148,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",148,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",148,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",148,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",148,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",148,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",148,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",148,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",149,null],[12,"vis","","",149,null],[12,"static_token","","",149,null],[12,"mutability","","",149,null],[12,"ident","","",149,null],[12,"colon_token","","",149,null],[12,"ty","","",149,null],[12,"semi_token","","",149,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",150,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",151,null],[12,"label","","",151,null],[12,"for_token","","",151,null],[12,"pat","","",151,null],[12,"in_token","","",151,null],[12,"expr","","",151,null],[12,"body","","",151,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",152,null],[12,"mac","","",152,null],[12,"semi_token","","",152,null],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",null,null],[12,"ident","","",153,null],[12,"colon2_token","","",153,null],[12,"tree","","",153,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",154,null],[13,"F64","","",154,null],[13,"None","","",154,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",155,null],[12,"expr","","",155,null],[12,"colon_token","","",155,null],[12,"ty","","",155,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",156,null],[12,"paren_token","","",156,null],[12,"expr","","",156,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",157,null],[12,"elem","","",157,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",158,null],[13,"Method","","A method within an impl block.",158,null],[13,"Type","","An associated type within an impl block.",158,null],[13,"Macro","","A macro invocation within an impl block.",158,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",158,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",159,null],[12,"expr","","",159,null],[12,"question_token","","",159,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",160,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",161,null],[12,"style","","",161,null],[12,"bracket_token","","",161,null],[12,"path","","",161,null],[12,"tts","","",161,null],[12,"is_sugared_doc","","",161,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",162,null],[12,"front","","",162,null],[12,"dot2_token","","",162,null],[12,"comma_token","","",162,null],[12,"back","","",162,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",163,null],[12,"vis","","",163,null],[12,"union_token","","",163,null],[12,"ident","","",163,null],[12,"generics","","",163,null],[12,"fields","","",163,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",164,null],[12,"base","","",164,null],[12,"dot_token","","",164,null],[12,"member","","",164,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",165,null],[12,"const_token","","",165,null],[12,"ident","","",165,null],[12,"colon_token","","",165,null],[12,"ty","","",165,null],[12,"eq_token","","",165,null],[12,"default","","",165,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",166,null],[12,"span","","",166,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",167,null],[12,"left","","",167,null],[12,"op","","",167,null],[12,"right","","",167,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",168,null],[12,"modifier","","",168,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",168,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",168,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",169,null],[12,"bounds","","",169,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",170,null],[12,"vis","","",170,null],[12,"enum_token","","",170,null],[12,"ident","","",170,null],[12,"generics","","",170,null],[12,"brace_token","","",170,null],[12,"variants","","",170,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",171,null],[12,"and_token","","",171,null],[12,"mutability","","",171,null],[12,"expr","","",171,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",172,null],[12,"lifetime","","",172,null],[12,"mutability","","",172,null],[12,"elem","","",172,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",173,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",174,null],[12,"named","","",174,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",175,null],[13,"Inner","","",175,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",176,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",177,null],[13,"Raw","","A raw string like `r##\"data\"##`.",177,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",178,null],[12,"lifetime","","",178,null],[12,"colon_token","","",178,null],[12,"bounds","","",178,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",179,null],[12,"break_token","","",179,null],[12,"label","","",179,null],[12,"expr","","",179,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",180,null],[12,"fields","","",180,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",181,null],[12,"vis","","",181,null],[12,"type_token","","",181,null],[12,"ident","","",181,null],[12,"generics","","",181,null],[12,"eq_token","","",181,null],[12,"ty","","",181,null],[12,"semi_token","","",181,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",182,null],[12,"segments","","",182,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",183,null],[12,"abi","","",183,null],[12,"brace_token","","",183,null],[12,"items","","",183,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",184,null],[12,"bounded_ty","","The type being bounded",184,null],[12,"colon_token","","",184,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",184,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",185,null],[12,"paren_token","","",185,null],[12,"nested","","",185,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",186,null],[13,"Not","","The `!` operator for logical inversion",186,null],[13,"Neg","","The `-` operator for negation",186,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",187,null],[12,"place","","",187,null],[12,"arrow_token","","",187,null],[12,"value","","",187,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",188,null],[12,"vis","","",188,null],[12,"type_token","","",188,null],[12,"ident","","",188,null],[12,"semi_token","","",188,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",189,null],[12,"elem","","",189,null],[12,"semi_token","","",189,null],[12,"len","","",189,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",190,null],[13,"Const","","A const expression. Must be inside of a block.",190,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",191,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",192,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",193,null],[12,"box_token","","",193,null],[12,"expr","","",193,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",194,null],[12,"pat","","",194,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",195,null],[13,"I16","","",195,null],[13,"I32","","",195,null],[13,"I64","","",195,null],[13,"I128","","",195,null],[13,"Isize","","",195,null],[13,"U8","","",195,null],[13,"U16","","",195,null],[13,"U32","","",195,null],[13,"U64","","",195,null],[13,"U128","","",195,null],[13,"Usize","","",195,null],[13,"None","","",195,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",196,null],[12,"paren_token","","",196,null],[12,"in_token","","",196,null],[12,"path","","",196,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",197,null],[12,"colon_token","","",197,null],[12,"bounds","","",197,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",198,null],[12,"ty","","",198,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",199,null],[12,"qself","","",199,null],[12,"path","","",199,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",200,null],[12,"label","","",200,null],[12,"loop_token","","",200,null],[12,"body","","",200,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",201,null],[12,"vis","","",201,null],[12,"defaultness","","",201,null],[12,"const_token","","",201,null],[12,"ident","","",201,null],[12,"colon_token","","",201,null],[12,"ty","","",201,null],[12,"eq_token","","",201,null],[12,"expr","","",201,null],[12,"semi_token","","",201,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",202,null],[12,"paren_token","","",202,null],[12,"elems","","",202,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",203,null],[12,"lt_token","","",203,null],[12,"args","","",203,null],[12,"gt_token","","",203,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",204,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",204,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",204,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",205,null],[12,"attrs","","",205,null],[12,"items","","",205,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",206,null],[12,"span","","",206,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",207,null],[12,"arguments","","",207,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",208,null],[12,"unnamed","","",208,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",209,null],[13,"Maybe","","",209,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",210,null],[13,"InPlace","","A placement expression: `place <- value`.",210,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",210,null],[13,"Call","","A function call expression: `invoke(a, b)`.",210,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",210,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",210,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",210,null],[13,"Unary","","A unary operation: `!x`, `*x`.",210,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",210,null],[13,"Cast","","A cast expression: `foo as f64`.",210,null],[13,"Type","","A type ascription expression: `foo: f64`.",210,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",210,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",210,null],[13,"While","","A while loop: `while expr { ... }`.",210,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",210,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",210,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",210,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",210,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",210,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",210,null],[13,"Block","","A blocked scope: `{ ... }`.",210,null],[13,"Assign","","An assignment expression: `a = compute()`.",210,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",210,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",210,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",210,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",210,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",210,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",210,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",210,null],[13,"Continue","","A `continue`, with an optional label.",210,null],[13,"Return","","A `return`, with an optional value to be returned.",210,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",210,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",210,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",210,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",210,null],[13,"Group","","An expression contained within invisible delimiters.",210,null],[13,"Try","","A try-expression: `expr?`.",210,null],[13,"Catch","","A catch expression: `do catch { ... }`.",210,null],[13,"Yield","","A yield expression: `yield expr`.",210,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",210,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",211,null],[12,"bracket_token","","",211,null],[12,"expr","","",211,null],[12,"semi_token","","",211,null],[12,"len","","",211,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",212,null],[12,"elem","","",212,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",213,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",214,null],[13,"Type","","A type argument.",214,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",214,null],[13,"Const","","A const expression. Must be inside of a block.",214,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",215,null],[13,"Method","","A trait method within the definition of a trait.",215,null],[13,"Type","","An associated type within the definition of a trait.",215,null],[13,"Macro","","A macro invocation within the definition of a trait.",215,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",215,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",216,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",216,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",216,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",217,null],[12,"eq_token","","",217,null],[12,"rhs_ty","","",217,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",218,null],[12,"func","","",218,null],[12,"paren_token","","",218,null],[12,"args","","",218,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",219,null],[12,"yield_token","","",219,null],[12,"expr","","",219,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",220,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",220,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",220,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",221,null],[13,"Type","","A particular type is returned.",221,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",222,null],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",222,null],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",222,null],[13,"Glob","","A glob import in a `use` item: `*`.",222,null],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",222,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",223,null],[12,"pat","","",223,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",224,null],[12,"sig","","",224,null],[12,"default","","",224,null],[12,"semi_token","","",224,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",225,null],[12,"expr","","",225,null],[12,"bracket_token","","",225,null],[12,"index","","",225,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",226,null],[12,"generics","","",226,null],[12,"paren_token","","",226,null],[12,"inputs","","",226,null],[12,"variadic","","",226,null],[12,"output","","",226,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",227,null],[12,"abi","","",227,null],[12,"fn_token","","",227,null],[12,"lifetimes","","",227,null],[12,"paren_token","","",227,null],[12,"inputs","","",227,null],[12,"variadic","","",227,null],[12,"output","","",227,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",228,null],[12,"movability","","",228,null],[12,"capture","","",228,null],[12,"or1_token","","",228,null],[12,"inputs","","",228,null],[12,"or2_token","","",228,null],[12,"output","","",228,null],[12,"body","","",228,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",229,null],[12,"eq_token","","",229,null],[12,"ty","","",229,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",230,null],[12,"unsafety","","",230,null],[12,"abi","","",230,null],[12,"ident","","",230,null],[12,"decl","","",230,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",231,null],[12,"leading_vert","","",231,null],[12,"pats","","",231,null],[12,"guard","","",231,null],[12,"fat_arrow_token","","",231,null],[12,"body","","",231,null],[12,"comma","","",231,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",232,null],[12,"const_token","","",232,null],[12,"mutability","","",232,null],[12,"elem","","",232,null],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",233,null],[12,"items","","",233,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",234,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",235,null],[13,"Crate","","A crate-level visibility: `crate`.",235,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",235,null],[13,"Inherited","","An inherited visibility, which usually means private.",235,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",236,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",236,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",236,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",237,null],[12,"group_token","","",237,null],[12,"expr","","",237,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",238,null],[13,"Wild","","Argument not given a name, matched with `_`.",238,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",239,null],[12,"colon_token","","",239,null],[12,"ty","","",239,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",240,null],[12,"mac","","",240,null],[12,"semi_token","","",240,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",241,null],[12,"mac","","",241,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",242,null],[12,"fields","","",242,null],[12,"semi_token","","",242,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",243,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",243,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",243,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",243,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",243,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",243,null],[13,"Box","","A box pattern: `box v`.",243,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",243,null],[13,"Lit","","A literal pattern: `0`.",243,null],[13,"Range","","A range pattern: `1..=2`.",243,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",243,null],[13,"Macro","","A macro in expression position.",243,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",243,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",244,null],[12,"vis","","",244,null],[12,"constness","","",244,null],[12,"unsafety","","",244,null],[12,"abi","","",244,null],[12,"ident","","",244,null],[12,"decl","","",244,null],[12,"block","","",244,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",245,null],[12,"bounds","","",245,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",246,null],[13,"Unnamed","","An unnamed field like `self.0`.",246,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",247,null],[12,"vis","","",247,null],[12,"struct_token","","",247,null],[12,"ident","","",247,null],[12,"generics","","",247,null],[12,"fields","","",247,null],[12,"semi_token","","",247,null],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",null,null],[12,"ident","","",248,null],[12,"as_token","","",248,null],[12,"rename","","",248,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",249,null],[12,"ident","","Name of the variant.",249,null],[12,"fields","","Content stored in the variant.",249,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",249,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",250,null],[13,"Item","","An item definition.",250,null],[13,"Expr","","Expr without trailing semicolon.",250,null],[13,"Semi","","Expression with trailing semicolon.",250,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",251,null],[12,"bracket_token","","",251,null],[12,"elems","","",251,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",252,null],[12,"path","","",252,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",253,null],[12,"return_token","","",253,null],[12,"expr","","",253,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",254,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",255,null],[12,"vis","","",255,null],[12,"ident","","",255,null],[12,"decl","","",255,null],[12,"semi_token","","",255,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",256,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",256,null],[12,"mac","","",256,null],[12,"semi_token","","",256,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",257,null],[12,"inputs","","`(A, B)`",257,null],[12,"output","","`C`",257,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",258,null],[12,"member","","",258,null],[12,"colon_token","","",258,null],[12,"pat","","",258,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",259,null],[12,"brace_token","","",259,null],[12,"variants","","",259,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",260,null],[12,"vis","","",260,null],[12,"extern_token","","",260,null],[12,"crate_token","","",260,null],[12,"ident","","",260,null],[12,"rename","","",260,null],[12,"semi_token","","",260,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",261,null],[12,"vis","","",261,null],[12,"static_token","","",261,null],[12,"mutability","","",261,null],[12,"ident","","",261,null],[12,"colon_token","","",261,null],[12,"ty","","",261,null],[12,"eq_token","","",261,null],[12,"expr","","",261,null],[12,"semi_token","","",261,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",262,null],[13,"Closed","","Inclusive at the beginning and end.",262,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",263,null],[12,"receiver","","",263,null],[12,"dot_token","","",263,null],[12,"method","","",263,null],[12,"turbofish","","",263,null],[12,"paren_token","","",263,null],[12,"args","","",263,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",264,null],[12,"path","","",264,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",265,null],[12,"vis","","Visibility of the struct or enum.",265,null],[12,"ident","","Name of the struct or enum.",265,null],[12,"generics","","Generics required to complete the definition.",265,null],[12,"data","","Data within the struct or enum.",265,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",266,null],[12,"lit","","",266,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",267,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",267,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",267,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",267,null],[0,"fold","","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[8,"Fold","swc_macros_common::prelude::fold","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[11,"fold_abi","","",268,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",268,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",268,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"argcaptured"}}],[11,"fold_arg_self","","",268,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"argself"}}],[11,"fold_arg_self_ref","","",268,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"argselfref"}}],[11,"fold_arm","","",268,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"arm"}}],[11,"fold_attr_style","","",268,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"attrstyle"}}],[11,"fold_attribute","","",268,{"i":[{"n":"self"},{"n":"attribute"}],"o":{"n":"attribute"}}],[11,"fold_bare_fn_arg","","",268,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",268,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"barefnargname"}}],[11,"fold_bin_op","","",268,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"binop"}}],[11,"fold_binding","","",268,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"binding"}}],[11,"fold_block","","",268,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"block"}}],[11,"fold_bound_lifetimes","","",268,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"boundlifetimes"}}],[11,"fold_const_param","","",268,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"constparam"}}],[11,"fold_data","","",268,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"data"}}],[11,"fold_data_enum","","",268,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"dataenum"}}],[11,"fold_data_struct","","",268,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"datastruct"}}],[11,"fold_data_union","","",268,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"dataunion"}}],[11,"fold_derive_input","","",268,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"deriveinput"}}],[11,"fold_expr","","",268,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"expr"}}],[11,"fold_expr_array","","",268,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"exprarray"}}],[11,"fold_expr_assign","","",268,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"exprassign"}}],[11,"fold_expr_assign_op","","",268,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"exprassignop"}}],[11,"fold_expr_binary","","",268,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"exprbinary"}}],[11,"fold_expr_block","","",268,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"exprblock"}}],[11,"fold_expr_box","","",268,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"exprbox"}}],[11,"fold_expr_break","","",268,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"exprbreak"}}],[11,"fold_expr_call","","",268,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"exprcall"}}],[11,"fold_expr_cast","","",268,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"exprcast"}}],[11,"fold_expr_catch","","",268,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"exprcatch"}}],[11,"fold_expr_closure","","",268,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"exprclosure"}}],[11,"fold_expr_continue","","",268,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"exprcontinue"}}],[11,"fold_expr_field","","",268,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"exprfield"}}],[11,"fold_expr_for_loop","","",268,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"exprforloop"}}],[11,"fold_expr_group","","",268,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"exprgroup"}}],[11,"fold_expr_if","","",268,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"exprif"}}],[11,"fold_expr_if_let","","",268,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"expriflet"}}],[11,"fold_expr_in_place","","",268,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"exprinplace"}}],[11,"fold_expr_index","","",268,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"exprindex"}}],[11,"fold_expr_lit","","",268,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"exprlit"}}],[11,"fold_expr_loop","","",268,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"exprloop"}}],[11,"fold_expr_macro","","",268,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"exprmacro"}}],[11,"fold_expr_match","","",268,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"exprmatch"}}],[11,"fold_expr_method_call","","",268,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"exprmethodcall"}}],[11,"fold_expr_paren","","",268,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"exprparen"}}],[11,"fold_expr_path","","",268,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"exprpath"}}],[11,"fold_expr_range","","",268,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"exprrange"}}],[11,"fold_expr_reference","","",268,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"exprreference"}}],[11,"fold_expr_repeat","","",268,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"exprrepeat"}}],[11,"fold_expr_return","","",268,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"exprreturn"}}],[11,"fold_expr_struct","","",268,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"exprstruct"}}],[11,"fold_expr_try","","",268,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"exprtry"}}],[11,"fold_expr_tuple","","",268,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"exprtuple"}}],[11,"fold_expr_type","","",268,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"exprtype"}}],[11,"fold_expr_unary","","",268,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"exprunary"}}],[11,"fold_expr_unsafe","","",268,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"exprunsafe"}}],[11,"fold_expr_verbatim","","",268,{"i":[{"n":"self"},{"n":"exprverbatim"}],"o":{"n":"exprverbatim"}}],[11,"fold_expr_while","","",268,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"exprwhile"}}],[11,"fold_expr_while_let","","",268,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"exprwhilelet"}}],[11,"fold_expr_yield","","",268,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"expryield"}}],[11,"fold_field","","",268,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"field"}}],[11,"fold_field_pat","","",268,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"fieldpat"}}],[11,"fold_field_value","","",268,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"fieldvalue"}}],[11,"fold_fields","","",268,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"fields"}}],[11,"fold_fields_named","","",268,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",268,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"fieldsunnamed"}}],[11,"fold_file","","",268,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"file"}}],[11,"fold_fn_arg","","",268,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"fnarg"}}],[11,"fold_fn_decl","","",268,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"fndecl"}}],[11,"fold_foreign_item","","",268,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"foreignitem"}}],[11,"fold_foreign_item_fn","","",268,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",268,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",268,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",268,{"i":[{"n":"self"},{"n":"foreignitemverbatim"}],"o":{"n":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",268,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"genericargument"}}],[11,"fold_generic_method_argument","","",268,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"genericmethodargument"}}],[11,"fold_generic_param","","",268,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"genericparam"}}],[11,"fold_generics","","",268,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"generics"}}],[11,"fold_ident","","",268,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ident"}}],[11,"fold_impl_item","","",268,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"implitem"}}],[11,"fold_impl_item_const","","",268,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"implitemconst"}}],[11,"fold_impl_item_macro","","",268,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"implitemmacro"}}],[11,"fold_impl_item_method","","",268,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"implitemmethod"}}],[11,"fold_impl_item_type","","",268,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",268,{"i":[{"n":"self"},{"n":"implitemverbatim"}],"o":{"n":"implitemverbatim"}}],[11,"fold_index","","",268,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"index"}}],[11,"fold_item","","",268,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"item"}}],[11,"fold_item_const","","",268,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"itemconst"}}],[11,"fold_item_enum","","",268,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"itemenum"}}],[11,"fold_item_extern_crate","","",268,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"itemexterncrate"}}],[11,"fold_item_fn","","",268,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"itemfn"}}],[11,"fold_item_foreign_mod","","",268,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"itemforeignmod"}}],[11,"fold_item_impl","","",268,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"itemimpl"}}],[11,"fold_item_macro","","",268,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"itemmacro"}}],[11,"fold_item_macro2","","",268,{"i":[{"n":"self"},{"n":"itemmacro2"}],"o":{"n":"itemmacro2"}}],[11,"fold_item_mod","","",268,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"itemmod"}}],[11,"fold_item_static","","",268,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"itemstatic"}}],[11,"fold_item_struct","","",268,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"itemstruct"}}],[11,"fold_item_trait","","",268,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"itemtrait"}}],[11,"fold_item_type","","",268,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"itemtype"}}],[11,"fold_item_union","","",268,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"itemunion"}}],[11,"fold_item_use","","",268,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"itemuse"}}],[11,"fold_item_verbatim","","",268,{"i":[{"n":"self"},{"n":"itemverbatim"}],"o":{"n":"itemverbatim"}}],[11,"fold_label","","",268,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"label"}}],[11,"fold_lifetime","","",268,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"lifetime"}}],[11,"fold_lifetime_def","","",268,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"lifetimedef"}}],[11,"fold_lit","","",268,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"lit"}}],[11,"fold_lit_bool","","",268,{"i":[{"n":"self"},{"n":"litbool"}],"o":{"n":"litbool"}}],[11,"fold_lit_byte","","",268,{"i":[{"n":"self"},{"n":"litbyte"}],"o":{"n":"litbyte"}}],[11,"fold_lit_byte_str","","",268,{"i":[{"n":"self"},{"n":"litbytestr"}],"o":{"n":"litbytestr"}}],[11,"fold_lit_char","","",268,{"i":[{"n":"self"},{"n":"litchar"}],"o":{"n":"litchar"}}],[11,"fold_lit_float","","",268,{"i":[{"n":"self"},{"n":"litfloat"}],"o":{"n":"litfloat"}}],[11,"fold_lit_int","","",268,{"i":[{"n":"self"},{"n":"litint"}],"o":{"n":"litint"}}],[11,"fold_lit_str","","",268,{"i":[{"n":"self"},{"n":"litstr"}],"o":{"n":"litstr"}}],[11,"fold_lit_verbatim","","",268,{"i":[{"n":"self"},{"n":"litverbatim"}],"o":{"n":"litverbatim"}}],[11,"fold_local","","",268,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"local"}}],[11,"fold_macro","","",268,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"macro"}}],[11,"fold_macro_delimiter","","",268,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"macrodelimiter"}}],[11,"fold_member","","",268,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"member"}}],[11,"fold_meta","","",268,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"meta"}}],[11,"fold_meta_list","","",268,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"metalist"}}],[11,"fold_meta_name_value","","",268,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"metanamevalue"}}],[11,"fold_method_sig","","",268,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"methodsig"}}],[11,"fold_method_turbofish","","",268,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"methodturbofish"}}],[11,"fold_nested_meta","","",268,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",268,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",268,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"pat"}}],[11,"fold_pat_box","","",268,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"patbox"}}],[11,"fold_pat_ident","","",268,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"patident"}}],[11,"fold_pat_lit","","",268,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"patlit"}}],[11,"fold_pat_macro","","",268,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"patmacro"}}],[11,"fold_pat_path","","",268,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"patpath"}}],[11,"fold_pat_range","","",268,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"patrange"}}],[11,"fold_pat_ref","","",268,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"patref"}}],[11,"fold_pat_slice","","",268,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"patslice"}}],[11,"fold_pat_struct","","",268,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"patstruct"}}],[11,"fold_pat_tuple","","",268,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"pattuple"}}],[11,"fold_pat_tuple_struct","","",268,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",268,{"i":[{"n":"self"},{"n":"patverbatim"}],"o":{"n":"patverbatim"}}],[11,"fold_pat_wild","","",268,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"patwild"}}],[11,"fold_path","","",268,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"path"}}],[11,"fold_path_arguments","","",268,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"patharguments"}}],[11,"fold_path_segment","","",268,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"pathsegment"}}],[11,"fold_predicate_eq","","",268,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"predicateeq"}}],[11,"fold_predicate_lifetime","","",268,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"predicatelifetime"}}],[11,"fold_predicate_type","","",268,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"predicatetype"}}],[11,"fold_qself","","",268,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"qself"}}],[11,"fold_range_limits","","",268,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"rangelimits"}}],[11,"fold_return_type","","",268,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"returntype"}}],[11,"fold_span","","",268,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"fold_stmt","","",268,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"stmt"}}],[11,"fold_trait_bound","","",268,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"traitbound"}}],[11,"fold_trait_bound_modifier","","",268,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"traitboundmodifier"}}],[11,"fold_trait_item","","",268,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"traititem"}}],[11,"fold_trait_item_const","","",268,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"traititemconst"}}],[11,"fold_trait_item_macro","","",268,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"traititemmacro"}}],[11,"fold_trait_item_method","","",268,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"traititemmethod"}}],[11,"fold_trait_item_type","","",268,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",268,{"i":[{"n":"self"},{"n":"traititemverbatim"}],"o":{"n":"traititemverbatim"}}],[11,"fold_type","","",268,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"type"}}],[11,"fold_type_array","","",268,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"typearray"}}],[11,"fold_type_bare_fn","","",268,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"typebarefn"}}],[11,"fold_type_group","","",268,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"typegroup"}}],[11,"fold_type_impl_trait","","",268,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"typeimpltrait"}}],[11,"fold_type_infer","","",268,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"typeinfer"}}],[11,"fold_type_macro","","",268,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"typemacro"}}],[11,"fold_type_never","","",268,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"typenever"}}],[11,"fold_type_param","","",268,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"typeparam"}}],[11,"fold_type_param_bound","","",268,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"typeparambound"}}],[11,"fold_type_paren","","",268,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"typeparen"}}],[11,"fold_type_path","","",268,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"typepath"}}],[11,"fold_type_ptr","","",268,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"typeptr"}}],[11,"fold_type_reference","","",268,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"typereference"}}],[11,"fold_type_slice","","",268,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"typeslice"}}],[11,"fold_type_trait_object","","",268,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"typetraitobject"}}],[11,"fold_type_tuple","","",268,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"typetuple"}}],[11,"fold_type_verbatim","","",268,{"i":[{"n":"self"},{"n":"typeverbatim"}],"o":{"n":"typeverbatim"}}],[11,"fold_un_op","","",268,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"unop"}}],[11,"fold_use_glob","","",268,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"useglob"}}],[11,"fold_use_group","","",268,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"usegroup"}}],[11,"fold_use_name","","",268,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"usename"}}],[11,"fold_use_path","","",268,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"usepath"}}],[11,"fold_use_rename","","",268,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"userename"}}],[11,"fold_use_tree","","",268,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"usetree"}}],[11,"fold_variant","","",268,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"variant"}}],[11,"fold_vis_crate","","",268,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"viscrate"}}],[11,"fold_vis_public","","",268,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"vispublic"}}],[11,"fold_vis_restricted","","",268,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"visrestricted"}}],[11,"fold_visibility","","",268,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"visibility"}}],[11,"fold_where_clause","","",268,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"whereclause"}}],[11,"fold_where_predicate","","",268,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"wherepredicate"}}],[5,"fold_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}],"o":{"n":"litbyte"}}],[5,"fold_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}],"o":{"n":"litbytestr"}}],[5,"fold_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}],"o":{"n":"litchar"}}],[5,"fold_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}],"o":{"n":"litfloat"}}],[5,"fold_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}],"o":{"n":"litint"}}],[5,"fold_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}],"o":{"n":"litstr"}}],[5,"fold_abi","","",null,{"i":[{"n":"v"},{"n":"abi"}],"o":{"n":"abi"}}],[5,"fold_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"anglebracketedgenericarguments"}}],[5,"fold_arg_captured","","",null,{"i":[{"n":"v"},{"n":"argcaptured"}],"o":{"n":"argcaptured"}}],[5,"fold_arg_self","","",null,{"i":[{"n":"v"},{"n":"argself"}],"o":{"n":"argself"}}],[5,"fold_arg_self_ref","","",null,{"i":[{"n":"v"},{"n":"argselfref"}],"o":{"n":"argselfref"}}],[5,"fold_arm","","",null,{"i":[{"n":"v"},{"n":"arm"}],"o":{"n":"arm"}}],[5,"fold_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}],"o":{"n":"attrstyle"}}],[5,"fold_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}],"o":{"n":"attribute"}}],[5,"fold_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}],"o":{"n":"barefnarg"}}],[5,"fold_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}],"o":{"n":"barefnargname"}}],[5,"fold_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}],"o":{"n":"binop"}}],[5,"fold_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}],"o":{"n":"binding"}}],[5,"fold_block","","",null,{"i":[{"n":"v"},{"n":"block"}],"o":{"n":"block"}}],[5,"fold_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}],"o":{"n":"boundlifetimes"}}],[5,"fold_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}],"o":{"n":"constparam"}}],[5,"fold_data","","",null,{"i":[{"n":"v"},{"n":"data"}],"o":{"n":"data"}}],[5,"fold_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}],"o":{"n":"dataenum"}}],[5,"fold_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}],"o":{"n":"datastruct"}}],[5,"fold_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}],"o":{"n":"dataunion"}}],[5,"fold_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}],"o":{"n":"deriveinput"}}],[5,"fold_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}],"o":{"n":"expr"}}],[5,"fold_expr_array","","",null,{"i":[{"n":"v"},{"n":"exprarray"}],"o":{"n":"exprarray"}}],[5,"fold_expr_assign","","",null,{"i":[{"n":"v"},{"n":"exprassign"}],"o":{"n":"exprassign"}}],[5,"fold_expr_assign_op","","",null,{"i":[{"n":"v"},{"n":"exprassignop"}],"o":{"n":"exprassignop"}}],[5,"fold_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}],"o":{"n":"exprbinary"}}],[5,"fold_expr_block","","",null,{"i":[{"n":"v"},{"n":"exprblock"}],"o":{"n":"exprblock"}}],[5,"fold_expr_box","","",null,{"i":[{"n":"v"},{"n":"exprbox"}],"o":{"n":"exprbox"}}],[5,"fold_expr_break","","",null,{"i":[{"n":"v"},{"n":"exprbreak"}],"o":{"n":"exprbreak"}}],[5,"fold_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}],"o":{"n":"exprcall"}}],[5,"fold_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}],"o":{"n":"exprcast"}}],[5,"fold_expr_catch","","",null,{"i":[{"n":"v"},{"n":"exprcatch"}],"o":{"n":"exprcatch"}}],[5,"fold_expr_closure","","",null,{"i":[{"n":"v"},{"n":"exprclosure"}],"o":{"n":"exprclosure"}}],[5,"fold_expr_continue","","",null,{"i":[{"n":"v"},{"n":"exprcontinue"}],"o":{"n":"exprcontinue"}}],[5,"fold_expr_field","","",null,{"i":[{"n":"v"},{"n":"exprfield"}],"o":{"n":"exprfield"}}],[5,"fold_expr_for_loop","","",null,{"i":[{"n":"v"},{"n":"exprforloop"}],"o":{"n":"exprforloop"}}],[5,"fold_expr_group","","",null,{"i":[{"n":"v"},{"n":"exprgroup"}],"o":{"n":"exprgroup"}}],[5,"fold_expr_if","","",null,{"i":[{"n":"v"},{"n":"exprif"}],"o":{"n":"exprif"}}],[5,"fold_expr_if_let","","",null,{"i":[{"n":"v"},{"n":"expriflet"}],"o":{"n":"expriflet"}}],[5,"fold_expr_in_place","","",null,{"i":[{"n":"v"},{"n":"exprinplace"}],"o":{"n":"exprinplace"}}],[5,"fold_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}],"o":{"n":"exprindex"}}],[5,"fold_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}],"o":{"n":"exprlit"}}],[5,"fold_expr_loop","","",null,{"i":[{"n":"v"},{"n":"exprloop"}],"o":{"n":"exprloop"}}],[5,"fold_expr_macro","","",null,{"i":[{"n":"v"},{"n":"exprmacro"}],"o":{"n":"exprmacro"}}],[5,"fold_expr_match","","",null,{"i":[{"n":"v"},{"n":"exprmatch"}],"o":{"n":"exprmatch"}}],[5,"fold_expr_method_call","","",null,{"i":[{"n":"v"},{"n":"exprmethodcall"}],"o":{"n":"exprmethodcall"}}],[5,"fold_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}],"o":{"n":"exprparen"}}],[5,"fold_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}],"o":{"n":"exprpath"}}],[5,"fold_expr_range","","",null,{"i":[{"n":"v"},{"n":"exprrange"}],"o":{"n":"exprrange"}}],[5,"fold_expr_reference","","",null,{"i":[{"n":"v"},{"n":"exprreference"}],"o":{"n":"exprreference"}}],[5,"fold_expr_repeat","","",null,{"i":[{"n":"v"},{"n":"exprrepeat"}],"o":{"n":"exprrepeat"}}],[5,"fold_expr_return","","",null,{"i":[{"n":"v"},{"n":"exprreturn"}],"o":{"n":"exprreturn"}}],[5,"fold_expr_struct","","",null,{"i":[{"n":"v"},{"n":"exprstruct"}],"o":{"n":"exprstruct"}}],[5,"fold_expr_try","","",null,{"i":[{"n":"v"},{"n":"exprtry"}],"o":{"n":"exprtry"}}],[5,"fold_expr_tuple","","",null,{"i":[{"n":"v"},{"n":"exprtuple"}],"o":{"n":"exprtuple"}}],[5,"fold_expr_type","","",null,{"i":[{"n":"v"},{"n":"exprtype"}],"o":{"n":"exprtype"}}],[5,"fold_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}],"o":{"n":"exprunary"}}],[5,"fold_expr_unsafe","","",null,{"i":[{"n":"v"},{"n":"exprunsafe"}],"o":{"n":"exprunsafe"}}],[5,"fold_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}],"o":{"n":"exprverbatim"}}],[5,"fold_expr_while","","",null,{"i":[{"n":"v"},{"n":"exprwhile"}],"o":{"n":"exprwhile"}}],[5,"fold_expr_while_let","","",null,{"i":[{"n":"v"},{"n":"exprwhilelet"}],"o":{"n":"exprwhilelet"}}],[5,"fold_expr_yield","","",null,{"i":[{"n":"v"},{"n":"expryield"}],"o":{"n":"expryield"}}],[5,"fold_field","","",null,{"i":[{"n":"v"},{"n":"field"}],"o":{"n":"field"}}],[5,"fold_field_pat","","",null,{"i":[{"n":"v"},{"n":"fieldpat"}],"o":{"n":"fieldpat"}}],[5,"fold_field_value","","",null,{"i":[{"n":"v"},{"n":"fieldvalue"}],"o":{"n":"fieldvalue"}}],[5,"fold_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}],"o":{"n":"fields"}}],[5,"fold_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}],"o":{"n":"fieldsnamed"}}],[5,"fold_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}],"o":{"n":"fieldsunnamed"}}],[5,"fold_file","","",null,{"i":[{"n":"v"},{"n":"file"}],"o":{"n":"file"}}],[5,"fold_fn_arg","","",null,{"i":[{"n":"v"},{"n":"fnarg"}],"o":{"n":"fnarg"}}],[5,"fold_fn_decl","","",null,{"i":[{"n":"v"},{"n":"fndecl"}],"o":{"n":"fndecl"}}],[5,"fold_foreign_item","","",null,{"i":[{"n":"v"},{"n":"foreignitem"}],"o":{"n":"foreignitem"}}],[5,"fold_foreign_item_fn","","",null,{"i":[{"n":"v"},{"n":"foreignitemfn"}],"o":{"n":"foreignitemfn"}}],[5,"fold_foreign_item_static","","",null,{"i":[{"n":"v"},{"n":"foreignitemstatic"}],"o":{"n":"foreignitemstatic"}}],[5,"fold_foreign_item_type","","",null,{"i":[{"n":"v"},{"n":"foreignitemtype"}],"o":{"n":"foreignitemtype"}}],[5,"fold_foreign_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"foreignitemverbatim"}],"o":{"n":"foreignitemverbatim"}}],[5,"fold_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}],"o":{"n":"genericargument"}}],[5,"fold_generic_method_argument","","",null,{"i":[{"n":"v"},{"n":"genericmethodargument"}],"o":{"n":"genericmethodargument"}}],[5,"fold_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}],"o":{"n":"genericparam"}}],[5,"fold_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}],"o":{"n":"generics"}}],[5,"fold_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}],"o":{"n":"ident"}}],[5,"fold_impl_item","","",null,{"i":[{"n":"v"},{"n":"implitem"}],"o":{"n":"implitem"}}],[5,"fold_impl_item_const","","",null,{"i":[{"n":"v"},{"n":"implitemconst"}],"o":{"n":"implitemconst"}}],[5,"fold_impl_item_macro","","",null,{"i":[{"n":"v"},{"n":"implitemmacro"}],"o":{"n":"implitemmacro"}}],[5,"fold_impl_item_method","","",null,{"i":[{"n":"v"},{"n":"implitemmethod"}],"o":{"n":"implitemmethod"}}],[5,"fold_impl_item_type","","",null,{"i":[{"n":"v"},{"n":"implitemtype"}],"o":{"n":"implitemtype"}}],[5,"fold_impl_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"implitemverbatim"}],"o":{"n":"implitemverbatim"}}],[5,"fold_index","","",null,{"i":[{"n":"v"},{"n":"index"}],"o":{"n":"index"}}],[5,"fold_item","","",null,{"i":[{"n":"v"},{"n":"item"}],"o":{"n":"item"}}],[5,"fold_item_const","","",null,{"i":[{"n":"v"},{"n":"itemconst"}],"o":{"n":"itemconst"}}],[5,"fold_item_enum","","",null,{"i":[{"n":"v"},{"n":"itemenum"}],"o":{"n":"itemenum"}}],[5,"fold_item_extern_crate","","",null,{"i":[{"n":"v"},{"n":"itemexterncrate"}],"o":{"n":"itemexterncrate"}}],[5,"fold_item_fn","","",null,{"i":[{"n":"v"},{"n":"itemfn"}],"o":{"n":"itemfn"}}],[5,"fold_item_foreign_mod","","",null,{"i":[{"n":"v"},{"n":"itemforeignmod"}],"o":{"n":"itemforeignmod"}}],[5,"fold_item_impl","","",null,{"i":[{"n":"v"},{"n":"itemimpl"}],"o":{"n":"itemimpl"}}],[5,"fold_item_macro","","",null,{"i":[{"n":"v"},{"n":"itemmacro"}],"o":{"n":"itemmacro"}}],[5,"fold_item_macro2","","",null,{"i":[{"n":"v"},{"n":"itemmacro2"}],"o":{"n":"itemmacro2"}}],[5,"fold_item_mod","","",null,{"i":[{"n":"v"},{"n":"itemmod"}],"o":{"n":"itemmod"}}],[5,"fold_item_static","","",null,{"i":[{"n":"v"},{"n":"itemstatic"}],"o":{"n":"itemstatic"}}],[5,"fold_item_struct","","",null,{"i":[{"n":"v"},{"n":"itemstruct"}],"o":{"n":"itemstruct"}}],[5,"fold_item_trait","","",null,{"i":[{"n":"v"},{"n":"itemtrait"}],"o":{"n":"itemtrait"}}],[5,"fold_item_type","","",null,{"i":[{"n":"v"},{"n":"itemtype"}],"o":{"n":"itemtype"}}],[5,"fold_item_union","","",null,{"i":[{"n":"v"},{"n":"itemunion"}],"o":{"n":"itemunion"}}],[5,"fold_item_use","","",null,{"i":[{"n":"v"},{"n":"itemuse"}],"o":{"n":"itemuse"}}],[5,"fold_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"itemverbatim"}],"o":{"n":"itemverbatim"}}],[5,"fold_label","","",null,{"i":[{"n":"v"},{"n":"label"}],"o":{"n":"label"}}],[5,"fold_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}],"o":{"n":"lifetime"}}],[5,"fold_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}],"o":{"n":"lifetimedef"}}],[5,"fold_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}],"o":{"n":"lit"}}],[5,"fold_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}],"o":{"n":"litbool"}}],[5,"fold_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}],"o":{"n":"litverbatim"}}],[5,"fold_local","","",null,{"i":[{"n":"v"},{"n":"local"}],"o":{"n":"local"}}],[5,"fold_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}],"o":{"n":"macro"}}],[5,"fold_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}],"o":{"n":"macrodelimiter"}}],[5,"fold_member","","",null,{"i":[{"n":"v"},{"n":"member"}],"o":{"n":"member"}}],[5,"fold_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}],"o":{"n":"meta"}}],[5,"fold_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}],"o":{"n":"metalist"}}],[5,"fold_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}],"o":{"n":"metanamevalue"}}],[5,"fold_method_sig","","",null,{"i":[{"n":"v"},{"n":"methodsig"}],"o":{"n":"methodsig"}}],[5,"fold_method_turbofish","","",null,{"i":[{"n":"v"},{"n":"methodturbofish"}],"o":{"n":"methodturbofish"}}],[5,"fold_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}],"o":{"n":"nestedmeta"}}],[5,"fold_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"parenthesizedgenericarguments"}}],[5,"fold_pat","","",null,{"i":[{"n":"v"},{"n":"pat"}],"o":{"n":"pat"}}],[5,"fold_pat_box","","",null,{"i":[{"n":"v"},{"n":"patbox"}],"o":{"n":"patbox"}}],[5,"fold_pat_ident","","",null,{"i":[{"n":"v"},{"n":"patident"}],"o":{"n":"patident"}}],[5,"fold_pat_lit","","",null,{"i":[{"n":"v"},{"n":"patlit"}],"o":{"n":"patlit"}}],[5,"fold_pat_macro","","",null,{"i":[{"n":"v"},{"n":"patmacro"}],"o":{"n":"patmacro"}}],[5,"fold_pat_path","","",null,{"i":[{"n":"v"},{"n":"patpath"}],"o":{"n":"patpath"}}],[5,"fold_pat_range","","",null,{"i":[{"n":"v"},{"n":"patrange"}],"o":{"n":"patrange"}}],[5,"fold_pat_ref","","",null,{"i":[{"n":"v"},{"n":"patref"}],"o":{"n":"patref"}}],[5,"fold_pat_slice","","",null,{"i":[{"n":"v"},{"n":"patslice"}],"o":{"n":"patslice"}}],[5,"fold_pat_struct","","",null,{"i":[{"n":"v"},{"n":"patstruct"}],"o":{"n":"patstruct"}}],[5,"fold_pat_tuple","","",null,{"i":[{"n":"v"},{"n":"pattuple"}],"o":{"n":"pattuple"}}],[5,"fold_pat_tuple_struct","","",null,{"i":[{"n":"v"},{"n":"pattuplestruct"}],"o":{"n":"pattuplestruct"}}],[5,"fold_pat_verbatim","","",null,{"i":[{"n":"v"},{"n":"patverbatim"}],"o":{"n":"patverbatim"}}],[5,"fold_pat_wild","","",null,{"i":[{"n":"v"},{"n":"patwild"}],"o":{"n":"patwild"}}],[5,"fold_path","","",null,{"i":[{"n":"v"},{"n":"path"}],"o":{"n":"path"}}],[5,"fold_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}],"o":{"n":"patharguments"}}],[5,"fold_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}],"o":{"n":"pathsegment"}}],[5,"fold_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}],"o":{"n":"predicateeq"}}],[5,"fold_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}],"o":{"n":"predicatelifetime"}}],[5,"fold_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}],"o":{"n":"predicatetype"}}],[5,"fold_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}],"o":{"n":"qself"}}],[5,"fold_range_limits","","",null,{"i":[{"n":"v"},{"n":"rangelimits"}],"o":{"n":"rangelimits"}}],[5,"fold_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}],"o":{"n":"returntype"}}],[5,"fold_span","","",null,{"i":[{"n":"v"},{"n":"span"}],"o":{"n":"span"}}],[5,"fold_stmt","","",null,{"i":[{"n":"v"},{"n":"stmt"}],"o":{"n":"stmt"}}],[5,"fold_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}],"o":{"n":"traitbound"}}],[5,"fold_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}],"o":{"n":"traitboundmodifier"}}],[5,"fold_trait_item","","",null,{"i":[{"n":"v"},{"n":"traititem"}],"o":{"n":"traititem"}}],[5,"fold_trait_item_const","","",null,{"i":[{"n":"v"},{"n":"traititemconst"}],"o":{"n":"traititemconst"}}],[5,"fold_trait_item_macro","","",null,{"i":[{"n":"v"},{"n":"traititemmacro"}],"o":{"n":"traititemmacro"}}],[5,"fold_trait_item_method","","",null,{"i":[{"n":"v"},{"n":"traititemmethod"}],"o":{"n":"traititemmethod"}}],[5,"fold_trait_item_type","","",null,{"i":[{"n":"v"},{"n":"traititemtype"}],"o":{"n":"traititemtype"}}],[5,"fold_trait_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"traititemverbatim"}],"o":{"n":"traititemverbatim"}}],[5,"fold_type","","",null,{"i":[{"n":"v"},{"n":"type"}],"o":{"n":"type"}}],[5,"fold_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}],"o":{"n":"typearray"}}],[5,"fold_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}],"o":{"n":"typebarefn"}}],[5,"fold_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}],"o":{"n":"typegroup"}}],[5,"fold_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}],"o":{"n":"typeimpltrait"}}],[5,"fold_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}],"o":{"n":"typeinfer"}}],[5,"fold_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}],"o":{"n":"typemacro"}}],[5,"fold_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}],"o":{"n":"typenever"}}],[5,"fold_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}],"o":{"n":"typeparam"}}],[5,"fold_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}],"o":{"n":"typeparambound"}}],[5,"fold_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}],"o":{"n":"typeparen"}}],[5,"fold_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}],"o":{"n":"typepath"}}],[5,"fold_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}],"o":{"n":"typeptr"}}],[5,"fold_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}],"o":{"n":"typereference"}}],[5,"fold_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}],"o":{"n":"typeslice"}}],[5,"fold_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}],"o":{"n":"typetraitobject"}}],[5,"fold_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}],"o":{"n":"typetuple"}}],[5,"fold_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}],"o":{"n":"typeverbatim"}}],[5,"fold_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}],"o":{"n":"unop"}}],[5,"fold_use_glob","","",null,{"i":[{"n":"v"},{"n":"useglob"}],"o":{"n":"useglob"}}],[5,"fold_use_group","","",null,{"i":[{"n":"v"},{"n":"usegroup"}],"o":{"n":"usegroup"}}],[5,"fold_use_name","","",null,{"i":[{"n":"v"},{"n":"usename"}],"o":{"n":"usename"}}],[5,"fold_use_path","","",null,{"i":[{"n":"v"},{"n":"usepath"}],"o":{"n":"usepath"}}],[5,"fold_use_rename","","",null,{"i":[{"n":"v"},{"n":"userename"}],"o":{"n":"userename"}}],[5,"fold_use_tree","","",null,{"i":[{"n":"v"},{"n":"usetree"}],"o":{"n":"usetree"}}],[5,"fold_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}],"o":{"n":"variant"}}],[5,"fold_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}],"o":{"n":"viscrate"}}],[5,"fold_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}],"o":{"n":"vispublic"}}],[5,"fold_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}],"o":{"n":"visrestricted"}}],[5,"fold_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}],"o":{"n":"visibility"}}],[5,"fold_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}],"o":{"n":"whereclause"}}],[5,"fold_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}],"o":{"n":"wherepredicate"}}],[3,"ExprVerbatim","swc_macros_common::prelude","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",269,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",270,null],[12,"defaultness","","",270,null],[12,"unsafety","","",270,null],[12,"impl_token","","",270,null],[12,"generics","","",270,null],[12,"trait_","","Trait this impl implements.",270,null],[12,"self_ty","","The Self type of the impl.",270,null],[12,"brace_token","","",270,null],[12,"items","","",270,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",271,null],[12,"stmts","","Statements in a block",271,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",272,null],[12,"vis","","",272,null],[12,"defaultness","","",272,null],[12,"sig","","",272,null],[12,"block","","",272,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",273,null],[12,"vis","","",273,null],[12,"mod_token","","",273,null],[12,"ident","","",273,null],[12,"content","","",273,null],[12,"semi","","",273,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",274,null],[12,"op","","",274,null],[12,"expr","","",274,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",275,null],[12,"eq_token","","",275,null],[12,"lit","","",275,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",276,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",277,null],[12,"ident","","",277,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",278,null],[12,"front","","",278,null],[12,"middle","","",278,null],[12,"dot2_token","","",278,null],[12,"comma_token","","",278,null],[12,"back","","",278,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",279,null],[12,"params","","",279,null],[12,"gt_token","","",279,null],[12,"where_clause","","",279,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",280,null],[12,"self_token","","",280,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",281,null],[12,"match_token","","",281,null],[12,"expr","","",281,null],[12,"brace_token","","",281,null],[12,"arms","","",281,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",282,null],[13,"Lifetime","","",282,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",283,null],[12,"path","","",283,null],[12,"brace_token","","",283,null],[12,"fields","","",283,null],[12,"dot2_token","","",283,null],[12,"rest","","",283,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",284,null],[12,"elems","","",284,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",285,null],[12,"vis","","",285,null],[12,"unsafety","","",285,null],[12,"auto_token","","",285,null],[12,"trait_token","","",285,null],[12,"ident","","",285,null],[12,"generics","","",285,null],[12,"colon_token","","",285,null],[12,"supertraits","","",285,null],[12,"brace_token","","",285,null],[12,"items","","",285,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",286,null],[12,"label","","",286,null],[12,"while_token","","",286,null],[12,"cond","","",286,null],[12,"body","","",286,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",287,null],[12,"vis","","Visibility of the field.",287,null],[12,"ident","","Name of the field, if any.",287,null],[12,"colon_token","","",287,null],[12,"ty","","Type of the field.",287,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",288,null],[12,"left","","",288,null],[12,"eq_token","","",288,null],[12,"right","","",288,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",289,null],[12,"mutability","","",289,null],[12,"pat","","",289,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",290,null],[12,"do_token","","",290,null],[12,"catch_token","","",290,null],[12,"block","","",290,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",291,null],[13,"Sub","","The `-` operator (subtraction)",291,null],[13,"Mul","","The `*` operator (multiplication)",291,null],[13,"Div","","The `/` operator (division)",291,null],[13,"Rem","","The `%` operator (modulus)",291,null],[13,"And","","The `&&` operator (logical and)",291,null],[13,"Or","","The `||` operator (logical or)",291,null],[13,"BitXor","","The `^` operator (bitwise xor)",291,null],[13,"BitAnd","","The `&` operator (bitwise and)",291,null],[13,"BitOr","","The `|` operator (bitwise or)",291,null],[13,"Shl","","The `<<` operator (shift left)",291,null],[13,"Shr","","The `>>` operator (shift right)",291,null],[13,"Eq","","The `==` operator (equality)",291,null],[13,"Lt","","The `<` operator (less than)",291,null],[13,"Le","","The `<=` operator (less than or equal to)",291,null],[13,"Ne","","The `!=` operator (not equal to)",291,null],[13,"Ge","","The `>=` operator (greater than or equal to)",291,null],[13,"Gt","","The `>` operator (greater than)",291,null],[13,"AddEq","","The `+=` operator",291,null],[13,"SubEq","","The `-=` operator",291,null],[13,"MulEq","","The `*=` operator",291,null],[13,"DivEq","","The `/=` operator",291,null],[13,"RemEq","","The `%=` operator",291,null],[13,"BitXorEq","","The `^=` operator",291,null],[13,"BitAndEq","","The `&=` operator",291,null],[13,"BitOrEq","","The `|=` operator",291,null],[13,"ShlEq","","The `<<=` operator",291,null],[13,"ShrEq","","The `>>=` operator",291,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",292,null],[12,"if_token","","",292,null],[12,"let_token","","",292,null],[12,"pats","","",292,null],[12,"eq_token","","",292,null],[12,"expr","","",292,null],[12,"then_branch","","",292,null],[12,"else_branch","","",292,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",293,null],[12,"ty","","",293,null],[12,"position","","",293,null],[12,"as_token","","",293,null],[12,"gt_token","","",293,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",294,null],[12,"vis","","",294,null],[12,"macro_token","","",294,null],[12,"ident","","",294,null],[12,"paren_token","","",294,null],[12,"args","","",294,null],[12,"brace_token","","",294,null],[12,"body","","",294,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",295,null],[12,"1","","",295,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",296,null],[12,"member","","Name or index of the field.",296,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",296,null],[12,"expr","","Value of the field.",296,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",297,null],[12,"vis","","",297,null],[12,"use_token","","",297,null],[12,"leading_colon","","",297,null],[12,"tree","","",297,null],[12,"semi_token","","",297,null],[8,"ItemImplExt","","Extension trait for `ItemImpl` (impl block).",null,null],[10,"with_generics","","Instead of",298,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"self"}}],[8,"PairExt","","",null,null],[11,"map_item","","",299,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"pair"}}],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"named","","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[11,"map_item","","",299,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"pair"}}],[11,"with_generics","","",270,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"self"}}],[14,"fail","swc_macros_common","fail! is a panic! with location reporting.",null,null],[14,"unimplemented","","",null,null],[14,"unreachable","","",null,null],[11,"new","swc_macros_common::prelude","Returns an empty `TokenStream` containing no token trees.",300,{"o":{"n":"tokenstream"}}],[11,"empty","","",300,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",300,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"next_span","","",301,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"from","","",300,{"i":[{"n":"quote"}],"o":{"n":"tokenstream"}}],[11,"new_ident_with","","Creates a new ident with same span by applying `map` to `self`.",302,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"ident"}}],[11,"into_pm2_span","","",301,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"from_span","swc_macros_common::prelude::token","",11,{"i":[{"n":"span"}],"o":{"n":"underscore"}}],[11,"from_span","","",18,{"i":[{"n":"span"}],"o":{"n":"at"}}],[11,"from_span","","",39,{"i":[{"n":"span"}],"o":{"n":"ne"}}],[11,"from_span","","",44,{"i":[{"n":"span"}],"o":{"n":"question"}}],[11,"from_span","","",45,{"i":[{"n":"span"}],"o":{"n":"rarrow"}}],[11,"from_span","","",35,{"i":[{"n":"span"}],"o":{"n":"gt"}}],[11,"from_span","","",80,{"i":[{"n":"span"}],"o":{"n":"impl"}}],[11,"from_span","","",91,{"i":[{"n":"span"}],"o":{"n":"return"}}],[11,"from_span","","",61,{"i":[{"n":"span"}],"o":{"n":"group"}}],[11,"from_span","","",81,{"i":[{"n":"span"}],"o":{"n":"in"}}],[11,"from_span","","",55,{"i":[{"n":"span"}],"o":{"n":"star"}}],[11,"from_span","","",13,{"i":[{"n":"span"}],"o":{"n":"add"}}],[11,"from_span","","",43,{"i":[{"n":"span"}],"o":{"n":"pound"}}],[11,"from_span","","",48,{"i":[{"n":"span"}],"o":{"n":"remeq"}}],[11,"from_span","","",20,{"i":[{"n":"span"}],"o":{"n":"caret"}}],[11,"from_span","","",41,{"i":[{"n":"span"}],"o":{"n":"oreq"}}],[11,"from_span","","",90,{"i":[{"n":"span"}],"o":{"n":"ref"}}],[11,"from_span","","",56,{"i":[{"n":"span"}],"o":{"n":"sub"}}],[11,"from_span","","",76,{"i":[{"n":"span"}],"o":{"n":"extern"}}],[11,"from_span","swc_macros_common::prelude","",301,{"i":[{"n":"span"}],"o":{"n":"span"}}],[11,"from_span","swc_macros_common::prelude::token","",23,{"i":[{"n":"span"}],"o":{"n":"colon2"}}],[11,"from_span","","",64,{"i":[{"n":"span"}],"o":{"n":"box"}}],[11,"from_span","","",52,{"i":[{"n":"span"}],"o":{"n":"shleq"}}],[11,"from_span","","",100,{"i":[{"n":"span"}],"o":{"n":"use"}}],[11,"from_span","","",47,{"i":[{"n":"span"}],"o":{"n":"rem"}}],[11,"from_span","","",24,{"i":[{"n":"span"}],"o":{"n":"comma"}}],[11,"from_span","","",63,{"i":[{"n":"span"}],"o":{"n":"auto"}}],[11,"from_span","","",93,{"i":[{"n":"span"}],"o":{"n":"static"}}],[11,"from_span","","",73,{"i":[{"n":"span"}],"o":{"n":"dyn"}}],[11,"from_span","","",50,{"i":[{"n":"span"}],"o":{"n":"semi"}}],[11,"from_span","","",30,{"i":[{"n":"span"}],"o":{"n":"dot3"}}],[11,"from_span","","",99,{"i":[{"n":"span"}],"o":{"n":"unsafe"}}],[11,"from_span","","",75,{"i":[{"n":"span"}],"o":{"n":"enum"}}],[11,"from_span","","",70,{"i":[{"n":"span"}],"o":{"n":"crate"}}],[11,"from_span","","",33,{"i":[{"n":"span"}],"o":{"n":"eqeq"}}],[11,"from_span","","",69,{"i":[{"n":"span"}],"o":{"n":"continue"}}],[11,"from_span","","",103,{"i":[{"n":"span"}],"o":{"n":"yield"}}],[11,"from_span","","",92,{"i":[{"n":"span"}],"o":{"n":"self_"}}],[11,"from_span","","",28,{"i":[{"n":"span"}],"o":{"n":"dot"}}],[11,"from_span","","",32,{"i":[{"n":"span"}],"o":{"n":"eq"}}],[11,"from_span","","",97,{"i":[{"n":"span"}],"o":{"n":"type"}}],[11,"from_span","","",38,{"i":[{"n":"span"}],"o":{"n":"muleq"}}],[11,"from_span","","",40,{"i":[{"n":"span"}],"o":{"n":"or"}}],[11,"from_span","","",85,{"i":[{"n":"span"}],"o":{"n":"match"}}],[11,"from_span","","",88,{"i":[{"n":"span"}],"o":{"n":"mut"}}],[11,"from_span","","",62,{"i":[{"n":"span"}],"o":{"n":"as"}}],[11,"from_span","","",68,{"i":[{"n":"span"}],"o":{"n":"const"}}],[11,"from_span","","",98,{"i":[{"n":"span"}],"o":{"n":"union"}}],[11,"from_span","","",84,{"i":[{"n":"span"}],"o":{"n":"macro"}}],[11,"from_span","","",87,{"i":[{"n":"span"}],"o":{"n":"move"}}],[11,"from_span","","",79,{"i":[{"n":"span"}],"o":{"n":"if"}}],[11,"from_span","","",59,{"i":[{"n":"span"}],"o":{"n":"bracket"}}],[11,"from_span","","",95,{"i":[{"n":"span"}],"o":{"n":"super"}}],[11,"from_span","","",36,{"i":[{"n":"span"}],"o":{"n":"le"}}],[11,"from_span","","",12,{"i":[{"n":"span"}],"o":{"n":"apostrophe"}}],[11,"from_span","","",65,{"i":[{"n":"span"}],"o":{"n":"break"}}],[11,"from_span","","",58,{"i":[{"n":"span"}],"o":{"n":"brace"}}],[11,"from_span","","",37,{"i":[{"n":"span"}],"o":{"n":"lt"}}],[11,"from_span","","",54,{"i":[{"n":"span"}],"o":{"n":"shreq"}}],[11,"from_span","","",74,{"i":[{"n":"span"}],"o":{"n":"else"}}],[11,"from_span","","",21,{"i":[{"n":"span"}],"o":{"n":"careteq"}}],[11,"from_span","","",60,{"i":[{"n":"span"}],"o":{"n":"paren"}}],[11,"from_span","","",86,{"i":[{"n":"span"}],"o":{"n":"mod"}}],[11,"from_span","","",96,{"i":[{"n":"span"}],"o":{"n":"trait"}}],[11,"from_span","","",102,{"i":[{"n":"span"}],"o":{"n":"while"}}],[11,"from_span","","",57,{"i":[{"n":"span"}],"o":{"n":"subeq"}}],[11,"from_span","","",101,{"i":[{"n":"span"}],"o":{"n":"where"}}],[11,"from_span","","",14,{"i":[{"n":"span"}],"o":{"n":"addeq"}}],[11,"from_span","","",31,{"i":[{"n":"span"}],"o":{"n":"dotdoteq"}}],[11,"from_span","","",42,{"i":[{"n":"span"}],"o":{"n":"oror"}}],[11,"from_span","","",82,{"i":[{"n":"span"}],"o":{"n":"let"}}],[11,"from_span","","",25,{"i":[{"n":"span"}],"o":{"n":"div"}}],[11,"from_span","","",19,{"i":[{"n":"span"}],"o":{"n":"bang"}}],[11,"from_span","","",34,{"i":[{"n":"span"}],"o":{"n":"ge"}}],[11,"from_span","","",29,{"i":[{"n":"span"}],"o":{"n":"dot2"}}],[11,"from_span","","",16,{"i":[{"n":"span"}],"o":{"n":"andand"}}],[11,"from_span","","",72,{"i":[{"n":"span"}],"o":{"n":"do"}}],[11,"from_span","","",53,{"i":[{"n":"span"}],"o":{"n":"shr"}}],[11,"from_span","","",15,{"i":[{"n":"span"}],"o":{"n":"and"}}],[11,"from_span","","",46,{"i":[{"n":"span"}],"o":{"n":"larrow"}}],[11,"from_span","","",67,{"i":[{"n":"span"}],"o":{"n":"catch"}}],[11,"from_span","","",71,{"i":[{"n":"span"}],"o":{"n":"default"}}],[11,"from_span","","",89,{"i":[{"n":"span"}],"o":{"n":"pub"}}],[11,"from_span","","",26,{"i":[{"n":"span"}],"o":{"n":"diveq"}}],[11,"from_span","","",17,{"i":[{"n":"span"}],"o":{"n":"andeq"}}],[11,"from_span","","",22,{"i":[{"n":"span"}],"o":{"n":"colon"}}],[11,"from_span","","",83,{"i":[{"n":"span"}],"o":{"n":"loop"}}],[11,"from_span","","",49,{"i":[{"n":"span"}],"o":{"n":"fatarrow"}}],[11,"from_span","","",78,{"i":[{"n":"span"}],"o":{"n":"for"}}],[11,"from_span","","",51,{"i":[{"n":"span"}],"o":{"n":"shl"}}],[11,"from_span","","",66,{"i":[{"n":"span"}],"o":{"n":"capself"}}],[11,"from_span","","",94,{"i":[{"n":"span"}],"o":{"n":"struct"}}],[11,"from_span","","",77,{"i":[{"n":"span"}],"o":{"n":"fn"}}],[11,"to_tokens","swc_macros_common::prelude","",303,null],[11,"into_token_stream","","",303,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"into_iter","","",303,null],[11,"fmt","","",302,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",304,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",305,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",306,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",300,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from_iter","","",300,{"i":[{"n":"i"}],"o":{"n":"tokenstream"}}],[11,"from_str","","",300,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"cmp","","",302,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",302,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"from","","",4,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",4,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",301,{"i":[{"n":"span"}],"o":{"n":"span"}}],[11,"from","","",300,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"from","","",4,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",4,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"extend","","",300,null],[11,"hash","","",302,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",301,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",304,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",305,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",306,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",300,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",302,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",302,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"eq","","",302,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"clone","","",302,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"clone","","",304,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",301,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",300,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"clone","","",305,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"clone","","",306,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"into_iter","","",300,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"append","","For use by `ToTokens` implementations.",300,null],[11,"append_all","","For use by `ToTokens` implementations.",300,null],[11,"append_separated","","For use by `ToTokens` implementations.",300,null],[11,"append_terminated","","For use by `ToTokens` implementations.",300,null],[11,"to_tokens","","",300,null],[11,"into_token_stream","","",300,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"to_tokens","","",4,null],[11,"to_tokens","","",305,null],[11,"to_tokens","","",302,null],[11,"to_tokens","","",306,null],[11,"to_tokens","","",304,null],[11,"fmt","","",277,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::synom","",307,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","swc_macros_common::prelude","",277,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"next","swc_macros_common::prelude::punctuated","",308,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",309,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",310,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",311,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",312,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",313,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from","swc_macros_common::prelude::token","",23,{"i":[{"n":"span"}],"o":{"n":"colon2"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",34,{"i":[{"n":"span"}],"o":{"n":"ge"}}],[11,"from","","",85,{"i":[{"n":"span"}],"o":{"n":"match"}}],[11,"from","","",37,{"i":[{"n":"span"}],"o":{"n":"lt"}}],[11,"from","","",46,{"i":[{"n":"span"}],"o":{"n":"larrow"}}],[11,"from","swc_macros_common::prelude","",110,{"i":[{"n":"argself"}],"o":{"n":"fnarg"}}],[11,"from","swc_macros_common::prelude::token","",38,{"i":[{"n":"span"}],"o":{"n":"muleq"}}],[11,"from","","",57,{"i":[{"n":"span"}],"o":{"n":"subeq"}}],[11,"from","swc_macros_common::prelude","",158,{"i":[{"n":"implitemconst"}],"o":{"n":"implitem"}}],[11,"from","","",119,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"from","","",210,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"from","","",210,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",72,{"i":[{"n":"span"}],"o":{"n":"do"}}],[11,"from","","",51,{"i":[{"n":"span"}],"o":{"n":"shl"}}],[11,"from","swc_macros_common::prelude","",204,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"from","","",119,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"from","swc_macros_common::prelude::token","",60,{"i":[{"n":"span"}],"o":{"n":"paren"}}],[11,"from","swc_macros_common::prelude","",158,{"i":[{"n":"implitemmethod"}],"o":{"n":"implitem"}}],[11,"from","","",235,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"from","swc_macros_common::prelude::token","",92,{"i":[{"n":"span"}],"o":{"n":"self_"}}],[11,"from","swc_macros_common::prelude","",139,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"from","swc_macros_common::prelude::token","",42,{"i":[{"n":"span"}],"o":{"n":"oror"}}],[11,"from","","",95,{"i":[{"n":"span"}],"o":{"n":"super"}}],[11,"from","","",79,{"i":[{"n":"span"}],"o":{"n":"if"}}],[11,"from","","",80,{"i":[{"n":"span"}],"o":{"n":"impl"}}],[11,"from","swc_macros_common::prelude","",140,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"from","swc_macros_common::prelude::token","",82,{"i":[{"n":"span"}],"o":{"n":"let"}}],[11,"from","","",43,{"i":[{"n":"span"}],"o":{"n":"pound"}}],[11,"from","","",98,{"i":[{"n":"span"}],"o":{"n":"union"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemtrait"}],"o":{"n":"item"}}],[11,"from","","",140,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"from","","",210,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"from","","",119,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"from","","",235,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"from","swc_macros_common::prelude::token","",73,{"i":[{"n":"span"}],"o":{"n":"dyn"}}],[11,"from","","",28,{"i":[{"n":"span"}],"o":{"n":"dot"}}],[11,"from","swc_macros_common::prelude","",302,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","swc_macros_common::prelude::token","",55,{"i":[{"n":"span"}],"o":{"n":"star"}}],[11,"from","swc_macros_common::prelude","",108,{"i":[{"n":"ident"}],"o":{"n":"typeparam"}}],[11,"from","","",210,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",71,{"i":[{"n":"span"}],"o":{"n":"default"}}],[11,"from","swc_macros_common::prelude","",302,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","swc_macros_common::prelude::token","",36,{"i":[{"n":"span"}],"o":{"n":"le"}}],[11,"from","","",88,{"i":[{"n":"span"}],"o":{"n":"mut"}}],[11,"from","swc_macros_common::prelude","",216,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"from","","",243,{"i":[{"n":"patpath"}],"o":{"n":"pat"}}],[11,"from","","",119,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"from","","",210,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"from","","",119,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"from","","",119,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"from","swc_macros_common::prelude::token","",90,{"i":[{"n":"span"}],"o":{"n":"ref"}}],[11,"from","swc_macros_common::prelude","",282,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",148,{"i":[{"n":"itemstruct"}],"o":{"n":"item"}}],[11,"from","swc_macros_common::prelude::token","",45,{"i":[{"n":"span"}],"o":{"n":"rarrow"}}],[11,"from","","",66,{"i":[{"n":"span"}],"o":{"n":"capself"}}],[11,"from","","",81,{"i":[{"n":"span"}],"o":{"n":"in"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemtype"}],"o":{"n":"item"}}],[11,"from","","",119,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"from","","",215,{"i":[{"n":"traititemmacro"}],"o":{"n":"traititem"}}],[11,"from","swc_macros_common::prelude::token","",78,{"i":[{"n":"span"}],"o":{"n":"for"}}],[11,"from","swc_macros_common::prelude","",140,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"from","","",215,{"i":[{"n":"traititemconst"}],"o":{"n":"traititem"}}],[11,"from","","",119,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"from","swc_macros_common::prelude::token","",93,{"i":[{"n":"span"}],"o":{"n":"static"}}],[11,"from","","",11,{"i":[{"n":"span"}],"o":{"n":"underscore"}}],[11,"from","swc_macros_common::prelude","",158,{"i":[{"n":"implitemtype"}],"o":{"n":"implitem"}}],[11,"from","","",282,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"from","swc_macros_common::prelude::token","",54,{"i":[{"n":"span"}],"o":{"n":"shreq"}}],[11,"from","","",64,{"i":[{"n":"span"}],"o":{"n":"box"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",47,{"i":[{"n":"span"}],"o":{"n":"rem"}}],[11,"from","","",87,{"i":[{"n":"span"}],"o":{"n":"move"}}],[11,"from","","",26,{"i":[{"n":"span"}],"o":{"n":"diveq"}}],[11,"from","","",31,{"i":[{"n":"span"}],"o":{"n":"dotdoteq"}}],[11,"from","swc_macros_common::prelude","",140,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"from","","",215,{"i":[{"n":"traititemmethod"}],"o":{"n":"traititem"}}],[11,"from","swc_macros_common::prelude::token","",15,{"i":[{"n":"span"}],"o":{"n":"and"}}],[11,"from","swc_macros_common::prelude","",243,{"i":[{"n":"patverbatim"}],"o":{"n":"pat"}}],[11,"from","","",210,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"from","","",210,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"from","","",210,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",19,{"i":[{"n":"span"}],"o":{"n":"bang"}}],[11,"from","","",70,{"i":[{"n":"span"}],"o":{"n":"crate"}}],[11,"from","swc_macros_common::prelude","",119,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"from","swc_macros_common::prelude::token","",63,{"i":[{"n":"span"}],"o":{"n":"auto"}}],[11,"from","swc_macros_common::prelude","",110,{"i":[{"n":"argselfref"}],"o":{"n":"fnarg"}}],[11,"from","","",140,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"from","","",267,{"i":[{"n":"foreignitemtype"}],"o":{"n":"foreignitem"}}],[11,"from","","",215,{"i":[{"n":"traititemtype"}],"o":{"n":"traititem"}}],[11,"from","swc_macros_common::prelude::token","",44,{"i":[{"n":"span"}],"o":{"n":"question"}}],[11,"from","","",58,{"i":[{"n":"span"}],"o":{"n":"brace"}}],[11,"from","","",61,{"i":[{"n":"span"}],"o":{"n":"group"}}],[11,"from","swc_macros_common::prelude","",302,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"from","","",210,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"from","","",243,{"i":[{"n":"pattuple"}],"o":{"n":"pat"}}],[11,"from","swc_macros_common::prelude::token","",13,{"i":[{"n":"span"}],"o":{"n":"add"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"from","","",210,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"from","","",148,{"i":[{"n":"itemexterncrate"}],"o":{"n":"item"}}],[11,"from","swc_macros_common::prelude::token","",94,{"i":[{"n":"span"}],"o":{"n":"struct"}}],[11,"from","","",69,{"i":[{"n":"span"}],"o":{"n":"continue"}}],[11,"from","swc_macros_common::prelude","",117,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"from","swc_macros_common::prelude::token","",74,{"i":[{"n":"span"}],"o":{"n":"else"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"from","","",215,{"i":[{"n":"traititemverbatim"}],"o":{"n":"traititem"}}],[11,"from","","",210,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",24,{"i":[{"n":"span"}],"o":{"n":"comma"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemstatic"}],"o":{"n":"item"}}],[11,"from","","",148,{"i":[{"n":"itemenum"}],"o":{"n":"item"}}],[11,"from","","",182,{"i":[{"n":"t"}],"o":{"n":"path"}}],[11,"from","","",148,{"i":[{"n":"itemconst"}],"o":{"n":"item"}}],[11,"from","","",110,{"i":[{"n":"type"}],"o":{"n":"fnarg"}}],[11,"from","swc_macros_common::prelude::token","",27,{"i":[{"n":"span"}],"o":{"n":"dollar"}}],[11,"from","","",89,{"i":[{"n":"span"}],"o":{"n":"pub"}}],[11,"from","swc_macros_common::prelude","",119,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"from","","",117,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"from","swc_macros_common::prelude::token","",97,{"i":[{"n":"span"}],"o":{"n":"type"}}],[11,"from","","",35,{"i":[{"n":"span"}],"o":{"n":"gt"}}],[11,"from","","",91,{"i":[{"n":"span"}],"o":{"n":"return"}}],[11,"from","swc_macros_common::prelude","",243,{"i":[{"n":"patwild"}],"o":{"n":"pat"}}],[11,"from","","",140,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"from","swc_macros_common::prelude::token","",77,{"i":[{"n":"span"}],"o":{"n":"fn"}}],[11,"from","swc_macros_common::prelude","",235,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"from","","",210,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"from","","",119,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"from","","",158,{"i":[{"n":"implitemverbatim"}],"o":{"n":"implitem"}}],[11,"from","","",210,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"from","","",243,{"i":[{"n":"patstruct"}],"o":{"n":"pat"}}],[11,"from","swc_macros_common::prelude::token","",84,{"i":[{"n":"span"}],"o":{"n":"macro"}}],[11,"from","","",50,{"i":[{"n":"span"}],"o":{"n":"semi"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemmacro2"}],"o":{"n":"item"}}],[11,"from","","",119,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"from","","",148,{"i":[{"n":"itemunion"}],"o":{"n":"item"}}],[11,"from","","",140,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"from","","",210,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"from","","",243,{"i":[{"n":"patlit"}],"o":{"n":"pat"}}],[11,"from","","",210,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"from","","",210,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",48,{"i":[{"n":"span"}],"o":{"n":"remeq"}}],[11,"from","swc_macros_common::prelude","",236,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"from","swc_macros_common::prelude::token","",86,{"i":[{"n":"span"}],"o":{"n":"mod"}}],[11,"from","swc_macros_common::prelude","",222,{"i":[{"n":"usegroup"}],"o":{"n":"usetree"}}],[11,"from","","",222,{"i":[{"n":"usepath"}],"o":{"n":"usetree"}}],[11,"from","","",243,{"i":[{"n":"patrange"}],"o":{"n":"pat"}}],[11,"from","","",222,{"i":[{"n":"useglob"}],"o":{"n":"usetree"}}],[11,"from","","",210,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"from","","",117,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"from","","",140,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"from","swc_macros_common::prelude::token","",41,{"i":[{"n":"span"}],"o":{"n":"oreq"}}],[11,"from","","",29,{"i":[{"n":"span"}],"o":{"n":"dot2"}}],[11,"from","","",39,{"i":[{"n":"span"}],"o":{"n":"ne"}}],[11,"from","swc_macros_common::prelude","",125,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",204,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"from","swc_macros_common::prelude::token","",14,{"i":[{"n":"span"}],"o":{"n":"addeq"}}],[11,"from","","",96,{"i":[{"n":"span"}],"o":{"n":"trait"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"from","","",216,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"from","","",210,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"from","","",148,{"i":[{"n":"itemuse"}],"o":{"n":"item"}}],[11,"from","","",158,{"i":[{"n":"implitemmacro"}],"o":{"n":"implitem"}}],[11,"from","swc_macros_common::prelude::token","",32,{"i":[{"n":"span"}],"o":{"n":"eq"}}],[11,"from","swc_macros_common::prelude","",267,{"i":[{"n":"foreignitemstatic"}],"o":{"n":"foreignitem"}}],[11,"from","","",210,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"from","","",302,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","swc_macros_common::prelude::token","",16,{"i":[{"n":"span"}],"o":{"n":"andand"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"from","","",210,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",101,{"i":[{"n":"span"}],"o":{"n":"where"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemfn"}],"o":{"n":"item"}}],[11,"from","swc_macros_common::prelude::token","",17,{"i":[{"n":"span"}],"o":{"n":"andeq"}}],[11,"from","swc_macros_common::prelude","",119,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"from","swc_macros_common::prelude::token","",76,{"i":[{"n":"span"}],"o":{"n":"extern"}}],[11,"from","swc_macros_common::prelude","",243,{"i":[{"n":"patbox"}],"o":{"n":"pat"}}],[11,"from","","",204,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"from","swc_macros_common::prelude::token","",59,{"i":[{"n":"span"}],"o":{"n":"bracket"}}],[11,"from","","",22,{"i":[{"n":"span"}],"o":{"n":"colon"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"from","","",139,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"from","","",210,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"from","","",243,{"i":[{"n":"patref"}],"o":{"n":"pat"}}],[11,"from","swc_macros_common::prelude::token","",102,{"i":[{"n":"span"}],"o":{"n":"while"}}],[11,"from","swc_macros_common::prelude","",207,{"i":[{"n":"t"}],"o":{"n":"pathsegment"}}],[11,"from","","",210,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"from","","",148,{"i":[{"n":"itemimpl"}],"o":{"n":"item"}}],[11,"from","","",222,{"i":[{"n":"userename"}],"o":{"n":"usetree"}}],[11,"from","","",119,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"from","swc_macros_common::prelude::token","",30,{"i":[{"n":"span"}],"o":{"n":"dot3"}}],[11,"from","swc_macros_common::prelude","",125,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"from","","",110,{"i":[{"n":"pat"}],"o":{"n":"fnarg"}}],[11,"from","","",148,{"i":[{"n":"itemforeignmod"}],"o":{"n":"item"}}],[11,"from","","",210,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",40,{"i":[{"n":"span"}],"o":{"n":"or"}}],[11,"from","swc_macros_common::prelude","",110,{"i":[{"n":"argcaptured"}],"o":{"n":"fnarg"}}],[11,"from","","",222,{"i":[{"n":"usename"}],"o":{"n":"usetree"}}],[11,"from","","",210,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"from","","",148,{"i":[{"n":"deriveinput"}],"o":{"n":"item"}}],[11,"from","swc_macros_common::prelude::token","",100,{"i":[{"n":"span"}],"o":{"n":"use"}}],[11,"from","","",56,{"i":[{"n":"span"}],"o":{"n":"sub"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",53,{"i":[{"n":"span"}],"o":{"n":"shr"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemmod"}],"o":{"n":"item"}}],[11,"from","","",210,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",67,{"i":[{"n":"span"}],"o":{"n":"catch"}}],[11,"from","swc_macros_common::prelude","",119,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"from","","",236,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"from","swc_macros_common::prelude::token","",103,{"i":[{"n":"span"}],"o":{"n":"yield"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",52,{"i":[{"n":"span"}],"o":{"n":"shleq"}}],[11,"from","swc_macros_common::prelude","",243,{"i":[{"n":"pattuplestruct"}],"o":{"n":"pat"}}],[11,"from","","",206,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"from","","",148,{"i":[{"n":"itemmacro"}],"o":{"n":"item"}}],[11,"from","","",210,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"from","","",243,{"i":[{"n":"patmacro"}],"o":{"n":"pat"}}],[11,"from","","",210,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",68,{"i":[{"n":"span"}],"o":{"n":"const"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",18,{"i":[{"n":"span"}],"o":{"n":"at"}}],[11,"from","","",33,{"i":[{"n":"span"}],"o":{"n":"eqeq"}}],[11,"from","swc_macros_common::prelude","",148,{"i":[{"n":"itemverbatim"}],"o":{"n":"item"}}],[11,"from","swc_macros_common::prelude::token","",20,{"i":[{"n":"span"}],"o":{"n":"caret"}}],[11,"from","swc_macros_common::prelude","",243,{"i":[{"n":"patslice"}],"o":{"n":"pat"}}],[11,"from","swc_macros_common::prelude::token","",62,{"i":[{"n":"span"}],"o":{"n":"as"}}],[11,"from","swc_macros_common::prelude","",210,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",83,{"i":[{"n":"span"}],"o":{"n":"loop"}}],[11,"from","","",12,{"i":[{"n":"span"}],"o":{"n":"apostrophe"}}],[11,"from","","",65,{"i":[{"n":"span"}],"o":{"n":"break"}}],[11,"from","swc_macros_common::prelude","",216,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"from","","",210,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",49,{"i":[{"n":"span"}],"o":{"n":"fatarrow"}}],[11,"from","swc_macros_common::prelude","",243,{"i":[{"n":"patident"}],"o":{"n":"pat"}}],[11,"from","swc_macros_common::prelude::token","",99,{"i":[{"n":"span"}],"o":{"n":"unsafe"}}],[11,"from","","",25,{"i":[{"n":"span"}],"o":{"n":"div"}}],[11,"from","swc_macros_common::prelude","",267,{"i":[{"n":"foreignitemfn"}],"o":{"n":"foreignitem"}}],[11,"from","","",210,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"from","swc_macros_common::prelude::token","",75,{"i":[{"n":"span"}],"o":{"n":"enum"}}],[11,"from","swc_macros_common::prelude","",267,{"i":[{"n":"foreignitemverbatim"}],"o":{"n":"foreignitem"}}],[11,"from","","",236,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"from","swc_macros_common::prelude::token","",21,{"i":[{"n":"span"}],"o":{"n":"careteq"}}],[11,"extend","swc_macros_common::prelude::punctuated","",314,null],[11,"extend","","",314,null],[11,"parse","swc_macros_common::prelude","",281,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",281,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",231,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",231,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",283,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",283,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",103,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",66,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",66,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",14,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",14,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",297,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",297,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",252,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",252,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",88,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",88,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",24,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",24,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",270,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",270,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",315,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",315,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",255,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",255,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",65,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",65,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",182,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",182,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",206,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",206,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",49,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",248,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",248,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",233,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",233,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",21,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",46,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",46,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",15,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",15,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",20,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",20,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",141,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",52,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",41,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",41,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",316,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",316,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",33,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",33,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",63,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",63,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",317,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",317,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",236,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",236,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",76,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",76,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",93,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",93,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",133,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",133,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",25,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",25,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",26,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",26,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",44,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",44,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",214,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",214,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",79,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",79,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",149,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",261,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",261,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",290,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",290,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",16,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",16,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",176,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",176,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",249,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",249,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",69,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",69,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",166,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",302,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",302,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",74,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",74,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",304,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",304,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",211,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",211,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",194,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",194,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",27,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",27,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",235,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",235,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",296,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",296,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",134,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",134,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",247,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",247,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",258,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",258,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",294,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",294,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",285,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",285,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",224,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",224,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",273,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",273,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",181,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",181,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",90,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",282,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",282,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",54,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",54,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",277,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",277,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",221,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",221,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",146,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",146,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",157,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",157,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",17,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",17,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",207,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",207,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",227,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",227,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",305,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",305,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",87,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",112,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",267,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",267,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",266,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",266,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",42,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",119,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",278,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",278,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",243,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",243,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",30,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",18,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",18,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",84,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",84,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",153,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",153,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",85,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",85,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",318,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",318,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",178,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",178,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",45,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",241,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",241,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",12,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",12,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",19,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",19,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",83,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",83,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",124,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",124,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",38,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",162,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",232,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",232,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",64,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",64,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",192,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",192,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",98,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",186,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",186,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",99,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",28,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",28,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",138,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",55,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",55,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",73,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",73,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",300,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",300,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",319,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",319,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",199,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",199,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",34,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",34,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",251,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",251,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",240,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",240,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",110,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",110,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",223,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",223,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",189,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",189,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",51,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",272,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",272,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",264,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",264,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",271,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",271,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",208,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",208,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",135,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",135,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",202,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",202,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",77,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",77,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",286,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",286,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",91,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",198,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",198,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",276,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",276,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",156,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",156,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",188,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",188,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",292,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",292,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",13,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",13,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",39,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",39,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",82,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",82,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",257,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",257,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",229,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",229,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",200,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",200,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",147,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",147,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",80,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",80,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",22,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",22,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",56,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",56,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",238,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",238,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",245,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",245,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",11,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",11,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",284,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",284,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",126,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",126,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",222,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",222,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",210,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",210,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",256,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",256,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",109,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",109,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",62,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",62,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",201,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",201,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",71,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",86,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",86,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",289,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",289,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",31,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",246,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",246,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",212,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",212,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",137,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",137,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",32,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",32,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",190,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",190,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",50,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",68,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",68,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",320,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",320,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",262,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",262,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",67,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",81,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",81,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",75,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",75,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",244,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",244,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",89,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",150,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",205,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",205,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",35,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",35,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",108,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",23,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",37,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",37,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",237,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",237,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",78,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",78,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",265,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",265,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",209,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",209,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",260,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",260,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",57,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",57,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",43,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",43,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",279,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",279,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",250,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",250,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude::token","",36,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",36,{"o":{"g":["str"],"n":"option"}}],[11,"parse","swc_macros_common::prelude","",183,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",183,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",306,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"description","","",306,{"o":{"g":["str"],"n":"option"}}],[11,"parse_any","","",302,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"len","swc_macros_common::prelude::punctuated","",308,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",313,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",309,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",311,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",310,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"len","","",312,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","swc_macros_common::prelude::token","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",271,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",259,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",201,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::punctuated","",314,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",289,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::synom","",307,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",315,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",290,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",291,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",319,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",287,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",320,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",288,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",248,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",217,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",221,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",260,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",321,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",250,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",258,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",225,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",232,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",265,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",269,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",238,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",266,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",247,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",214,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",292,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",283,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",262,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",256,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",222,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",295,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",264,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",246,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",226,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",276,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",285,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",200,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",230,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",316,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",228,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",251,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",198,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",219,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",322,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",261,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",243,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",240,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",318,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",207,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",294,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",211,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",244,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",210,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",278,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",206,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",273,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",270,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",212,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",215,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",254,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",263,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",323,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",229,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",282,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",284,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",249,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",242,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",245,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",279,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",257,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",277,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",227,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",267,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",286,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",241,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",296,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",297,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",293,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",255,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",231,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",234,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",239,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",208,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",275,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",274,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",280,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",253,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",252,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",213,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",272,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",223,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",317,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",209,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",233,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",237,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",281,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","swc_macros_common::prelude::token","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"into_iter","swc_macros_common::prelude::punctuated","",314,null],[11,"from_iter","","",314,{"i":[{"n":"i"}],"o":{"n":"punctuated"}}],[11,"from_iter","","",314,{"i":[{"n":"i"}],"o":{"n":"punctuated"}}],[11,"partial_cmp","swc_macros_common::prelude","",277,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","swc_macros_common::prelude::token","",16,{"o":{"n":"andand"}}],[11,"default","","",36,{"o":{"n":"le"}}],[11,"default","","",91,{"o":{"n":"return"}}],[11,"default","","",102,{"o":{"n":"while"}}],[11,"default","","",43,{"o":{"n":"pound"}}],[11,"default","","",25,{"o":{"n":"div"}}],[11,"default","","",64,{"o":{"n":"box"}}],[11,"default","","",87,{"o":{"n":"move"}}],[11,"default","","",97,{"o":{"n":"type"}}],[11,"default","","",51,{"o":{"n":"shl"}}],[11,"default","","",61,{"o":{"n":"group"}}],[11,"default","","",46,{"o":{"n":"larrow"}}],[11,"default","","",32,{"o":{"n":"eq"}}],[11,"default","","",82,{"o":{"n":"let"}}],[11,"default","swc_macros_common::prelude","",220,{"o":{"n":"patharguments"}}],[11,"default","swc_macros_common::prelude::token","",71,{"o":{"n":"default"}}],[11,"default","","",21,{"o":{"n":"careteq"}}],[11,"default","","",28,{"o":{"n":"dot"}}],[11,"default","","",70,{"o":{"n":"crate"}}],[11,"default","","",31,{"o":{"n":"dotdoteq"}}],[11,"default","","",23,{"o":{"n":"colon2"}}],[11,"default","","",101,{"o":{"n":"where"}}],[11,"default","","",77,{"o":{"n":"fn"}}],[11,"default","","",50,{"o":{"n":"semi"}}],[11,"default","","",45,{"o":{"n":"rarrow"}}],[11,"default","","",90,{"o":{"n":"ref"}}],[11,"default","","",59,{"o":{"n":"bracket"}}],[11,"default","","",98,{"o":{"n":"union"}}],[11,"default","","",30,{"o":{"n":"dot3"}}],[11,"default","swc_macros_common::prelude","",138,{"o":{"n":"boundlifetimes"}}],[11,"default","swc_macros_common::prelude::token","",66,{"o":{"n":"capself"}}],[11,"default","","",99,{"o":{"n":"unsafe"}}],[11,"default","","",12,{"o":{"n":"apostrophe"}}],[11,"default","","",48,{"o":{"n":"remeq"}}],[11,"default","","",17,{"o":{"n":"andeq"}}],[11,"default","","",20,{"o":{"n":"caret"}}],[11,"default","swc_macros_common::prelude","",279,{"o":{"n":"generics"}}],[11,"default","swc_macros_common::prelude::token","",56,{"o":{"n":"sub"}}],[11,"default","","",96,{"o":{"n":"trait"}}],[11,"default","","",41,{"o":{"n":"oreq"}}],[11,"default","","",58,{"o":{"n":"brace"}}],[11,"default","","",85,{"o":{"n":"match"}}],[11,"default","swc_macros_common::prelude::punctuated","",314,{"o":{"n":"punctuated"}}],[11,"default","swc_macros_common::prelude::token","",81,{"o":{"n":"in"}}],[11,"default","","",49,{"o":{"n":"fatarrow"}}],[11,"default","","",13,{"o":{"n":"add"}}],[11,"default","","",92,{"o":{"n":"self_"}}],[11,"default","","",95,{"o":{"n":"super"}}],[11,"default","","",33,{"o":{"n":"eqeq"}}],[11,"default","","",68,{"o":{"n":"const"}}],[11,"default","","",42,{"o":{"n":"oror"}}],[11,"default","","",44,{"o":{"n":"question"}}],[11,"default","","",24,{"o":{"n":"comma"}}],[11,"default","","",60,{"o":{"n":"paren"}}],[11,"default","","",37,{"o":{"n":"lt"}}],[11,"default","","",26,{"o":{"n":"diveq"}}],[11,"default","","",86,{"o":{"n":"mod"}}],[11,"default","","",29,{"o":{"n":"dot2"}}],[11,"default","","",73,{"o":{"n":"dyn"}}],[11,"default","","",62,{"o":{"n":"as"}}],[11,"default","","",55,{"o":{"n":"star"}}],[11,"default","","",67,{"o":{"n":"catch"}}],[11,"default","","",75,{"o":{"n":"enum"}}],[11,"default","","",65,{"o":{"n":"break"}}],[11,"default","","",100,{"o":{"n":"use"}}],[11,"default","","",74,{"o":{"n":"else"}}],[11,"default","","",35,{"o":{"n":"gt"}}],[11,"default","","",22,{"o":{"n":"colon"}}],[11,"default","","",83,{"o":{"n":"loop"}}],[11,"default","","",40,{"o":{"n":"or"}}],[11,"default","","",52,{"o":{"n":"shleq"}}],[11,"default","","",57,{"o":{"n":"subeq"}}],[11,"default","","",72,{"o":{"n":"do"}}],[11,"default","","",89,{"o":{"n":"pub"}}],[11,"default","","",47,{"o":{"n":"rem"}}],[11,"default","","",78,{"o":{"n":"for"}}],[11,"default","","",14,{"o":{"n":"addeq"}}],[11,"default","","",38,{"o":{"n":"muleq"}}],[11,"default","","",27,{"o":{"n":"dollar"}}],[11,"default","","",94,{"o":{"n":"struct"}}],[11,"default","","",54,{"o":{"n":"shreq"}}],[11,"default","","",79,{"o":{"n":"if"}}],[11,"default","","",11,{"o":{"n":"underscore"}}],[11,"default","","",103,{"o":{"n":"yield"}}],[11,"default","","",80,{"o":{"n":"impl"}}],[11,"default","","",63,{"o":{"n":"auto"}}],[11,"default","","",76,{"o":{"n":"extern"}}],[11,"default","","",88,{"o":{"n":"mut"}}],[11,"default","","",84,{"o":{"n":"macro"}}],[11,"default","","",15,{"o":{"n":"and"}}],[11,"default","","",69,{"o":{"n":"continue"}}],[11,"default","","",18,{"o":{"n":"at"}}],[11,"default","","",19,{"o":{"n":"bang"}}],[11,"default","","",34,{"o":{"n":"ge"}}],[11,"default","","",53,{"o":{"n":"shr"}}],[11,"default","","",93,{"o":{"n":"static"}}],[11,"default","","",39,{"o":{"n":"ne"}}],[11,"description","swc_macros_common::prelude::synom","",307,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"hash","swc_macros_common::prelude","",177,null],[11,"hash","","",260,null],[11,"hash","swc_macros_common::prelude::token","",34,null],[11,"hash","","",44,null],[11,"hash","","",19,null],[11,"hash","swc_macros_common::prelude","",280,null],[11,"hash","","",135,null],[11,"hash","","",193,null],[11,"hash","","",223,null],[11,"hash","swc_macros_common::prelude::token","",87,null],[11,"hash","swc_macros_common::prelude","",209,null],[11,"hash","","",256,null],[11,"hash","","",188,null],[11,"hash","","",262,null],[11,"hash","","",274,null],[11,"hash","swc_macros_common::prelude::token","",75,null],[11,"hash","","",26,null],[11,"hash","","",23,null],[11,"hash","swc_macros_common::prelude","",150,null],[11,"hash","","",219,null],[11,"hash","swc_macros_common::prelude::token","",59,null],[11,"hash","","",16,null],[11,"hash","swc_macros_common::prelude","",137,null],[11,"hash","swc_macros_common::prelude::token","",79,null],[11,"hash","swc_macros_common::prelude","",251,null],[11,"hash","swc_macros_common::prelude::token","",88,null],[11,"hash","swc_macros_common::prelude","",291,null],[11,"hash","","",140,null],[11,"hash","swc_macros_common::prelude::token","",97,null],[11,"hash","swc_macros_common::prelude","",127,null],[11,"hash","","",228,null],[11,"hash","","",276,null],[11,"hash","swc_macros_common::prelude::token","",92,null],[11,"hash","swc_macros_common::prelude","",247,null],[11,"hash","","",226,null],[11,"hash","","",238,null],[11,"hash","","",109,null],[11,"hash","","",278,null],[11,"hash","","",133,null],[11,"hash","","",221,null],[11,"hash","","",121,null],[11,"hash","swc_macros_common::prelude::token","",43,null],[11,"hash","swc_macros_common::prelude","",279,null],[11,"hash","swc_macros_common::prelude::token","",21,null],[11,"hash","swc_macros_common::prelude","",264,null],[11,"hash","swc_macros_common::prelude::token","",66,null],[11,"hash","swc_macros_common::prelude","",182,null],[11,"hash","swc_macros_common::prelude::token","",61,null],[11,"hash","","",28,null],[11,"hash","swc_macros_common::prelude","",184,null],[11,"hash","swc_macros_common::prelude::token","",18,null],[11,"hash","swc_macros_common::prelude","",117,null],[11,"hash","swc_macros_common::prelude::token","",46,null],[11,"hash","swc_macros_common::prelude","",194,null],[11,"hash","swc_macros_common::prelude::token","",103,null],[11,"hash","","",24,null],[11,"hash","swc_macros_common::prelude","",204,null],[11,"hash","","",161,null],[11,"hash","","",318,null],[11,"hash","","",165,null],[11,"hash","","",258,null],[11,"hash","","",272,null],[11,"hash","","",207,null],[11,"hash","","",145,null],[11,"hash","","",230,null],[11,"hash","","",120,null],[11,"hash","","",142,null],[11,"hash","swc_macros_common::prelude::token","",101,null],[11,"hash","","",41,null],[11,"hash","swc_macros_common::prelude","",166,null],[11,"hash","","",108,null],[11,"hash","swc_macros_common::prelude::token","",39,null],[11,"hash","swc_macros_common::prelude","",176,null],[11,"hash","","",227,null],[11,"hash","","",129,null],[11,"hash","swc_macros_common::prelude::token","",93,null],[11,"hash","swc_macros_common::prelude","",244,null],[11,"hash","","",141,null],[11,"hash","","",270,null],[11,"hash","swc_macros_common::prelude::token","",48,null],[11,"hash","swc_macros_common::prelude","",257,null],[11,"hash","","",136,null],[11,"hash","","",245,null],[11,"hash","","",159,null],[11,"hash","swc_macros_common::prelude::token","",85,null],[11,"hash","","",72,null],[11,"hash","swc_macros_common::prelude","",189,null],[11,"hash","swc_macros_common::prelude::token","",100,null],[11,"hash","swc_macros_common::prelude","",237,null],[11,"hash","swc_macros_common::prelude::token","",58,null],[11,"hash","swc_macros_common::prelude","",216,null],[11,"hash","","",172,null],[11,"hash","","",125,null],[11,"hash","","",152,null],[11,"hash","","",167,null],[11,"hash","","",248,null],[11,"hash","swc_macros_common::prelude::token","",70,null],[11,"hash","","",91,null],[11,"hash","","",38,null],[11,"hash","swc_macros_common::prelude","",162,null],[11,"hash","","",151,null],[11,"hash","","",217,null],[11,"hash","swc_macros_common::prelude::token","",55,null],[11,"hash","swc_macros_common::prelude","",282,null],[11,"hash","","",273,null],[11,"hash","","",249,null],[11,"hash","swc_macros_common::prelude::token","",98,null],[11,"hash","","",17,null],[11,"hash","","",94,null],[11,"hash","","",71,null],[11,"hash","swc_macros_common::prelude","",168,null],[11,"hash","","",160,null],[11,"hash","","",158,null],[11,"hash","","",208,null],[11,"hash","","",198,null],[11,"hash","","",183,null],[11,"hash","","",187,null],[11,"hash","swc_macros_common::prelude::token","",22,null],[11,"hash","swc_macros_common::prelude","",284,null],[11,"hash","swc_macros_common::prelude::token","",82,null],[11,"hash","","",45,null],[11,"hash","","",14,null],[11,"hash","swc_macros_common::prelude","",297,null],[11,"hash","","",199,null],[11,"hash","","",225,null],[11,"hash","","",156,null],[11,"hash","","",240,null],[11,"hash","","",277,null],[11,"hash","","",296,null],[11,"hash","","",134,null],[11,"hash","","",181,null],[11,"hash","swc_macros_common::prelude::token","",78,null],[11,"hash","","",95,null],[11,"hash","","",53,null],[11,"hash","swc_macros_common::prelude","",139,null],[11,"hash","swc_macros_common::prelude::token","",74,null],[11,"hash","","",57,null],[11,"hash","swc_macros_common::prelude","",233,null],[11,"hash","swc_macros_common::prelude::token","",40,null],[11,"hash","","",63,null],[11,"hash","swc_macros_common::prelude","",128,null],[11,"hash","","",322,null],[11,"hash","swc_macros_common::prelude::token","",76,null],[11,"hash","swc_macros_common::prelude","",114,null],[11,"hash","swc_macros_common::prelude::token","",32,null],[11,"hash","swc_macros_common::prelude","",122,null],[11,"hash","","",192,null],[11,"hash","swc_macros_common::prelude::token","",31,null],[11,"hash","swc_macros_common::prelude","",255,null],[11,"hash","","",146,null],[11,"hash","","",143,null],[11,"hash","swc_macros_common::prelude::token","",54,null],[11,"hash","swc_macros_common::prelude","",229,null],[11,"hash","","",293,null],[11,"hash","","",252,null],[11,"hash","","",210,null],[11,"hash","","",126,null],[11,"hash","","",222,null],[11,"hash","","",236,null],[11,"hash","swc_macros_common::prelude::token","",86,null],[11,"hash","","",99,null],[11,"hash","swc_macros_common::prelude","",163,null],[11,"hash","swc_macros_common::prelude::token","",42,null],[11,"hash","","",11,null],[11,"hash","","",37,null],[11,"hash","swc_macros_common::prelude","",295,null],[11,"hash","swc_macros_common::prelude::punctuated","",314,null],[11,"hash","swc_macros_common::prelude","",155,null],[11,"hash","","",266,null],[11,"hash","swc_macros_common::prelude::token","",51,null],[11,"hash","swc_macros_common::prelude","",175,null],[11,"hash","","",261,null],[11,"hash","","",243,null],[11,"hash","","",212,null],[11,"hash","","",235,null],[11,"hash","","",206,null],[11,"hash","swc_macros_common::prelude::token","",90,null],[11,"hash","swc_macros_common::prelude","",110,null],[11,"hash","swc_macros_common::prelude::token","",84,null],[11,"hash","swc_macros_common::prelude","",196,null],[11,"hash","","",132,null],[11,"hash","swc_macros_common::prelude::token","",12,null],[11,"hash","swc_macros_common::prelude","",289,null],[11,"hash","swc_macros_common::prelude::token","",15,null],[11,"hash","swc_macros_common::prelude","",290,null],[11,"hash","","",242,null],[11,"hash","","",205,null],[11,"hash","","",218,null],[11,"hash","","",157,null],[11,"hash","swc_macros_common::prelude::token","",77,null],[11,"hash","swc_macros_common::prelude","",224,null],[11,"hash","","",323,null],[11,"hash","","",292,null],[11,"hash","","",186,null],[11,"hash","swc_macros_common::prelude::token","",56,null],[11,"hash","swc_macros_common::prelude","",269,null],[11,"hash","","",201,null],[11,"hash","","",287,null],[11,"hash","","",317,null],[11,"hash","swc_macros_common::prelude::token","",36,null],[11,"hash","swc_macros_common::prelude","",288,null],[11,"hash","","",283,null],[11,"hash","","",185,null],[11,"hash","","",319,null],[11,"hash","","",275,null],[11,"hash","","",267,null],[11,"hash","","",259,null],[11,"hash","","",147,null],[11,"hash","","",250,null],[11,"hash","swc_macros_common::prelude::token","",81,null],[11,"hash","swc_macros_common::prelude","",118,null],[11,"hash","","",153,null],[11,"hash","swc_macros_common::prelude::token","",64,null],[11,"hash","","",69,null],[11,"hash","swc_macros_common::prelude","",211,null],[11,"hash","","",215,null],[11,"hash","","",294,null],[11,"hash","","",234,null],[11,"hash","swc_macros_common::prelude::token","",62,null],[11,"hash","","",89,null],[11,"hash","swc_macros_common::prelude","",180,null],[11,"hash","","",239,null],[11,"hash","swc_macros_common::prelude::token","",102,null],[11,"hash","","",68,null],[11,"hash","swc_macros_common::prelude","",253,null],[11,"hash","","",169,null],[11,"hash","swc_macros_common::prelude::token","",29,null],[11,"hash","swc_macros_common::prelude","",202,null],[11,"hash","swc_macros_common::prelude::token","",13,null],[11,"hash","swc_macros_common::prelude","",148,null],[11,"hash","","",115,null],[11,"hash","swc_macros_common::prelude::token","",60,null],[11,"hash","swc_macros_common::prelude","",173,null],[11,"hash","swc_macros_common::prelude::token","",47,null],[11,"hash","","",33,null],[11,"hash","swc_macros_common::prelude","",315,null],[11,"hash","","",281,null],[11,"hash","","",113,null],[11,"hash","","",320,null],[11,"hash","","",124,null],[11,"hash","","",138,null],[11,"hash","","",286,null],[11,"hash","","",321,null],[11,"hash","","",263,null],[11,"hash","","",130,null],[11,"hash","swc_macros_common::prelude::token","",27,null],[11,"hash","","",67,null],[11,"hash","swc_macros_common::prelude","",170,null],[11,"hash","","",116,null],[11,"hash","","",316,null],[11,"hash","","",200,null],[11,"hash","","",149,null],[11,"hash","","",285,null],[11,"hash","swc_macros_common::prelude::token","",52,null],[11,"hash","swc_macros_common::prelude","",111,null],[11,"hash","swc_macros_common::prelude::token","",96,null],[11,"hash","","",35,null],[11,"hash","","",30,null],[11,"hash","swc_macros_common::prelude","",241,null],[11,"hash","","",112,null],[11,"hash","","",179,null],[11,"hash","","",265,null],[11,"hash","","",246,null],[11,"hash","","",171,null],[11,"hash","","",154,null],[11,"hash","","",190,null],[11,"hash","","",254,null],[11,"hash","","",271,null],[11,"hash","swc_macros_common::prelude::token","",49,null],[11,"hash","swc_macros_common::prelude","",195,null],[11,"hash","","",203,null],[11,"hash","","",197,null],[11,"hash","","",174,null],[11,"hash","","",232,null],[11,"hash","swc_macros_common::prelude::token","",73,null],[11,"hash","swc_macros_common::prelude","",178,null],[11,"hash","","",164,null],[11,"hash","swc_macros_common::prelude::token","",20,null],[11,"hash","","",83,null],[11,"hash","swc_macros_common::prelude","",213,null],[11,"hash","swc_macros_common::prelude::token","",80,null],[11,"hash","swc_macros_common::prelude","",119,null],[11,"hash","","",231,null],[11,"hash","swc_macros_common::prelude::token","",50,null],[11,"hash","swc_macros_common::prelude","",123,null],[11,"hash","","",214,null],[11,"hash","","",191,null],[11,"hash","swc_macros_common::prelude::token","",25,null],[11,"hash","swc_macros_common::prelude","",131,null],[11,"hash","swc_macros_common::prelude::token","",65,null],[11,"hash","swc_macros_common::prelude","",220,null],[11,"eq","swc_macros_common::prelude::token","",34,{"i":[{"n":"self"},{"n":"ge"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",279,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",279,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"eq","","",274,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"ne","","",274,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"ne","","",179,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"eq","","",219,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"ne","","",219,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",70,{"i":[{"n":"self"},{"n":"crate"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",262,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"bool"}}],[11,"ne","","",262,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"bool"}}],[11,"eq","","",263,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"ne","","",263,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",100,{"i":[{"n":"self"},{"n":"use"}],"o":{"n":"bool"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"dollar"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",278,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"bool"}}],[11,"ne","","",278,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",16,{"i":[{"n":"self"},{"n":"andand"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",282,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"ne","","",282,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"ne","","",175,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",29,{"i":[{"n":"self"},{"n":"dot2"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",138,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"eq","","",212,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"ne","","",212,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"eq","","",275,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"ne","","",275,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",56,{"i":[{"n":"self"},{"n":"sub"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",148,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"ne","","",109,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"eq","","",233,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"bool"}}],[11,"ne","","",233,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"bool"}}],[11,"eq","","",317,{"i":[{"n":"self"},{"n":"litfloat"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",45,{"i":[{"n":"self"},{"n":"rarrow"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",160,{"i":[{"n":"self"},{"n":"traititemverbatim"}],"o":{"n":"bool"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"bool"}}],[11,"ne","","",152,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"bool"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"ne","","",151,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"eq","","",202,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"ne","","",202,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"ne","","",156,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"eq","","",254,{"i":[{"n":"self"},{"n":"implitemverbatim"}],"o":{"n":"bool"}}],[11,"eq","","",247,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"bool"}}],[11,"ne","","",247,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",14,{"i":[{"n":"self"},{"n":"addeq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",167,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"ne","","",167,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"eq","","",273,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"bool"}}],[11,"ne","","",273,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",25,{"i":[{"n":"self"},{"n":"div"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",178,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"ne","","",178,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",33,{"i":[{"n":"self"},{"n":"eqeq"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"caret"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",129,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"ne","","",129,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",76,{"i":[{"n":"self"},{"n":"extern"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",252,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"ne","","",252,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",91,{"i":[{"n":"self"},{"n":"return"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",229,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"ne","","",229,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"eq","","",207,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"ne","","",207,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"eq","","",214,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"ne","","",214,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"attribute"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",58,{"i":[{"n":"self"},{"n":"brace"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",276,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"bool"}}],[11,"ne","","",276,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"bool"}}],[11,"eq","","",243,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"bool"}}],[11,"ne","","",243,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"bool"}}],[11,"eq","","",253,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"ne","","",253,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"eq","","",174,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"ne","","",174,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"eq","","",256,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"bool"}}],[11,"ne","","",256,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",12,{"i":[{"n":"self"},{"n":"apostrophe"}],"o":{"n":"bool"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"as"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",245,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"ne","","",245,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"eq","","",227,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"ne","","",227,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",19,{"i":[{"n":"self"},{"n":"bang"}],"o":{"n":"bool"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"break"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",321,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"ne","","",321,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"eq","","",194,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"bool"}}],[11,"ne","","",194,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"bool"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"ne","","",108,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"eq","","",184,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"ne","","",184,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"eq","","",182,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"ne","","",182,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",37,{"i":[{"n":"self"},{"n":"lt"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",291,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"ne","","",291,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"eq","","",246,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"ne","","",246,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"bool"}}],[11,"ne","","",112,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"bool"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"ne","","",117,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"eq","","",267,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"bool"}}],[11,"ne","","",267,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"bool"}}],[11,"eq","","",241,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"ne","","",241,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"eq","","",200,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"ne","","",200,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"eq","","",255,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"bool"}}],[11,"ne","","",255,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"bool"}}],[11,"eq","","",265,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"ne","","",265,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"ne","","",155,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",102,{"i":[{"n":"self"},{"n":"while"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",122,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",64,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"bool"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",205,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"bool"}}],[11,"ne","","",205,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"bool"}}],[11,"eq","","",271,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"bool"}}],[11,"ne","","",271,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",51,{"i":[{"n":"self"},{"n":"shl"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",295,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"ne","","",295,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",30,{"i":[{"n":"self"},{"n":"dot3"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",132,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"ne","","",132,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",40,{"i":[{"n":"self"},{"n":"or"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",159,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"ne","","",159,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"eq","","",226,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"bool"}}],[11,"ne","","",226,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"bool"}}],[11,"eq","","",239,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"bool"}}],[11,"ne","","",239,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"bool"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"ne","","",137,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"eq","","",223,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"bool"}}],[11,"ne","","",223,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"ne","","",133,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"eq","","",259,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"ne","","",259,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"bool"}}],[11,"ne","","",149,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",83,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",131,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"ne","","",131,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"eq","","",322,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"ne","","",322,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",39,{"i":[{"n":"self"},{"n":"ne"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",264,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"bool"}}],[11,"ne","","",264,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",80,{"i":[{"n":"self"},{"n":"impl"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",187,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"eq","","",289,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"bool"}}],[11,"ne","","",289,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"bool"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"bool"}}],[11,"eq","","",258,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"bool"}}],[11,"ne","","",258,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"bool"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"eq","","",193,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"ne","","",193,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"ne","","",189,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",99,{"i":[{"n":"self"},{"n":"unsafe"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",171,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"ne","","",171,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",13,{"i":[{"n":"self"},{"n":"add"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",166,{"i":[{"n":"self"},{"n":"litbool"}],"o":{"n":"bool"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"bool"}}],[11,"ne","","",147,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"bool"}}],[11,"eq","","",257,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",257,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"ne","","",150,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"eq","","",235,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"ne","","",235,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"bool"}}],[11,"ne","","",162,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",43,{"i":[{"n":"self"},{"n":"pound"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",316,{"i":[{"n":"self"},{"n":"litbytestr"}],"o":{"n":"bool"}}],[11,"eq","","",216,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"ne","","",216,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",57,{"i":[{"n":"self"},{"n":"subeq"}],"o":{"n":"bool"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"oreq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",121,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"eq","","",218,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"ne","","",218,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"eq","","",296,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"bool"}}],[11,"ne","","",296,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",68,{"i":[{"n":"self"},{"n":"const"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",284,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"ne","","",284,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"eq","","",204,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"ne","","",204,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"eq","","",238,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"ne","","",238,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"ne","","",165,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",78,{"i":[{"n":"self"},{"n":"for"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",173,{"i":[{"n":"self"},{"n":"foreignitemverbatim"}],"o":{"n":"bool"}}],[11,"eq","","",196,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"ne","","",196,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",42,{"i":[{"n":"self"},{"n":"oror"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",237,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"ne","","",237,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",15,{"i":[{"n":"self"},{"n":"and"}],"o":{"n":"bool"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"remeq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",242,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"ne","","",242,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"eq","","",211,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"ne","","",211,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"eq","","",185,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"ne","","",185,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"bool"}}],[11,"ne","","",190,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"bool"}}],[11,"eq","","",251,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"ne","","",251,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"eq","","",315,{"i":[{"n":"self"},{"n":"litstr"}],"o":{"n":"bool"}}],[11,"eq","","",195,{"i":[{"n":"self"},{"n":"intsuffix"}],"o":{"n":"bool"}}],[11,"eq","","",177,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"ne","","",177,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",32,{"i":[{"n":"self"},{"n":"eq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",318,{"i":[{"n":"self"},{"n":"litint"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",44,{"i":[{"n":"self"},{"n":"question"}],"o":{"n":"bool"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"le"}],"o":{"n":"bool"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"continue"}],"o":{"n":"bool"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"colon2"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",140,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"eq","","",270,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"bool"}}],[11,"ne","","",270,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"bool"}}],[11,"eq","","",294,{"i":[{"n":"self"},{"n":"itemmacro2"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",26,{"i":[{"n":"self"},{"n":"diveq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",143,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"ne","","",143,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"eq","","",320,{"i":[{"n":"self"},{"n":"litchar"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",53,{"i":[{"n":"self"},{"n":"shr"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"bracket"}],"o":{"n":"bool"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"semi"}],"o":{"n":"bool"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"do"}],"o":{"n":"bool"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"mut"}],"o":{"n":"bool"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"muleq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",285,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"bool"}}],[11,"ne","","",285,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"bool"}}],[11,"eq","","",280,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"bool"}}],[11,"ne","","",280,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"bool"}}],[11,"eq","","",261,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"bool"}}],[11,"ne","","",261,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"bool"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"ne","","",125,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"eq","","",192,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"bool"}}],[11,"ne","","",192,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::buffer","",324,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",324,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",49,{"i":[{"n":"self"},{"n":"fatarrow"}],"o":{"n":"bool"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"at"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",244,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"bool"}}],[11,"ne","","",244,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"bool"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"ne","","",141,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"eq","","",240,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"bool"}}],[11,"ne","","",240,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"bool"}}],[11,"eq","","",224,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"bool"}}],[11,"ne","","",224,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"bool"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"bool"}}],[11,"ne","","",158,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"bool"}}],[11,"eq","","",248,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"bool"}}],[11,"ne","","",248,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"bool"}}],[11,"eq","","",266,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"ne","","",266,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",92,{"i":[{"n":"self"},{"n":"self_"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",290,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"ne","","",290,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",74,{"i":[{"n":"self"},{"n":"else"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"rem"}],"o":{"n":"bool"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"shleq"}],"o":{"n":"bool"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"in"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",186,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"ne","","",186,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"eq","","",191,{"i":[{"n":"self"},{"n":"itemverbatim"}],"o":{"n":"bool"}}],[11,"eq","","",292,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"ne","","",292,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",93,{"i":[{"n":"self"},{"n":"static"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",136,{"i":[{"n":"self"},{"n":"typeverbatim"}],"o":{"n":"bool"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"ne","","",130,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"eq","","",234,{"i":[{"n":"self"},{"n":"patverbatim"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",94,{"i":[{"n":"self"},{"n":"struct"}],"o":{"n":"bool"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",213,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"ne","","",213,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"bool"}}],[11,"ne","","",163,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"bool"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"ne","","",157,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"eq","","",206,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"bool"}}],[11,"eq","","",287,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",287,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"eq","","",176,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"bool"}}],[11,"ne","","",176,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"bool"}}],[11,"eq","","",236,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"ne","","",236,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"bool"}}],[11,"ne","","",181,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"bool"}}],[11,"eq","","",272,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"bool"}}],[11,"ne","","",272,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",54,{"i":[{"n":"self"},{"n":"shreq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",281,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"ne","","",281,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"bool"}}],[11,"ne","","",110,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"bool"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"ne","","",139,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"bool"}}],[11,"eq","","",319,{"i":[{"n":"self"},{"n":"litbyte"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",28,{"i":[{"n":"self"},{"n":"dot"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",221,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"ne","","",221,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"eq","","",260,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"bool"}}],[11,"ne","","",260,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::punctuated","",314,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"ne","","",314,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",210,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",210,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",101,{"i":[{"n":"self"},{"n":"where"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",120,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"bool"}}],[11,"eq","","",232,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"ne","","",232,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"eq","","",222,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"bool"}}],[11,"ne","","",222,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",77,{"i":[{"n":"self"},{"n":"fn"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",134,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"bool"}}],[11,"eq","","",228,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"ne","","",228,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"eq","","",172,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"ne","","",172,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"bool"}}],[11,"ne","","",183,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",66,{"i":[{"n":"self"},{"n":"capself"}],"o":{"n":"bool"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"gt"}],"o":{"n":"bool"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"mod"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",288,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"ne","","",288,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"eq","","",249,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"ne","","",249,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",98,{"i":[{"n":"self"},{"n":"union"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",154,{"i":[{"n":"self"},{"n":"floatsuffix"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",67,{"i":[{"n":"self"},{"n":"catch"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",215,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"bool"}}],[11,"ne","","",215,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"bool"}}],[11,"eq","","",293,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"ne","","",293,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",82,{"i":[{"n":"self"},{"n":"let"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",116,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"ne","","",116,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"eq","","",199,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"ne","","",199,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",96,{"i":[{"n":"self"},{"n":"trait"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",208,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"ne","","",208,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"bool"}}],[11,"ne","","",114,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",46,{"i":[{"n":"self"},{"n":"larrow"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",323,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"ne","","",323,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"ne","","",180,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"eq","","",198,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"ne","","",198,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",103,{"i":[{"n":"self"},{"n":"yield"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",111,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"bool"}}],[11,"ne","","",115,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"bool"}}],[11,"eq","","",217,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"ne","","",217,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",31,{"i":[{"n":"self"},{"n":"dotdoteq"}],"o":{"n":"bool"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"andeq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",113,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"bool"}}],[11,"ne","","",113,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"bool"}}],[11,"eq","","",197,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"ne","","",197,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"eq","","",286,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"ne","","",286,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",71,{"i":[{"n":"self"},{"n":"default"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",250,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"bool"}}],[11,"ne","","",250,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",21,{"i":[{"n":"self"},{"n":"careteq"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",201,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"bool"}}],[11,"ne","","",201,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"bool"}}],[11,"eq","","",225,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"ne","","",225,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",60,{"i":[{"n":"self"},{"n":"paren"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",188,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"bool"}}],[11,"ne","","",188,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"bool"}}],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"ne","","",164,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"eq","","",169,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"ne","","",169,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"eq","","",283,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"ne","","",283,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",89,{"i":[{"n":"self"},{"n":"pub"}],"o":{"n":"bool"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"comma"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",203,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"bool"}}],[11,"ne","","",203,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"bool"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"ne","","",119,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",22,{"i":[{"n":"self"},{"n":"colon"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",269,{"i":[{"n":"self"},{"n":"exprverbatim"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",55,{"i":[{"n":"self"},{"n":"star"}],"o":{"n":"bool"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"auto"}],"o":{"n":"bool"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"move"}],"o":{"n":"bool"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"if"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",220,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"ne","","",220,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"litverbatim"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",73,{"i":[{"n":"self"},{"n":"dyn"}],"o":{"n":"bool"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",135,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"bool"}}],[11,"eq","","",231,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"bool"}}],[11,"ne","","",231,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",90,{"i":[{"n":"self"},{"n":"ref"}],"o":{"n":"bool"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"super"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",170,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"bool"}}],[11,"ne","","",170,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"bool"}}],[11,"eq","","",209,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"ne","","",209,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"eq","","",168,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"ne","","",168,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",11,{"i":[{"n":"self"},{"n":"underscore"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",126,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"bool"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"bool"}}],[11,"ne","","",153,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"bool"}}],[11,"eq","","",230,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"bool"}}],[11,"ne","","",230,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"bool"}}],[11,"eq","","",297,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"bool"}}],[11,"ne","","",297,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude::token","",75,{"i":[{"n":"self"},{"n":"enum"}],"o":{"n":"bool"}}],[11,"eq","swc_macros_common::prelude","",277,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"to_tokens","swc_macros_common::prelude::token","",70,null],[11,"to_tokens","swc_macros_common::prelude","",194,null],[11,"to_tokens","","",164,null],[11,"to_tokens","","",236,null],[11,"to_tokens","swc_macros_common::prelude::token","",21,null],[11,"to_tokens","","",91,null],[11,"to_tokens","swc_macros_common::prelude","",249,null],[11,"to_tokens","","",146,null],[11,"to_tokens","","",137,null],[11,"to_tokens","swc_macros_common::prelude::token","",98,null],[11,"to_tokens","","",93,null],[11,"to_tokens","","",71,null],[11,"to_tokens","","",92,null],[11,"to_tokens","swc_macros_common::prelude","",217,null],[11,"to_tokens","","",322,null],[11,"to_tokens","","",243,null],[11,"to_tokens","","",125,null],[11,"to_tokens","","",200,null],[11,"to_tokens","","",320,null],[11,"to_tokens","","",241,null],[11,"to_tokens","swc_macros_common::prelude::token","",80,null],[11,"to_tokens","swc_macros_common::prelude","",248,null],[11,"to_tokens","","",199,null],[11,"to_tokens","","",198,null],[11,"to_tokens","swc_macros_common::prelude::token","",79,null],[11,"to_tokens","swc_macros_common::prelude","",176,null],[11,"to_tokens","","",227,null],[11,"to_tokens","","",256,null],[11,"to_tokens","","",189,null],[11,"to_tokens","swc_macros_common::prelude::token","",11,null],[11,"to_tokens","swc_macros_common::prelude","",188,null],[11,"to_tokens","","",281,null],[11,"to_tokens","","",289,null],[11,"to_tokens","","",234,null],[11,"to_tokens","","",140,null],[11,"to_tokens","","",316,null],[11,"to_tokens","","",142,null],[11,"to_tokens","swc_macros_common::prelude::token","",86,null],[11,"to_tokens","","",45,null],[11,"to_tokens","","",19,null],[11,"to_tokens","swc_macros_common::prelude","",235,null],[11,"to_tokens","","",229,null],[11,"to_tokens","swc_macros_common::prelude::token","",33,null],[11,"to_tokens","swc_macros_common::prelude","",168,null],[11,"to_tokens","swc_macros_common::prelude::token","",42,null],[11,"to_tokens","swc_macros_common::prelude","",222,null],[11,"to_tokens","","",196,null],[11,"to_tokens","","",260,null],[11,"to_tokens","swc_macros_common::prelude::token","",49,null],[11,"to_tokens","","",46,null],[11,"to_tokens","swc_macros_common::prelude","",238,null],[11,"to_tokens","","",191,null],[11,"to_tokens","","",147,null],[11,"to_tokens","","",184,null],[11,"to_tokens","swc_macros_common::prelude::token","",31,null],[11,"to_tokens","swc_macros_common::prelude","",183,null],[11,"to_tokens","swc_macros_common::prelude::token","",25,null],[11,"to_tokens","","",90,null],[11,"to_tokens","swc_macros_common::prelude","",266,null],[11,"to_tokens","swc_macros_common::prelude::token","",100,null],[11,"to_tokens","swc_macros_common::prelude","",206,null],[11,"to_tokens","swc_macros_common::prelude::token","",54,null],[11,"to_tokens","","",16,null],[11,"to_tokens","swc_macros_common::prelude","",265,null],[11,"to_tokens","","",230,null],[11,"to_tokens","","",213,null],[11,"to_tokens","","",280,null],[11,"to_tokens","","",109,null],[11,"to_tokens","","",160,null],[11,"to_tokens","","",130,null],[11,"to_tokens","swc_macros_common::prelude::token","",17,null],[11,"to_tokens","swc_macros_common::prelude","",169,null],[11,"to_tokens","","",270,null],[11,"to_tokens","","",247,null],[11,"to_tokens","swc_macros_common::prelude::token","",63,null],[11,"to_tokens","swc_macros_common::prelude","",258,null],[11,"to_tokens","","",263,null],[11,"to_tokens","","",272,null],[11,"to_tokens","","",121,null],[11,"to_tokens","","",138,null],[11,"to_tokens","","",209,null],[11,"to_tokens","","",224,null],[11,"to_tokens","swc_macros_common::prelude::token","",18,null],[11,"to_tokens","swc_macros_common::prelude","",159,null],[11,"to_tokens","swc_macros_common::prelude::token","",56,null],[11,"to_tokens","swc_macros_common::prelude","",134,null],[11,"to_tokens","swc_macros_common::prelude::token","",32,null],[11,"to_tokens","","",64,null],[11,"to_tokens","swc_macros_common::prelude","",201,null],[11,"to_tokens","","",292,null],[11,"to_tokens","","",127,null],[11,"to_tokens","","",131,null],[11,"to_tokens","swc_macros_common::prelude::punctuated","",314,null],[11,"to_tokens","swc_macros_common::prelude","",211,null],[11,"to_tokens","swc_macros_common::prelude::token","",15,null],[11,"to_tokens","swc_macros_common::prelude","",115,null],[11,"to_tokens","","",253,null],[11,"to_tokens","","",155,null],[11,"to_tokens","","",271,null],[11,"to_tokens","swc_macros_common::prelude::token","",47,null],[11,"to_tokens","swc_macros_common::prelude","",245,null],[11,"to_tokens","swc_macros_common::prelude::token","",23,null],[11,"to_tokens","swc_macros_common::prelude","",225,null],[11,"to_tokens","","",321,null],[11,"to_tokens","","",219,null],[11,"to_tokens","swc_macros_common::prelude::token","",88,null],[11,"to_tokens","","",77,null],[11,"to_tokens","","",13,null],[11,"to_tokens","","",72,null],[11,"to_tokens","","",27,null],[11,"to_tokens","swc_macros_common::prelude","",151,null],[11,"to_tokens","","",240,null],[11,"to_tokens","swc_macros_common::prelude::token","",37,null],[11,"to_tokens","swc_macros_common::prelude","",233,null],[11,"to_tokens","","",277,null],[11,"to_tokens","","",148,null],[11,"to_tokens","","",174,null],[11,"to_tokens","","",150,null],[11,"to_tokens","","",179,null],[11,"to_tokens","","",278,null],[11,"to_tokens","","",126,null],[11,"to_tokens","","",214,null],[11,"to_tokens","","",207,null],[11,"to_tokens","","",261,null],[11,"to_tokens","","",285,null],[11,"to_tokens","swc_macros_common::prelude::token","",14,null],[11,"to_tokens","swc_macros_common::prelude","",288,null],[11,"to_tokens","","",208,null],[11,"to_tokens","","",161,null],[11,"to_tokens","","",257,null],[11,"to_tokens","","",128,null],[11,"to_tokens","","",111,null],[11,"to_tokens","","",186,null],[11,"to_tokens","swc_macros_common::prelude::token","",102,null],[11,"to_tokens","swc_macros_common::prelude","",165,null],[11,"to_tokens","","",116,null],[11,"to_tokens","","",136,null],[11,"to_tokens","","",187,null],[11,"to_tokens","swc_macros_common::prelude::token","",73,null],[11,"to_tokens","","",97,null],[11,"to_tokens","swc_macros_common::prelude","",143,null],[11,"to_tokens","","",323,null],[11,"to_tokens","swc_macros_common::prelude::token","",36,null],[11,"to_tokens","","",53,null],[11,"to_tokens","","",57,null],[11,"to_tokens","swc_macros_common::prelude","",318,null],[11,"to_tokens","swc_macros_common::prelude::token","",30,null],[11,"to_tokens","swc_macros_common::prelude","",149,null],[11,"to_tokens","","",283,null],[11,"to_tokens","","",269,null],[11,"to_tokens","swc_macros_common::prelude::token","",22,null],[11,"to_tokens","swc_macros_common::prelude","",162,null],[11,"to_tokens","swc_macros_common::prelude::token","",66,null],[11,"to_tokens","swc_macros_common::prelude","",294,null],[11,"to_tokens","","",251,null],[11,"to_tokens","","",255,null],[11,"to_tokens","","",123,null],[11,"to_tokens","swc_macros_common::prelude::token","",40,null],[11,"to_tokens","swc_macros_common::prelude","",275,null],[11,"to_tokens","swc_macros_common::prelude::token","",55,null],[11,"to_tokens","swc_macros_common::prelude","",122,null],[11,"to_tokens","","",237,null],[11,"to_tokens","","",286,null],[11,"to_tokens","swc_macros_common::prelude::token","",39,null],[11,"to_tokens","swc_macros_common::prelude","",204,null],[11,"to_tokens","","",112,null],[11,"to_tokens","","",276,null],[11,"to_tokens","swc_macros_common::prelude::token","",85,null],[11,"to_tokens","swc_macros_common::prelude","",178,null],[11,"to_tokens","","",296,null],[11,"to_tokens","","",218,null],[11,"to_tokens","swc_macros_common::prelude::token","",103,null],[11,"to_tokens","swc_macros_common::prelude","",166,null],[11,"to_tokens","","",171,null],[11,"to_tokens","swc_macros_common::prelude::token","",43,null],[11,"to_tokens","","",52,null],[11,"to_tokens","swc_macros_common::prelude","",290,null],[11,"to_tokens","","",231,null],[11,"to_tokens","","",317,null],[11,"to_tokens","","",212,null],[11,"to_tokens","","",315,null],[11,"to_tokens","","",156,null],[11,"to_tokens","","",167,null],[11,"to_tokens","","",252,null],[11,"to_tokens","","",172,null],[11,"to_tokens","","",319,null],[11,"to_tokens","","",210,null],[11,"to_tokens","","",244,null],[11,"to_tokens","swc_macros_common::prelude::token","",83,null],[11,"to_tokens","swc_macros_common::prelude","",267,null],[11,"to_tokens","","",205,null],[11,"to_tokens","","",145,null],[11,"to_tokens","swc_macros_common::prelude::token","",75,null],[11,"to_tokens","","",82,null],[11,"to_tokens","swc_macros_common::prelude","",158,null],[11,"to_tokens","swc_macros_common::prelude::token","",68,null],[11,"to_tokens","swc_macros_common::prelude","",202,null],[11,"to_tokens","","",185,null],[11,"to_tokens","swc_macros_common::prelude::token","",84,null],[11,"to_tokens","swc_macros_common::prelude","",163,null],[11,"to_tokens","","",282,null],[11,"to_tokens","swc_macros_common::prelude::token","",44,null],[11,"to_tokens","swc_macros_common::prelude","",220,null],[11,"to_tokens","swc_macros_common::prelude::token","",20,null],[11,"to_tokens","swc_macros_common::prelude","",279,null],[11,"to_tokens","swc_macros_common::prelude::token","",76,null],[11,"to_tokens","swc_macros_common::prelude","",274,null],[11,"to_tokens","swc_macros_common::prelude::token","",67,null],[11,"to_tokens","swc_macros_common::prelude","",181,null],[11,"to_tokens","swc_macros_common::prelude::token","",48,null],[11,"to_tokens","swc_macros_common::prelude","",113,null],[11,"to_tokens","","",157,null],[11,"to_tokens","","",221,null],[11,"to_tokens","swc_macros_common::prelude::token","",96,null],[11,"to_tokens","swc_macros_common::prelude","",170,null],[11,"to_tokens","","",197,null],[11,"to_tokens","","",124,null],[11,"to_tokens","","",117,null],[11,"to_tokens","","",118,null],[11,"to_tokens","swc_macros_common::prelude::punctuated","",10,null],[11,"to_tokens","swc_macros_common::prelude::token","",34,null],[11,"to_tokens","swc_macros_common::prelude","",153,null],[11,"to_tokens","swc_macros_common::prelude::token","",95,null],[11,"to_tokens","swc_macros_common::prelude","",114,null],[11,"to_tokens","","",190,null],[11,"to_tokens","swc_macros_common::prelude::token","",38,null],[11,"to_tokens","swc_macros_common::prelude","",135,null],[11,"to_tokens","","",203,null],[11,"to_tokens","","",291,null],[11,"to_tokens","","",254,null],[11,"to_tokens","","",239,null],[11,"to_tokens","swc_macros_common::prelude::token","",26,null],[11,"to_tokens","swc_macros_common::prelude","",182,null],[11,"to_tokens","","",287,null],[11,"to_tokens","","",246,null],[11,"to_tokens","swc_macros_common::prelude::token","",74,null],[11,"to_tokens","","",69,null],[11,"to_tokens","swc_macros_common::prelude","",133,null],[11,"to_tokens","swc_macros_common::prelude::token","",35,null],[11,"to_tokens","","",29,null],[11,"to_tokens","","",41,null],[11,"to_tokens","swc_macros_common::prelude","",119,null],[11,"to_tokens","swc_macros_common::prelude::token","",28,null],[11,"to_tokens","","",99,null],[11,"to_tokens","swc_macros_common::prelude","",215,null],[11,"to_tokens","","",110,null],[11,"to_tokens","","",297,null],[11,"to_tokens","","",223,null],[11,"to_tokens","swc_macros_common::prelude::token","",101,null],[11,"to_tokens","","",24,null],[11,"to_tokens","swc_macros_common::prelude","",173,null],[11,"to_tokens","swc_macros_common::prelude::token","",81,null],[11,"to_tokens","","",78,null],[11,"to_tokens","swc_macros_common::prelude","",120,null],[11,"to_tokens","swc_macros_common::prelude::token","",50,null],[11,"to_tokens","swc_macros_common::prelude","",273,null],[11,"to_tokens","","",193,null],[11,"to_tokens","","",141,null],[11,"to_tokens","","",152,null],[11,"to_tokens","","",129,null],[11,"to_tokens","swc_macros_common::prelude::token","",12,null],[11,"to_tokens","swc_macros_common::prelude","",250,null],[11,"to_tokens","","",295,null],[11,"to_tokens","swc_macros_common::prelude::token","",89,null],[11,"to_tokens","","",94,null],[11,"to_tokens","swc_macros_common::prelude","",232,null],[11,"to_tokens","swc_macros_common::prelude::token","",51,null],[11,"to_tokens","swc_macros_common::prelude","",284,null],[11,"to_tokens","swc_macros_common::prelude::token","",65,null],[11,"to_tokens","","",87,null],[11,"to_tokens","swc_macros_common::prelude","",139,null],[11,"to_tokens","","",264,null],[11,"to_tokens","","",108,null],[11,"to_tokens","","",192,null],[11,"to_tokens","swc_macros_common::prelude::token","",62,null],[11,"to_tokens","swc_macros_common::prelude","",228,null],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"clone","swc_macros_common::prelude::token","",66,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"clone","swc_macros_common::prelude","",217,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"clone","swc_macros_common::prelude::token","",85,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"clone","swc_macros_common::prelude::punctuated","",314,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"clone","swc_macros_common::prelude","",288,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"patbox"}}],[11,"clone","","",250,{"i":[{"n":"self"}],"o":{"n":"stmt"}}],[11,"clone","","",269,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"clone","swc_macros_common::prelude::token","",43,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"clone","swc_macros_common::prelude","",121,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"item"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"clone","swc_macros_common::prelude::token","",78,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"clone","swc_macros_common::prelude","",295,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"clone","swc_macros_common::prelude::token","",68,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"clone","swc_macros_common::prelude","",317,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"clone","","",277,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"clone","","",270,{"i":[{"n":"self"}],"o":{"n":"itemimpl"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"itemconst"}}],[11,"clone","swc_macros_common::prelude::token","",83,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"clone","swc_macros_common::prelude","",154,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"itemenum"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"clone","swc_macros_common::prelude::token","",90,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"clone","swc_macros_common::prelude","",110,{"i":[{"n":"self"}],"o":{"n":"fnarg"}}],[11,"clone","swc_macros_common::prelude::token","",31,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"clone","swc_macros_common::prelude","",120,{"i":[{"n":"self"}],"o":{"n":"implitemtype"}}],[11,"clone","","",228,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"itemforeignmod"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"clone","swc_macros_common::prelude::token","",73,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"clone","swc_macros_common::prelude","",201,{"i":[{"n":"self"}],"o":{"n":"implitemconst"}}],[11,"clone","swc_macros_common::prelude::token","",46,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"clone","swc_macros_common::prelude","",271,{"i":[{"n":"self"}],"o":{"n":"block"}}],[11,"clone","swc_macros_common::prelude::token","",79,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"clone","swc_macros_common::prelude","",321,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"clone","","",249,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"clone","swc_macros_common::prelude::token","",102,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"clone","swc_macros_common::prelude","",261,{"i":[{"n":"self"}],"o":{"n":"itemstatic"}}],[11,"clone","swc_macros_common::prelude::token","",84,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"clone","swc_macros_common::prelude","",221,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"clone","swc_macros_common::prelude::token","",58,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"clone","swc_macros_common::prelude","",179,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"clone","","",241,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"clone","","",272,{"i":[{"n":"self"}],"o":{"n":"implitemmethod"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"clone","","",242,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"clone","swc_macros_common::prelude::token","",44,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"clone","swc_macros_common::prelude","",146,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"clone","swc_macros_common::prelude::token","",14,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"clone","swc_macros_common::prelude","",175,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"clone","swc_macros_common::prelude::token","",16,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"clone","swc_macros_common::prelude","",291,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"clone","swc_macros_common::prelude::token","",50,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"clone","swc_macros_common::prelude","",293,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[11,"clone","","",322,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"clone","swc_macros_common::prelude::token","",72,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"clone","swc_macros_common::prelude","",244,{"i":[{"n":"self"}],"o":{"n":"itemfn"}}],[11,"clone","swc_macros_common::prelude::token","",26,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"clone","swc_macros_common::prelude","",245,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"local"}}],[11,"clone","","",238,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"clone","swc_macros_common::prelude::token","",94,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"clone","swc_macros_common::prelude","",140,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"clone","","",282,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"clone","swc_macros_common::prelude::token","",32,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"clone","swc_macros_common::prelude","",133,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"clone","swc_macros_common::prelude::token","",101,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"clone","swc_macros_common::prelude","",109,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"clone","swc_macros_common::prelude::buffer","",324,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","swc_macros_common::prelude","",265,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"patlit"}}],[11,"clone","swc_macros_common::prelude::token","",41,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"clone","swc_macros_common::prelude","",153,{"i":[{"n":"self"}],"o":{"n":"usepath"}}],[11,"clone","","",316,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"clone","","",239,{"i":[{"n":"self"}],"o":{"n":"argcaptured"}}],[11,"clone","","",246,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"clone","","",297,{"i":[{"n":"self"}],"o":{"n":"itemuse"}}],[11,"clone","","",247,{"i":[{"n":"self"}],"o":{"n":"itemstruct"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"implitem"}}],[11,"clone","","",237,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"clone","","",243,{"i":[{"n":"self"}],"o":{"n":"pat"}}],[11,"clone","swc_macros_common::prelude::token","",15,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"clone","swc_macros_common::prelude","",248,{"i":[{"n":"self"}],"o":{"n":"userename"}}],[11,"clone","swc_macros_common::prelude::token","",25,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"clone","swc_macros_common::prelude","",207,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"clone","swc_macros_common::prelude::token","",20,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"clone","swc_macros_common::prelude","",173,{"i":[{"n":"self"}],"o":{"n":"foreignitemverbatim"}}],[11,"clone","swc_macros_common::prelude::token","",11,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","swc_macros_common::prelude","",318,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"clone","","",240,{"i":[{"n":"self"}],"o":{"n":"implitemmacro"}}],[11,"clone","swc_macros_common::prelude::token","",74,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"clone","swc_macros_common::prelude","",252,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"clone","","",231,{"i":[{"n":"self"}],"o":{"n":"arm"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"clone","","",315,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"clone","","",226,{"i":[{"n":"self"}],"o":{"n":"fndecl"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"clone","","",264,{"i":[{"n":"self"}],"o":{"n":"patpath"}}],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"clone","swc_macros_common::prelude::token","",19,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"clone","swc_macros_common::prelude","",259,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"traititemconst"}}],[11,"clone","","",227,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"clone","swc_macros_common::prelude::token","",49,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"clone","swc_macros_common::prelude","",232,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"clone","","",230,{"i":[{"n":"self"}],"o":{"n":"methodsig"}}],[11,"clone","swc_macros_common::prelude::token","",54,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"clone","swc_macros_common::prelude","",167,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"clone","swc_macros_common::prelude::token","",17,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"clone","swc_macros_common::prelude","",196,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"clone","","",262,{"i":[{"n":"self"}],"o":{"n":"rangelimits"}}],[11,"clone","","",236,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"clone","","",273,{"i":[{"n":"self"}],"o":{"n":"itemmod"}}],[11,"clone","swc_macros_common::prelude::token","",70,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"clone","swc_macros_common::prelude","",178,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"pattuple"}}],[11,"clone","swc_macros_common::prelude::token","",65,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"clone","swc_macros_common::prelude","",152,{"i":[{"n":"self"}],"o":{"n":"traititemmacro"}}],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"clone","swc_macros_common::prelude::token","",69,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"clone","swc_macros_common::prelude","",290,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"useglob"}}],[11,"clone","","",319,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"clone","swc_macros_common::prelude::token","",89,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"clone","swc_macros_common::prelude","",263,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"clone","","",320,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"clone","","",254,{"i":[{"n":"self"}],"o":{"n":"implitemverbatim"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"clone","swc_macros_common::prelude::token","",75,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"clone","swc_macros_common::prelude","",181,{"i":[{"n":"self"}],"o":{"n":"itemtype"}}],[11,"clone","","",224,{"i":[{"n":"self"}],"o":{"n":"traititemmethod"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"clone","","",251,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"clone","swc_macros_common::prelude::token","",33,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"clone","swc_macros_common::prelude","",143,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"clone","swc_macros_common::prelude::token","",39,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"clone","swc_macros_common::prelude","",199,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"traititem"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"patmacro"}}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"clone","","",253,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"clone","swc_macros_common::prelude::token","",71,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"clone","swc_macros_common::prelude","",274,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"patrange"}}],[11,"clone","","",296,{"i":[{"n":"self"}],"o":{"n":"fieldvalue"}}],[11,"clone","swc_macros_common::prelude::token","",22,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"clone","swc_macros_common::prelude","",287,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"clone","","",275,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"clone","swc_macros_common::prelude::token","",98,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"clone","swc_macros_common::prelude","",126,{"i":[{"n":"self"}],"o":{"n":"patstruct"}}],[11,"clone","","",260,{"i":[{"n":"self"}],"o":{"n":"itemexterncrate"}}],[11,"clone","swc_macros_common::prelude::token","",38,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"clone","swc_macros_common::prelude","",108,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"clone","swc_macros_common::prelude::token","",95,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"clone","swc_macros_common::prelude","",134,{"i":[{"n":"self"}],"o":{"n":"label"}}],[11,"clone","swc_macros_common::prelude::token","",88,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"clone","swc_macros_common::prelude","",171,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"clone","swc_macros_common::prelude::token","",63,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"clone","swc_macros_common::prelude","",216,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"clone","swc_macros_common::prelude::token","",100,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"clone","swc_macros_common::prelude","",279,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"pattuplestruct"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"clone","swc_macros_common::prelude::token","",55,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"clone","swc_macros_common::prelude","",284,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"clone","swc_macros_common::prelude::token","",91,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"clone","swc_macros_common::prelude","",128,{"i":[{"n":"self"}],"o":{"n":"argselfref"}}],[11,"clone","swc_macros_common::prelude::token","",34,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"clone","swc_macros_common::prelude","",188,{"i":[{"n":"self"}],"o":{"n":"foreignitemtype"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"clone","","",233,{"i":[{"n":"self"}],"o":{"n":"usegroup"}}],[11,"clone","","",323,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"traititemverbatim"}}],[11,"clone","swc_macros_common::prelude::token","",51,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"clone","swc_macros_common::prelude","",163,{"i":[{"n":"self"}],"o":{"n":"itemunion"}}],[11,"clone","","",267,{"i":[{"n":"self"}],"o":{"n":"foreignitem"}}],[11,"clone","swc_macros_common::prelude::token","",87,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"clone","swc_macros_common::prelude","",203,{"i":[{"n":"self"}],"o":{"n":"methodturbofish"}}],[11,"clone","","",222,{"i":[{"n":"self"}],"o":{"n":"usetree"}}],[11,"clone","swc_macros_common::prelude::token","",27,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"clone","swc_macros_common::prelude","",182,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"foreignitemstatic"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"clone","swc_macros_common::prelude::token","",37,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"clone","swc_macros_common::prelude","",150,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"clone","","",234,{"i":[{"n":"self"}],"o":{"n":"patverbatim"}}],[11,"clone","swc_macros_common::prelude::token","",36,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"clone","swc_macros_common::prelude","",197,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"clone","swc_macros_common::prelude::token","",103,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"clone","swc_macros_common::prelude","",169,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"clone","","",266,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"clone","","",281,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"clone","swc_macros_common::prelude::token","",76,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"clone","swc_macros_common::prelude","",278,{"i":[{"n":"self"}],"o":{"n":"patslice"}}],[11,"clone","","",220,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"clone","","",289,{"i":[{"n":"self"}],"o":{"n":"patref"}}],[11,"clone","","",235,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"clone","","",258,{"i":[{"n":"self"}],"o":{"n":"fieldpat"}}],[11,"clone","","",257,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"clone","","",286,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"clone","swc_macros_common::prelude::token","",81,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"clone","swc_macros_common::prelude","",276,{"i":[{"n":"self"}],"o":{"n":"patwild"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"usename"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"clone","swc_macros_common::prelude::token","",28,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"clone","swc_macros_common::prelude","",161,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"clone","swc_macros_common::prelude::token","",30,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"clone","swc_macros_common::prelude","",141,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"clone","swc_macros_common::prelude::token","",23,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"clone","swc_macros_common::prelude","",139,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"clone","swc_macros_common::prelude::token","",52,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"clone","swc_macros_common::prelude","",130,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",225,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"clone","swc_macros_common::prelude::token","",96,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"clone","swc_macros_common::prelude","",280,{"i":[{"n":"self"}],"o":{"n":"argself"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",294,{"i":[{"n":"self"}],"o":{"n":"itemmacro2"}}],[11,"clone","","",256,{"i":[{"n":"self"}],"o":{"n":"itemmacro"}}],[11,"clone","","",285,{"i":[{"n":"self"}],"o":{"n":"itemtrait"}}],[11,"clone","swc_macros_common::prelude::token","",24,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"clone","swc_macros_common::prelude","",283,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"genericmethodargument"}}],[11,"clone","","",255,{"i":[{"n":"self"}],"o":{"n":"foreignitemfn"}}],[11,"clone","","",292,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"patident"}}],[11,"clone","swc_macros_common::prelude::token","",59,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"clone","swc_macros_common::prelude","",229,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"clone","swc_macros_common::prelude::token","",48,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"clone","swc_macros_common::prelude","",156,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"clone","swc_macros_common::prelude::token","",67,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"clone","swc_macros_common::prelude","",191,{"i":[{"n":"self"}],"o":{"n":"itemverbatim"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"traititemtype"}}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"index_mut","swc_macros_common::prelude::punctuated","",314,null],[11,"index","","",314,null],[11,"u8_suffixed","swc_macros_common::prelude","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",305,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",305,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",305,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",305,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",305,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",305,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",305,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",305,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",305,null],[11,"span","","",305,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",305,null],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",4,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",4,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",302,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"new_raw","","Same as `Ident::new`, but creates a raw identifier (`r#ident`).",302,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",302,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",302,null],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",304,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",304,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",304,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",304,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",304,null],[11,"new","","",303,{"i":[{"n":"s"}],"o":{"n":"quote"}}],[11,"new_call_site","","Shorthand for",303,{"o":{"n":"quote"}}],[11,"from_tokens","","Shorthand for",303,{"i":[{"n":"totokens"}],"o":{"n":"quote"}}],[11,"from_tokens_or","","Shorthand for",303,{"i":[{"n":"option"},{"n":"span"}],"o":{"n":"quote"}}],[11,"parse","","Parse tokens as `Node`. Panics if parsing failed.",303,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"quote_with","","",303,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"quote"}}],[11,"push_parsed","","Parse `token` and append it to `self`.",303,null],[11,"push_tt","","Append `tt` to `self`.",303,null],[11,"push_sym","","Respan symbol and append it to `self`.",303,null],[11,"push_group","","Respan and append `TokenStream::Group`",303,null],[11,"push_tokens","","Appends node into `self` without respanning.",303,null],[11,"call_site","","The span of the invocation of the current procedural macro.",301,{"o":{"n":"span"}}],[11,"def_site","","A span that resolves at the macro definition site.",301,{"o":{"n":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",301,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",301,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",301,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"source_file","","The original source file into which this span points.",301,{"i":[{"n":"self"}],"o":{"n":"sourcefile"}}],[11,"start","","Get the starting line/column in the source file for this span.",301,{"i":[{"n":"self"}],"o":{"n":"linecolumn"}}],[11,"end","","Get the ending line/column in the source file for this span.",301,{"i":[{"n":"self"}],"o":{"n":"linecolumn"}}],[11,"join","","Create a new span encompassing `self` and `other`.",301,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"eq","","Compares to spans to see if they're equal.",301,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",306,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",306,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",306,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",306,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",306,null],[11,"into_value","swc_macros_common::prelude::punctuated","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",10,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",10,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",10,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",10,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"pair"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",10,null],[11,"new","","Creates an empty punctuated sequence.",314,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",314,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",314,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",314,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",314,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",314,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",314,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",314,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",314,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",314,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",314,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",314,null],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",314,null],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",314,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",314,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",314,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",314,null],[11,"insert","","Inserts an element at position `index`.",314,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",314,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",314,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",314,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",314,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",314,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",314,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",314,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",314,null],[11,"new","swc_macros_common::prelude::token","",11,{"i":[{"n":"span"}],"o":{"n":"underscore"}}],[11,"new","","",12,{"i":[{"n":"span"}],"o":{"n":"apostrophe"}}],[11,"new","","",13,{"i":[{"n":"span"}],"o":{"n":"add"}}],[11,"new","","",14,{"i":[{"n":"span"}],"o":{"n":"addeq"}}],[11,"new","","",15,{"i":[{"n":"span"}],"o":{"n":"and"}}],[11,"new","","",16,{"i":[{"n":"span"}],"o":{"n":"andand"}}],[11,"new","","",17,{"i":[{"n":"span"}],"o":{"n":"andeq"}}],[11,"new","","",18,{"i":[{"n":"span"}],"o":{"n":"at"}}],[11,"new","","",19,{"i":[{"n":"span"}],"o":{"n":"bang"}}],[11,"new","","",20,{"i":[{"n":"span"}],"o":{"n":"caret"}}],[11,"new","","",21,{"i":[{"n":"span"}],"o":{"n":"careteq"}}],[11,"new","","",22,{"i":[{"n":"span"}],"o":{"n":"colon"}}],[11,"new","","",23,{"i":[{"n":"span"}],"o":{"n":"colon2"}}],[11,"new","","",24,{"i":[{"n":"span"}],"o":{"n":"comma"}}],[11,"new","","",25,{"i":[{"n":"span"}],"o":{"n":"div"}}],[11,"new","","",26,{"i":[{"n":"span"}],"o":{"n":"diveq"}}],[11,"new","","",27,{"i":[{"n":"span"}],"o":{"n":"dollar"}}],[11,"new","","",28,{"i":[{"n":"span"}],"o":{"n":"dot"}}],[11,"new","","",29,{"i":[{"n":"span"}],"o":{"n":"dot2"}}],[11,"new","","",30,{"i":[{"n":"span"}],"o":{"n":"dot3"}}],[11,"new","","",31,{"i":[{"n":"span"}],"o":{"n":"dotdoteq"}}],[11,"new","","",32,{"i":[{"n":"span"}],"o":{"n":"eq"}}],[11,"new","","",33,{"i":[{"n":"span"}],"o":{"n":"eqeq"}}],[11,"new","","",34,{"i":[{"n":"span"}],"o":{"n":"ge"}}],[11,"new","","",35,{"i":[{"n":"span"}],"o":{"n":"gt"}}],[11,"new","","",36,{"i":[{"n":"span"}],"o":{"n":"le"}}],[11,"new","","",37,{"i":[{"n":"span"}],"o":{"n":"lt"}}],[11,"new","","",38,{"i":[{"n":"span"}],"o":{"n":"muleq"}}],[11,"new","","",39,{"i":[{"n":"span"}],"o":{"n":"ne"}}],[11,"new","","",40,{"i":[{"n":"span"}],"o":{"n":"or"}}],[11,"new","","",41,{"i":[{"n":"span"}],"o":{"n":"oreq"}}],[11,"new","","",42,{"i":[{"n":"span"}],"o":{"n":"oror"}}],[11,"new","","",43,{"i":[{"n":"span"}],"o":{"n":"pound"}}],[11,"new","","",44,{"i":[{"n":"span"}],"o":{"n":"question"}}],[11,"new","","",45,{"i":[{"n":"span"}],"o":{"n":"rarrow"}}],[11,"new","","",46,{"i":[{"n":"span"}],"o":{"n":"larrow"}}],[11,"new","","",47,{"i":[{"n":"span"}],"o":{"n":"rem"}}],[11,"new","","",48,{"i":[{"n":"span"}],"o":{"n":"remeq"}}],[11,"new","","",49,{"i":[{"n":"span"}],"o":{"n":"fatarrow"}}],[11,"new","","",50,{"i":[{"n":"span"}],"o":{"n":"semi"}}],[11,"new","","",51,{"i":[{"n":"span"}],"o":{"n":"shl"}}],[11,"new","","",52,{"i":[{"n":"span"}],"o":{"n":"shleq"}}],[11,"new","","",53,{"i":[{"n":"span"}],"o":{"n":"shr"}}],[11,"new","","",54,{"i":[{"n":"span"}],"o":{"n":"shreq"}}],[11,"new","","",55,{"i":[{"n":"span"}],"o":{"n":"star"}}],[11,"new","","",56,{"i":[{"n":"span"}],"o":{"n":"sub"}}],[11,"new","","",57,{"i":[{"n":"span"}],"o":{"n":"subeq"}}],[11,"surround","","",58,null],[11,"parse","","",58,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"surround","","",59,null],[11,"parse","","",59,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"surround","","",60,null],[11,"parse","","",60,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"surround","","",61,null],[11,"parse","","",61,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"new","swc_macros_common::prelude::buffer","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",325,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",325,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",325,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",324,{"o":{"n":"cursor"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",324,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",324,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",324,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",324,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",324,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",324,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",324,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",324,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"without_plus","swc_macros_common::prelude","",119,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",139,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",140,{"i":[{"n":"literal"}],"o":{"n":"lit"}}],[11,"span","","",142,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",142,null],[11,"new","","",320,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"litchar"}}],[11,"value","","",320,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",320,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",320,null],[11,"new","","",315,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"litstr"}}],[11,"value","","",315,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",315,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",315,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",315,null],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",161,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"parse_inner","","",161,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_outer","","",161,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"new","","",178,{"i":[{"n":"lifetime"}],"o":{"n":"lifetimedef"}}],[11,"global","","",182,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"parse_mod_style","","",182,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"name","","Returns the identifier that begins this structured meta item.",204,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","",319,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"litbyte"}}],[11,"value","","",319,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",319,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",319,null],[11,"new","","",317,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"litfloat"}}],[11,"value","","",317,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",317,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",317,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",317,null],[11,"is_empty","","",220,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"without_plus","","",221,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"without_plus","","",245,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"new","","",316,null],[11,"value","","",316,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",316,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",316,null],[11,"new","","",318,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"litint"}}],[11,"value","","",318,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",318,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",318,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",318,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",322,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"parse_within","","",271,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"new","","",277,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"lifetime"}}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",279,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",279,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",279,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",279,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",279,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",279,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",279,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",279,null],[11,"parse_named","","",287,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_unnamed","","",287,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_binop","","",291,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_assign_op","","",291,{"i":[{"n":"cursor"}],"o":{"g":["parseerror"],"n":"result"}}]],"paths":[[3,"Binder"],[3,"VariantBinder"],[3,"BindedField"],[3,"Derive"],[4,"TokenTree"],[8,"SpanExt"],[8,"IdentExt"],[8,"ToTokensExt"],[4,"Delimiter"],[8,"ToTokens"],[4,"Pair"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[8,"Synom"],[8,"Parser"],[8,"IdentExt"],[8,"Spanned"],[3,"TypeParam"],[3,"ExprBlock"],[4,"FnArg"],[3,"Abi"],[3,"TraitItemConst"],[3,"PatRange"],[3,"UseName"],[3,"Local"],[3,"ExprCast"],[4,"WherePredicate"],[3,"ExprIf"],[4,"Type"],[3,"ImplItemType"],[3,"TypeNever"],[3,"ExprUnsafe"],[3,"PatIdent"],[3,"TraitItemType"],[4,"NestedMeta"],[3,"PatStruct"],[3,"VisCrate"],[3,"ArgSelfRef"],[3,"ExprContinue"],[3,"WhereClause"],[3,"ExprAssignOp"],[4,"MacroDelimiter"],[3,"TypeGroup"],[3,"Label"],[3,"ItemConst"],[3,"TypeVerbatim"],[3,"ExprWhileLet"],[3,"BoundLifetimes"],[4,"Fields"],[4,"Lit"],[3,"TypeMacro"],[3,"LitVerbatim"],[3,"ExprRange"],[8,"Visit"],[3,"AngleBracketedGenericArguments"],[3,"Macro"],[3,"UseGlob"],[4,"Item"],[3,"ForeignItemStatic"],[3,"TypeInfer"],[3,"ExprForLoop"],[3,"TraitItemMacro"],[3,"UsePath"],[4,"FloatSuffix"],[3,"ExprType"],[3,"ExprParen"],[3,"TypeParen"],[4,"ImplItem"],[3,"ExprTry"],[3,"TraitItemVerbatim"],[3,"Attribute"],[3,"PatTuple"],[3,"ItemUnion"],[3,"ExprField"],[3,"ConstParam"],[3,"LitBool"],[3,"ExprBinary"],[3,"TraitBound"],[3,"TypeImplTrait"],[3,"ItemEnum"],[3,"ExprReference"],[3,"TypeReference"],[3,"ForeignItemVerbatim"],[3,"FieldsNamed"],[4,"AttrStyle"],[3,"PatMacro"],[4,"StrStyle"],[3,"LifetimeDef"],[3,"ExprBreak"],[3,"DataUnion"],[3,"ItemType"],[3,"Path"],[3,"ItemForeignMod"],[3,"PredicateType"],[3,"MetaList"],[4,"UnOp"],[3,"ExprInPlace"],[3,"ForeignItemType"],[3,"TypeArray"],[4,"GenericMethodArgument"],[3,"ItemVerbatim"],[3,"PatLit"],[3,"ExprBox"],[3,"PatTupleStruct"],[4,"IntSuffix"],[3,"VisRestricted"],[3,"PredicateLifetime"],[3,"BareFnArg"],[3,"ExprPath"],[3,"ExprLoop"],[3,"ImplItemConst"],[3,"ExprTuple"],[3,"MethodTurbofish"],[4,"Meta"],[3,"File"],[3,"Index"],[3,"PathSegment"],[3,"FieldsUnnamed"],[4,"TraitBoundModifier"],[4,"Expr"],[3,"ExprRepeat"],[3,"TypeSlice"],[3,"VisPublic"],[4,"GenericArgument"],[4,"TraitItem"],[4,"Data"],[3,"PredicateEq"],[3,"ExprCall"],[3,"ExprYield"],[4,"PathArguments"],[4,"ReturnType"],[4,"UseTree"],[3,"PatBox"],[3,"TraitItemMethod"],[3,"ExprIndex"],[3,"FnDecl"],[3,"TypeBareFn"],[3,"ExprClosure"],[3,"Binding"],[3,"MethodSig"],[3,"Arm"],[3,"TypePtr"],[3,"UseGroup"],[3,"PatVerbatim"],[4,"Visibility"],[4,"GenericParam"],[3,"ExprGroup"],[4,"BareFnArgName"],[3,"ArgCaptured"],[3,"ImplItemMacro"],[3,"ExprMacro"],[3,"DataStruct"],[4,"Pat"],[3,"ItemFn"],[3,"TypeTraitObject"],[4,"Member"],[3,"ItemStruct"],[3,"UseRename"],[3,"Variant"],[4,"Stmt"],[3,"ExprArray"],[3,"TypePath"],[3,"ExprReturn"],[3,"ImplItemVerbatim"],[3,"ForeignItemFn"],[3,"ItemMacro"],[3,"ParenthesizedGenericArguments"],[3,"FieldPat"],[3,"DataEnum"],[3,"ItemExternCrate"],[3,"ItemStatic"],[4,"RangeLimits"],[3,"ExprMethodCall"],[3,"PatPath"],[3,"DeriveInput"],[3,"ExprLit"],[4,"ForeignItem"],[8,"Fold"],[3,"ExprVerbatim"],[3,"ItemImpl"],[3,"Block"],[3,"ImplItemMethod"],[3,"ItemMod"],[3,"ExprUnary"],[3,"MetaNameValue"],[3,"PatWild"],[3,"Lifetime"],[3,"PatSlice"],[3,"Generics"],[3,"ArgSelf"],[3,"ExprMatch"],[4,"TypeParamBound"],[3,"ExprStruct"],[3,"TypeTuple"],[3,"ItemTrait"],[3,"ExprWhile"],[3,"Field"],[3,"ExprAssign"],[3,"PatRef"],[3,"ExprCatch"],[4,"BinOp"],[3,"ExprIfLet"],[3,"QSelf"],[3,"ItemMacro2"],[3,"PathTokens"],[3,"FieldValue"],[3,"ItemUse"],[8,"ItemImplExt"],[8,"PairExt"],[3,"TokenStream"],[3,"Span"],[3,"Ident"],[3,"Quote"],[3,"Group"],[3,"Literal"],[3,"Punct"],[3,"ParseError"],[3,"Iter"],[3,"IterMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Pairs"],[3,"PairsMut"],[3,"Punctuated"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitFloat"],[3,"LitInt"],[3,"LitByte"],[3,"LitChar"],[3,"Turbofish"],[3,"TypeGenerics"],[3,"ImplGenerics"],[3,"Cursor"],[3,"TokenBuffer"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",10,null],[12,"bracket_token","","",10,null],[12,"elems","","",10,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",11,null],[12,"left","","",11,null],[12,"eq_token","","",11,null],[12,"right","","",11,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",12,null],[12,"left","","",12,null],[12,"op","","",12,null],[12,"right","","",12,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",13,null],[12,"left","","",13,null],[12,"op","","",13,null],[12,"right","","",13,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",14,null],[12,"block","","",14,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",15,null],[12,"box_token","","",15,null],[12,"expr","","",15,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",16,null],[12,"break_token","","",16,null],[12,"label","","",16,null],[12,"expr","","",16,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",17,null],[12,"func","","",17,null],[12,"paren_token","","",17,null],[12,"args","","",17,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",18,null],[12,"expr","","",18,null],[12,"as_token","","",18,null],[12,"ty","","",18,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",19,null],[12,"do_token","","",19,null],[12,"catch_token","","",19,null],[12,"block","","",19,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",20,null],[12,"movability","","",20,null],[12,"capture","","",20,null],[12,"or1_token","","",20,null],[12,"inputs","","",20,null],[12,"or2_token","","",20,null],[12,"output","","",20,null],[12,"body","","",20,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",21,null],[12,"continue_token","","",21,null],[12,"label","","",21,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",22,null],[12,"base","","",22,null],[12,"dot_token","","",22,null],[12,"member","","",22,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",23,null],[12,"label","","",23,null],[12,"for_token","","",23,null],[12,"pat","","",23,null],[12,"in_token","","",23,null],[12,"expr","","",23,null],[12,"body","","",23,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",24,null],[12,"group_token","","",24,null],[12,"expr","","",24,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",25,null],[12,"if_token","","",25,null],[12,"cond","","",25,null],[12,"then_branch","","",25,null],[12,"else_branch","","",25,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",26,null],[12,"if_token","","",26,null],[12,"let_token","","",26,null],[12,"pats","","",26,null],[12,"eq_token","","",26,null],[12,"expr","","",26,null],[12,"then_branch","","",26,null],[12,"else_branch","","",26,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",27,null],[12,"place","","",27,null],[12,"arrow_token","","",27,null],[12,"value","","",27,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",28,null],[12,"expr","","",28,null],[12,"bracket_token","","",28,null],[12,"index","","",28,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",29,null],[12,"lit","","",29,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",30,null],[12,"label","","",30,null],[12,"loop_token","","",30,null],[12,"body","","",30,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",31,null],[12,"mac","","",31,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",32,null],[12,"match_token","","",32,null],[12,"expr","","",32,null],[12,"brace_token","","",32,null],[12,"arms","","",32,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",33,null],[12,"receiver","","",33,null],[12,"dot_token","","",33,null],[12,"method","","",33,null],[12,"turbofish","","",33,null],[12,"paren_token","","",33,null],[12,"args","","",33,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",34,null],[12,"paren_token","","",34,null],[12,"expr","","",34,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",35,null],[12,"qself","","",35,null],[12,"path","","",35,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",36,null],[12,"from","","",36,null],[12,"limits","","",36,null],[12,"to","","",36,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",37,null],[12,"and_token","","",37,null],[12,"mutability","","",37,null],[12,"expr","","",37,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",38,null],[12,"bracket_token","","",38,null],[12,"expr","","",38,null],[12,"semi_token","","",38,null],[12,"len","","",38,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",39,null],[12,"return_token","","",39,null],[12,"expr","","",39,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",40,null],[12,"path","","",40,null],[12,"brace_token","","",40,null],[12,"fields","","",40,null],[12,"dot2_token","","",40,null],[12,"rest","","",40,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",41,null],[12,"expr","","",41,null],[12,"question_token","","",41,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",42,null],[12,"paren_token","","",42,null],[12,"elems","","",42,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",43,null],[12,"expr","","",43,null],[12,"colon_token","","",43,null],[12,"ty","","",43,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",44,null],[12,"op","","",44,null],[12,"expr","","",44,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",45,null],[12,"unsafe_token","","",45,null],[12,"block","","",45,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",46,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",47,null],[12,"label","","",47,null],[12,"while_token","","",47,null],[12,"cond","","",47,null],[12,"body","","",47,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",48,null],[12,"label","","",48,null],[12,"while_token","","",48,null],[12,"let_token","","",48,null],[12,"pats","","",48,null],[12,"eq_token","","",48,null],[12,"expr","","",48,null],[12,"body","","",48,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",49,null],[12,"yield_token","","",49,null],[12,"expr","","",49,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",50,null],[12,"span","","",50,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",51,null],[12,"leading_vert","","",51,null],[12,"pats","","",51,null],[12,"guard","","",51,null],[12,"fat_arrow_token","","",51,null],[12,"body","","",51,null],[12,"comma","","",51,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",52,null],[12,"stmts","","Statements in a block",52,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",53,null],[12,"member","","",53,null],[12,"colon_token","","",53,null],[12,"pat","","",53,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",54,null],[12,"member","","Name or index of the field.",54,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,null],[12,"expr","","Value of the field.",54,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",55,null],[12,"colon_token","","",55,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",56,null],[12,"let_token","","",56,null],[12,"pats","","",56,null],[12,"ty","","",56,null],[12,"init","","",56,null],[12,"semi_token","","",56,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",58,null],[12,"pat","","",58,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",59,null],[12,"mutability","","",59,null],[12,"ident","","",59,null],[12,"subpat","","",59,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",60,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",61,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",62,null],[12,"path","","",62,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",63,null],[12,"limits","","",63,null],[12,"hi","","",63,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",64,null],[12,"mutability","","",64,null],[12,"pat","","",64,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",65,null],[12,"front","","",65,null],[12,"middle","","",65,null],[12,"dot2_token","","",65,null],[12,"comma_token","","",65,null],[12,"back","","",65,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",66,null],[12,"brace_token","","",66,null],[12,"fields","","",66,null],[12,"dot2_token","","",66,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",67,null],[12,"front","","",67,null],[12,"dot2_token","","",67,null],[12,"comma_token","","",67,null],[12,"back","","",67,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",68,null],[12,"pat","","",68,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",69,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",70,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",71,null],[12,"lt_token","","",71,null],[12,"lifetimes","","",71,null],[12,"gt_token","","",71,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"default","","",72,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",73,null],[12,"params","","",73,null],[12,"gt_token","","",73,null],[12,"where_clause","","",73,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",74,null],[12,"lifetime","","",74,null],[12,"colon_token","","",74,null],[12,"bounds","","",74,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",75,null],[12,"eq_token","","",75,null],[12,"rhs_ty","","",75,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",76,null],[12,"colon_token","","",76,null],[12,"bounds","","",76,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",77,null],[12,"bounded_ty","","The type being bounded",77,null],[12,"colon_token","","",77,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",78,null],[12,"modifier","","",78,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",79,null],[12,"ident","","",79,null],[12,"colon_token","","",79,null],[12,"bounds","","",79,null],[12,"eq_token","","",79,null],[12,"default","","",79,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",80,null],[12,"predicates","","",80,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",81,null],[12,"colon_token","","",81,null],[12,"ty","","",81,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",82,null],[12,"self_token","","",82,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",83,null],[12,"lifetime","","",83,null],[12,"mutability","","",83,null],[12,"self_token","","",83,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",84,null],[12,"generics","","",84,null],[12,"paren_token","","",84,null],[12,"inputs","","",84,null],[12,"variadic","","",84,null],[12,"output","","",84,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",85,null],[12,"vis","","",85,null],[12,"ident","","",85,null],[12,"decl","","",85,null],[12,"semi_token","","",85,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",86,null],[12,"vis","","",86,null],[12,"static_token","","",86,null],[12,"mutability","","",86,null],[12,"ident","","",86,null],[12,"colon_token","","",86,null],[12,"ty","","",86,null],[12,"semi_token","","",86,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",87,null],[12,"vis","","",87,null],[12,"type_token","","",87,null],[12,"ident","","",87,null],[12,"semi_token","","",87,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",88,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",89,null],[12,"vis","","",89,null],[12,"defaultness","","",89,null],[12,"const_token","","",89,null],[12,"ident","","",89,null],[12,"colon_token","","",89,null],[12,"ty","","",89,null],[12,"eq_token","","",89,null],[12,"expr","","",89,null],[12,"semi_token","","",89,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",90,null],[12,"mac","","",90,null],[12,"semi_token","","",90,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",91,null],[12,"vis","","",91,null],[12,"defaultness","","",91,null],[12,"sig","","",91,null],[12,"block","","",91,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",92,null],[12,"vis","","",92,null],[12,"defaultness","","",92,null],[12,"type_token","","",92,null],[12,"ident","","",92,null],[12,"generics","","",92,null],[12,"eq_token","","",92,null],[12,"ty","","",92,null],[12,"semi_token","","",92,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",93,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",94,null],[12,"vis","","",94,null],[12,"const_token","","",94,null],[12,"ident","","",94,null],[12,"colon_token","","",94,null],[12,"ty","","",94,null],[12,"eq_token","","",94,null],[12,"expr","","",94,null],[12,"semi_token","","",94,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",95,null],[12,"vis","","",95,null],[12,"enum_token","","",95,null],[12,"ident","","",95,null],[12,"generics","","",95,null],[12,"brace_token","","",95,null],[12,"variants","","",95,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",96,null],[12,"vis","","",96,null],[12,"extern_token","","",96,null],[12,"crate_token","","",96,null],[12,"ident","","",96,null],[12,"rename","","",96,null],[12,"semi_token","","",96,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",97,null],[12,"vis","","",97,null],[12,"constness","","",97,null],[12,"unsafety","","",97,null],[12,"abi","","",97,null],[12,"ident","","",97,null],[12,"decl","","",97,null],[12,"block","","",97,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",98,null],[12,"abi","","",98,null],[12,"brace_token","","",98,null],[12,"items","","",98,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",99,null],[12,"defaultness","","",99,null],[12,"unsafety","","",99,null],[12,"impl_token","","",99,null],[12,"generics","","",99,null],[12,"trait_","","Trait this impl implements.",99,null],[12,"self_ty","","The Self type of the impl.",99,null],[12,"brace_token","","",99,null],[12,"items","","",99,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",100,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",100,null],[12,"mac","","",100,null],[12,"semi_token","","",100,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",101,null],[12,"vis","","",101,null],[12,"macro_token","","",101,null],[12,"ident","","",101,null],[12,"paren_token","","",101,null],[12,"args","","",101,null],[12,"brace_token","","",101,null],[12,"body","","",101,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",102,null],[12,"vis","","",102,null],[12,"mod_token","","",102,null],[12,"ident","","",102,null],[12,"content","","",102,null],[12,"semi","","",102,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",103,null],[12,"vis","","",103,null],[12,"static_token","","",103,null],[12,"mutability","","",103,null],[12,"ident","","",103,null],[12,"colon_token","","",103,null],[12,"ty","","",103,null],[12,"eq_token","","",103,null],[12,"expr","","",103,null],[12,"semi_token","","",103,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",104,null],[12,"vis","","",104,null],[12,"struct_token","","",104,null],[12,"ident","","",104,null],[12,"generics","","",104,null],[12,"fields","","",104,null],[12,"semi_token","","",104,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",105,null],[12,"vis","","",105,null],[12,"unsafety","","",105,null],[12,"auto_token","","",105,null],[12,"trait_token","","",105,null],[12,"ident","","",105,null],[12,"generics","","",105,null],[12,"colon_token","","",105,null],[12,"supertraits","","",105,null],[12,"brace_token","","",105,null],[12,"items","","",105,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",106,null],[12,"vis","","",106,null],[12,"type_token","","",106,null],[12,"ident","","",106,null],[12,"generics","","",106,null],[12,"eq_token","","",106,null],[12,"ty","","",106,null],[12,"semi_token","","",106,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",107,null],[12,"vis","","",107,null],[12,"union_token","","",107,null],[12,"ident","","",107,null],[12,"generics","","",107,null],[12,"fields","","",107,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",108,null],[12,"vis","","",108,null],[12,"use_token","","",108,null],[12,"leading_colon","","",108,null],[12,"tree","","",108,null],[12,"semi_token","","",108,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",109,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",110,null],[12,"unsafety","","",110,null],[12,"abi","","",110,null],[12,"ident","","",110,null],[12,"decl","","",110,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",111,null],[12,"const_token","","",111,null],[12,"ident","","",111,null],[12,"colon_token","","",111,null],[12,"ty","","",111,null],[12,"default","","",111,null],[12,"semi_token","","",111,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",112,null],[12,"mac","","",112,null],[12,"semi_token","","",112,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",113,null],[12,"sig","","",113,null],[12,"default","","",113,null],[12,"semi_token","","",113,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",114,null],[12,"type_token","","",114,null],[12,"ident","","",114,null],[12,"generics","","",114,null],[12,"colon_token","","",114,null],[12,"bounds","","",114,null],[12,"default","","",114,null],[12,"semi_token","","",114,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",115,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",116,null],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",117,null],[12,"items","","",117,null],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",null,null],[12,"ident","","",118,null],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",null,null],[12,"ident","","",119,null],[12,"colon2_token","","",119,null],[12,"tree","","",119,null],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",null,null],[12,"ident","","",120,null],[12,"as_token","","",120,null],[12,"rename","","",120,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",121,null],[12,"attrs","","",121,null],[12,"items","","",121,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",122,null],[12,"ident","","",122,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",123,null],[12,"span","","",123,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",124,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",125,null],[12,"bang_token","","",125,null],[12,"delimiter","","",125,null],[12,"tts","","",125,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",126,null],[12,"brace_token","","",126,null],[12,"variants","","",126,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",127,null],[12,"fields","","",127,null],[12,"semi_token","","",127,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",128,null],[12,"fields","","",128,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",129,null],[12,"vis","","Visibility of the struct or enum.",129,null],[12,"ident","","Name of the struct or enum.",129,null],[12,"generics","","Generics required to complete the definition.",129,null],[12,"data","","Data within the struct or enum.",129,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",130,null],[12,"name","","",130,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",131,null],[12,"ty","","",131,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",132,null],[12,"elem","","",132,null],[12,"semi_token","","",132,null],[12,"len","","",132,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",133,null],[12,"abi","","",133,null],[12,"fn_token","","",133,null],[12,"lifetimes","","",133,null],[12,"paren_token","","",133,null],[12,"inputs","","",133,null],[12,"variadic","","",133,null],[12,"output","","",133,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",134,null],[12,"elem","","",134,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",135,null],[12,"bounds","","",135,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",136,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",137,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",138,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",139,null],[12,"elem","","",139,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",140,null],[12,"path","","",140,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",141,null],[12,"const_token","","",141,null],[12,"mutability","","",141,null],[12,"elem","","",141,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",142,null],[12,"lifetime","","",142,null],[12,"mutability","","",142,null],[12,"elem","","",142,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",143,null],[12,"elem","","",143,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",144,null],[12,"bounds","","",144,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",145,null],[12,"elems","","",145,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",146,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",147,null],[12,"1","","",147,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",148,null],[12,"lt_token","","",148,null],[12,"args","","",148,null],[12,"gt_token","","",148,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",149,null],[12,"eq_token","","",149,null],[12,"ty","","",149,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",150,null],[12,"inputs","","`(A, B)`",150,null],[12,"output","","`C`",150,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",151,null],[12,"segments","","",151,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",152,null],[12,"arguments","","",152,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",153,null],[12,"ty","","",153,null],[12,"position","","",153,null],[12,"as_token","","",153,null],[12,"gt_token","","",153,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",154,null],[13,"Inner","","",154,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",155,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",155,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",155,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",156,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",156,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",157,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",157,null],[13,"Unit","","Unit struct or unit variant such as `None`.",157,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",158,null],[13,"Crate","","A crate-level visibility: `crate`.",158,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",158,null],[13,"Inherited","","An inherited visibility, which usually means private.",158,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",159,null],[13,"InPlace","","A placement expression: `place <- value`.",159,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",159,null],[13,"Call","","A function call expression: `invoke(a, b)`.",159,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",159,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",159,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",159,null],[13,"Unary","","A unary operation: `!x`, `*x`.",159,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",159,null],[13,"Cast","","A cast expression: `foo as f64`.",159,null],[13,"Type","","A type ascription expression: `foo: f64`.",159,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",159,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",159,null],[13,"While","","A while loop: `while expr { ... }`.",159,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",159,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",159,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",159,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",159,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",159,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",159,null],[13,"Block","","A blocked scope: `{ ... }`.",159,null],[13,"Assign","","An assignment expression: `a = compute()`.",159,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",159,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",159,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",159,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",159,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",159,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",159,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",159,null],[13,"Continue","","A `continue`, with an optional label.",159,null],[13,"Return","","A `return`, with an optional value to be returned.",159,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",159,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",159,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",159,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",159,null],[13,"Group","","An expression contained within invisible delimiters.",159,null],[13,"Try","","A try-expression: `expr?`.",159,null],[13,"Catch","","A catch expression: `do catch { ... }`.",159,null],[13,"Yield","","A yield expression: `yield expr`.",159,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",159,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",160,null],[13,"Unnamed","","An unnamed field like `self.0`.",160,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",161,null],[13,"Const","","A const expression. Must be inside of a block.",161,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",162,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",162,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",162,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",162,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",162,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",162,null],[13,"Box","","A box pattern: `box v`.",162,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",162,null],[13,"Lit","","A literal pattern: `0`.",162,null],[13,"Range","","A range pattern: `1..=2`.",162,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",162,null],[13,"Macro","","A macro in expression position.",162,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",162,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",163,null],[13,"Closed","","Inclusive at the beginning and end.",163,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",164,null],[13,"Item","","An item definition.",164,null],[13,"Expr","","Expr without trailing semicolon.",164,null],[13,"Semi","","Expression with trailing semicolon.",164,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",165,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",165,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",165,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",166,null],[13,"Maybe","","",166,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",167,null],[13,"Lifetime","","",167,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",168,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",168,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",168,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",169,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",169,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",169,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",169,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",169,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",170,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",170,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",170,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",170,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",171,null],[13,"Method","","A method within an impl block.",171,null],[13,"Type","","An associated type within an impl block.",171,null],[13,"Macro","","A macro invocation within an impl block.",171,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",171,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",172,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",172,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",172,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",172,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",172,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",172,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",172,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",172,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",172,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",172,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",172,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",172,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",172,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",172,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",172,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",172,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",173,null],[13,"Method","","A trait method within the definition of a trait.",173,null],[13,"Type","","An associated type within the definition of a trait.",173,null],[13,"Macro","","A macro invocation within the definition of a trait.",173,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",173,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",174,null],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",174,null],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",174,null],[13,"Glob","","A glob import in a `use` item: `*`.",174,null],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",174,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",175,null],[13,"F64","","",175,null],[13,"None","","",175,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",176,null],[13,"I16","","",176,null],[13,"I32","","",176,null],[13,"I64","","",176,null],[13,"I128","","",176,null],[13,"Isize","","",176,null],[13,"U8","","",176,null],[13,"U16","","",176,null],[13,"U32","","",176,null],[13,"U64","","",176,null],[13,"U128","","",176,null],[13,"Usize","","",176,null],[13,"None","","",176,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",177,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",177,null],[13,"Byte","","A byte literal: `b'f'`.",177,null],[13,"Char","","A character literal: `'a'`.",177,null],[13,"Int","","An integer literal: `1` or `1u16`.",177,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",177,null],[13,"Bool","","A boolean literal: `true` or `false`.",177,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",177,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",178,null],[13,"Raw","","A raw string like `r##\"data\"##`.",178,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",179,null],[13,"Brace","","",179,null],[13,"Bracket","","",179,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",180,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",180,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",180,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",181,null],[13,"Sub","","The `-` operator (subtraction)",181,null],[13,"Mul","","The `*` operator (multiplication)",181,null],[13,"Div","","The `/` operator (division)",181,null],[13,"Rem","","The `%` operator (modulus)",181,null],[13,"And","","The `&&` operator (logical and)",181,null],[13,"Or","","The `||` operator (logical or)",181,null],[13,"BitXor","","The `^` operator (bitwise xor)",181,null],[13,"BitAnd","","The `&` operator (bitwise and)",181,null],[13,"BitOr","","The `|` operator (bitwise or)",181,null],[13,"Shl","","The `<<` operator (shift left)",181,null],[13,"Shr","","The `>>` operator (shift right)",181,null],[13,"Eq","","The `==` operator (equality)",181,null],[13,"Lt","","The `<` operator (less than)",181,null],[13,"Le","","The `<=` operator (less than or equal to)",181,null],[13,"Ne","","The `!=` operator (not equal to)",181,null],[13,"Ge","","The `>=` operator (greater than or equal to)",181,null],[13,"Gt","","The `>` operator (greater than)",181,null],[13,"AddEq","","The `+=` operator",181,null],[13,"SubEq","","The `-=` operator",181,null],[13,"MulEq","","The `*=` operator",181,null],[13,"DivEq","","The `/=` operator",181,null],[13,"RemEq","","The `%=` operator",181,null],[13,"BitXorEq","","The `^=` operator",181,null],[13,"BitAndEq","","The `&=` operator",181,null],[13,"BitOrEq","","The `|=` operator",181,null],[13,"ShlEq","","The `<<=` operator",181,null],[13,"ShrEq","","The `>>=` operator",181,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",182,null],[13,"Not","","The `!` operator for logical inversion",182,null],[13,"Neg","","The `-` operator for negation",182,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",183,null],[13,"Wild","","Argument not given a name, matched with `_`.",183,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",184,null],[13,"Type","","A particular type is returned.",184,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",185,null],[13,"Array","","A fixed size array type: `[T; n]`.",185,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",185,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",185,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",185,null],[13,"Never","","The never type: `!`.",185,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",185,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",185,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",185,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",185,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",185,null],[13,"Group","","A type contained within invisible delimiters.",185,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",185,null],[13,"Macro","","A macro in the type position.",185,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",185,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",186,null],[13,"Type","","A type argument.",186,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",186,null],[13,"Const","","A const expression. Must be inside of a block.",186,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",187,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",187,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",187,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_file","","Parse the content of a file of Rust code.",null,{"i":[{"n":"str"}],"o":{"g":["file","parseerror"],"n":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",188,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",189,null],[3,"Add","","`+`",null,null],[12,"0","","",190,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",191,null],[3,"And","","`&`",null,null],[12,"0","","",192,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",193,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",194,null],[3,"At","","`@`",null,null],[12,"0","","",195,null],[3,"Bang","","`!`",null,null],[12,"0","","",196,null],[3,"Caret","","`^`",null,null],[12,"0","","",197,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",198,null],[3,"Colon","","`:`",null,null],[12,"0","","",199,null],[3,"Colon2","","`::`",null,null],[12,"0","","",200,null],[3,"Comma","","`,`",null,null],[12,"0","","",201,null],[3,"Div","","`/`",null,null],[12,"0","","",202,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",203,null],[3,"Dollar","","`$`",null,null],[12,"0","","",204,null],[3,"Dot","","`.`",null,null],[12,"0","","",205,null],[3,"Dot2","","`..`",null,null],[12,"0","","",206,null],[3,"Dot3","","`...`",null,null],[12,"0","","",207,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",208,null],[3,"Eq","","`=`",null,null],[12,"0","","",209,null],[3,"EqEq","","`==`",null,null],[12,"0","","",210,null],[3,"Ge","","`>=`",null,null],[12,"0","","",211,null],[3,"Gt","","`>`",null,null],[12,"0","","",212,null],[3,"Le","","`<=`",null,null],[12,"0","","",213,null],[3,"Lt","","`<`",null,null],[12,"0","","",214,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",215,null],[3,"Ne","","`!=`",null,null],[12,"0","","",216,null],[3,"Or","","`|`",null,null],[12,"0","","",217,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",218,null],[3,"OrOr","","`||`",null,null],[12,"0","","",219,null],[3,"Pound","","`#`",null,null],[12,"0","","",220,null],[3,"Question","","`?`",null,null],[12,"0","","",221,null],[3,"RArrow","","`->`",null,null],[12,"0","","",222,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",223,null],[3,"Rem","","`%`",null,null],[12,"0","","",224,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",225,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",226,null],[3,"Semi","","`;`",null,null],[12,"0","","",227,null],[3,"Shl","","`<<`",null,null],[12,"0","","",228,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",229,null],[3,"Shr","","`>>`",null,null],[12,"0","","",230,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",231,null],[3,"Star","","`*`",null,null],[12,"0","","",232,null],[3,"Sub","","`-`",null,null],[12,"0","","",233,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",234,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",235,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",236,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",237,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",238,null],[3,"As","","`as`",null,null],[12,"0","","",239,null],[3,"Auto","","`auto`",null,null],[12,"0","","",240,null],[3,"Box","","`box`",null,null],[12,"0","","",241,null],[3,"Break","","`break`",null,null],[12,"0","","",242,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",243,null],[3,"Catch","","`catch`",null,null],[12,"0","","",244,null],[3,"Const","","`const`",null,null],[12,"0","","",245,null],[3,"Continue","","`continue`",null,null],[12,"0","","",246,null],[3,"Crate","","`crate`",null,null],[12,"0","","",247,null],[3,"Default","","`default`",null,null],[12,"0","","",248,null],[3,"Do","","`do`",null,null],[12,"0","","",249,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",250,null],[3,"Else","","`else`",null,null],[12,"0","","",251,null],[3,"Enum","","`enum`",null,null],[12,"0","","",252,null],[3,"Extern","","`extern`",null,null],[12,"0","","",253,null],[3,"Fn","","`fn`",null,null],[12,"0","","",254,null],[3,"For","","`for`",null,null],[12,"0","","",255,null],[3,"If","","`if`",null,null],[12,"0","","",256,null],[3,"Impl","","`impl`",null,null],[12,"0","","",257,null],[3,"In","","`in`",null,null],[12,"0","","",258,null],[3,"Let","","`let`",null,null],[12,"0","","",259,null],[3,"Loop","","`loop`",null,null],[12,"0","","",260,null],[3,"Macro","","`macro`",null,null],[12,"0","","",261,null],[3,"Match","","`match`",null,null],[12,"0","","",262,null],[3,"Mod","","`mod`",null,null],[12,"0","","",263,null],[3,"Move","","`move`",null,null],[12,"0","","",264,null],[3,"Mut","","`mut`",null,null],[12,"0","","",265,null],[3,"Pub","","`pub`",null,null],[12,"0","","",266,null],[3,"Ref","","`ref`",null,null],[12,"0","","",267,null],[3,"Return","","`return`",null,null],[12,"0","","",268,null],[3,"Self_","","`self`",null,null],[12,"0","","",269,null],[3,"Static","","`static`",null,null],[12,"0","","",270,null],[3,"Struct","","`struct`",null,null],[12,"0","","",271,null],[3,"Super","","`super`",null,null],[12,"0","","",272,null],[3,"Trait","","`trait`",null,null],[12,"0","","",273,null],[3,"Type","","`type`",null,null],[12,"0","","",274,null],[3,"Union","","`union`",null,null],[12,"0","","",275,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",276,null],[3,"Use","","`use`",null,null],[12,"0","","",277,null],[3,"Where","","`where`",null,null],[12,"0","","",278,null],[3,"While","","`while`",null,null],[12,"0","","",279,null],[3,"Yield","","`yield`",null,null],[12,"0","","",280,null],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"new","","",188,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",188,{"o":{"n":"self"}}],[11,"fmt","","",188,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",188,{"i":[{"n":"self"},{"n":"underscore"}],"o":{"n":"bool"}}],[11,"hash","","",188,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",188,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",188,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",188,{"i":[{"n":"cursor"}],"o":{"g":["underscore"],"n":"presult"}}],[11,"description","","",188,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"new","","",189,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",189,{"o":{"n":"self"}}],[11,"fmt","","",189,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",189,{"i":[{"n":"self"},{"n":"apostrophe"}],"o":{"n":"bool"}}],[11,"hash","","",189,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",189,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",189,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",189,{"i":[{"n":"cursor"}],"o":{"g":["apostrophe"],"n":"presult"}}],[11,"description","","",189,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"new","","",190,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",190,{"o":{"n":"self"}}],[11,"fmt","","",190,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",190,{"i":[{"n":"self"},{"n":"add"}],"o":{"n":"bool"}}],[11,"hash","","",190,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",190,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"new","","",191,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",191,{"o":{"n":"self"}}],[11,"fmt","","",191,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",191,{"i":[{"n":"self"},{"n":"addeq"}],"o":{"n":"bool"}}],[11,"hash","","",191,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",191,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"new","","",192,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",192,{"o":{"n":"self"}}],[11,"fmt","","",192,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",192,{"i":[{"n":"self"},{"n":"and"}],"o":{"n":"bool"}}],[11,"hash","","",192,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",192,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"new","","",193,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",193,{"o":{"n":"self"}}],[11,"fmt","","",193,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",193,{"i":[{"n":"self"},{"n":"andand"}],"o":{"n":"bool"}}],[11,"hash","","",193,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",193,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"new","","",194,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",194,{"o":{"n":"self"}}],[11,"fmt","","",194,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",194,{"i":[{"n":"self"},{"n":"andeq"}],"o":{"n":"bool"}}],[11,"hash","","",194,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",194,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"new","","",195,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",195,{"o":{"n":"self"}}],[11,"fmt","","",195,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",195,{"i":[{"n":"self"},{"n":"at"}],"o":{"n":"bool"}}],[11,"hash","","",195,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",195,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"new","","",196,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",196,{"o":{"n":"self"}}],[11,"fmt","","",196,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",196,{"i":[{"n":"self"},{"n":"bang"}],"o":{"n":"bool"}}],[11,"hash","","",196,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",196,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"new","","",197,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",197,{"o":{"n":"self"}}],[11,"fmt","","",197,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",197,{"i":[{"n":"self"},{"n":"caret"}],"o":{"n":"bool"}}],[11,"hash","","",197,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",197,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"new","","",198,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",198,{"o":{"n":"self"}}],[11,"fmt","","",198,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",198,{"i":[{"n":"self"},{"n":"careteq"}],"o":{"n":"bool"}}],[11,"hash","","",198,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",198,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"new","","",199,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",199,{"o":{"n":"self"}}],[11,"fmt","","",199,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",199,{"i":[{"n":"self"},{"n":"colon"}],"o":{"n":"bool"}}],[11,"hash","","",199,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",199,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"new","","",200,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",200,{"o":{"n":"self"}}],[11,"fmt","","",200,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",200,{"i":[{"n":"self"},{"n":"colon2"}],"o":{"n":"bool"}}],[11,"hash","","",200,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",200,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"new","","",201,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",201,{"o":{"n":"self"}}],[11,"fmt","","",201,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",201,{"i":[{"n":"self"},{"n":"comma"}],"o":{"n":"bool"}}],[11,"hash","","",201,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",201,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"new","","",202,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",202,{"o":{"n":"self"}}],[11,"fmt","","",202,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",202,{"i":[{"n":"self"},{"n":"div"}],"o":{"n":"bool"}}],[11,"hash","","",202,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",202,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"new","","",203,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",203,{"o":{"n":"self"}}],[11,"fmt","","",203,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",203,{"i":[{"n":"self"},{"n":"diveq"}],"o":{"n":"bool"}}],[11,"hash","","",203,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",203,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"new","","",204,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",204,{"o":{"n":"self"}}],[11,"fmt","","",204,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",204,{"i":[{"n":"self"},{"n":"dollar"}],"o":{"n":"bool"}}],[11,"hash","","",204,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",204,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"new","","",205,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",205,{"o":{"n":"self"}}],[11,"fmt","","",205,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",205,{"i":[{"n":"self"},{"n":"dot"}],"o":{"n":"bool"}}],[11,"hash","","",205,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",205,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"new","","",206,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",206,{"o":{"n":"self"}}],[11,"fmt","","",206,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",206,{"i":[{"n":"self"},{"n":"dot2"}],"o":{"n":"bool"}}],[11,"hash","","",206,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",206,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"new","","",207,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",207,{"o":{"n":"self"}}],[11,"fmt","","",207,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",207,{"i":[{"n":"self"},{"n":"dot3"}],"o":{"n":"bool"}}],[11,"hash","","",207,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",207,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"new","","",208,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",208,{"o":{"n":"self"}}],[11,"fmt","","",208,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",208,{"i":[{"n":"self"},{"n":"dotdoteq"}],"o":{"n":"bool"}}],[11,"hash","","",208,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",208,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"new","","",209,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",209,{"o":{"n":"self"}}],[11,"fmt","","",209,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",209,{"i":[{"n":"self"},{"n":"eq"}],"o":{"n":"bool"}}],[11,"hash","","",209,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",209,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"new","","",210,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",210,{"o":{"n":"self"}}],[11,"fmt","","",210,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",210,{"i":[{"n":"self"},{"n":"eqeq"}],"o":{"n":"bool"}}],[11,"hash","","",210,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",210,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"new","","",211,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",211,{"o":{"n":"self"}}],[11,"fmt","","",211,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",211,{"i":[{"n":"self"},{"n":"ge"}],"o":{"n":"bool"}}],[11,"hash","","",211,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",211,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"new","","",212,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",212,{"o":{"n":"self"}}],[11,"fmt","","",212,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",212,{"i":[{"n":"self"},{"n":"gt"}],"o":{"n":"bool"}}],[11,"hash","","",212,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",212,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"new","","",213,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",213,{"o":{"n":"self"}}],[11,"fmt","","",213,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",213,{"i":[{"n":"self"},{"n":"le"}],"o":{"n":"bool"}}],[11,"hash","","",213,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",213,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"new","","",214,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",214,{"o":{"n":"self"}}],[11,"fmt","","",214,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",214,{"i":[{"n":"self"},{"n":"lt"}],"o":{"n":"bool"}}],[11,"hash","","",214,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",214,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"new","","",215,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",215,{"o":{"n":"self"}}],[11,"fmt","","",215,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",215,{"i":[{"n":"self"},{"n":"muleq"}],"o":{"n":"bool"}}],[11,"hash","","",215,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",215,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"new","","",216,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",216,{"o":{"n":"self"}}],[11,"fmt","","",216,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",216,{"i":[{"n":"self"},{"n":"ne"}],"o":{"n":"bool"}}],[11,"hash","","",216,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",216,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"new","","",217,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",217,{"o":{"n":"self"}}],[11,"fmt","","",217,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",217,{"i":[{"n":"self"},{"n":"or"}],"o":{"n":"bool"}}],[11,"hash","","",217,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",217,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"new","","",218,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",218,{"o":{"n":"self"}}],[11,"fmt","","",218,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",218,{"i":[{"n":"self"},{"n":"oreq"}],"o":{"n":"bool"}}],[11,"hash","","",218,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",218,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"new","","",219,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",219,{"o":{"n":"self"}}],[11,"fmt","","",219,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",219,{"i":[{"n":"self"},{"n":"oror"}],"o":{"n":"bool"}}],[11,"hash","","",219,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",219,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",220,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"new","","",220,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",220,{"o":{"n":"self"}}],[11,"fmt","","",220,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",220,{"i":[{"n":"self"},{"n":"pound"}],"o":{"n":"bool"}}],[11,"hash","","",220,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",220,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"new","","",221,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",221,{"o":{"n":"self"}}],[11,"fmt","","",221,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",221,{"i":[{"n":"self"},{"n":"question"}],"o":{"n":"bool"}}],[11,"hash","","",221,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",221,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",222,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"new","","",222,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",222,{"o":{"n":"self"}}],[11,"fmt","","",222,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",222,{"i":[{"n":"self"},{"n":"rarrow"}],"o":{"n":"bool"}}],[11,"hash","","",222,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",222,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"new","","",223,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",223,{"o":{"n":"self"}}],[11,"fmt","","",223,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",223,{"i":[{"n":"self"},{"n":"larrow"}],"o":{"n":"bool"}}],[11,"hash","","",223,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",223,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",224,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"new","","",224,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",224,{"o":{"n":"self"}}],[11,"fmt","","",224,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",224,{"i":[{"n":"self"},{"n":"rem"}],"o":{"n":"bool"}}],[11,"hash","","",224,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",224,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",225,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"new","","",225,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",225,{"o":{"n":"self"}}],[11,"fmt","","",225,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",225,{"i":[{"n":"self"},{"n":"remeq"}],"o":{"n":"bool"}}],[11,"hash","","",225,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",225,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",226,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"new","","",226,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",226,{"o":{"n":"self"}}],[11,"fmt","","",226,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",226,{"i":[{"n":"self"},{"n":"fatarrow"}],"o":{"n":"bool"}}],[11,"hash","","",226,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",226,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",227,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"new","","",227,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",227,{"o":{"n":"self"}}],[11,"fmt","","",227,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",227,{"i":[{"n":"self"},{"n":"semi"}],"o":{"n":"bool"}}],[11,"hash","","",227,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",227,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",228,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"new","","",228,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",228,{"o":{"n":"self"}}],[11,"fmt","","",228,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",228,{"i":[{"n":"self"},{"n":"shl"}],"o":{"n":"bool"}}],[11,"hash","","",228,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",228,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",229,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"new","","",229,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",229,{"o":{"n":"self"}}],[11,"fmt","","",229,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",229,{"i":[{"n":"self"},{"n":"shleq"}],"o":{"n":"bool"}}],[11,"hash","","",229,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",229,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",230,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"new","","",230,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",230,{"o":{"n":"self"}}],[11,"fmt","","",230,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",230,{"i":[{"n":"self"},{"n":"shr"}],"o":{"n":"bool"}}],[11,"hash","","",230,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",230,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",231,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"new","","",231,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",231,{"o":{"n":"self"}}],[11,"fmt","","",231,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",231,{"i":[{"n":"self"},{"n":"shreq"}],"o":{"n":"bool"}}],[11,"hash","","",231,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",231,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",232,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"new","","",232,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",232,{"o":{"n":"self"}}],[11,"fmt","","",232,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",232,{"i":[{"n":"self"},{"n":"star"}],"o":{"n":"bool"}}],[11,"hash","","",232,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",232,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",233,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"new","","",233,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",233,{"o":{"n":"self"}}],[11,"fmt","","",233,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",233,{"i":[{"n":"self"},{"n":"sub"}],"o":{"n":"bool"}}],[11,"hash","","",233,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",233,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",234,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"new","","",234,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",234,{"o":{"n":"self"}}],[11,"fmt","","",234,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",234,{"i":[{"n":"self"},{"n":"subeq"}],"o":{"n":"bool"}}],[11,"hash","","",234,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",234,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",190,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",190,{"i":[{"n":"cursor"}],"o":{"g":["add"],"n":"presult"}}],[11,"description","","",190,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",191,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",191,{"i":[{"n":"cursor"}],"o":{"g":["addeq"],"n":"presult"}}],[11,"description","","",191,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",192,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",192,{"i":[{"n":"cursor"}],"o":{"g":["and"],"n":"presult"}}],[11,"description","","",192,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",193,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",193,{"i":[{"n":"cursor"}],"o":{"g":["andand"],"n":"presult"}}],[11,"description","","",193,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",194,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",194,{"i":[{"n":"cursor"}],"o":{"g":["andeq"],"n":"presult"}}],[11,"description","","",194,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",195,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",195,{"i":[{"n":"cursor"}],"o":{"g":["at"],"n":"presult"}}],[11,"description","","",195,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",196,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",196,{"i":[{"n":"cursor"}],"o":{"g":["bang"],"n":"presult"}}],[11,"description","","",196,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",197,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",197,{"i":[{"n":"cursor"}],"o":{"g":["caret"],"n":"presult"}}],[11,"description","","",197,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",198,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",198,{"i":[{"n":"cursor"}],"o":{"g":["careteq"],"n":"presult"}}],[11,"description","","",198,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",199,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",199,{"i":[{"n":"cursor"}],"o":{"g":["colon"],"n":"presult"}}],[11,"description","","",199,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",200,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",200,{"i":[{"n":"cursor"}],"o":{"g":["colon2"],"n":"presult"}}],[11,"description","","",200,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",201,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",201,{"i":[{"n":"cursor"}],"o":{"g":["comma"],"n":"presult"}}],[11,"description","","",201,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",202,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",202,{"i":[{"n":"cursor"}],"o":{"g":["div"],"n":"presult"}}],[11,"description","","",202,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",203,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",203,{"i":[{"n":"cursor"}],"o":{"g":["diveq"],"n":"presult"}}],[11,"description","","",203,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",204,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",204,{"i":[{"n":"cursor"}],"o":{"g":["dollar"],"n":"presult"}}],[11,"description","","",204,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",205,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",205,{"i":[{"n":"cursor"}],"o":{"g":["dot"],"n":"presult"}}],[11,"description","","",205,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",206,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",206,{"i":[{"n":"cursor"}],"o":{"g":["dot2"],"n":"presult"}}],[11,"description","","",206,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",207,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",207,{"i":[{"n":"cursor"}],"o":{"g":["dot3"],"n":"presult"}}],[11,"description","","",207,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",208,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",208,{"i":[{"n":"cursor"}],"o":{"g":["dotdoteq"],"n":"presult"}}],[11,"description","","",208,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",209,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",209,{"i":[{"n":"cursor"}],"o":{"g":["eq"],"n":"presult"}}],[11,"description","","",209,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",210,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",210,{"i":[{"n":"cursor"}],"o":{"g":["eqeq"],"n":"presult"}}],[11,"description","","",210,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",211,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",211,{"i":[{"n":"cursor"}],"o":{"g":["ge"],"n":"presult"}}],[11,"description","","",211,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",212,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",212,{"i":[{"n":"cursor"}],"o":{"g":["gt"],"n":"presult"}}],[11,"description","","",212,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",213,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",213,{"i":[{"n":"cursor"}],"o":{"g":["le"],"n":"presult"}}],[11,"description","","",213,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",214,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",214,{"i":[{"n":"cursor"}],"o":{"g":["lt"],"n":"presult"}}],[11,"description","","",214,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",215,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"g":["muleq"],"n":"presult"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",216,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",216,{"i":[{"n":"cursor"}],"o":{"g":["ne"],"n":"presult"}}],[11,"description","","",216,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",217,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",217,{"i":[{"n":"cursor"}],"o":{"g":["or"],"n":"presult"}}],[11,"description","","",217,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",218,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",218,{"i":[{"n":"cursor"}],"o":{"g":["oreq"],"n":"presult"}}],[11,"description","","",218,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",219,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"g":["oror"],"n":"presult"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",220,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",220,{"i":[{"n":"cursor"}],"o":{"g":["pound"],"n":"presult"}}],[11,"description","","",220,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",221,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",221,{"i":[{"n":"cursor"}],"o":{"g":["question"],"n":"presult"}}],[11,"description","","",221,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",222,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",222,{"i":[{"n":"cursor"}],"o":{"g":["rarrow"],"n":"presult"}}],[11,"description","","",222,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",223,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",223,{"i":[{"n":"cursor"}],"o":{"g":["larrow"],"n":"presult"}}],[11,"description","","",223,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",224,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",224,{"i":[{"n":"cursor"}],"o":{"g":["rem"],"n":"presult"}}],[11,"description","","",224,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",225,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",225,{"i":[{"n":"cursor"}],"o":{"g":["remeq"],"n":"presult"}}],[11,"description","","",225,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",226,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",226,{"i":[{"n":"cursor"}],"o":{"g":["fatarrow"],"n":"presult"}}],[11,"description","","",226,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",227,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",227,{"i":[{"n":"cursor"}],"o":{"g":["semi"],"n":"presult"}}],[11,"description","","",227,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",228,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",228,{"i":[{"n":"cursor"}],"o":{"g":["shl"],"n":"presult"}}],[11,"description","","",228,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",229,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",229,{"i":[{"n":"cursor"}],"o":{"g":["shleq"],"n":"presult"}}],[11,"description","","",229,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",230,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",230,{"i":[{"n":"cursor"}],"o":{"g":["shr"],"n":"presult"}}],[11,"description","","",230,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",231,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",231,{"i":[{"n":"cursor"}],"o":{"g":["shreq"],"n":"presult"}}],[11,"description","","",231,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",232,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",232,{"i":[{"n":"cursor"}],"o":{"g":["star"],"n":"presult"}}],[11,"description","","",232,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",233,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",233,{"i":[{"n":"cursor"}],"o":{"g":["sub"],"n":"presult"}}],[11,"description","","",233,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",234,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",234,{"i":[{"n":"cursor"}],"o":{"g":["subeq"],"n":"presult"}}],[11,"description","","",234,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",235,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"default","","",235,{"o":{"n":"self"}}],[11,"fmt","","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",235,{"i":[{"n":"self"},{"n":"brace"}],"o":{"n":"bool"}}],[11,"hash","","",235,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",235,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",235,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",235,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",236,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"default","","",236,{"o":{"n":"self"}}],[11,"fmt","","",236,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",236,{"i":[{"n":"self"},{"n":"bracket"}],"o":{"n":"bool"}}],[11,"hash","","",236,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",236,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",236,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",236,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",237,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"default","","",237,{"o":{"n":"self"}}],[11,"fmt","","",237,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",237,{"i":[{"n":"self"},{"n":"paren"}],"o":{"n":"bool"}}],[11,"hash","","",237,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",237,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",237,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",237,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",238,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"default","","",238,{"o":{"n":"self"}}],[11,"fmt","","",238,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",238,{"i":[{"n":"self"},{"n":"group"}],"o":{"n":"bool"}}],[11,"hash","","",238,{"i":[{"n":"self"},{"n":"h"}]}],[11,"surround","","",238,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",238,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",238,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",239,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"default","","",239,{"o":{"n":"self"}}],[11,"fmt","","",239,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",239,{"i":[{"n":"self"},{"n":"as"}],"o":{"n":"bool"}}],[11,"hash","","",239,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",239,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",239,{"i":[{"n":"cursor"}],"o":{"g":["as"],"n":"presult"}}],[11,"description","","",239,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",239,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",240,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"default","","",240,{"o":{"n":"self"}}],[11,"fmt","","",240,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",240,{"i":[{"n":"self"},{"n":"auto"}],"o":{"n":"bool"}}],[11,"hash","","",240,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",240,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",240,{"i":[{"n":"cursor"}],"o":{"g":["auto"],"n":"presult"}}],[11,"description","","",240,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",240,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",241,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"default","","",241,{"o":{"n":"self"}}],[11,"fmt","","",241,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",241,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"bool"}}],[11,"hash","","",241,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",241,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",241,{"i":[{"n":"cursor"}],"o":{"g":["box"],"n":"presult"}}],[11,"description","","",241,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",241,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",242,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"default","","",242,{"o":{"n":"self"}}],[11,"fmt","","",242,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",242,{"i":[{"n":"self"},{"n":"break"}],"o":{"n":"bool"}}],[11,"hash","","",242,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",242,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",242,{"i":[{"n":"cursor"}],"o":{"g":["break"],"n":"presult"}}],[11,"description","","",242,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",242,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",243,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"default","","",243,{"o":{"n":"self"}}],[11,"fmt","","",243,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",243,{"i":[{"n":"self"},{"n":"capself"}],"o":{"n":"bool"}}],[11,"hash","","",243,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",243,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",243,{"i":[{"n":"cursor"}],"o":{"g":["capself"],"n":"presult"}}],[11,"description","","",243,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",243,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",244,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"default","","",244,{"o":{"n":"self"}}],[11,"fmt","","",244,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",244,{"i":[{"n":"self"},{"n":"catch"}],"o":{"n":"bool"}}],[11,"hash","","",244,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",244,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",244,{"i":[{"n":"cursor"}],"o":{"g":["catch"],"n":"presult"}}],[11,"description","","",244,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",244,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",245,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"default","","",245,{"o":{"n":"self"}}],[11,"fmt","","",245,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",245,{"i":[{"n":"self"},{"n":"const"}],"o":{"n":"bool"}}],[11,"hash","","",245,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",245,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",245,{"i":[{"n":"cursor"}],"o":{"g":["const"],"n":"presult"}}],[11,"description","","",245,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",245,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",246,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"default","","",246,{"o":{"n":"self"}}],[11,"fmt","","",246,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",246,{"i":[{"n":"self"},{"n":"continue"}],"o":{"n":"bool"}}],[11,"hash","","",246,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",246,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",246,{"i":[{"n":"cursor"}],"o":{"g":["continue"],"n":"presult"}}],[11,"description","","",246,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",246,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",247,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"default","","",247,{"o":{"n":"self"}}],[11,"fmt","","",247,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",247,{"i":[{"n":"self"},{"n":"crate"}],"o":{"n":"bool"}}],[11,"hash","","",247,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",247,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",247,{"i":[{"n":"cursor"}],"o":{"g":["crate"],"n":"presult"}}],[11,"description","","",247,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",247,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",248,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"default","","",248,{"o":{"n":"self"}}],[11,"fmt","","",248,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",248,{"i":[{"n":"self"},{"n":"default"}],"o":{"n":"bool"}}],[11,"hash","","",248,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",248,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",248,{"i":[{"n":"cursor"}],"o":{"g":["default"],"n":"presult"}}],[11,"description","","",248,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",248,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",249,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"default","","",249,{"o":{"n":"self"}}],[11,"fmt","","",249,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",249,{"i":[{"n":"self"},{"n":"do"}],"o":{"n":"bool"}}],[11,"hash","","",249,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",249,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",249,{"i":[{"n":"cursor"}],"o":{"g":["do"],"n":"presult"}}],[11,"description","","",249,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",249,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",250,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"default","","",250,{"o":{"n":"self"}}],[11,"fmt","","",250,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",250,{"i":[{"n":"self"},{"n":"dyn"}],"o":{"n":"bool"}}],[11,"hash","","",250,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",250,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",250,{"i":[{"n":"cursor"}],"o":{"g":["dyn"],"n":"presult"}}],[11,"description","","",250,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",250,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",251,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"default","","",251,{"o":{"n":"self"}}],[11,"fmt","","",251,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",251,{"i":[{"n":"self"},{"n":"else"}],"o":{"n":"bool"}}],[11,"hash","","",251,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",251,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",251,{"i":[{"n":"cursor"}],"o":{"g":["else"],"n":"presult"}}],[11,"description","","",251,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",251,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",252,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"default","","",252,{"o":{"n":"self"}}],[11,"fmt","","",252,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",252,{"i":[{"n":"self"},{"n":"enum"}],"o":{"n":"bool"}}],[11,"hash","","",252,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",252,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",252,{"i":[{"n":"cursor"}],"o":{"g":["enum"],"n":"presult"}}],[11,"description","","",252,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",252,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",253,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"default","","",253,{"o":{"n":"self"}}],[11,"fmt","","",253,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",253,{"i":[{"n":"self"},{"n":"extern"}],"o":{"n":"bool"}}],[11,"hash","","",253,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",253,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",253,{"i":[{"n":"cursor"}],"o":{"g":["extern"],"n":"presult"}}],[11,"description","","",253,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",253,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",254,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"default","","",254,{"o":{"n":"self"}}],[11,"fmt","","",254,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",254,{"i":[{"n":"self"},{"n":"fn"}],"o":{"n":"bool"}}],[11,"hash","","",254,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",254,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",254,{"i":[{"n":"cursor"}],"o":{"g":["fn"],"n":"presult"}}],[11,"description","","",254,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",254,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",255,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"default","","",255,{"o":{"n":"self"}}],[11,"fmt","","",255,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",255,{"i":[{"n":"self"},{"n":"for"}],"o":{"n":"bool"}}],[11,"hash","","",255,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",255,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",255,{"i":[{"n":"cursor"}],"o":{"g":["for"],"n":"presult"}}],[11,"description","","",255,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",255,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",256,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"default","","",256,{"o":{"n":"self"}}],[11,"fmt","","",256,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",256,{"i":[{"n":"self"},{"n":"if"}],"o":{"n":"bool"}}],[11,"hash","","",256,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",256,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",256,{"i":[{"n":"cursor"}],"o":{"g":["if"],"n":"presult"}}],[11,"description","","",256,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",256,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",257,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"default","","",257,{"o":{"n":"self"}}],[11,"fmt","","",257,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",257,{"i":[{"n":"self"},{"n":"impl"}],"o":{"n":"bool"}}],[11,"hash","","",257,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",257,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",257,{"i":[{"n":"cursor"}],"o":{"g":["impl"],"n":"presult"}}],[11,"description","","",257,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",257,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",258,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"default","","",258,{"o":{"n":"self"}}],[11,"fmt","","",258,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",258,{"i":[{"n":"self"},{"n":"in"}],"o":{"n":"bool"}}],[11,"hash","","",258,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",258,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",258,{"i":[{"n":"cursor"}],"o":{"g":["in"],"n":"presult"}}],[11,"description","","",258,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",258,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",259,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"default","","",259,{"o":{"n":"self"}}],[11,"fmt","","",259,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",259,{"i":[{"n":"self"},{"n":"let"}],"o":{"n":"bool"}}],[11,"hash","","",259,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",259,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",259,{"i":[{"n":"cursor"}],"o":{"g":["let"],"n":"presult"}}],[11,"description","","",259,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",259,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",260,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"default","","",260,{"o":{"n":"self"}}],[11,"fmt","","",260,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",260,{"i":[{"n":"self"},{"n":"loop"}],"o":{"n":"bool"}}],[11,"hash","","",260,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",260,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",260,{"i":[{"n":"cursor"}],"o":{"g":["loop"],"n":"presult"}}],[11,"description","","",260,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",260,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",261,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"default","","",261,{"o":{"n":"self"}}],[11,"fmt","","",261,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",261,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"bool"}}],[11,"hash","","",261,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",261,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",261,{"i":[{"n":"cursor"}],"o":{"g":["macro"],"n":"presult"}}],[11,"description","","",261,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",261,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",262,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"default","","",262,{"o":{"n":"self"}}],[11,"fmt","","",262,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",262,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"hash","","",262,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",262,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",262,{"i":[{"n":"cursor"}],"o":{"g":["match"],"n":"presult"}}],[11,"description","","",262,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",262,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",263,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"default","","",263,{"o":{"n":"self"}}],[11,"fmt","","",263,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",263,{"i":[{"n":"self"},{"n":"mod"}],"o":{"n":"bool"}}],[11,"hash","","",263,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",263,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",263,{"i":[{"n":"cursor"}],"o":{"g":["mod"],"n":"presult"}}],[11,"description","","",263,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",263,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",264,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"default","","",264,{"o":{"n":"self"}}],[11,"fmt","","",264,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",264,{"i":[{"n":"self"},{"n":"move"}],"o":{"n":"bool"}}],[11,"hash","","",264,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",264,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",264,{"i":[{"n":"cursor"}],"o":{"g":["move"],"n":"presult"}}],[11,"description","","",264,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",264,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",265,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"default","","",265,{"o":{"n":"self"}}],[11,"fmt","","",265,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",265,{"i":[{"n":"self"},{"n":"mut"}],"o":{"n":"bool"}}],[11,"hash","","",265,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",265,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",265,{"i":[{"n":"cursor"}],"o":{"g":["mut"],"n":"presult"}}],[11,"description","","",265,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",265,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",266,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"default","","",266,{"o":{"n":"self"}}],[11,"fmt","","",266,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",266,{"i":[{"n":"self"},{"n":"pub"}],"o":{"n":"bool"}}],[11,"hash","","",266,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",266,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",266,{"i":[{"n":"cursor"}],"o":{"g":["pub"],"n":"presult"}}],[11,"description","","",266,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",266,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",267,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"default","","",267,{"o":{"n":"self"}}],[11,"fmt","","",267,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",267,{"i":[{"n":"self"},{"n":"ref"}],"o":{"n":"bool"}}],[11,"hash","","",267,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",267,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",267,{"i":[{"n":"cursor"}],"o":{"g":["ref"],"n":"presult"}}],[11,"description","","",267,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",267,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",268,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"default","","",268,{"o":{"n":"self"}}],[11,"fmt","","",268,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",268,{"i":[{"n":"self"},{"n":"return"}],"o":{"n":"bool"}}],[11,"hash","","",268,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",268,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",268,{"i":[{"n":"cursor"}],"o":{"g":["return"],"n":"presult"}}],[11,"description","","",268,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",268,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",269,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"default","","",269,{"o":{"n":"self"}}],[11,"fmt","","",269,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",269,{"i":[{"n":"self"},{"n":"self_"}],"o":{"n":"bool"}}],[11,"hash","","",269,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",269,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",269,{"i":[{"n":"cursor"}],"o":{"g":["self_"],"n":"presult"}}],[11,"description","","",269,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",269,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",270,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"default","","",270,{"o":{"n":"self"}}],[11,"fmt","","",270,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",270,{"i":[{"n":"self"},{"n":"static"}],"o":{"n":"bool"}}],[11,"hash","","",270,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",270,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",270,{"i":[{"n":"cursor"}],"o":{"g":["static"],"n":"presult"}}],[11,"description","","",270,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",270,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",271,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"default","","",271,{"o":{"n":"self"}}],[11,"fmt","","",271,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",271,{"i":[{"n":"self"},{"n":"struct"}],"o":{"n":"bool"}}],[11,"hash","","",271,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",271,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",271,{"i":[{"n":"cursor"}],"o":{"g":["struct"],"n":"presult"}}],[11,"description","","",271,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",271,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",272,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"default","","",272,{"o":{"n":"self"}}],[11,"fmt","","",272,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",272,{"i":[{"n":"self"},{"n":"super"}],"o":{"n":"bool"}}],[11,"hash","","",272,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",272,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",272,{"i":[{"n":"cursor"}],"o":{"g":["super"],"n":"presult"}}],[11,"description","","",272,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",272,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",273,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"default","","",273,{"o":{"n":"self"}}],[11,"fmt","","",273,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",273,{"i":[{"n":"self"},{"n":"trait"}],"o":{"n":"bool"}}],[11,"hash","","",273,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",273,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",273,{"i":[{"n":"cursor"}],"o":{"g":["trait"],"n":"presult"}}],[11,"description","","",273,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",273,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",274,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"default","","",274,{"o":{"n":"self"}}],[11,"fmt","","",274,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",274,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"hash","","",274,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",274,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",274,{"i":[{"n":"cursor"}],"o":{"g":["type"],"n":"presult"}}],[11,"description","","",274,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",274,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",275,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"default","","",275,{"o":{"n":"self"}}],[11,"fmt","","",275,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",275,{"i":[{"n":"self"},{"n":"union"}],"o":{"n":"bool"}}],[11,"hash","","",275,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",275,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",275,{"i":[{"n":"cursor"}],"o":{"g":["union"],"n":"presult"}}],[11,"description","","",275,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",275,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",276,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"default","","",276,{"o":{"n":"self"}}],[11,"fmt","","",276,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",276,{"i":[{"n":"self"},{"n":"unsafe"}],"o":{"n":"bool"}}],[11,"hash","","",276,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",276,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",276,{"i":[{"n":"cursor"}],"o":{"g":["unsafe"],"n":"presult"}}],[11,"description","","",276,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",276,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",277,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"default","","",277,{"o":{"n":"self"}}],[11,"fmt","","",277,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",277,{"i":[{"n":"self"},{"n":"use"}],"o":{"n":"bool"}}],[11,"hash","","",277,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",277,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",277,{"i":[{"n":"cursor"}],"o":{"g":["use"],"n":"presult"}}],[11,"description","","",277,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",277,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",278,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"default","","",278,{"o":{"n":"self"}}],[11,"fmt","","",278,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",278,{"i":[{"n":"self"},{"n":"where"}],"o":{"n":"bool"}}],[11,"hash","","",278,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",278,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",278,{"i":[{"n":"cursor"}],"o":{"g":["where"],"n":"presult"}}],[11,"description","","",278,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",278,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",279,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"default","","",279,{"o":{"n":"self"}}],[11,"fmt","","",279,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",279,{"i":[{"n":"self"},{"n":"while"}],"o":{"n":"bool"}}],[11,"hash","","",279,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",279,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",279,{"i":[{"n":"cursor"}],"o":{"g":["while"],"n":"presult"}}],[11,"description","","",279,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",279,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",280,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"default","","",280,{"o":{"n":"self"}}],[11,"fmt","","",280,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",280,{"i":[{"n":"self"},{"n":"yield"}],"o":{"n":"bool"}}],[11,"hash","","",280,{"i":[{"n":"self"},{"n":"h"}]}],[11,"to_tokens","","",280,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",280,{"i":[{"n":"cursor"}],"o":{"g":["yield"],"n":"presult"}}],[11,"description","","",280,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",280,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","syn","",281,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","","",281,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",281,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",281,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"parse_inner","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_outer","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"ne","","",154,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"hash","","",154,null],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"ne","","",155,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"bool"}}],[11,"hash","","",155,null],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"from","","",155,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"from","","",155,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"from","","",155,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"to_tokens","","",155,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"name","","Returns the identifier that begins this structured meta item.",155,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"ne","","",156,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"bool"}}],[11,"hash","","",156,null],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"from","","",156,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",156,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"to_tokens","","",156,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",6,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",6,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",5,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",5,{"o":{"g":["str"],"n":"option"}}],[11,"parse_named","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_unnamed","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"ne","","",157,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"bool"}}],[11,"hash","","",157,null],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"from","","",157,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"from","","",157,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"to_tokens","","",157,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",157,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"ne","","",158,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"hash","","",158,null],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"from","","",158,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"from","","",158,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"from","","",158,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"to_tokens","","",158,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",159,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",159,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",31,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",24,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",24,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",34,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",34,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",10,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",10,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",161,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",161,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",42,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",26,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",26,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",25,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",25,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",23,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",30,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",32,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",32,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",19,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",19,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",49,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",51,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",55,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",55,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",21,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",54,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",54,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",38,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",45,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",14,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",14,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",35,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",35,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"parse_within","","",52,{"i":[{"n":"cursor"}],"o":{"g":["vec"],"n":"presult"}}],[11,"parse","","",164,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",164,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",162,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",58,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",58,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",59,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",68,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",68,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",66,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",66,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",160,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",160,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",50,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",62,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",62,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",67,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",64,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",64,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",60,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",63,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",63,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",65,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",65,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",61,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",61,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",161,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",42,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",13,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",26,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",49,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",14,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",12,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",160,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",28,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",36,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",35,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",37,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",21,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",40,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",38,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",34,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",70,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",59,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",66,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",68,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",62,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",67,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",58,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",64,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",60,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",63,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",65,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",61,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",69,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",164,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",159,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"hash","","",159,null],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"from","","",159,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"from","","",159,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"from","","",159,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"from","","",159,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"bool"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"from","","",159,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"from","","",159,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"from","","",159,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"from","","",159,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"from","","",159,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"from","","",159,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"from","","",159,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"from","","",159,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"from","","",159,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"from","","",159,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"from","","",159,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"from","","",159,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"from","","",159,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"bool"}}],[11,"hash","","",32,null],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"from","","",159,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"bool"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"from","","",159,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"from","","",159,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"from","","",159,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"from","","",159,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"bool"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"from","","",159,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"from","","",159,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"from","","",159,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"from","","",159,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"from","","",159,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"from","","",159,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"from","","",159,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"from","","",159,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"from","","",159,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"bool"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"from","","",159,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"from","","",159,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"from","","",159,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"bool"}}],[11,"hash","","",34,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"from","","",159,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"from","","",159,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"from","","",159,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"bool"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"from","","",159,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"from","","",159,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"from","","",159,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"to_tokens","","",159,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",46,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"ne","","",160,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"bool"}}],[11,"hash","","",160,null],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"from","","",50,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",50,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"bool"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"methodturbofish"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"bool"}}],[11,"ne","","",161,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"bool"}}],[11,"hash","","",161,null],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"genericmethodargument"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"bool"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"fieldvalue"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"bool"}}],[11,"hash","","",55,null],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"label"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"block"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"bool"}}],[11,"ne","","",164,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"bool"}}],[11,"hash","","",164,null],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"stmt"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"bool"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"local"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"bool"}}],[11,"ne","","",162,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"bool"}}],[11,"hash","","",162,null],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"pat"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"bool"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"patwild"}}],[11,"from","","",162,{"i":[{"n":"patwild"}],"o":{"n":"pat"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"bool"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"patident"}}],[11,"from","","",162,{"i":[{"n":"patident"}],"o":{"n":"pat"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"bool"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"patstruct"}}],[11,"from","","",162,{"i":[{"n":"patstruct"}],"o":{"n":"pat"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"bool"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"pattuplestruct"}}],[11,"from","","",162,{"i":[{"n":"pattuplestruct"}],"o":{"n":"pat"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"bool"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"patpath"}}],[11,"from","","",162,{"i":[{"n":"patpath"}],"o":{"n":"pat"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"pattuple"}}],[11,"from","","",162,{"i":[{"n":"pattuple"}],"o":{"n":"pat"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"bool"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"patbox"}}],[11,"from","","",162,{"i":[{"n":"patbox"}],"o":{"n":"pat"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"bool"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"patref"}}],[11,"from","","",162,{"i":[{"n":"patref"}],"o":{"n":"pat"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"bool"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"patlit"}}],[11,"from","","",162,{"i":[{"n":"patlit"}],"o":{"n":"pat"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"bool"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"patrange"}}],[11,"from","","",162,{"i":[{"n":"patrange"}],"o":{"n":"pat"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"bool"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"patslice"}}],[11,"from","","",162,{"i":[{"n":"patslice"}],"o":{"n":"pat"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"bool"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"patmacro"}}],[11,"from","","",162,{"i":[{"n":"patmacro"}],"o":{"n":"pat"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"patverbatim"}}],[11,"from","","",162,{"i":[{"n":"patverbatim"}],"o":{"n":"pat"}}],[11,"to_tokens","","",162,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",69,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"arm"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"bool"}}],[11,"ne","","",163,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"bool"}}],[11,"hash","","",163,null],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"rangelimits"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"bool"}}],[11,"ne","","",53,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"fieldpat"}}],[11,"parse","","",73,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",73,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",74,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",74,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",71,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",79,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",79,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",167,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",167,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",78,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",78,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",166,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",80,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",80,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",73,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",282,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",283,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",284,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",71,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",74,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",79,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",78,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",166,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",72,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",80,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",77,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",76,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",75,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"default","","",73,{"o":{"n":"generics"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"ne","","",165,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"bool"}}],[11,"hash","","",165,null],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"from","","",165,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"ne","","",74,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"from","","",165,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"bool"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"from","","",165,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"to_tokens","","",165,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",73,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"fmt","","",282,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",282,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"ne","","",282,{"i":[{"n":"self"},{"n":"implgenerics"}],"o":{"n":"bool"}}],[11,"hash","","",282,null],[11,"clone","","",282,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"fmt","","",283,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",283,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"ne","","",283,{"i":[{"n":"self"},{"n":"typegenerics"}],"o":{"n":"bool"}}],[11,"hash","","",283,null],[11,"clone","","",283,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"fmt","","",284,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",284,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"ne","","",284,{"i":[{"n":"self"},{"n":"turbofish"}],"o":{"n":"bool"}}],[11,"hash","","",284,null],[11,"clone","","",284,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",283,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"default","","",71,{"o":{"n":"boundlifetimes"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"bool"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"new","","",74,{"i":[{"n":"lifetime"}],"o":{"n":"self"}}],[11,"from","","",79,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"ne","","",167,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"bool"}}],[11,"hash","","",167,null],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"from","","",167,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",167,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"to_tokens","","",167,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",166,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"ne","","",166,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"hash","","",166,null],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",168,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"ne","","",168,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"hash","","",168,null],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"from","","",168,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"from","","",168,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"from","","",168,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"to_tokens","","",168,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",108,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",119,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",116,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",116,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",103,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",98,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",85,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",85,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",86,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",86,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",87,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",106,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",106,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",104,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",107,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",107,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",105,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",105,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",173,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",173,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",112,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",99,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",171,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",171,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",89,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",91,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",90,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",96,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",108,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",103,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",94,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",97,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",102,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",98,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",106,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",95,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",104,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",107,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",105,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",99,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",100,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",101,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",109,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",119,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",118,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",120,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",116,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",117,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",111,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",113,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",114,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",112,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",115,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",89,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",91,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",92,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",90,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",93,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",85,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",86,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",87,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",88,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",110,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",83,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",82,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",81,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",172,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"ne","","",172,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"hash","","",172,null],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"item"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"bool"}}],[11,"hash","","",96,null],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"itemexterncrate"}}],[11,"from","","",172,{"i":[{"n":"itemexterncrate"}],"o":{"n":"item"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"bool"}}],[11,"ne","","",108,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"bool"}}],[11,"hash","","",108,null],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"itemuse"}}],[11,"from","","",172,{"i":[{"n":"itemuse"}],"o":{"n":"item"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",103,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"bool"}}],[11,"ne","","",103,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"bool"}}],[11,"hash","","",103,null],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"itemstatic"}}],[11,"from","","",172,{"i":[{"n":"itemstatic"}],"o":{"n":"item"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"bool"}}],[11,"hash","","",94,null],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"itemconst"}}],[11,"from","","",172,{"i":[{"n":"itemconst"}],"o":{"n":"item"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"bool"}}],[11,"hash","","",97,null],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"itemfn"}}],[11,"from","","",172,{"i":[{"n":"itemfn"}],"o":{"n":"item"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",102,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"bool"}}],[11,"ne","","",102,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"bool"}}],[11,"hash","","",102,null],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"itemmod"}}],[11,"from","","",172,{"i":[{"n":"itemmod"}],"o":{"n":"item"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"bool"}}],[11,"hash","","",98,null],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"itemforeignmod"}}],[11,"from","","",172,{"i":[{"n":"itemforeignmod"}],"o":{"n":"item"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"bool"}}],[11,"ne","","",106,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"bool"}}],[11,"hash","","",106,null],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"itemtype"}}],[11,"from","","",172,{"i":[{"n":"itemtype"}],"o":{"n":"item"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"bool"}}],[11,"ne","","",104,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"bool"}}],[11,"hash","","",104,null],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"itemstruct"}}],[11,"from","","",172,{"i":[{"n":"itemstruct"}],"o":{"n":"item"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"bool"}}],[11,"hash","","",95,null],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"itemenum"}}],[11,"from","","",172,{"i":[{"n":"itemenum"}],"o":{"n":"item"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"bool"}}],[11,"ne","","",107,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"bool"}}],[11,"hash","","",107,null],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"itemunion"}}],[11,"from","","",172,{"i":[{"n":"itemunion"}],"o":{"n":"item"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"bool"}}],[11,"ne","","",105,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"bool"}}],[11,"hash","","",105,null],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"itemtrait"}}],[11,"from","","",172,{"i":[{"n":"itemtrait"}],"o":{"n":"item"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"bool"}}],[11,"hash","","",99,null],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"itemimpl"}}],[11,"from","","",172,{"i":[{"n":"itemimpl"}],"o":{"n":"item"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"bool"}}],[11,"hash","","",100,null],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"itemmacro"}}],[11,"from","","",172,{"i":[{"n":"itemmacro"}],"o":{"n":"item"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"itemmacro2"}}],[11,"from","","",172,{"i":[{"n":"itemmacro2"}],"o":{"n":"item"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"itemverbatim"}}],[11,"from","","",172,{"i":[{"n":"itemverbatim"}],"o":{"n":"item"}}],[11,"to_tokens","","",172,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",101,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",101,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",109,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",172,{"i":[{"n":"deriveinput"}],"o":{"n":"item"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",174,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"bool"}}],[11,"ne","","",174,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"bool"}}],[11,"hash","","",174,null],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"usetree"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"bool"}}],[11,"ne","","",119,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"bool"}}],[11,"hash","","",119,null],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"usepath"}}],[11,"from","","",174,{"i":[{"n":"usepath"}],"o":{"n":"usetree"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"bool"}}],[11,"hash","","",118,null],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"usename"}}],[11,"from","","",174,{"i":[{"n":"usename"}],"o":{"n":"usetree"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"bool"}}],[11,"hash","","",120,null],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"userename"}}],[11,"from","","",174,{"i":[{"n":"userename"}],"o":{"n":"usetree"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",116,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"bool"}}],[11,"ne","","",116,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"bool"}}],[11,"hash","","",116,null],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"useglob"}}],[11,"from","","",174,{"i":[{"n":"useglob"}],"o":{"n":"usetree"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"bool"}}],[11,"ne","","",117,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"bool"}}],[11,"hash","","",117,null],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"usegroup"}}],[11,"from","","",174,{"i":[{"n":"usegroup"}],"o":{"n":"usetree"}}],[11,"to_tokens","","",174,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",170,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"bool"}}],[11,"ne","","",170,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"bool"}}],[11,"hash","","",170,null],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"foreignitem"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"bool"}}],[11,"hash","","",85,null],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"foreignitemfn"}}],[11,"from","","",170,{"i":[{"n":"foreignitemfn"}],"o":{"n":"foreignitem"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"bool"}}],[11,"hash","","",86,null],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"foreignitemstatic"}}],[11,"from","","",170,{"i":[{"n":"foreignitemstatic"}],"o":{"n":"foreignitem"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"bool"}}],[11,"hash","","",87,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"foreignitemtype"}}],[11,"from","","",170,{"i":[{"n":"foreignitemtype"}],"o":{"n":"foreignitem"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"foreignitemverbatim"}}],[11,"from","","",170,{"i":[{"n":"foreignitemverbatim"}],"o":{"n":"foreignitem"}}],[11,"to_tokens","","",170,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",88,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",173,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"bool"}}],[11,"ne","","",173,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"bool"}}],[11,"hash","","",173,null],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"traititem"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"bool"}}],[11,"hash","","",111,null],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"traititemconst"}}],[11,"from","","",173,{"i":[{"n":"traititemconst"}],"o":{"n":"traititem"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",113,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"bool"}}],[11,"ne","","",113,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"bool"}}],[11,"hash","","",113,null],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"traititemmethod"}}],[11,"from","","",173,{"i":[{"n":"traititemmethod"}],"o":{"n":"traititem"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",114,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"bool"}}],[11,"ne","","",114,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"bool"}}],[11,"hash","","",114,null],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"traititemtype"}}],[11,"from","","",173,{"i":[{"n":"traititemtype"}],"o":{"n":"traititem"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",112,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"bool"}}],[11,"ne","","",112,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"bool"}}],[11,"hash","","",112,null],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"traititemmacro"}}],[11,"from","","",173,{"i":[{"n":"traititemmacro"}],"o":{"n":"traititem"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"traititemverbatim"}}],[11,"from","","",173,{"i":[{"n":"traititemverbatim"}],"o":{"n":"traititem"}}],[11,"to_tokens","","",173,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",115,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",115,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",171,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"bool"}}],[11,"ne","","",171,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"bool"}}],[11,"hash","","",171,null],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"implitem"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"bool"}}],[11,"hash","","",89,null],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"implitemconst"}}],[11,"from","","",171,{"i":[{"n":"implitemconst"}],"o":{"n":"implitem"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"bool"}}],[11,"hash","","",91,null],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"implitemmethod"}}],[11,"from","","",171,{"i":[{"n":"implitemmethod"}],"o":{"n":"implitem"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"bool"}}],[11,"hash","","",92,null],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"implitemtype"}}],[11,"from","","",171,{"i":[{"n":"implitemtype"}],"o":{"n":"implitem"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"bool"}}],[11,"hash","","",90,null],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"implitemmacro"}}],[11,"from","","",171,{"i":[{"n":"implitemmacro"}],"o":{"n":"implitem"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"implitemverbatim"}}],[11,"from","","",171,{"i":[{"n":"implitemverbatim"}],"o":{"n":"implitem"}}],[11,"to_tokens","","",171,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",93,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"bool"}}],[11,"ne","","",110,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"bool"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"methodsig"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"bool"}}],[11,"hash","","",84,null],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"fndecl"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",169,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"bool"}}],[11,"ne","","",169,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"bool"}}],[11,"hash","","",169,null],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"fnarg"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"argselfref"}}],[11,"from","","",169,{"i":[{"n":"argselfref"}],"o":{"n":"fnarg"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"bool"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"argself"}}],[11,"from","","",169,{"i":[{"n":"argself"}],"o":{"n":"fnarg"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"bool"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"argcaptured"}}],[11,"from","","",169,{"i":[{"n":"argcaptured"}],"o":{"n":"fnarg"}}],[11,"from","","",169,{"i":[{"n":"pat"}],"o":{"n":"fnarg"}}],[11,"from","","",169,{"i":[{"n":"type"}],"o":{"n":"fnarg"}}],[11,"to_tokens","","",169,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",121,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"bool"}}],[11,"hash","","",121,null],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",122,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"new","","",122,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",122,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",122,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"hash","","",122,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",177,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",177,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",285,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",285,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",286,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",286,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",287,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",287,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",288,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",288,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",289,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",289,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",290,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",290,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",285,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",286,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",287,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",288,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",289,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",290,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",123,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",124,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",177,{"i":[{"n":"literal"}],"o":{"n":"self"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",177,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"ne","","",177,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"hash","","",177,null],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"fmt","","",285,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",285,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"from","","",177,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"fmt","","",286,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",286,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"from","","",177,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"fmt","","",287,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",287,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"from","","",177,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"fmt","","",288,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",288,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"from","","",177,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"fmt","","",289,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",289,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"from","","",177,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"fmt","","",290,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",290,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"from","","",177,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"from","","",177,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"from","","",177,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"to_tokens","","",177,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","",285,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",285,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",285,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",285,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",285,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",286,null],[11,"value","","",286,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",286,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",286,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",287,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",287,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",287,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",287,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",288,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",288,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",288,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",288,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",289,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",289,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",289,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",289,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",289,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",290,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",290,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",290,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",290,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",290,{"i":[{"n":"self"},{"n":"span"}]}],[11,"span","","",124,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",124,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",285,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",285,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",286,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",286,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",287,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",287,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",288,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",288,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",289,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",289,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",290,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",290,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",123,{"i":[{"n":"self"},{"n":"h"}]}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",124,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",178,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"ne","","",178,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"hash","","",178,null],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",176,{"i":[{"n":"self"},{"n":"intsuffix"}],"o":{"n":"bool"}}],[11,"hash","","",176,null],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",175,{"i":[{"n":"self"},{"n":"floatsuffix"}],"o":{"n":"bool"}}],[11,"hash","","",175,null],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"parse","","",125,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",125,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",125,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"ne","","",179,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"bool"}}],[11,"hash","","",179,null],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",125,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",129,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"ne","","",129,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"hash","","",129,null],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",180,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"ne","","",180,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"hash","","",180,null],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"bool"}}],[11,"hash","","",127,null],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"from","","",180,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"bool"}}],[11,"hash","","",126,null],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"from","","",180,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"bool"}}],[11,"hash","","",128,null],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"from","","",180,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"parse_binop","","",181,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_assign_op","","",181,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",182,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",182,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",181,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",182,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",181,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"ne","","",181,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"hash","","",181,null],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"fmt","","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",182,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"ne","","",182,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"hash","","",182,null],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"parse","","",185,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",185,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",185,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",143,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",143,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",132,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",132,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",141,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",142,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",142,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",133,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",133,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",138,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",136,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",136,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",137,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",137,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",184,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",184,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",184,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",144,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",144,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",144,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",135,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",135,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",134,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",134,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",139,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",139,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",131,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",131,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",183,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",183,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",143,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",132,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",141,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",142,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",133,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",138,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",145,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",140,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",144,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",135,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",134,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",139,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",136,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",137,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",146,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",184,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",131,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",183,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",130,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",185,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"ne","","",185,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"hash","","",185,null],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"ne","","",143,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"bool"}}],[11,"hash","","",143,null],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"from","","",185,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"ne","","",132,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"bool"}}],[11,"hash","","",132,null],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"from","","",185,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"ne","","",141,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"bool"}}],[11,"hash","","",141,null],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"from","","",185,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"ne","","",142,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"bool"}}],[11,"hash","","",142,null],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"from","","",185,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"ne","","",133,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"bool"}}],[11,"hash","","",133,null],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"from","","",185,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"bool"}}],[11,"hash","","",138,null],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"from","","",185,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"bool"}}],[11,"hash","","",145,null],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"from","","",185,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"bool"}}],[11,"hash","","",140,null],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"from","","",185,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"ne","","",144,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"bool"}}],[11,"hash","","",144,null],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"from","","",185,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"bool"}}],[11,"hash","","",135,null],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"from","","",185,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"ne","","",139,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"bool"}}],[11,"hash","","",139,null],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"from","","",185,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"bool"}}],[11,"hash","","",134,null],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"from","","",185,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"ne","","",136,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"bool"}}],[11,"hash","","",136,null],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"from","","",185,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"ne","","",137,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"bool"}}],[11,"hash","","",137,null],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"from","","",185,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"from","","",185,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"to_tokens","","",185,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",146,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"ne","","",130,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"hash","","",130,null],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"ne","","",131,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"hash","","",131,null],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",183,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"ne","","",183,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"bool"}}],[11,"hash","","",183,null],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"fmt","","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",184,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"ne","","",184,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"bool"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",186,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",186,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",150,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",149,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"parse_mod_style","","",151,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",151,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",152,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",187,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",186,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",148,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",149,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",150,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",147,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"ne","","",151,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"hash","","",151,null],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"global","","",151,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"ne","","",147,{"i":[{"n":"self"},{"n":"pathtokens"}],"o":{"n":"bool"}}],[11,"hash","","",147,null],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"from","","",151,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"ne","","",152,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"hash","","",152,null],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"from","","",152,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",187,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",187,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"ne","","",187,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"bool"}}],[11,"hash","","",187,null],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"default","","",187,{"o":{"n":"self"}}],[11,"is_empty","","",187,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",186,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"ne","","",186,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"bool"}}],[11,"hash","","",186,null],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"bool"}}],[11,"hash","","",148,null],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"ne","","",149,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"bool"}}],[11,"hash","","",149,null],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"ne","","",150,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"bool"}}],[11,"hash","","",150,null],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"ne","","",153,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"hash","","",153,null],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",291,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",291,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",291,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","","",292,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"eq","","",292,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",292,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",292,{"o":{"n":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",292,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",292,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",292,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",292,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",292,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",292,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",292,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",292,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",293,null],[13,"End","","",293,null],[11,"to_tokens","","",294,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",293,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"eq","","",294,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"ne","","",294,{"i":[{"n":"self"},{"n":"punctuated"}],"o":{"n":"bool"}}],[11,"hash","","",294,null],[11,"clone","","",294,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",294,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",294,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",294,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",294,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",294,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",294,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",294,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",294,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",294,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",294,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",294,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",294,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",294,{"i":[{"n":"self"},{"n":"p"}]}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",294,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",294,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",294,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",294,{"i":[{"n":"self"},{"n":"t"}]}],[11,"insert","","Inserts an element at position `index`.",294,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"fmt","","",294,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_iter","","",294,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",294,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",294,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",294,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",294,null],[11,"default","","",294,{"o":{"n":"self"}}],[11,"next","","",295,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",295,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",296,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",296,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",297,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",297,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",298,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",298,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",299,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",299,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",300,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",300,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",293,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",293,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",293,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",293,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",293,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",293,null],[11,"index","","",294,null],[11,"index_mut","","",294,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",294,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",294,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",294,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",294,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",294,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",294,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",294,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",294,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",301,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_any","syn","",281,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",302,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","A short name of the type being parsed.",302,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",303,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",303,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",303,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",303,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","syn","",281,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",281,{"o":{"g":["str"],"n":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",304,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"i":[{"n":"v"},{"n":"abi"}]}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}]}],[5,"visit_arg_captured","","",null,{"i":[{"n":"v"},{"n":"argcaptured"}]}],[5,"visit_arg_self","","",null,{"i":[{"n":"v"},{"n":"argself"}]}],[5,"visit_arg_self_ref","","",null,{"i":[{"n":"v"},{"n":"argselfref"}]}],[5,"visit_arm","","",null,{"i":[{"n":"v"},{"n":"arm"}]}],[5,"visit_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}]}],[5,"visit_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}]}],[5,"visit_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}]}],[5,"visit_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}]}],[5,"visit_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}]}],[5,"visit_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}]}],[5,"visit_block","","",null,{"i":[{"n":"v"},{"n":"block"}]}],[5,"visit_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}]}],[5,"visit_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}]}],[5,"visit_data","","",null,{"i":[{"n":"v"},{"n":"data"}]}],[5,"visit_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}]}],[5,"visit_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}]}],[5,"visit_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}]}],[5,"visit_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"visit_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}]}],[5,"visit_expr_array","","",null,{"i":[{"n":"v"},{"n":"exprarray"}]}],[5,"visit_expr_assign","","",null,{"i":[{"n":"v"},{"n":"exprassign"}]}],[5,"visit_expr_assign_op","","",null,{"i":[{"n":"v"},{"n":"exprassignop"}]}],[5,"visit_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}]}],[5,"visit_expr_block","","",null,{"i":[{"n":"v"},{"n":"exprblock"}]}],[5,"visit_expr_box","","",null,{"i":[{"n":"v"},{"n":"exprbox"}]}],[5,"visit_expr_break","","",null,{"i":[{"n":"v"},{"n":"exprbreak"}]}],[5,"visit_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}]}],[5,"visit_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}]}],[5,"visit_expr_catch","","",null,{"i":[{"n":"v"},{"n":"exprcatch"}]}],[5,"visit_expr_closure","","",null,{"i":[{"n":"v"},{"n":"exprclosure"}]}],[5,"visit_expr_continue","","",null,{"i":[{"n":"v"},{"n":"exprcontinue"}]}],[5,"visit_expr_field","","",null,{"i":[{"n":"v"},{"n":"exprfield"}]}],[5,"visit_expr_for_loop","","",null,{"i":[{"n":"v"},{"n":"exprforloop"}]}],[5,"visit_expr_group","","",null,{"i":[{"n":"v"},{"n":"exprgroup"}]}],[5,"visit_expr_if","","",null,{"i":[{"n":"v"},{"n":"exprif"}]}],[5,"visit_expr_if_let","","",null,{"i":[{"n":"v"},{"n":"expriflet"}]}],[5,"visit_expr_in_place","","",null,{"i":[{"n":"v"},{"n":"exprinplace"}]}],[5,"visit_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}]}],[5,"visit_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}]}],[5,"visit_expr_loop","","",null,{"i":[{"n":"v"},{"n":"exprloop"}]}],[5,"visit_expr_macro","","",null,{"i":[{"n":"v"},{"n":"exprmacro"}]}],[5,"visit_expr_match","","",null,{"i":[{"n":"v"},{"n":"exprmatch"}]}],[5,"visit_expr_method_call","","",null,{"i":[{"n":"v"},{"n":"exprmethodcall"}]}],[5,"visit_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}]}],[5,"visit_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}]}],[5,"visit_expr_range","","",null,{"i":[{"n":"v"},{"n":"exprrange"}]}],[5,"visit_expr_reference","","",null,{"i":[{"n":"v"},{"n":"exprreference"}]}],[5,"visit_expr_repeat","","",null,{"i":[{"n":"v"},{"n":"exprrepeat"}]}],[5,"visit_expr_return","","",null,{"i":[{"n":"v"},{"n":"exprreturn"}]}],[5,"visit_expr_struct","","",null,{"i":[{"n":"v"},{"n":"exprstruct"}]}],[5,"visit_expr_try","","",null,{"i":[{"n":"v"},{"n":"exprtry"}]}],[5,"visit_expr_tuple","","",null,{"i":[{"n":"v"},{"n":"exprtuple"}]}],[5,"visit_expr_type","","",null,{"i":[{"n":"v"},{"n":"exprtype"}]}],[5,"visit_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}]}],[5,"visit_expr_unsafe","","",null,{"i":[{"n":"v"},{"n":"exprunsafe"}]}],[5,"visit_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}]}],[5,"visit_expr_while","","",null,{"i":[{"n":"v"},{"n":"exprwhile"}]}],[5,"visit_expr_while_let","","",null,{"i":[{"n":"v"},{"n":"exprwhilelet"}]}],[5,"visit_expr_yield","","",null,{"i":[{"n":"v"},{"n":"expryield"}]}],[5,"visit_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"visit_field_pat","","",null,{"i":[{"n":"v"},{"n":"fieldpat"}]}],[5,"visit_field_value","","",null,{"i":[{"n":"v"},{"n":"fieldvalue"}]}],[5,"visit_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}]}],[5,"visit_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}]}],[5,"visit_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}]}],[5,"visit_file","","",null,{"i":[{"n":"v"},{"n":"file"}]}],[5,"visit_fn_arg","","",null,{"i":[{"n":"v"},{"n":"fnarg"}]}],[5,"visit_fn_decl","","",null,{"i":[{"n":"v"},{"n":"fndecl"}]}],[5,"visit_foreign_item","","",null,{"i":[{"n":"v"},{"n":"foreignitem"}]}],[5,"visit_foreign_item_fn","","",null,{"i":[{"n":"v"},{"n":"foreignitemfn"}]}],[5,"visit_foreign_item_static","","",null,{"i":[{"n":"v"},{"n":"foreignitemstatic"}]}],[5,"visit_foreign_item_type","","",null,{"i":[{"n":"v"},{"n":"foreignitemtype"}]}],[5,"visit_foreign_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"foreignitemverbatim"}]}],[5,"visit_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}]}],[5,"visit_generic_method_argument","","",null,{"i":[{"n":"v"},{"n":"genericmethodargument"}]}],[5,"visit_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}]}],[5,"visit_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"visit_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}]}],[5,"visit_impl_item","","",null,{"i":[{"n":"v"},{"n":"implitem"}]}],[5,"visit_impl_item_const","","",null,{"i":[{"n":"v"},{"n":"implitemconst"}]}],[5,"visit_impl_item_macro","","",null,{"i":[{"n":"v"},{"n":"implitemmacro"}]}],[5,"visit_impl_item_method","","",null,{"i":[{"n":"v"},{"n":"implitemmethod"}]}],[5,"visit_impl_item_type","","",null,{"i":[{"n":"v"},{"n":"implitemtype"}]}],[5,"visit_impl_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"implitemverbatim"}]}],[5,"visit_index","","",null,{"i":[{"n":"v"},{"n":"index"}]}],[5,"visit_item","","",null,{"i":[{"n":"v"},{"n":"item"}]}],[5,"visit_item_const","","",null,{"i":[{"n":"v"},{"n":"itemconst"}]}],[5,"visit_item_enum","","",null,{"i":[{"n":"v"},{"n":"itemenum"}]}],[5,"visit_item_extern_crate","","",null,{"i":[{"n":"v"},{"n":"itemexterncrate"}]}],[5,"visit_item_fn","","",null,{"i":[{"n":"v"},{"n":"itemfn"}]}],[5,"visit_item_foreign_mod","","",null,{"i":[{"n":"v"},{"n":"itemforeignmod"}]}],[5,"visit_item_impl","","",null,{"i":[{"n":"v"},{"n":"itemimpl"}]}],[5,"visit_item_macro","","",null,{"i":[{"n":"v"},{"n":"itemmacro"}]}],[5,"visit_item_macro2","","",null,{"i":[{"n":"v"},{"n":"itemmacro2"}]}],[5,"visit_item_mod","","",null,{"i":[{"n":"v"},{"n":"itemmod"}]}],[5,"visit_item_static","","",null,{"i":[{"n":"v"},{"n":"itemstatic"}]}],[5,"visit_item_struct","","",null,{"i":[{"n":"v"},{"n":"itemstruct"}]}],[5,"visit_item_trait","","",null,{"i":[{"n":"v"},{"n":"itemtrait"}]}],[5,"visit_item_type","","",null,{"i":[{"n":"v"},{"n":"itemtype"}]}],[5,"visit_item_union","","",null,{"i":[{"n":"v"},{"n":"itemunion"}]}],[5,"visit_item_use","","",null,{"i":[{"n":"v"},{"n":"itemuse"}]}],[5,"visit_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"itemverbatim"}]}],[5,"visit_label","","",null,{"i":[{"n":"v"},{"n":"label"}]}],[5,"visit_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}]}],[5,"visit_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"visit_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}]}],[5,"visit_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}]}],[5,"visit_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}]}],[5,"visit_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}]}],[5,"visit_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}]}],[5,"visit_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}]}],[5,"visit_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}]}],[5,"visit_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}]}],[5,"visit_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}]}],[5,"visit_local","","",null,{"i":[{"n":"v"},{"n":"local"}]}],[5,"visit_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}]}],[5,"visit_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}]}],[5,"visit_member","","",null,{"i":[{"n":"v"},{"n":"member"}]}],[5,"visit_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}]}],[5,"visit_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}]}],[5,"visit_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}]}],[5,"visit_method_sig","","",null,{"i":[{"n":"v"},{"n":"methodsig"}]}],[5,"visit_method_turbofish","","",null,{"i":[{"n":"v"},{"n":"methodturbofish"}]}],[5,"visit_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}]}],[5,"visit_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}]}],[5,"visit_pat","","",null,{"i":[{"n":"v"},{"n":"pat"}]}],[5,"visit_pat_box","","",null,{"i":[{"n":"v"},{"n":"patbox"}]}],[5,"visit_pat_ident","","",null,{"i":[{"n":"v"},{"n":"patident"}]}],[5,"visit_pat_lit","","",null,{"i":[{"n":"v"},{"n":"patlit"}]}],[5,"visit_pat_macro","","",null,{"i":[{"n":"v"},{"n":"patmacro"}]}],[5,"visit_pat_path","","",null,{"i":[{"n":"v"},{"n":"patpath"}]}],[5,"visit_pat_range","","",null,{"i":[{"n":"v"},{"n":"patrange"}]}],[5,"visit_pat_ref","","",null,{"i":[{"n":"v"},{"n":"patref"}]}],[5,"visit_pat_slice","","",null,{"i":[{"n":"v"},{"n":"patslice"}]}],[5,"visit_pat_struct","","",null,{"i":[{"n":"v"},{"n":"patstruct"}]}],[5,"visit_pat_tuple","","",null,{"i":[{"n":"v"},{"n":"pattuple"}]}],[5,"visit_pat_tuple_struct","","",null,{"i":[{"n":"v"},{"n":"pattuplestruct"}]}],[5,"visit_pat_verbatim","","",null,{"i":[{"n":"v"},{"n":"patverbatim"}]}],[5,"visit_pat_wild","","",null,{"i":[{"n":"v"},{"n":"patwild"}]}],[5,"visit_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"visit_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}]}],[5,"visit_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"visit_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}]}],[5,"visit_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}]}],[5,"visit_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}]}],[5,"visit_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}]}],[5,"visit_range_limits","","",null,{"i":[{"n":"v"},{"n":"rangelimits"}]}],[5,"visit_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}]}],[5,"visit_span","","",null,{"i":[{"n":"v"},{"n":"span"}]}],[5,"visit_stmt","","",null,{"i":[{"n":"v"},{"n":"stmt"}]}],[5,"visit_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}]}],[5,"visit_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}]}],[5,"visit_trait_item","","",null,{"i":[{"n":"v"},{"n":"traititem"}]}],[5,"visit_trait_item_const","","",null,{"i":[{"n":"v"},{"n":"traititemconst"}]}],[5,"visit_trait_item_macro","","",null,{"i":[{"n":"v"},{"n":"traititemmacro"}]}],[5,"visit_trait_item_method","","",null,{"i":[{"n":"v"},{"n":"traititemmethod"}]}],[5,"visit_trait_item_type","","",null,{"i":[{"n":"v"},{"n":"traititemtype"}]}],[5,"visit_trait_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"traititemverbatim"}]}],[5,"visit_type","","",null,{"i":[{"n":"v"},{"n":"type"}]}],[5,"visit_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}]}],[5,"visit_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}]}],[5,"visit_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}]}],[5,"visit_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}]}],[5,"visit_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}]}],[5,"visit_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}]}],[5,"visit_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}]}],[5,"visit_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}]}],[5,"visit_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}]}],[5,"visit_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}]}],[5,"visit_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}]}],[5,"visit_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}]}],[5,"visit_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}]}],[5,"visit_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}]}],[5,"visit_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}]}],[5,"visit_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}]}],[5,"visit_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}]}],[5,"visit_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}]}],[5,"visit_use_glob","","",null,{"i":[{"n":"v"},{"n":"useglob"}]}],[5,"visit_use_group","","",null,{"i":[{"n":"v"},{"n":"usegroup"}]}],[5,"visit_use_name","","",null,{"i":[{"n":"v"},{"n":"usename"}]}],[5,"visit_use_path","","",null,{"i":[{"n":"v"},{"n":"usepath"}]}],[5,"visit_use_rename","","",null,{"i":[{"n":"v"},{"n":"userename"}]}],[5,"visit_use_tree","","",null,{"i":[{"n":"v"},{"n":"usetree"}]}],[5,"visit_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}]}],[5,"visit_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}]}],[5,"visit_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}]}],[5,"visit_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}]}],[5,"visit_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}]}],[5,"visit_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}]}],[5,"visit_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}]}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",305,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",305,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_arg_captured","","",305,{"i":[{"n":"self"},{"n":"argcaptured"}]}],[11,"visit_arg_self","","",305,{"i":[{"n":"self"},{"n":"argself"}]}],[11,"visit_arg_self_ref","","",305,{"i":[{"n":"self"},{"n":"argselfref"}]}],[11,"visit_arm","","",305,{"i":[{"n":"self"},{"n":"arm"}]}],[11,"visit_attr_style","","",305,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",305,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",305,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",305,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",305,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",305,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_block","","",305,{"i":[{"n":"self"},{"n":"block"}]}],[11,"visit_bound_lifetimes","","",305,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",305,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",305,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",305,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",305,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",305,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",305,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",305,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_array","","",305,{"i":[{"n":"self"},{"n":"exprarray"}]}],[11,"visit_expr_assign","","",305,{"i":[{"n":"self"},{"n":"exprassign"}]}],[11,"visit_expr_assign_op","","",305,{"i":[{"n":"self"},{"n":"exprassignop"}]}],[11,"visit_expr_binary","","",305,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_block","","",305,{"i":[{"n":"self"},{"n":"exprblock"}]}],[11,"visit_expr_box","","",305,{"i":[{"n":"self"},{"n":"exprbox"}]}],[11,"visit_expr_break","","",305,{"i":[{"n":"self"},{"n":"exprbreak"}]}],[11,"visit_expr_call","","",305,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",305,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_catch","","",305,{"i":[{"n":"self"},{"n":"exprcatch"}]}],[11,"visit_expr_closure","","",305,{"i":[{"n":"self"},{"n":"exprclosure"}]}],[11,"visit_expr_continue","","",305,{"i":[{"n":"self"},{"n":"exprcontinue"}]}],[11,"visit_expr_field","","",305,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_for_loop","","",305,{"i":[{"n":"self"},{"n":"exprforloop"}]}],[11,"visit_expr_group","","",305,{"i":[{"n":"self"},{"n":"exprgroup"}]}],[11,"visit_expr_if","","",305,{"i":[{"n":"self"},{"n":"exprif"}]}],[11,"visit_expr_if_let","","",305,{"i":[{"n":"self"},{"n":"expriflet"}]}],[11,"visit_expr_in_place","","",305,{"i":[{"n":"self"},{"n":"exprinplace"}]}],[11,"visit_expr_index","","",305,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",305,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_loop","","",305,{"i":[{"n":"self"},{"n":"exprloop"}]}],[11,"visit_expr_macro","","",305,{"i":[{"n":"self"},{"n":"exprmacro"}]}],[11,"visit_expr_match","","",305,{"i":[{"n":"self"},{"n":"exprmatch"}]}],[11,"visit_expr_method_call","","",305,{"i":[{"n":"self"},{"n":"exprmethodcall"}]}],[11,"visit_expr_paren","","",305,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",305,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_range","","",305,{"i":[{"n":"self"},{"n":"exprrange"}]}],[11,"visit_expr_reference","","",305,{"i":[{"n":"self"},{"n":"exprreference"}]}],[11,"visit_expr_repeat","","",305,{"i":[{"n":"self"},{"n":"exprrepeat"}]}],[11,"visit_expr_return","","",305,{"i":[{"n":"self"},{"n":"exprreturn"}]}],[11,"visit_expr_struct","","",305,{"i":[{"n":"self"},{"n":"exprstruct"}]}],[11,"visit_expr_try","","",305,{"i":[{"n":"self"},{"n":"exprtry"}]}],[11,"visit_expr_tuple","","",305,{"i":[{"n":"self"},{"n":"exprtuple"}]}],[11,"visit_expr_type","","",305,{"i":[{"n":"self"},{"n":"exprtype"}]}],[11,"visit_expr_unary","","",305,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_unsafe","","",305,{"i":[{"n":"self"},{"n":"exprunsafe"}]}],[11,"visit_expr_verbatim","","",305,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_expr_while","","",305,{"i":[{"n":"self"},{"n":"exprwhile"}]}],[11,"visit_expr_while_let","","",305,{"i":[{"n":"self"},{"n":"exprwhilelet"}]}],[11,"visit_expr_yield","","",305,{"i":[{"n":"self"},{"n":"expryield"}]}],[11,"visit_field","","",305,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_field_pat","","",305,{"i":[{"n":"self"},{"n":"fieldpat"}]}],[11,"visit_field_value","","",305,{"i":[{"n":"self"},{"n":"fieldvalue"}]}],[11,"visit_fields","","",305,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",305,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",305,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_file","","",305,{"i":[{"n":"self"},{"n":"file"}]}],[11,"visit_fn_arg","","",305,{"i":[{"n":"self"},{"n":"fnarg"}]}],[11,"visit_fn_decl","","",305,{"i":[{"n":"self"},{"n":"fndecl"}]}],[11,"visit_foreign_item","","",305,{"i":[{"n":"self"},{"n":"foreignitem"}]}],[11,"visit_foreign_item_fn","","",305,{"i":[{"n":"self"},{"n":"foreignitemfn"}]}],[11,"visit_foreign_item_static","","",305,{"i":[{"n":"self"},{"n":"foreignitemstatic"}]}],[11,"visit_foreign_item_type","","",305,{"i":[{"n":"self"},{"n":"foreignitemtype"}]}],[11,"visit_foreign_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"foreignitemverbatim"}]}],[11,"visit_generic_argument","","",305,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_method_argument","","",305,{"i":[{"n":"self"},{"n":"genericmethodargument"}]}],[11,"visit_generic_param","","",305,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",305,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",305,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_impl_item","","",305,{"i":[{"n":"self"},{"n":"implitem"}]}],[11,"visit_impl_item_const","","",305,{"i":[{"n":"self"},{"n":"implitemconst"}]}],[11,"visit_impl_item_macro","","",305,{"i":[{"n":"self"},{"n":"implitemmacro"}]}],[11,"visit_impl_item_method","","",305,{"i":[{"n":"self"},{"n":"implitemmethod"}]}],[11,"visit_impl_item_type","","",305,{"i":[{"n":"self"},{"n":"implitemtype"}]}],[11,"visit_impl_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"implitemverbatim"}]}],[11,"visit_index","","",305,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_item","","",305,{"i":[{"n":"self"},{"n":"item"}]}],[11,"visit_item_const","","",305,{"i":[{"n":"self"},{"n":"itemconst"}]}],[11,"visit_item_enum","","",305,{"i":[{"n":"self"},{"n":"itemenum"}]}],[11,"visit_item_extern_crate","","",305,{"i":[{"n":"self"},{"n":"itemexterncrate"}]}],[11,"visit_item_fn","","",305,{"i":[{"n":"self"},{"n":"itemfn"}]}],[11,"visit_item_foreign_mod","","",305,{"i":[{"n":"self"},{"n":"itemforeignmod"}]}],[11,"visit_item_impl","","",305,{"i":[{"n":"self"},{"n":"itemimpl"}]}],[11,"visit_item_macro","","",305,{"i":[{"n":"self"},{"n":"itemmacro"}]}],[11,"visit_item_macro2","","",305,{"i":[{"n":"self"},{"n":"itemmacro2"}]}],[11,"visit_item_mod","","",305,{"i":[{"n":"self"},{"n":"itemmod"}]}],[11,"visit_item_static","","",305,{"i":[{"n":"self"},{"n":"itemstatic"}]}],[11,"visit_item_struct","","",305,{"i":[{"n":"self"},{"n":"itemstruct"}]}],[11,"visit_item_trait","","",305,{"i":[{"n":"self"},{"n":"itemtrait"}]}],[11,"visit_item_type","","",305,{"i":[{"n":"self"},{"n":"itemtype"}]}],[11,"visit_item_union","","",305,{"i":[{"n":"self"},{"n":"itemunion"}]}],[11,"visit_item_use","","",305,{"i":[{"n":"self"},{"n":"itemuse"}]}],[11,"visit_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"itemverbatim"}]}],[11,"visit_label","","",305,{"i":[{"n":"self"},{"n":"label"}]}],[11,"visit_lifetime","","",305,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",305,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",305,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",305,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",305,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",305,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",305,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",305,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",305,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",305,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",305,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_local","","",305,{"i":[{"n":"self"},{"n":"local"}]}],[11,"visit_macro","","",305,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",305,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",305,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",305,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",305,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",305,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_method_sig","","",305,{"i":[{"n":"self"},{"n":"methodsig"}]}],[11,"visit_method_turbofish","","",305,{"i":[{"n":"self"},{"n":"methodturbofish"}]}],[11,"visit_nested_meta","","",305,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",305,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_pat","","",305,{"i":[{"n":"self"},{"n":"pat"}]}],[11,"visit_pat_box","","",305,{"i":[{"n":"self"},{"n":"patbox"}]}],[11,"visit_pat_ident","","",305,{"i":[{"n":"self"},{"n":"patident"}]}],[11,"visit_pat_lit","","",305,{"i":[{"n":"self"},{"n":"patlit"}]}],[11,"visit_pat_macro","","",305,{"i":[{"n":"self"},{"n":"patmacro"}]}],[11,"visit_pat_path","","",305,{"i":[{"n":"self"},{"n":"patpath"}]}],[11,"visit_pat_range","","",305,{"i":[{"n":"self"},{"n":"patrange"}]}],[11,"visit_pat_ref","","",305,{"i":[{"n":"self"},{"n":"patref"}]}],[11,"visit_pat_slice","","",305,{"i":[{"n":"self"},{"n":"patslice"}]}],[11,"visit_pat_struct","","",305,{"i":[{"n":"self"},{"n":"patstruct"}]}],[11,"visit_pat_tuple","","",305,{"i":[{"n":"self"},{"n":"pattuple"}]}],[11,"visit_pat_tuple_struct","","",305,{"i":[{"n":"self"},{"n":"pattuplestruct"}]}],[11,"visit_pat_verbatim","","",305,{"i":[{"n":"self"},{"n":"patverbatim"}]}],[11,"visit_pat_wild","","",305,{"i":[{"n":"self"},{"n":"patwild"}]}],[11,"visit_path","","",305,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",305,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",305,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",305,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",305,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",305,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",305,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_range_limits","","",305,{"i":[{"n":"self"},{"n":"rangelimits"}]}],[11,"visit_return_type","","",305,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",305,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_stmt","","",305,{"i":[{"n":"self"},{"n":"stmt"}]}],[11,"visit_trait_bound","","",305,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",305,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_trait_item","","",305,{"i":[{"n":"self"},{"n":"traititem"}]}],[11,"visit_trait_item_const","","",305,{"i":[{"n":"self"},{"n":"traititemconst"}]}],[11,"visit_trait_item_macro","","",305,{"i":[{"n":"self"},{"n":"traititemmacro"}]}],[11,"visit_trait_item_method","","",305,{"i":[{"n":"self"},{"n":"traititemmethod"}]}],[11,"visit_trait_item_type","","",305,{"i":[{"n":"self"},{"n":"traititemtype"}]}],[11,"visit_trait_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"traititemverbatim"}]}],[11,"visit_type","","",305,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",305,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",305,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",305,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",305,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",305,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",305,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",305,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",305,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",305,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",305,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",305,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",305,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",305,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",305,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",305,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",305,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",305,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",305,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_use_glob","","",305,{"i":[{"n":"self"},{"n":"useglob"}]}],[11,"visit_use_group","","",305,{"i":[{"n":"self"},{"n":"usegroup"}]}],[11,"visit_use_name","","",305,{"i":[{"n":"self"},{"n":"usename"}]}],[11,"visit_use_path","","",305,{"i":[{"n":"self"},{"n":"usepath"}]}],[11,"visit_use_rename","","",305,{"i":[{"n":"self"},{"n":"userename"}]}],[11,"visit_use_tree","","",305,{"i":[{"n":"self"},{"n":"usetree"}]}],[11,"visit_variant","","",305,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",305,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",305,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",305,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",305,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",305,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",305,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[0,"fold","syn","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[5,"fold_lit_byte","syn::fold","",null,{"i":[{"n":"v"},{"n":"litbyte"}],"o":{"n":"litbyte"}}],[5,"fold_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}],"o":{"n":"litbytestr"}}],[5,"fold_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}],"o":{"n":"litchar"}}],[5,"fold_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}],"o":{"n":"litfloat"}}],[5,"fold_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}],"o":{"n":"litint"}}],[5,"fold_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}],"o":{"n":"litstr"}}],[5,"fold_abi","","",null,{"i":[{"n":"v"},{"n":"abi"}],"o":{"n":"abi"}}],[5,"fold_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"anglebracketedgenericarguments"}}],[5,"fold_arg_captured","","",null,{"i":[{"n":"v"},{"n":"argcaptured"}],"o":{"n":"argcaptured"}}],[5,"fold_arg_self","","",null,{"i":[{"n":"v"},{"n":"argself"}],"o":{"n":"argself"}}],[5,"fold_arg_self_ref","","",null,{"i":[{"n":"v"},{"n":"argselfref"}],"o":{"n":"argselfref"}}],[5,"fold_arm","","",null,{"i":[{"n":"v"},{"n":"arm"}],"o":{"n":"arm"}}],[5,"fold_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}],"o":{"n":"attrstyle"}}],[5,"fold_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}],"o":{"n":"attribute"}}],[5,"fold_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}],"o":{"n":"barefnarg"}}],[5,"fold_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}],"o":{"n":"barefnargname"}}],[5,"fold_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}],"o":{"n":"binop"}}],[5,"fold_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}],"o":{"n":"binding"}}],[5,"fold_block","","",null,{"i":[{"n":"v"},{"n":"block"}],"o":{"n":"block"}}],[5,"fold_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}],"o":{"n":"boundlifetimes"}}],[5,"fold_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}],"o":{"n":"constparam"}}],[5,"fold_data","","",null,{"i":[{"n":"v"},{"n":"data"}],"o":{"n":"data"}}],[5,"fold_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}],"o":{"n":"dataenum"}}],[5,"fold_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}],"o":{"n":"datastruct"}}],[5,"fold_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}],"o":{"n":"dataunion"}}],[5,"fold_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}],"o":{"n":"deriveinput"}}],[5,"fold_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}],"o":{"n":"expr"}}],[5,"fold_expr_array","","",null,{"i":[{"n":"v"},{"n":"exprarray"}],"o":{"n":"exprarray"}}],[5,"fold_expr_assign","","",null,{"i":[{"n":"v"},{"n":"exprassign"}],"o":{"n":"exprassign"}}],[5,"fold_expr_assign_op","","",null,{"i":[{"n":"v"},{"n":"exprassignop"}],"o":{"n":"exprassignop"}}],[5,"fold_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}],"o":{"n":"exprbinary"}}],[5,"fold_expr_block","","",null,{"i":[{"n":"v"},{"n":"exprblock"}],"o":{"n":"exprblock"}}],[5,"fold_expr_box","","",null,{"i":[{"n":"v"},{"n":"exprbox"}],"o":{"n":"exprbox"}}],[5,"fold_expr_break","","",null,{"i":[{"n":"v"},{"n":"exprbreak"}],"o":{"n":"exprbreak"}}],[5,"fold_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}],"o":{"n":"exprcall"}}],[5,"fold_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}],"o":{"n":"exprcast"}}],[5,"fold_expr_catch","","",null,{"i":[{"n":"v"},{"n":"exprcatch"}],"o":{"n":"exprcatch"}}],[5,"fold_expr_closure","","",null,{"i":[{"n":"v"},{"n":"exprclosure"}],"o":{"n":"exprclosure"}}],[5,"fold_expr_continue","","",null,{"i":[{"n":"v"},{"n":"exprcontinue"}],"o":{"n":"exprcontinue"}}],[5,"fold_expr_field","","",null,{"i":[{"n":"v"},{"n":"exprfield"}],"o":{"n":"exprfield"}}],[5,"fold_expr_for_loop","","",null,{"i":[{"n":"v"},{"n":"exprforloop"}],"o":{"n":"exprforloop"}}],[5,"fold_expr_group","","",null,{"i":[{"n":"v"},{"n":"exprgroup"}],"o":{"n":"exprgroup"}}],[5,"fold_expr_if","","",null,{"i":[{"n":"v"},{"n":"exprif"}],"o":{"n":"exprif"}}],[5,"fold_expr_if_let","","",null,{"i":[{"n":"v"},{"n":"expriflet"}],"o":{"n":"expriflet"}}],[5,"fold_expr_in_place","","",null,{"i":[{"n":"v"},{"n":"exprinplace"}],"o":{"n":"exprinplace"}}],[5,"fold_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}],"o":{"n":"exprindex"}}],[5,"fold_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}],"o":{"n":"exprlit"}}],[5,"fold_expr_loop","","",null,{"i":[{"n":"v"},{"n":"exprloop"}],"o":{"n":"exprloop"}}],[5,"fold_expr_macro","","",null,{"i":[{"n":"v"},{"n":"exprmacro"}],"o":{"n":"exprmacro"}}],[5,"fold_expr_match","","",null,{"i":[{"n":"v"},{"n":"exprmatch"}],"o":{"n":"exprmatch"}}],[5,"fold_expr_method_call","","",null,{"i":[{"n":"v"},{"n":"exprmethodcall"}],"o":{"n":"exprmethodcall"}}],[5,"fold_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}],"o":{"n":"exprparen"}}],[5,"fold_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}],"o":{"n":"exprpath"}}],[5,"fold_expr_range","","",null,{"i":[{"n":"v"},{"n":"exprrange"}],"o":{"n":"exprrange"}}],[5,"fold_expr_reference","","",null,{"i":[{"n":"v"},{"n":"exprreference"}],"o":{"n":"exprreference"}}],[5,"fold_expr_repeat","","",null,{"i":[{"n":"v"},{"n":"exprrepeat"}],"o":{"n":"exprrepeat"}}],[5,"fold_expr_return","","",null,{"i":[{"n":"v"},{"n":"exprreturn"}],"o":{"n":"exprreturn"}}],[5,"fold_expr_struct","","",null,{"i":[{"n":"v"},{"n":"exprstruct"}],"o":{"n":"exprstruct"}}],[5,"fold_expr_try","","",null,{"i":[{"n":"v"},{"n":"exprtry"}],"o":{"n":"exprtry"}}],[5,"fold_expr_tuple","","",null,{"i":[{"n":"v"},{"n":"exprtuple"}],"o":{"n":"exprtuple"}}],[5,"fold_expr_type","","",null,{"i":[{"n":"v"},{"n":"exprtype"}],"o":{"n":"exprtype"}}],[5,"fold_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}],"o":{"n":"exprunary"}}],[5,"fold_expr_unsafe","","",null,{"i":[{"n":"v"},{"n":"exprunsafe"}],"o":{"n":"exprunsafe"}}],[5,"fold_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}],"o":{"n":"exprverbatim"}}],[5,"fold_expr_while","","",null,{"i":[{"n":"v"},{"n":"exprwhile"}],"o":{"n":"exprwhile"}}],[5,"fold_expr_while_let","","",null,{"i":[{"n":"v"},{"n":"exprwhilelet"}],"o":{"n":"exprwhilelet"}}],[5,"fold_expr_yield","","",null,{"i":[{"n":"v"},{"n":"expryield"}],"o":{"n":"expryield"}}],[5,"fold_field","","",null,{"i":[{"n":"v"},{"n":"field"}],"o":{"n":"field"}}],[5,"fold_field_pat","","",null,{"i":[{"n":"v"},{"n":"fieldpat"}],"o":{"n":"fieldpat"}}],[5,"fold_field_value","","",null,{"i":[{"n":"v"},{"n":"fieldvalue"}],"o":{"n":"fieldvalue"}}],[5,"fold_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}],"o":{"n":"fields"}}],[5,"fold_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}],"o":{"n":"fieldsnamed"}}],[5,"fold_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}],"o":{"n":"fieldsunnamed"}}],[5,"fold_file","","",null,{"i":[{"n":"v"},{"n":"file"}],"o":{"n":"file"}}],[5,"fold_fn_arg","","",null,{"i":[{"n":"v"},{"n":"fnarg"}],"o":{"n":"fnarg"}}],[5,"fold_fn_decl","","",null,{"i":[{"n":"v"},{"n":"fndecl"}],"o":{"n":"fndecl"}}],[5,"fold_foreign_item","","",null,{"i":[{"n":"v"},{"n":"foreignitem"}],"o":{"n":"foreignitem"}}],[5,"fold_foreign_item_fn","","",null,{"i":[{"n":"v"},{"n":"foreignitemfn"}],"o":{"n":"foreignitemfn"}}],[5,"fold_foreign_item_static","","",null,{"i":[{"n":"v"},{"n":"foreignitemstatic"}],"o":{"n":"foreignitemstatic"}}],[5,"fold_foreign_item_type","","",null,{"i":[{"n":"v"},{"n":"foreignitemtype"}],"o":{"n":"foreignitemtype"}}],[5,"fold_foreign_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"foreignitemverbatim"}],"o":{"n":"foreignitemverbatim"}}],[5,"fold_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}],"o":{"n":"genericargument"}}],[5,"fold_generic_method_argument","","",null,{"i":[{"n":"v"},{"n":"genericmethodargument"}],"o":{"n":"genericmethodargument"}}],[5,"fold_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}],"o":{"n":"genericparam"}}],[5,"fold_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}],"o":{"n":"generics"}}],[5,"fold_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}],"o":{"n":"ident"}}],[5,"fold_impl_item","","",null,{"i":[{"n":"v"},{"n":"implitem"}],"o":{"n":"implitem"}}],[5,"fold_impl_item_const","","",null,{"i":[{"n":"v"},{"n":"implitemconst"}],"o":{"n":"implitemconst"}}],[5,"fold_impl_item_macro","","",null,{"i":[{"n":"v"},{"n":"implitemmacro"}],"o":{"n":"implitemmacro"}}],[5,"fold_impl_item_method","","",null,{"i":[{"n":"v"},{"n":"implitemmethod"}],"o":{"n":"implitemmethod"}}],[5,"fold_impl_item_type","","",null,{"i":[{"n":"v"},{"n":"implitemtype"}],"o":{"n":"implitemtype"}}],[5,"fold_impl_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"implitemverbatim"}],"o":{"n":"implitemverbatim"}}],[5,"fold_index","","",null,{"i":[{"n":"v"},{"n":"index"}],"o":{"n":"index"}}],[5,"fold_item","","",null,{"i":[{"n":"v"},{"n":"item"}],"o":{"n":"item"}}],[5,"fold_item_const","","",null,{"i":[{"n":"v"},{"n":"itemconst"}],"o":{"n":"itemconst"}}],[5,"fold_item_enum","","",null,{"i":[{"n":"v"},{"n":"itemenum"}],"o":{"n":"itemenum"}}],[5,"fold_item_extern_crate","","",null,{"i":[{"n":"v"},{"n":"itemexterncrate"}],"o":{"n":"itemexterncrate"}}],[5,"fold_item_fn","","",null,{"i":[{"n":"v"},{"n":"itemfn"}],"o":{"n":"itemfn"}}],[5,"fold_item_foreign_mod","","",null,{"i":[{"n":"v"},{"n":"itemforeignmod"}],"o":{"n":"itemforeignmod"}}],[5,"fold_item_impl","","",null,{"i":[{"n":"v"},{"n":"itemimpl"}],"o":{"n":"itemimpl"}}],[5,"fold_item_macro","","",null,{"i":[{"n":"v"},{"n":"itemmacro"}],"o":{"n":"itemmacro"}}],[5,"fold_item_macro2","","",null,{"i":[{"n":"v"},{"n":"itemmacro2"}],"o":{"n":"itemmacro2"}}],[5,"fold_item_mod","","",null,{"i":[{"n":"v"},{"n":"itemmod"}],"o":{"n":"itemmod"}}],[5,"fold_item_static","","",null,{"i":[{"n":"v"},{"n":"itemstatic"}],"o":{"n":"itemstatic"}}],[5,"fold_item_struct","","",null,{"i":[{"n":"v"},{"n":"itemstruct"}],"o":{"n":"itemstruct"}}],[5,"fold_item_trait","","",null,{"i":[{"n":"v"},{"n":"itemtrait"}],"o":{"n":"itemtrait"}}],[5,"fold_item_type","","",null,{"i":[{"n":"v"},{"n":"itemtype"}],"o":{"n":"itemtype"}}],[5,"fold_item_union","","",null,{"i":[{"n":"v"},{"n":"itemunion"}],"o":{"n":"itemunion"}}],[5,"fold_item_use","","",null,{"i":[{"n":"v"},{"n":"itemuse"}],"o":{"n":"itemuse"}}],[5,"fold_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"itemverbatim"}],"o":{"n":"itemverbatim"}}],[5,"fold_label","","",null,{"i":[{"n":"v"},{"n":"label"}],"o":{"n":"label"}}],[5,"fold_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}],"o":{"n":"lifetime"}}],[5,"fold_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}],"o":{"n":"lifetimedef"}}],[5,"fold_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}],"o":{"n":"lit"}}],[5,"fold_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}],"o":{"n":"litbool"}}],[5,"fold_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}],"o":{"n":"litverbatim"}}],[5,"fold_local","","",null,{"i":[{"n":"v"},{"n":"local"}],"o":{"n":"local"}}],[5,"fold_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}],"o":{"n":"macro"}}],[5,"fold_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}],"o":{"n":"macrodelimiter"}}],[5,"fold_member","","",null,{"i":[{"n":"v"},{"n":"member"}],"o":{"n":"member"}}],[5,"fold_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}],"o":{"n":"meta"}}],[5,"fold_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}],"o":{"n":"metalist"}}],[5,"fold_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}],"o":{"n":"metanamevalue"}}],[5,"fold_method_sig","","",null,{"i":[{"n":"v"},{"n":"methodsig"}],"o":{"n":"methodsig"}}],[5,"fold_method_turbofish","","",null,{"i":[{"n":"v"},{"n":"methodturbofish"}],"o":{"n":"methodturbofish"}}],[5,"fold_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}],"o":{"n":"nestedmeta"}}],[5,"fold_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"parenthesizedgenericarguments"}}],[5,"fold_pat","","",null,{"i":[{"n":"v"},{"n":"pat"}],"o":{"n":"pat"}}],[5,"fold_pat_box","","",null,{"i":[{"n":"v"},{"n":"patbox"}],"o":{"n":"patbox"}}],[5,"fold_pat_ident","","",null,{"i":[{"n":"v"},{"n":"patident"}],"o":{"n":"patident"}}],[5,"fold_pat_lit","","",null,{"i":[{"n":"v"},{"n":"patlit"}],"o":{"n":"patlit"}}],[5,"fold_pat_macro","","",null,{"i":[{"n":"v"},{"n":"patmacro"}],"o":{"n":"patmacro"}}],[5,"fold_pat_path","","",null,{"i":[{"n":"v"},{"n":"patpath"}],"o":{"n":"patpath"}}],[5,"fold_pat_range","","",null,{"i":[{"n":"v"},{"n":"patrange"}],"o":{"n":"patrange"}}],[5,"fold_pat_ref","","",null,{"i":[{"n":"v"},{"n":"patref"}],"o":{"n":"patref"}}],[5,"fold_pat_slice","","",null,{"i":[{"n":"v"},{"n":"patslice"}],"o":{"n":"patslice"}}],[5,"fold_pat_struct","","",null,{"i":[{"n":"v"},{"n":"patstruct"}],"o":{"n":"patstruct"}}],[5,"fold_pat_tuple","","",null,{"i":[{"n":"v"},{"n":"pattuple"}],"o":{"n":"pattuple"}}],[5,"fold_pat_tuple_struct","","",null,{"i":[{"n":"v"},{"n":"pattuplestruct"}],"o":{"n":"pattuplestruct"}}],[5,"fold_pat_verbatim","","",null,{"i":[{"n":"v"},{"n":"patverbatim"}],"o":{"n":"patverbatim"}}],[5,"fold_pat_wild","","",null,{"i":[{"n":"v"},{"n":"patwild"}],"o":{"n":"patwild"}}],[5,"fold_path","","",null,{"i":[{"n":"v"},{"n":"path"}],"o":{"n":"path"}}],[5,"fold_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}],"o":{"n":"patharguments"}}],[5,"fold_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}],"o":{"n":"pathsegment"}}],[5,"fold_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}],"o":{"n":"predicateeq"}}],[5,"fold_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}],"o":{"n":"predicatelifetime"}}],[5,"fold_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}],"o":{"n":"predicatetype"}}],[5,"fold_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}],"o":{"n":"qself"}}],[5,"fold_range_limits","","",null,{"i":[{"n":"v"},{"n":"rangelimits"}],"o":{"n":"rangelimits"}}],[5,"fold_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}],"o":{"n":"returntype"}}],[5,"fold_span","","",null,{"i":[{"n":"v"},{"n":"span"}],"o":{"n":"span"}}],[5,"fold_stmt","","",null,{"i":[{"n":"v"},{"n":"stmt"}],"o":{"n":"stmt"}}],[5,"fold_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}],"o":{"n":"traitbound"}}],[5,"fold_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}],"o":{"n":"traitboundmodifier"}}],[5,"fold_trait_item","","",null,{"i":[{"n":"v"},{"n":"traititem"}],"o":{"n":"traititem"}}],[5,"fold_trait_item_const","","",null,{"i":[{"n":"v"},{"n":"traititemconst"}],"o":{"n":"traititemconst"}}],[5,"fold_trait_item_macro","","",null,{"i":[{"n":"v"},{"n":"traititemmacro"}],"o":{"n":"traititemmacro"}}],[5,"fold_trait_item_method","","",null,{"i":[{"n":"v"},{"n":"traititemmethod"}],"o":{"n":"traititemmethod"}}],[5,"fold_trait_item_type","","",null,{"i":[{"n":"v"},{"n":"traititemtype"}],"o":{"n":"traititemtype"}}],[5,"fold_trait_item_verbatim","","",null,{"i":[{"n":"v"},{"n":"traititemverbatim"}],"o":{"n":"traititemverbatim"}}],[5,"fold_type","","",null,{"i":[{"n":"v"},{"n":"type"}],"o":{"n":"type"}}],[5,"fold_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}],"o":{"n":"typearray"}}],[5,"fold_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}],"o":{"n":"typebarefn"}}],[5,"fold_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}],"o":{"n":"typegroup"}}],[5,"fold_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}],"o":{"n":"typeimpltrait"}}],[5,"fold_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}],"o":{"n":"typeinfer"}}],[5,"fold_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}],"o":{"n":"typemacro"}}],[5,"fold_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}],"o":{"n":"typenever"}}],[5,"fold_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}],"o":{"n":"typeparam"}}],[5,"fold_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}],"o":{"n":"typeparambound"}}],[5,"fold_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}],"o":{"n":"typeparen"}}],[5,"fold_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}],"o":{"n":"typepath"}}],[5,"fold_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}],"o":{"n":"typeptr"}}],[5,"fold_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}],"o":{"n":"typereference"}}],[5,"fold_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}],"o":{"n":"typeslice"}}],[5,"fold_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}],"o":{"n":"typetraitobject"}}],[5,"fold_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}],"o":{"n":"typetuple"}}],[5,"fold_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}],"o":{"n":"typeverbatim"}}],[5,"fold_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}],"o":{"n":"unop"}}],[5,"fold_use_glob","","",null,{"i":[{"n":"v"},{"n":"useglob"}],"o":{"n":"useglob"}}],[5,"fold_use_group","","",null,{"i":[{"n":"v"},{"n":"usegroup"}],"o":{"n":"usegroup"}}],[5,"fold_use_name","","",null,{"i":[{"n":"v"},{"n":"usename"}],"o":{"n":"usename"}}],[5,"fold_use_path","","",null,{"i":[{"n":"v"},{"n":"usepath"}],"o":{"n":"usepath"}}],[5,"fold_use_rename","","",null,{"i":[{"n":"v"},{"n":"userename"}],"o":{"n":"userename"}}],[5,"fold_use_tree","","",null,{"i":[{"n":"v"},{"n":"usetree"}],"o":{"n":"usetree"}}],[5,"fold_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}],"o":{"n":"variant"}}],[5,"fold_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}],"o":{"n":"viscrate"}}],[5,"fold_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}],"o":{"n":"vispublic"}}],[5,"fold_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}],"o":{"n":"visrestricted"}}],[5,"fold_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}],"o":{"n":"visibility"}}],[5,"fold_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}],"o":{"n":"whereclause"}}],[5,"fold_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}],"o":{"n":"wherepredicate"}}],[8,"Fold","","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[11,"fold_abi","","",306,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",306,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",306,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"argcaptured"}}],[11,"fold_arg_self","","",306,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"argself"}}],[11,"fold_arg_self_ref","","",306,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"argselfref"}}],[11,"fold_arm","","",306,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"arm"}}],[11,"fold_attr_style","","",306,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"attrstyle"}}],[11,"fold_attribute","","",306,{"i":[{"n":"self"},{"n":"attribute"}],"o":{"n":"attribute"}}],[11,"fold_bare_fn_arg","","",306,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",306,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"barefnargname"}}],[11,"fold_bin_op","","",306,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"binop"}}],[11,"fold_binding","","",306,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"binding"}}],[11,"fold_block","","",306,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"block"}}],[11,"fold_bound_lifetimes","","",306,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"boundlifetimes"}}],[11,"fold_const_param","","",306,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"constparam"}}],[11,"fold_data","","",306,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"data"}}],[11,"fold_data_enum","","",306,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"dataenum"}}],[11,"fold_data_struct","","",306,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"datastruct"}}],[11,"fold_data_union","","",306,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"dataunion"}}],[11,"fold_derive_input","","",306,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"deriveinput"}}],[11,"fold_expr","","",306,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"expr"}}],[11,"fold_expr_array","","",306,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"exprarray"}}],[11,"fold_expr_assign","","",306,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"exprassign"}}],[11,"fold_expr_assign_op","","",306,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"exprassignop"}}],[11,"fold_expr_binary","","",306,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"exprbinary"}}],[11,"fold_expr_block","","",306,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"exprblock"}}],[11,"fold_expr_box","","",306,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"exprbox"}}],[11,"fold_expr_break","","",306,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"exprbreak"}}],[11,"fold_expr_call","","",306,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"exprcall"}}],[11,"fold_expr_cast","","",306,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"exprcast"}}],[11,"fold_expr_catch","","",306,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"exprcatch"}}],[11,"fold_expr_closure","","",306,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"exprclosure"}}],[11,"fold_expr_continue","","",306,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"exprcontinue"}}],[11,"fold_expr_field","","",306,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"exprfield"}}],[11,"fold_expr_for_loop","","",306,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"exprforloop"}}],[11,"fold_expr_group","","",306,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"exprgroup"}}],[11,"fold_expr_if","","",306,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"exprif"}}],[11,"fold_expr_if_let","","",306,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"expriflet"}}],[11,"fold_expr_in_place","","",306,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"exprinplace"}}],[11,"fold_expr_index","","",306,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"exprindex"}}],[11,"fold_expr_lit","","",306,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"exprlit"}}],[11,"fold_expr_loop","","",306,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"exprloop"}}],[11,"fold_expr_macro","","",306,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"exprmacro"}}],[11,"fold_expr_match","","",306,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"exprmatch"}}],[11,"fold_expr_method_call","","",306,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"exprmethodcall"}}],[11,"fold_expr_paren","","",306,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"exprparen"}}],[11,"fold_expr_path","","",306,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"exprpath"}}],[11,"fold_expr_range","","",306,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"exprrange"}}],[11,"fold_expr_reference","","",306,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"exprreference"}}],[11,"fold_expr_repeat","","",306,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"exprrepeat"}}],[11,"fold_expr_return","","",306,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"exprreturn"}}],[11,"fold_expr_struct","","",306,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"exprstruct"}}],[11,"fold_expr_try","","",306,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"exprtry"}}],[11,"fold_expr_tuple","","",306,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"exprtuple"}}],[11,"fold_expr_type","","",306,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"exprtype"}}],[11,"fold_expr_unary","","",306,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"exprunary"}}],[11,"fold_expr_unsafe","","",306,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"exprunsafe"}}],[11,"fold_expr_verbatim","","",306,{"i":[{"n":"self"},{"n":"exprverbatim"}],"o":{"n":"exprverbatim"}}],[11,"fold_expr_while","","",306,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"exprwhile"}}],[11,"fold_expr_while_let","","",306,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"exprwhilelet"}}],[11,"fold_expr_yield","","",306,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"expryield"}}],[11,"fold_field","","",306,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"field"}}],[11,"fold_field_pat","","",306,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"fieldpat"}}],[11,"fold_field_value","","",306,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"fieldvalue"}}],[11,"fold_fields","","",306,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"fields"}}],[11,"fold_fields_named","","",306,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",306,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"fieldsunnamed"}}],[11,"fold_file","","",306,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"file"}}],[11,"fold_fn_arg","","",306,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"fnarg"}}],[11,"fold_fn_decl","","",306,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"fndecl"}}],[11,"fold_foreign_item","","",306,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"foreignitem"}}],[11,"fold_foreign_item_fn","","",306,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",306,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",306,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"foreignitemverbatim"}],"o":{"n":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",306,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"genericargument"}}],[11,"fold_generic_method_argument","","",306,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"genericmethodargument"}}],[11,"fold_generic_param","","",306,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"genericparam"}}],[11,"fold_generics","","",306,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"generics"}}],[11,"fold_ident","","",306,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ident"}}],[11,"fold_impl_item","","",306,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"implitem"}}],[11,"fold_impl_item_const","","",306,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"implitemconst"}}],[11,"fold_impl_item_macro","","",306,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"implitemmacro"}}],[11,"fold_impl_item_method","","",306,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"implitemmethod"}}],[11,"fold_impl_item_type","","",306,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"implitemverbatim"}],"o":{"n":"implitemverbatim"}}],[11,"fold_index","","",306,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"index"}}],[11,"fold_item","","",306,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"item"}}],[11,"fold_item_const","","",306,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"itemconst"}}],[11,"fold_item_enum","","",306,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"itemenum"}}],[11,"fold_item_extern_crate","","",306,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"itemexterncrate"}}],[11,"fold_item_fn","","",306,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"itemfn"}}],[11,"fold_item_foreign_mod","","",306,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"itemforeignmod"}}],[11,"fold_item_impl","","",306,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"itemimpl"}}],[11,"fold_item_macro","","",306,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"itemmacro"}}],[11,"fold_item_macro2","","",306,{"i":[{"n":"self"},{"n":"itemmacro2"}],"o":{"n":"itemmacro2"}}],[11,"fold_item_mod","","",306,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"itemmod"}}],[11,"fold_item_static","","",306,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"itemstatic"}}],[11,"fold_item_struct","","",306,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"itemstruct"}}],[11,"fold_item_trait","","",306,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"itemtrait"}}],[11,"fold_item_type","","",306,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"itemtype"}}],[11,"fold_item_union","","",306,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"itemunion"}}],[11,"fold_item_use","","",306,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"itemuse"}}],[11,"fold_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"itemverbatim"}],"o":{"n":"itemverbatim"}}],[11,"fold_label","","",306,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"label"}}],[11,"fold_lifetime","","",306,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"lifetime"}}],[11,"fold_lifetime_def","","",306,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"lifetimedef"}}],[11,"fold_lit","","",306,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"lit"}}],[11,"fold_lit_bool","","",306,{"i":[{"n":"self"},{"n":"litbool"}],"o":{"n":"litbool"}}],[11,"fold_lit_byte","","",306,{"i":[{"n":"self"},{"n":"litbyte"}],"o":{"n":"litbyte"}}],[11,"fold_lit_byte_str","","",306,{"i":[{"n":"self"},{"n":"litbytestr"}],"o":{"n":"litbytestr"}}],[11,"fold_lit_char","","",306,{"i":[{"n":"self"},{"n":"litchar"}],"o":{"n":"litchar"}}],[11,"fold_lit_float","","",306,{"i":[{"n":"self"},{"n":"litfloat"}],"o":{"n":"litfloat"}}],[11,"fold_lit_int","","",306,{"i":[{"n":"self"},{"n":"litint"}],"o":{"n":"litint"}}],[11,"fold_lit_str","","",306,{"i":[{"n":"self"},{"n":"litstr"}],"o":{"n":"litstr"}}],[11,"fold_lit_verbatim","","",306,{"i":[{"n":"self"},{"n":"litverbatim"}],"o":{"n":"litverbatim"}}],[11,"fold_local","","",306,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"local"}}],[11,"fold_macro","","",306,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"macro"}}],[11,"fold_macro_delimiter","","",306,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"macrodelimiter"}}],[11,"fold_member","","",306,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"member"}}],[11,"fold_meta","","",306,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"meta"}}],[11,"fold_meta_list","","",306,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"metalist"}}],[11,"fold_meta_name_value","","",306,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"metanamevalue"}}],[11,"fold_method_sig","","",306,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"methodsig"}}],[11,"fold_method_turbofish","","",306,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"methodturbofish"}}],[11,"fold_nested_meta","","",306,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",306,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",306,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"pat"}}],[11,"fold_pat_box","","",306,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"patbox"}}],[11,"fold_pat_ident","","",306,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"patident"}}],[11,"fold_pat_lit","","",306,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"patlit"}}],[11,"fold_pat_macro","","",306,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"patmacro"}}],[11,"fold_pat_path","","",306,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"patpath"}}],[11,"fold_pat_range","","",306,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"patrange"}}],[11,"fold_pat_ref","","",306,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"patref"}}],[11,"fold_pat_slice","","",306,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"patslice"}}],[11,"fold_pat_struct","","",306,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"patstruct"}}],[11,"fold_pat_tuple","","",306,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"pattuple"}}],[11,"fold_pat_tuple_struct","","",306,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",306,{"i":[{"n":"self"},{"n":"patverbatim"}],"o":{"n":"patverbatim"}}],[11,"fold_pat_wild","","",306,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"patwild"}}],[11,"fold_path","","",306,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"path"}}],[11,"fold_path_arguments","","",306,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"patharguments"}}],[11,"fold_path_segment","","",306,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"pathsegment"}}],[11,"fold_predicate_eq","","",306,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"predicateeq"}}],[11,"fold_predicate_lifetime","","",306,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"predicatelifetime"}}],[11,"fold_predicate_type","","",306,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"predicatetype"}}],[11,"fold_qself","","",306,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"qself"}}],[11,"fold_range_limits","","",306,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"rangelimits"}}],[11,"fold_return_type","","",306,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"returntype"}}],[11,"fold_span","","",306,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"fold_stmt","","",306,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"stmt"}}],[11,"fold_trait_bound","","",306,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"traitbound"}}],[11,"fold_trait_bound_modifier","","",306,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"traitboundmodifier"}}],[11,"fold_trait_item","","",306,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"traititem"}}],[11,"fold_trait_item_const","","",306,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"traititemconst"}}],[11,"fold_trait_item_macro","","",306,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"traititemmacro"}}],[11,"fold_trait_item_method","","",306,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"traititemmethod"}}],[11,"fold_trait_item_type","","",306,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"traititemverbatim"}],"o":{"n":"traititemverbatim"}}],[11,"fold_type","","",306,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"type"}}],[11,"fold_type_array","","",306,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"typearray"}}],[11,"fold_type_bare_fn","","",306,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"typebarefn"}}],[11,"fold_type_group","","",306,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"typegroup"}}],[11,"fold_type_impl_trait","","",306,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"typeimpltrait"}}],[11,"fold_type_infer","","",306,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"typeinfer"}}],[11,"fold_type_macro","","",306,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"typemacro"}}],[11,"fold_type_never","","",306,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"typenever"}}],[11,"fold_type_param","","",306,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"typeparam"}}],[11,"fold_type_param_bound","","",306,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"typeparambound"}}],[11,"fold_type_paren","","",306,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"typeparen"}}],[11,"fold_type_path","","",306,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"typepath"}}],[11,"fold_type_ptr","","",306,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"typeptr"}}],[11,"fold_type_reference","","",306,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"typereference"}}],[11,"fold_type_slice","","",306,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"typeslice"}}],[11,"fold_type_trait_object","","",306,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"typetraitobject"}}],[11,"fold_type_tuple","","",306,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"typetuple"}}],[11,"fold_type_verbatim","","",306,{"i":[{"n":"self"},{"n":"typeverbatim"}],"o":{"n":"typeverbatim"}}],[11,"fold_un_op","","",306,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"unop"}}],[11,"fold_use_glob","","",306,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"useglob"}}],[11,"fold_use_group","","",306,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"usegroup"}}],[11,"fold_use_name","","",306,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"usename"}}],[11,"fold_use_path","","",306,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"usepath"}}],[11,"fold_use_rename","","",306,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"userename"}}],[11,"fold_use_tree","","",306,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"usetree"}}],[11,"fold_variant","","",306,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"variant"}}],[11,"fold_vis_crate","","",306,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"viscrate"}}],[11,"fold_vis_public","","",306,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"vispublic"}}],[11,"fold_vis_restricted","","",306,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"visrestricted"}}],[11,"fold_visibility","","",306,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"visibility"}}],[11,"fold_where_clause","","",306,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"whereclause"}}],[11,"fold_where_predicate","","",306,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"wherepredicate"}}],[11,"fmt","syn::synom","",307,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",307,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",307,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",281,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"new_raw","","Same as `Ident::new`, but creates a raw identifier (`r#ident`).",281,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",281,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",281,null],[11,"fmt","","",281,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","","",281,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",281,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",281,null],[11,"fmt","","",281,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",281,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",281,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",281,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"to_tokens","","",281,null],[11,"visit_abi","syn::visit","",305,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",305,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_arg_captured","","",305,{"i":[{"n":"self"},{"n":"argcaptured"}]}],[11,"visit_arg_self","","",305,{"i":[{"n":"self"},{"n":"argself"}]}],[11,"visit_arg_self_ref","","",305,{"i":[{"n":"self"},{"n":"argselfref"}]}],[11,"visit_arm","","",305,{"i":[{"n":"self"},{"n":"arm"}]}],[11,"visit_attr_style","","",305,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",305,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",305,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",305,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",305,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",305,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_block","","",305,{"i":[{"n":"self"},{"n":"block"}]}],[11,"visit_bound_lifetimes","","",305,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",305,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",305,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",305,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",305,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",305,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",305,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",305,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_array","","",305,{"i":[{"n":"self"},{"n":"exprarray"}]}],[11,"visit_expr_assign","","",305,{"i":[{"n":"self"},{"n":"exprassign"}]}],[11,"visit_expr_assign_op","","",305,{"i":[{"n":"self"},{"n":"exprassignop"}]}],[11,"visit_expr_binary","","",305,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_block","","",305,{"i":[{"n":"self"},{"n":"exprblock"}]}],[11,"visit_expr_box","","",305,{"i":[{"n":"self"},{"n":"exprbox"}]}],[11,"visit_expr_break","","",305,{"i":[{"n":"self"},{"n":"exprbreak"}]}],[11,"visit_expr_call","","",305,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",305,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_catch","","",305,{"i":[{"n":"self"},{"n":"exprcatch"}]}],[11,"visit_expr_closure","","",305,{"i":[{"n":"self"},{"n":"exprclosure"}]}],[11,"visit_expr_continue","","",305,{"i":[{"n":"self"},{"n":"exprcontinue"}]}],[11,"visit_expr_field","","",305,{"i":[{"n":"self"},{"n":"exprfield"}]}],[11,"visit_expr_for_loop","","",305,{"i":[{"n":"self"},{"n":"exprforloop"}]}],[11,"visit_expr_group","","",305,{"i":[{"n":"self"},{"n":"exprgroup"}]}],[11,"visit_expr_if","","",305,{"i":[{"n":"self"},{"n":"exprif"}]}],[11,"visit_expr_if_let","","",305,{"i":[{"n":"self"},{"n":"expriflet"}]}],[11,"visit_expr_in_place","","",305,{"i":[{"n":"self"},{"n":"exprinplace"}]}],[11,"visit_expr_index","","",305,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",305,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_loop","","",305,{"i":[{"n":"self"},{"n":"exprloop"}]}],[11,"visit_expr_macro","","",305,{"i":[{"n":"self"},{"n":"exprmacro"}]}],[11,"visit_expr_match","","",305,{"i":[{"n":"self"},{"n":"exprmatch"}]}],[11,"visit_expr_method_call","","",305,{"i":[{"n":"self"},{"n":"exprmethodcall"}]}],[11,"visit_expr_paren","","",305,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",305,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_range","","",305,{"i":[{"n":"self"},{"n":"exprrange"}]}],[11,"visit_expr_reference","","",305,{"i":[{"n":"self"},{"n":"exprreference"}]}],[11,"visit_expr_repeat","","",305,{"i":[{"n":"self"},{"n":"exprrepeat"}]}],[11,"visit_expr_return","","",305,{"i":[{"n":"self"},{"n":"exprreturn"}]}],[11,"visit_expr_struct","","",305,{"i":[{"n":"self"},{"n":"exprstruct"}]}],[11,"visit_expr_try","","",305,{"i":[{"n":"self"},{"n":"exprtry"}]}],[11,"visit_expr_tuple","","",305,{"i":[{"n":"self"},{"n":"exprtuple"}]}],[11,"visit_expr_type","","",305,{"i":[{"n":"self"},{"n":"exprtype"}]}],[11,"visit_expr_unary","","",305,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_unsafe","","",305,{"i":[{"n":"self"},{"n":"exprunsafe"}]}],[11,"visit_expr_verbatim","","",305,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_expr_while","","",305,{"i":[{"n":"self"},{"n":"exprwhile"}]}],[11,"visit_expr_while_let","","",305,{"i":[{"n":"self"},{"n":"exprwhilelet"}]}],[11,"visit_expr_yield","","",305,{"i":[{"n":"self"},{"n":"expryield"}]}],[11,"visit_field","","",305,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_field_pat","","",305,{"i":[{"n":"self"},{"n":"fieldpat"}]}],[11,"visit_field_value","","",305,{"i":[{"n":"self"},{"n":"fieldvalue"}]}],[11,"visit_fields","","",305,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",305,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",305,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_file","","",305,{"i":[{"n":"self"},{"n":"file"}]}],[11,"visit_fn_arg","","",305,{"i":[{"n":"self"},{"n":"fnarg"}]}],[11,"visit_fn_decl","","",305,{"i":[{"n":"self"},{"n":"fndecl"}]}],[11,"visit_foreign_item","","",305,{"i":[{"n":"self"},{"n":"foreignitem"}]}],[11,"visit_foreign_item_fn","","",305,{"i":[{"n":"self"},{"n":"foreignitemfn"}]}],[11,"visit_foreign_item_static","","",305,{"i":[{"n":"self"},{"n":"foreignitemstatic"}]}],[11,"visit_foreign_item_type","","",305,{"i":[{"n":"self"},{"n":"foreignitemtype"}]}],[11,"visit_foreign_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"foreignitemverbatim"}]}],[11,"visit_generic_argument","","",305,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_method_argument","","",305,{"i":[{"n":"self"},{"n":"genericmethodargument"}]}],[11,"visit_generic_param","","",305,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",305,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",305,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_impl_item","","",305,{"i":[{"n":"self"},{"n":"implitem"}]}],[11,"visit_impl_item_const","","",305,{"i":[{"n":"self"},{"n":"implitemconst"}]}],[11,"visit_impl_item_macro","","",305,{"i":[{"n":"self"},{"n":"implitemmacro"}]}],[11,"visit_impl_item_method","","",305,{"i":[{"n":"self"},{"n":"implitemmethod"}]}],[11,"visit_impl_item_type","","",305,{"i":[{"n":"self"},{"n":"implitemtype"}]}],[11,"visit_impl_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"implitemverbatim"}]}],[11,"visit_index","","",305,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_item","","",305,{"i":[{"n":"self"},{"n":"item"}]}],[11,"visit_item_const","","",305,{"i":[{"n":"self"},{"n":"itemconst"}]}],[11,"visit_item_enum","","",305,{"i":[{"n":"self"},{"n":"itemenum"}]}],[11,"visit_item_extern_crate","","",305,{"i":[{"n":"self"},{"n":"itemexterncrate"}]}],[11,"visit_item_fn","","",305,{"i":[{"n":"self"},{"n":"itemfn"}]}],[11,"visit_item_foreign_mod","","",305,{"i":[{"n":"self"},{"n":"itemforeignmod"}]}],[11,"visit_item_impl","","",305,{"i":[{"n":"self"},{"n":"itemimpl"}]}],[11,"visit_item_macro","","",305,{"i":[{"n":"self"},{"n":"itemmacro"}]}],[11,"visit_item_macro2","","",305,{"i":[{"n":"self"},{"n":"itemmacro2"}]}],[11,"visit_item_mod","","",305,{"i":[{"n":"self"},{"n":"itemmod"}]}],[11,"visit_item_static","","",305,{"i":[{"n":"self"},{"n":"itemstatic"}]}],[11,"visit_item_struct","","",305,{"i":[{"n":"self"},{"n":"itemstruct"}]}],[11,"visit_item_trait","","",305,{"i":[{"n":"self"},{"n":"itemtrait"}]}],[11,"visit_item_type","","",305,{"i":[{"n":"self"},{"n":"itemtype"}]}],[11,"visit_item_union","","",305,{"i":[{"n":"self"},{"n":"itemunion"}]}],[11,"visit_item_use","","",305,{"i":[{"n":"self"},{"n":"itemuse"}]}],[11,"visit_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"itemverbatim"}]}],[11,"visit_label","","",305,{"i":[{"n":"self"},{"n":"label"}]}],[11,"visit_lifetime","","",305,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",305,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",305,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",305,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",305,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",305,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",305,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",305,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",305,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",305,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",305,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_local","","",305,{"i":[{"n":"self"},{"n":"local"}]}],[11,"visit_macro","","",305,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",305,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",305,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",305,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",305,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",305,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_method_sig","","",305,{"i":[{"n":"self"},{"n":"methodsig"}]}],[11,"visit_method_turbofish","","",305,{"i":[{"n":"self"},{"n":"methodturbofish"}]}],[11,"visit_nested_meta","","",305,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",305,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_pat","","",305,{"i":[{"n":"self"},{"n":"pat"}]}],[11,"visit_pat_box","","",305,{"i":[{"n":"self"},{"n":"patbox"}]}],[11,"visit_pat_ident","","",305,{"i":[{"n":"self"},{"n":"patident"}]}],[11,"visit_pat_lit","","",305,{"i":[{"n":"self"},{"n":"patlit"}]}],[11,"visit_pat_macro","","",305,{"i":[{"n":"self"},{"n":"patmacro"}]}],[11,"visit_pat_path","","",305,{"i":[{"n":"self"},{"n":"patpath"}]}],[11,"visit_pat_range","","",305,{"i":[{"n":"self"},{"n":"patrange"}]}],[11,"visit_pat_ref","","",305,{"i":[{"n":"self"},{"n":"patref"}]}],[11,"visit_pat_slice","","",305,{"i":[{"n":"self"},{"n":"patslice"}]}],[11,"visit_pat_struct","","",305,{"i":[{"n":"self"},{"n":"patstruct"}]}],[11,"visit_pat_tuple","","",305,{"i":[{"n":"self"},{"n":"pattuple"}]}],[11,"visit_pat_tuple_struct","","",305,{"i":[{"n":"self"},{"n":"pattuplestruct"}]}],[11,"visit_pat_verbatim","","",305,{"i":[{"n":"self"},{"n":"patverbatim"}]}],[11,"visit_pat_wild","","",305,{"i":[{"n":"self"},{"n":"patwild"}]}],[11,"visit_path","","",305,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",305,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",305,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",305,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",305,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",305,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",305,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_range_limits","","",305,{"i":[{"n":"self"},{"n":"rangelimits"}]}],[11,"visit_return_type","","",305,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",305,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_stmt","","",305,{"i":[{"n":"self"},{"n":"stmt"}]}],[11,"visit_trait_bound","","",305,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",305,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_trait_item","","",305,{"i":[{"n":"self"},{"n":"traititem"}]}],[11,"visit_trait_item_const","","",305,{"i":[{"n":"self"},{"n":"traititemconst"}]}],[11,"visit_trait_item_macro","","",305,{"i":[{"n":"self"},{"n":"traititemmacro"}]}],[11,"visit_trait_item_method","","",305,{"i":[{"n":"self"},{"n":"traititemmethod"}]}],[11,"visit_trait_item_type","","",305,{"i":[{"n":"self"},{"n":"traititemtype"}]}],[11,"visit_trait_item_verbatim","","",305,{"i":[{"n":"self"},{"n":"traititemverbatim"}]}],[11,"visit_type","","",305,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",305,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",305,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",305,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",305,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",305,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",305,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",305,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",305,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",305,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",305,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",305,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",305,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",305,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",305,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",305,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",305,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",305,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",305,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_use_glob","","",305,{"i":[{"n":"self"},{"n":"useglob"}]}],[11,"visit_use_group","","",305,{"i":[{"n":"self"},{"n":"usegroup"}]}],[11,"visit_use_name","","",305,{"i":[{"n":"self"},{"n":"usename"}]}],[11,"visit_use_path","","",305,{"i":[{"n":"self"},{"n":"usepath"}]}],[11,"visit_use_rename","","",305,{"i":[{"n":"self"},{"n":"userename"}]}],[11,"visit_use_tree","","",305,{"i":[{"n":"self"},{"n":"usetree"}]}],[11,"visit_variant","","",305,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",305,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",305,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",305,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",305,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",305,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",305,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[11,"fold_abi","syn::fold","",306,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",306,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",306,{"i":[{"n":"self"},{"n":"argcaptured"}],"o":{"n":"argcaptured"}}],[11,"fold_arg_self","","",306,{"i":[{"n":"self"},{"n":"argself"}],"o":{"n":"argself"}}],[11,"fold_arg_self_ref","","",306,{"i":[{"n":"self"},{"n":"argselfref"}],"o":{"n":"argselfref"}}],[11,"fold_arm","","",306,{"i":[{"n":"self"},{"n":"arm"}],"o":{"n":"arm"}}],[11,"fold_attr_style","","",306,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"attrstyle"}}],[11,"fold_attribute","","",306,{"i":[{"n":"self"},{"n":"attribute"}],"o":{"n":"attribute"}}],[11,"fold_bare_fn_arg","","",306,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",306,{"i":[{"n":"self"},{"n":"barefnargname"}],"o":{"n":"barefnargname"}}],[11,"fold_bin_op","","",306,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"binop"}}],[11,"fold_binding","","",306,{"i":[{"n":"self"},{"n":"binding"}],"o":{"n":"binding"}}],[11,"fold_block","","",306,{"i":[{"n":"self"},{"n":"block"}],"o":{"n":"block"}}],[11,"fold_bound_lifetimes","","",306,{"i":[{"n":"self"},{"n":"boundlifetimes"}],"o":{"n":"boundlifetimes"}}],[11,"fold_const_param","","",306,{"i":[{"n":"self"},{"n":"constparam"}],"o":{"n":"constparam"}}],[11,"fold_data","","",306,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"data"}}],[11,"fold_data_enum","","",306,{"i":[{"n":"self"},{"n":"dataenum"}],"o":{"n":"dataenum"}}],[11,"fold_data_struct","","",306,{"i":[{"n":"self"},{"n":"datastruct"}],"o":{"n":"datastruct"}}],[11,"fold_data_union","","",306,{"i":[{"n":"self"},{"n":"dataunion"}],"o":{"n":"dataunion"}}],[11,"fold_derive_input","","",306,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"deriveinput"}}],[11,"fold_expr","","",306,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"expr"}}],[11,"fold_expr_array","","",306,{"i":[{"n":"self"},{"n":"exprarray"}],"o":{"n":"exprarray"}}],[11,"fold_expr_assign","","",306,{"i":[{"n":"self"},{"n":"exprassign"}],"o":{"n":"exprassign"}}],[11,"fold_expr_assign_op","","",306,{"i":[{"n":"self"},{"n":"exprassignop"}],"o":{"n":"exprassignop"}}],[11,"fold_expr_binary","","",306,{"i":[{"n":"self"},{"n":"exprbinary"}],"o":{"n":"exprbinary"}}],[11,"fold_expr_block","","",306,{"i":[{"n":"self"},{"n":"exprblock"}],"o":{"n":"exprblock"}}],[11,"fold_expr_box","","",306,{"i":[{"n":"self"},{"n":"exprbox"}],"o":{"n":"exprbox"}}],[11,"fold_expr_break","","",306,{"i":[{"n":"self"},{"n":"exprbreak"}],"o":{"n":"exprbreak"}}],[11,"fold_expr_call","","",306,{"i":[{"n":"self"},{"n":"exprcall"}],"o":{"n":"exprcall"}}],[11,"fold_expr_cast","","",306,{"i":[{"n":"self"},{"n":"exprcast"}],"o":{"n":"exprcast"}}],[11,"fold_expr_catch","","",306,{"i":[{"n":"self"},{"n":"exprcatch"}],"o":{"n":"exprcatch"}}],[11,"fold_expr_closure","","",306,{"i":[{"n":"self"},{"n":"exprclosure"}],"o":{"n":"exprclosure"}}],[11,"fold_expr_continue","","",306,{"i":[{"n":"self"},{"n":"exprcontinue"}],"o":{"n":"exprcontinue"}}],[11,"fold_expr_field","","",306,{"i":[{"n":"self"},{"n":"exprfield"}],"o":{"n":"exprfield"}}],[11,"fold_expr_for_loop","","",306,{"i":[{"n":"self"},{"n":"exprforloop"}],"o":{"n":"exprforloop"}}],[11,"fold_expr_group","","",306,{"i":[{"n":"self"},{"n":"exprgroup"}],"o":{"n":"exprgroup"}}],[11,"fold_expr_if","","",306,{"i":[{"n":"self"},{"n":"exprif"}],"o":{"n":"exprif"}}],[11,"fold_expr_if_let","","",306,{"i":[{"n":"self"},{"n":"expriflet"}],"o":{"n":"expriflet"}}],[11,"fold_expr_in_place","","",306,{"i":[{"n":"self"},{"n":"exprinplace"}],"o":{"n":"exprinplace"}}],[11,"fold_expr_index","","",306,{"i":[{"n":"self"},{"n":"exprindex"}],"o":{"n":"exprindex"}}],[11,"fold_expr_lit","","",306,{"i":[{"n":"self"},{"n":"exprlit"}],"o":{"n":"exprlit"}}],[11,"fold_expr_loop","","",306,{"i":[{"n":"self"},{"n":"exprloop"}],"o":{"n":"exprloop"}}],[11,"fold_expr_macro","","",306,{"i":[{"n":"self"},{"n":"exprmacro"}],"o":{"n":"exprmacro"}}],[11,"fold_expr_match","","",306,{"i":[{"n":"self"},{"n":"exprmatch"}],"o":{"n":"exprmatch"}}],[11,"fold_expr_method_call","","",306,{"i":[{"n":"self"},{"n":"exprmethodcall"}],"o":{"n":"exprmethodcall"}}],[11,"fold_expr_paren","","",306,{"i":[{"n":"self"},{"n":"exprparen"}],"o":{"n":"exprparen"}}],[11,"fold_expr_path","","",306,{"i":[{"n":"self"},{"n":"exprpath"}],"o":{"n":"exprpath"}}],[11,"fold_expr_range","","",306,{"i":[{"n":"self"},{"n":"exprrange"}],"o":{"n":"exprrange"}}],[11,"fold_expr_reference","","",306,{"i":[{"n":"self"},{"n":"exprreference"}],"o":{"n":"exprreference"}}],[11,"fold_expr_repeat","","",306,{"i":[{"n":"self"},{"n":"exprrepeat"}],"o":{"n":"exprrepeat"}}],[11,"fold_expr_return","","",306,{"i":[{"n":"self"},{"n":"exprreturn"}],"o":{"n":"exprreturn"}}],[11,"fold_expr_struct","","",306,{"i":[{"n":"self"},{"n":"exprstruct"}],"o":{"n":"exprstruct"}}],[11,"fold_expr_try","","",306,{"i":[{"n":"self"},{"n":"exprtry"}],"o":{"n":"exprtry"}}],[11,"fold_expr_tuple","","",306,{"i":[{"n":"self"},{"n":"exprtuple"}],"o":{"n":"exprtuple"}}],[11,"fold_expr_type","","",306,{"i":[{"n":"self"},{"n":"exprtype"}],"o":{"n":"exprtype"}}],[11,"fold_expr_unary","","",306,{"i":[{"n":"self"},{"n":"exprunary"}],"o":{"n":"exprunary"}}],[11,"fold_expr_unsafe","","",306,{"i":[{"n":"self"},{"n":"exprunsafe"}],"o":{"n":"exprunsafe"}}],[11,"fold_expr_verbatim","","",306,{"i":[{"n":"self"},{"n":"exprverbatim"}],"o":{"n":"exprverbatim"}}],[11,"fold_expr_while","","",306,{"i":[{"n":"self"},{"n":"exprwhile"}],"o":{"n":"exprwhile"}}],[11,"fold_expr_while_let","","",306,{"i":[{"n":"self"},{"n":"exprwhilelet"}],"o":{"n":"exprwhilelet"}}],[11,"fold_expr_yield","","",306,{"i":[{"n":"self"},{"n":"expryield"}],"o":{"n":"expryield"}}],[11,"fold_field","","",306,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"field"}}],[11,"fold_field_pat","","",306,{"i":[{"n":"self"},{"n":"fieldpat"}],"o":{"n":"fieldpat"}}],[11,"fold_field_value","","",306,{"i":[{"n":"self"},{"n":"fieldvalue"}],"o":{"n":"fieldvalue"}}],[11,"fold_fields","","",306,{"i":[{"n":"self"},{"n":"fields"}],"o":{"n":"fields"}}],[11,"fold_fields_named","","",306,{"i":[{"n":"self"},{"n":"fieldsnamed"}],"o":{"n":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",306,{"i":[{"n":"self"},{"n":"fieldsunnamed"}],"o":{"n":"fieldsunnamed"}}],[11,"fold_file","","",306,{"i":[{"n":"self"},{"n":"file"}],"o":{"n":"file"}}],[11,"fold_fn_arg","","",306,{"i":[{"n":"self"},{"n":"fnarg"}],"o":{"n":"fnarg"}}],[11,"fold_fn_decl","","",306,{"i":[{"n":"self"},{"n":"fndecl"}],"o":{"n":"fndecl"}}],[11,"fold_foreign_item","","",306,{"i":[{"n":"self"},{"n":"foreignitem"}],"o":{"n":"foreignitem"}}],[11,"fold_foreign_item_fn","","",306,{"i":[{"n":"self"},{"n":"foreignitemfn"}],"o":{"n":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",306,{"i":[{"n":"self"},{"n":"foreignitemstatic"}],"o":{"n":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",306,{"i":[{"n":"self"},{"n":"foreignitemtype"}],"o":{"n":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"foreignitemverbatim"}],"o":{"n":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",306,{"i":[{"n":"self"},{"n":"genericargument"}],"o":{"n":"genericargument"}}],[11,"fold_generic_method_argument","","",306,{"i":[{"n":"self"},{"n":"genericmethodargument"}],"o":{"n":"genericmethodargument"}}],[11,"fold_generic_param","","",306,{"i":[{"n":"self"},{"n":"genericparam"}],"o":{"n":"genericparam"}}],[11,"fold_generics","","",306,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"generics"}}],[11,"fold_ident","","",306,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ident"}}],[11,"fold_impl_item","","",306,{"i":[{"n":"self"},{"n":"implitem"}],"o":{"n":"implitem"}}],[11,"fold_impl_item_const","","",306,{"i":[{"n":"self"},{"n":"implitemconst"}],"o":{"n":"implitemconst"}}],[11,"fold_impl_item_macro","","",306,{"i":[{"n":"self"},{"n":"implitemmacro"}],"o":{"n":"implitemmacro"}}],[11,"fold_impl_item_method","","",306,{"i":[{"n":"self"},{"n":"implitemmethod"}],"o":{"n":"implitemmethod"}}],[11,"fold_impl_item_type","","",306,{"i":[{"n":"self"},{"n":"implitemtype"}],"o":{"n":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"implitemverbatim"}],"o":{"n":"implitemverbatim"}}],[11,"fold_index","","",306,{"i":[{"n":"self"},{"n":"index"}],"o":{"n":"index"}}],[11,"fold_item","","",306,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"item"}}],[11,"fold_item_const","","",306,{"i":[{"n":"self"},{"n":"itemconst"}],"o":{"n":"itemconst"}}],[11,"fold_item_enum","","",306,{"i":[{"n":"self"},{"n":"itemenum"}],"o":{"n":"itemenum"}}],[11,"fold_item_extern_crate","","",306,{"i":[{"n":"self"},{"n":"itemexterncrate"}],"o":{"n":"itemexterncrate"}}],[11,"fold_item_fn","","",306,{"i":[{"n":"self"},{"n":"itemfn"}],"o":{"n":"itemfn"}}],[11,"fold_item_foreign_mod","","",306,{"i":[{"n":"self"},{"n":"itemforeignmod"}],"o":{"n":"itemforeignmod"}}],[11,"fold_item_impl","","",306,{"i":[{"n":"self"},{"n":"itemimpl"}],"o":{"n":"itemimpl"}}],[11,"fold_item_macro","","",306,{"i":[{"n":"self"},{"n":"itemmacro"}],"o":{"n":"itemmacro"}}],[11,"fold_item_macro2","","",306,{"i":[{"n":"self"},{"n":"itemmacro2"}],"o":{"n":"itemmacro2"}}],[11,"fold_item_mod","","",306,{"i":[{"n":"self"},{"n":"itemmod"}],"o":{"n":"itemmod"}}],[11,"fold_item_static","","",306,{"i":[{"n":"self"},{"n":"itemstatic"}],"o":{"n":"itemstatic"}}],[11,"fold_item_struct","","",306,{"i":[{"n":"self"},{"n":"itemstruct"}],"o":{"n":"itemstruct"}}],[11,"fold_item_trait","","",306,{"i":[{"n":"self"},{"n":"itemtrait"}],"o":{"n":"itemtrait"}}],[11,"fold_item_type","","",306,{"i":[{"n":"self"},{"n":"itemtype"}],"o":{"n":"itemtype"}}],[11,"fold_item_union","","",306,{"i":[{"n":"self"},{"n":"itemunion"}],"o":{"n":"itemunion"}}],[11,"fold_item_use","","",306,{"i":[{"n":"self"},{"n":"itemuse"}],"o":{"n":"itemuse"}}],[11,"fold_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"itemverbatim"}],"o":{"n":"itemverbatim"}}],[11,"fold_label","","",306,{"i":[{"n":"self"},{"n":"label"}],"o":{"n":"label"}}],[11,"fold_lifetime","","",306,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"lifetime"}}],[11,"fold_lifetime_def","","",306,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"lifetimedef"}}],[11,"fold_lit","","",306,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"lit"}}],[11,"fold_lit_bool","","",306,{"i":[{"n":"self"},{"n":"litbool"}],"o":{"n":"litbool"}}],[11,"fold_lit_byte","","",306,{"i":[{"n":"self"},{"n":"litbyte"}],"o":{"n":"litbyte"}}],[11,"fold_lit_byte_str","","",306,{"i":[{"n":"self"},{"n":"litbytestr"}],"o":{"n":"litbytestr"}}],[11,"fold_lit_char","","",306,{"i":[{"n":"self"},{"n":"litchar"}],"o":{"n":"litchar"}}],[11,"fold_lit_float","","",306,{"i":[{"n":"self"},{"n":"litfloat"}],"o":{"n":"litfloat"}}],[11,"fold_lit_int","","",306,{"i":[{"n":"self"},{"n":"litint"}],"o":{"n":"litint"}}],[11,"fold_lit_str","","",306,{"i":[{"n":"self"},{"n":"litstr"}],"o":{"n":"litstr"}}],[11,"fold_lit_verbatim","","",306,{"i":[{"n":"self"},{"n":"litverbatim"}],"o":{"n":"litverbatim"}}],[11,"fold_local","","",306,{"i":[{"n":"self"},{"n":"local"}],"o":{"n":"local"}}],[11,"fold_macro","","",306,{"i":[{"n":"self"},{"n":"macro"}],"o":{"n":"macro"}}],[11,"fold_macro_delimiter","","",306,{"i":[{"n":"self"},{"n":"macrodelimiter"}],"o":{"n":"macrodelimiter"}}],[11,"fold_member","","",306,{"i":[{"n":"self"},{"n":"member"}],"o":{"n":"member"}}],[11,"fold_meta","","",306,{"i":[{"n":"self"},{"n":"meta"}],"o":{"n":"meta"}}],[11,"fold_meta_list","","",306,{"i":[{"n":"self"},{"n":"metalist"}],"o":{"n":"metalist"}}],[11,"fold_meta_name_value","","",306,{"i":[{"n":"self"},{"n":"metanamevalue"}],"o":{"n":"metanamevalue"}}],[11,"fold_method_sig","","",306,{"i":[{"n":"self"},{"n":"methodsig"}],"o":{"n":"methodsig"}}],[11,"fold_method_turbofish","","",306,{"i":[{"n":"self"},{"n":"methodturbofish"}],"o":{"n":"methodturbofish"}}],[11,"fold_nested_meta","","",306,{"i":[{"n":"self"},{"n":"nestedmeta"}],"o":{"n":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",306,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",306,{"i":[{"n":"self"},{"n":"pat"}],"o":{"n":"pat"}}],[11,"fold_pat_box","","",306,{"i":[{"n":"self"},{"n":"patbox"}],"o":{"n":"patbox"}}],[11,"fold_pat_ident","","",306,{"i":[{"n":"self"},{"n":"patident"}],"o":{"n":"patident"}}],[11,"fold_pat_lit","","",306,{"i":[{"n":"self"},{"n":"patlit"}],"o":{"n":"patlit"}}],[11,"fold_pat_macro","","",306,{"i":[{"n":"self"},{"n":"patmacro"}],"o":{"n":"patmacro"}}],[11,"fold_pat_path","","",306,{"i":[{"n":"self"},{"n":"patpath"}],"o":{"n":"patpath"}}],[11,"fold_pat_range","","",306,{"i":[{"n":"self"},{"n":"patrange"}],"o":{"n":"patrange"}}],[11,"fold_pat_ref","","",306,{"i":[{"n":"self"},{"n":"patref"}],"o":{"n":"patref"}}],[11,"fold_pat_slice","","",306,{"i":[{"n":"self"},{"n":"patslice"}],"o":{"n":"patslice"}}],[11,"fold_pat_struct","","",306,{"i":[{"n":"self"},{"n":"patstruct"}],"o":{"n":"patstruct"}}],[11,"fold_pat_tuple","","",306,{"i":[{"n":"self"},{"n":"pattuple"}],"o":{"n":"pattuple"}}],[11,"fold_pat_tuple_struct","","",306,{"i":[{"n":"self"},{"n":"pattuplestruct"}],"o":{"n":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",306,{"i":[{"n":"self"},{"n":"patverbatim"}],"o":{"n":"patverbatim"}}],[11,"fold_pat_wild","","",306,{"i":[{"n":"self"},{"n":"patwild"}],"o":{"n":"patwild"}}],[11,"fold_path","","",306,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"path"}}],[11,"fold_path_arguments","","",306,{"i":[{"n":"self"},{"n":"patharguments"}],"o":{"n":"patharguments"}}],[11,"fold_path_segment","","",306,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"pathsegment"}}],[11,"fold_predicate_eq","","",306,{"i":[{"n":"self"},{"n":"predicateeq"}],"o":{"n":"predicateeq"}}],[11,"fold_predicate_lifetime","","",306,{"i":[{"n":"self"},{"n":"predicatelifetime"}],"o":{"n":"predicatelifetime"}}],[11,"fold_predicate_type","","",306,{"i":[{"n":"self"},{"n":"predicatetype"}],"o":{"n":"predicatetype"}}],[11,"fold_qself","","",306,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"qself"}}],[11,"fold_range_limits","","",306,{"i":[{"n":"self"},{"n":"rangelimits"}],"o":{"n":"rangelimits"}}],[11,"fold_return_type","","",306,{"i":[{"n":"self"},{"n":"returntype"}],"o":{"n":"returntype"}}],[11,"fold_span","","",306,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"fold_stmt","","",306,{"i":[{"n":"self"},{"n":"stmt"}],"o":{"n":"stmt"}}],[11,"fold_trait_bound","","",306,{"i":[{"n":"self"},{"n":"traitbound"}],"o":{"n":"traitbound"}}],[11,"fold_trait_bound_modifier","","",306,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"traitboundmodifier"}}],[11,"fold_trait_item","","",306,{"i":[{"n":"self"},{"n":"traititem"}],"o":{"n":"traititem"}}],[11,"fold_trait_item_const","","",306,{"i":[{"n":"self"},{"n":"traititemconst"}],"o":{"n":"traititemconst"}}],[11,"fold_trait_item_macro","","",306,{"i":[{"n":"self"},{"n":"traititemmacro"}],"o":{"n":"traititemmacro"}}],[11,"fold_trait_item_method","","",306,{"i":[{"n":"self"},{"n":"traititemmethod"}],"o":{"n":"traititemmethod"}}],[11,"fold_trait_item_type","","",306,{"i":[{"n":"self"},{"n":"traititemtype"}],"o":{"n":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",306,{"i":[{"n":"self"},{"n":"traititemverbatim"}],"o":{"n":"traititemverbatim"}}],[11,"fold_type","","",306,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"type"}}],[11,"fold_type_array","","",306,{"i":[{"n":"self"},{"n":"typearray"}],"o":{"n":"typearray"}}],[11,"fold_type_bare_fn","","",306,{"i":[{"n":"self"},{"n":"typebarefn"}],"o":{"n":"typebarefn"}}],[11,"fold_type_group","","",306,{"i":[{"n":"self"},{"n":"typegroup"}],"o":{"n":"typegroup"}}],[11,"fold_type_impl_trait","","",306,{"i":[{"n":"self"},{"n":"typeimpltrait"}],"o":{"n":"typeimpltrait"}}],[11,"fold_type_infer","","",306,{"i":[{"n":"self"},{"n":"typeinfer"}],"o":{"n":"typeinfer"}}],[11,"fold_type_macro","","",306,{"i":[{"n":"self"},{"n":"typemacro"}],"o":{"n":"typemacro"}}],[11,"fold_type_never","","",306,{"i":[{"n":"self"},{"n":"typenever"}],"o":{"n":"typenever"}}],[11,"fold_type_param","","",306,{"i":[{"n":"self"},{"n":"typeparam"}],"o":{"n":"typeparam"}}],[11,"fold_type_param_bound","","",306,{"i":[{"n":"self"},{"n":"typeparambound"}],"o":{"n":"typeparambound"}}],[11,"fold_type_paren","","",306,{"i":[{"n":"self"},{"n":"typeparen"}],"o":{"n":"typeparen"}}],[11,"fold_type_path","","",306,{"i":[{"n":"self"},{"n":"typepath"}],"o":{"n":"typepath"}}],[11,"fold_type_ptr","","",306,{"i":[{"n":"self"},{"n":"typeptr"}],"o":{"n":"typeptr"}}],[11,"fold_type_reference","","",306,{"i":[{"n":"self"},{"n":"typereference"}],"o":{"n":"typereference"}}],[11,"fold_type_slice","","",306,{"i":[{"n":"self"},{"n":"typeslice"}],"o":{"n":"typeslice"}}],[11,"fold_type_trait_object","","",306,{"i":[{"n":"self"},{"n":"typetraitobject"}],"o":{"n":"typetraitobject"}}],[11,"fold_type_tuple","","",306,{"i":[{"n":"self"},{"n":"typetuple"}],"o":{"n":"typetuple"}}],[11,"fold_type_verbatim","","",306,{"i":[{"n":"self"},{"n":"typeverbatim"}],"o":{"n":"typeverbatim"}}],[11,"fold_un_op","","",306,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"unop"}}],[11,"fold_use_glob","","",306,{"i":[{"n":"self"},{"n":"useglob"}],"o":{"n":"useglob"}}],[11,"fold_use_group","","",306,{"i":[{"n":"self"},{"n":"usegroup"}],"o":{"n":"usegroup"}}],[11,"fold_use_name","","",306,{"i":[{"n":"self"},{"n":"usename"}],"o":{"n":"usename"}}],[11,"fold_use_path","","",306,{"i":[{"n":"self"},{"n":"usepath"}],"o":{"n":"usepath"}}],[11,"fold_use_rename","","",306,{"i":[{"n":"self"},{"n":"userename"}],"o":{"n":"userename"}}],[11,"fold_use_tree","","",306,{"i":[{"n":"self"},{"n":"usetree"}],"o":{"n":"usetree"}}],[11,"fold_variant","","",306,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"variant"}}],[11,"fold_vis_crate","","",306,{"i":[{"n":"self"},{"n":"viscrate"}],"o":{"n":"viscrate"}}],[11,"fold_vis_public","","",306,{"i":[{"n":"self"},{"n":"vispublic"}],"o":{"n":"vispublic"}}],[11,"fold_vis_restricted","","",306,{"i":[{"n":"self"},{"n":"visrestricted"}],"o":{"n":"visrestricted"}}],[11,"fold_visibility","","",306,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"visibility"}}],[11,"fold_where_clause","","",306,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"whereclause"}}],[11,"fold_where_predicate","","",306,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"wherepredicate"}}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[8,"Fold"],[3,"ParseError"]]};
searchIndex["syntax_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntax_pos","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[3,"Globals","","",null,null],[3,"SpanData","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",2,null],[12,"bytes","","The number of bytes, >=2",2,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",3,null],[12,"name_was_remapped","","True if the `name` field above has been modified by --remap-path-prefix",3,null],[12,"unmapped_path","","The unmapped path of the file that the source came from. Set to `None` if the FileMap was imported from an external crate.",3,null],[12,"crate_of_origin","","Indicates which crate this FileMap was imported from.",3,null],[12,"src","","The complete source code",3,null],[12,"src_hash","","The source code's hash",3,null],[12,"external_src","","The external source code (used for external crates, which will have a `None` value as `self.src`.",3,null],[12,"start_pos","","The start position of this source in the CodeMap",3,null],[12,"end_pos","","The end position of this source in the CodeMap",3,null],[12,"lines","","Locations of lines beginnings in the source code",3,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",3,null],[12,"non_narrow_chars","","Width of characters that are not narrow in the source code",3,null],[12,"name_hash","","A hash of the filename, used for speeding up the incr. comp. hashing.",3,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",4,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",5,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",6,null],[12,"line","","The (1-based) line number",6,null],[12,"col","","The (0-based) column offset",6,null],[12,"col_display","","The (0-based) column offset when displayed",6,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",7,null],[12,"line","","",7,null],[12,"col","","",7,null],[12,"file","","",7,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",8,null],[12,"line","","",8,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",9,null],[12,"pos","","",9,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",10,null],[12,"start_col","","Column in line where span begins, starting from 0.",10,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",10,null],[3,"FileLines","","",null,null],[12,"file","","",11,null],[12,"lines","","",11,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",12,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",12,null],[12,"def_site_span","","span where macro was defined (if known)",12,null],[3,"DistinctSources","","",null,null],[12,"begin","","",13,null],[12,"end","","",13,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",14,null],[12,"source_len","","",14,null],[12,"begin_pos","","",14,null],[12,"end_pos","","",14,null],[4,"FileName","","Differentiates between real files and common virtual files",null,null],[13,"Real","","",15,null],[13,"Macros","","e.g. \"std\" macros",15,null],[13,"QuoteExpansion","","call to `quote!`",15,null],[13,"Anon","","Command line",15,null],[13,"MacroExpansion","","Hack in src/libsyntax/parse.rs FIXME(jseyfried)",15,null],[13,"ProcMacroSourceCode","","",15,null],[13,"CfgSpec","","Strings provided as --cfg [cfgspec] stored in a crate_cfg",15,null],[13,"Custom","","Custom sources for explicit parser calls from plugins and drivers",15,null],[4,"NonNarrowChar","","Identifies an offset of a non-narrow character in a FileMap",null,null],[13,"ZeroWidth","","Represents a zero-width character",16,null],[13,"Wide","","Represents a wide (fullwidth) character",16,null],[13,"Tab","","Represents a tab character, represented visually with a width of 4 characters",16,null],[4,"ExternalSource","","The state of the lazy external source loading mechanism of a FileMap.",null,null],[13,"Present","","The external source has been loaded already.",17,null],[13,"AbsentOk","","No attempt has been made to load the external source.",17,null],[13,"AbsentErr","","A failed attempt has been made to load the external source.",17,null],[13,"Unneeded","","No external source has to be loaded, since the FileMap represents a local crate.",17,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",18,null],[13,"DistinctSources","","",18,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",19,null],[13,"DistinctSources","","",19,null],[13,"MalformedForCodemap","","",19,null],[13,"SourceNotAvailable","","",19,null],[12,"filename","syntax_pos::SpanSnippetError","",19,null],[0,"edition","syntax_pos","",null,null],[4,"Edition","syntax_pos::edition","The edition of the compiler (RFC 2052)",null,null],[13,"Edition2015","","The 2015 edition",20,null],[13,"Edition2018","","The 2018 edition",20,null],[17,"ALL_EDITIONS","","",null,null],[17,"EDITION_NAME_LIST","","",null,null],[17,"DEFAULT_EDITION","","",null,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"edition"}}],[11,"hash","","",20,null],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"edition"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"edition"}],"o":{"n":"ordering"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"edition"}],"o":{"n":"bool"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",20,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",20,{"i":[{"n":"__d"}],"o":{"g":["edition"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"lint_name","","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"feature_name","","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_stable","","",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",20,{"i":[{"n":"str"}],"o":{"n":"result"}}],[0,"hygiene","syntax_pos","Machinery for hygienic macros, inspired by the `MTWT[1]` paper.",null,null],[3,"SyntaxContext","syntax_pos::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",21,null],[12,"prev_ctxt","","",21,null],[12,"modern","","",21,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[3,"HygieneData","","",null,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",22,null],[12,"callee","","Information about the expansion.",22,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",23,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",23,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",23,null],[12,"edition","","Edition of the crate in which the macro is defined.",23,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",23,null],[4,"MarkKind","","",null,null],[13,"Modern","","",24,null],[13,"Builtin","","",24,null],[13,"Legacy","","",24,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",25,null],[13,"MacroBang","","e.g. `format!()`",25,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",25,null],[4,"CompilerDesugaringKind","","The kind of compiler desugaring.",null,null],[13,"DotFill","","",26,null],[13,"QuestionMark","","",26,null],[13,"Catch","","",26,null],[5,"default_edition","","",null,{"o":{"n":"edition"}}],[5,"set_default_edition","","",null,{"i":[{"n":"edition"}]}],[5,"clear_markings","","",null,{}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"syntaxcontext"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"default","","",27,{"o":{"n":"syntaxcontext"}}],[11,"partial_cmp","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"le","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"gt","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"ge","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"bool"}}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"ordering"}}],[11,"hash","","",27,null],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"syntaxcontextdata"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",28,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",28,{"i":[{"n":"__d"}],"o":{"g":["mark"],"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"markkind"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"markkind"}],"o":{"n":"bool"}}],[11,"fresh","","",28,{"i":[{"n":"mark"}],"o":{"n":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",28,{"o":{"n":"self"}}],[11,"as_u32","","",28,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_u32","","",28,{"i":[{"n":"u32"}],"o":{"n":"mark"}}],[11,"expn_info","","",28,{"i":[{"n":"self"}],"o":{"g":["expninfo"],"n":"option"}}],[11,"set_expn_info","","",28,{"i":[{"n":"self"},{"n":"expninfo"}]}],[11,"modern","","",28,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"kind","","",28,{"i":[{"n":"self"}],"o":{"n":"markkind"}}],[11,"set_kind","","",28,{"i":[{"n":"self"},{"n":"markkind"}]}],[11,"is_descendant_of","","",28,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"bool"}}],[11,"least_ancestor","","Computes a mark such that both input marks are descendants of (or equal to) the returned mark. That is, the following holds:",28,{"i":[{"n":"mark"},{"n":"mark"}],"o":{"n":"mark"}}],[11,"new","","",29,{"o":{"n":"self"}}],[11,"empty","","",27,{"o":{"n":"self"}}],[11,"allocate_directly","","",27,{"i":[{"n":"expninfo"}],"o":{"n":"self"}}],[11,"apply_mark","","Extend a syntax context with a given mark",27,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"syntaxcontext"}}],[11,"remove_mark","","Pulls a single mark off of the syntax context. This effectively moves the context up one macro definition level. That is, if we have a nested macro definition as follows:",27,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"marks","","",27,{"i":[{"n":"self"}],"o":{"g":["mark"],"n":"vec"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`:",27,{"i":[{"n":"self"},{"n":"mark"}],"o":{"g":["mark"],"n":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example:",27,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible:",27,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"modern","","",27,{"i":[{"n":"self"}],"o":{"n":"syntaxcontext"}}],[11,"outer","","",27,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"expninfo"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",22,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",22,{"i":[{"n":"__d"}],"o":{"g":["expninfo"],"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"nameandspan"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",23,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",23,{"i":[{"n":"__d"}],"o":{"g":["nameandspan"],"n":"result"}}],[11,"name","","",23,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"expnformat"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"expnformat"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"expnformat"}],"o":{"n":"bool"}}],[11,"encode","","",25,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",25,{"i":[{"n":"__d"}],"o":{"g":["expnformat"],"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"compilerdesugaringkind"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"compilerdesugaringkind"}],"o":{"n":"bool"}}],[11,"encode","","",26,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",26,{"i":[{"n":"__d"}],"o":{"g":["compilerdesugaringkind"],"n":"result"}}],[11,"as_symbol","","",26,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"encode","","",27,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"decode","","",27,{"i":[{"n":"d"}],"o":{"g":["syntaxcontext"],"n":"result"}}],[11,"clone","syntax_pos","",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"hash","","",30,{"i":[{"n":"self"},{"n":"h"}]}],[11,"new","","",30,{"i":[{"n":"bytepos"},{"n":"bytepos"},{"n":"syntaxcontext"}],"o":{"n":"self"}}],[11,"data","","",30,{"i":[{"n":"self"}],"o":{"n":"spandata"}}],[0,"symbol","","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Ident","syntax_pos::symbol","",null,null],[12,"name","","",31,null],[12,"span","","",31,null],[3,"Symbol","","A symbol is an interned or gensymed string.",null,null],[3,"Interner","","",null,null],[3,"LocalInternedString","","Represents a string stored in the interner. Because the interner outlives any thread which uses this type, we can safely treat `string` which points to interner data, as an immortal string, as long as this type never crosses between threads.",null,null],[3,"InternedString","","Represents a string stored in the string interner",null,null],[0,"keywords","","",null,null],[3,"Keyword","syntax_pos::symbol::keywords","",null,null],[17,"Invalid","","",null,null],[17,"CrateRoot","","",null,null],[17,"DollarCrate","","",null,null],[17,"Underscore","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Async","","",null,null],[17,"UnderscoreLifetime","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Auto","","",null,null],[17,"Catch","","",null,null],[17,"Default","","",null,null],[17,"Dyn","","",null,null],[17,"Union","","",null,null],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"keyword"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"keyword"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"keyword"}],"o":{"n":"bool"}}],[11,"ident","","",32,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"name","","",32,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"clone","syntax_pos::symbol","",31,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","",31,{"i":[{"n":"symbol"},{"n":"span"}],"o":{"n":"ident"}}],[11,"with_empty_ctxt","","",31,{"i":[{"n":"symbol"}],"o":{"n":"ident"}}],[11,"from_interned_str","","Maps an interned string to an identifier with an empty syntax context.",31,{"i":[{"n":"internedstring"}],"o":{"n":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",31,{"i":[{"n":"str"}],"o":{"n":"ident"}}],[11,"with_span_pos","","Replace `lo` and `hi` with those from `span`, but keep hygiene context.",31,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"ident"}}],[11,"without_first_quote","","",31,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"modern","","",31,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"gensym","","",31,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"as_str","","",31,{"i":[{"n":"self"}],"o":{"n":"localinternedstring"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",31,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",31,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",31,{"i":[{"n":"d"}],"o":{"g":["ident"],"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"le","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"gt","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"ge","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"cmp","","",33,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"ordering"}}],[11,"hash","","",33,null],[11,"intern","","Maps a string to its interned representation.",33,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"interned","","",33,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"gensym","","gensym's a new usize, using the current interner.",33,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"gensymed","","",33,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"as_str","","",33,{"i":[{"n":"self"}],"o":{"n":"localinternedstring"}}],[11,"as_interned_str","","",33,{"i":[{"n":"self"}],"o":{"n":"internedstring"}}],[11,"as_u32","","",33,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"encode","","",33,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",33,{"i":[{"n":"d"}],"o":{"g":["symbol"],"n":"result"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"new","","",34,{"o":{"n":"self"}}],[11,"intern","","",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"symbol"}}],[11,"interned","","",34,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"symbol"}}],[11,"get","","",34,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"str"}}],[11,"fresh","","",34,{"o":{"n":"self"}}],[11,"is_special","","",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_used_keyword","","Returns `true` if the token is a keyword used in the language.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unused_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_reserved","","Returns `true` if the token is either a special identifier or a keyword.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_path_segment_keyword","","A keyword or reserved identifier that can be used as a path segment.",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_raw_guess","","",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"localinternedstring"}}],[11,"hash","","",35,null],[11,"partial_cmp","","",35,{"i":[{"n":"self"},{"n":"localinternedstring"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",35,{"i":[{"n":"self"},{"n":"localinternedstring"}],"o":{"n":"bool"}}],[11,"le","","",35,{"i":[{"n":"self"},{"n":"localinternedstring"}],"o":{"n":"bool"}}],[11,"gt","","",35,{"i":[{"n":"self"},{"n":"localinternedstring"}],"o":{"n":"bool"}}],[11,"ge","","",35,{"i":[{"n":"self"},{"n":"localinternedstring"}],"o":{"n":"bool"}}],[11,"cmp","","",35,{"i":[{"n":"self"},{"n":"localinternedstring"}],"o":{"n":"ordering"}}],[11,"as_interned_str","","",35,{"i":[{"n":"self"}],"o":{"n":"internedstring"}}],[11,"as_ref","","",35,{"i":[{"n":"self"}],"o":{"n":"u"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"deref","","",35,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"decode","","",35,{"i":[{"n":"d"}],"o":{"g":["localinternedstring"],"n":"result"}}],[11,"encode","","",35,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"internedstring"}}],[11,"with","","",36,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"as_symbol","","",36,{"i":[{"n":"self"}],"o":{"n":"symbol"}}],[11,"as_str","","",36,{"i":[{"n":"self"}],"o":{"n":"localinternedstring"}}],[11,"hash","","",36,{"i":[{"n":"self"},{"n":"h"}]}],[11,"partial_cmp","","",36,{"i":[{"n":"self"},{"n":"internedstring"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",36,{"i":[{"n":"self"},{"n":"internedstring"}],"o":{"n":"ordering"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"internedstring"}],"o":{"n":"bool"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"decode","","",36,{"i":[{"n":"d"}],"o":{"g":["internedstring"],"n":"result"}}],[11,"encode","","",36,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[6,"FileLinesResult","syntax_pos","",null,null],[7,"GLOBALS","","",null,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[17,"NO_EXPANSION","","",null,null],[17,"SPAN_DEBUG","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",37,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[10,"to_usize","","",37,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"new","","",38,{"o":{"n":"globals"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"filename"}}],[11,"cmp","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"le","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"gt","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"ge","","",15,{"i":[{"n":"self"},{"n":"filename"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"decode","","",15,{"i":[{"n":"__d"}],"o":{"g":["filename"],"n":"result"}}],[11,"encode","","",15,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",15,{"i":[{"n":"pathbuf"}],"o":{"n":"self"}}],[11,"is_real","","",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_macros","","",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"spandata"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"spandata"}],"o":{"n":"bool"}}],[11,"with_lo","","",0,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"with_hi","","",0,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"with_ctxt","","",0,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"span"}}],[11,"partial_cmp","","",30,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",30,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"multispan"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"multispan"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"multispan"}],"o":{"n":"bool"}}],[11,"encode","","",39,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",39,{"i":[{"n":"__d"}],"o":{"g":["multispan"],"n":"result"}}],[11,"lo","","",30,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"with_lo","","",30,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"hi","","",30,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"with_hi","","",30,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"span"}}],[11,"ctxt","","",30,{"i":[{"n":"self"}],"o":{"n":"syntaxcontext"}}],[11,"with_ctxt","","",30,{"i":[{"n":"self"},{"n":"syntaxcontext"}],"o":{"n":"span"}}],[11,"shrink_to_lo","","Returns a new span representing an empty span at the beginning of this span",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"shrink_to_hi","","Returns a new span representing an empty span at the end of this span",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"contains","","Return true if `self` fully encloses `other`.",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"g":["span"],"n":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"parent","","The `Span` for the tokens in the previous macro expansion from which `self` was generated, if any",30,{"i":[{"n":"self"}],"o":{"g":["span"],"n":"option"}}],[11,"edition","","Edition of the crate from which this span came.",30,{"i":[{"n":"self"}],"o":{"n":"edition"}}],[11,"source_callee","","Return the source callee.",30,{"i":[{"n":"self"}],"o":{"g":["nameandspan"],"n":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_compiler_desugaring","","Check if this span arises from a compiler desugaring of kind `kind`.",30,{"i":[{"n":"self"},{"n":"compilerdesugaringkind"}],"o":{"n":"bool"}}],[11,"compiler_desugaring_kind","","Return the compiler desugaring that created this span, or None if this span is not from a desugaring.",30,{"i":[{"n":"self"}],"o":{"g":["compilerdesugaringkind"],"n":"option"}}],[11,"allows_unsafe","","Check if a span is \"internal\" to a macro in which `unsafe` can be used without triggering the `unsafe_code` lint",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"macro_backtrace","","",30,{"i":[{"n":"self"}],"o":{"g":["macrobacktrace"],"n":"vec"}}],[11,"to","","Return a `Span` that would enclose both `self` and `end`.",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"between","","Return a `Span` between the end of `self` to the beginning of `end`.",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"until","","Return a `Span` between the beginning of `self` to the beginning of `end`.",30,{"i":[{"n":"self"},{"n":"span"}],"o":{"n":"span"}}],[11,"from_inner_byte_pos","","",30,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"span"}}],[11,"apply_mark","","",30,{"i":[{"n":"self"},{"n":"mark"}],"o":{"n":"span"}}],[11,"remove_mark","","",30,{"i":[{"n":"self"}],"o":{"n":"mark"}}],[11,"adjust","","",30,{"i":[{"n":"self"},{"n":"mark"}],"o":{"g":["mark"],"n":"option"}}],[11,"glob_adjust","","",30,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"reverse_glob_adjust","","",30,{"i":[{"n":"self"},{"n":"mark"},{"n":"syntaxcontext"}],"o":{"g":["option"],"n":"option"}}],[11,"modern","","",30,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"spanlabel"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",30,{"o":{"n":"self"}}],[11,"default_encode","","",30,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"default_decode","","",30,{"i":[{"n":"d"}],"o":{"g":["span"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",39,{"o":{"n":"multispan"}}],[11,"from_span","","",39,{"i":[{"n":"span"}],"o":{"n":"multispan"}}],[11,"from_spans","","",39,{"i":[{"g":["span"],"n":"vec"}],"o":{"n":"multispan"}}],[11,"push_span_label","","",39,{"i":[{"n":"self"},{"n":"span"},{"n":"string"}]}],[11,"primary_span","","Selects the first primary span (if any)",39,{"i":[{"n":"self"}],"o":{"g":["span"],"n":"option"}}],[11,"primary_spans","","Returns all primary spans.",39,null],[11,"replace","","Replaces all occurrences of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",39,{"i":[{"n":"self"},{"n":"span"},{"n":"span"}],"o":{"n":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",39,{"i":[{"n":"self"}],"o":{"g":["spanlabel"],"n":"vec"}}],[11,"from","","",39,{"i":[{"n":"span"}],"o":{"n":"multispan"}}],[11,"from","","",39,{"i":[{"g":["span"],"n":"vec"}],"o":{"n":"multispan"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"multibytechar"}}],[11,"encode","","",2,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",2,{"i":[{"n":"__d"}],"o":{"g":["multibytechar"],"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"multibytechar"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"multibytechar"}],"o":{"n":"bool"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"nonnarrowchar"}}],[11,"encode","","",16,{"i":[{"n":"self"},{"n":"__s"}],"o":{"n":"result"}}],[11,"decode","","",16,{"i":[{"n":"__d"}],"o":{"g":["nonnarrowchar"],"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"nonnarrowchar"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"nonnarrowchar"}],"o":{"n":"bool"}}],[11,"pos","","Returns the absolute offset of the character in the CodeMap",16,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"width","","Returns the width of the character, 0 (zero-width) or 2 (wide)",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"add","","",16,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"self"}}],[11,"sub","","",16,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"self"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"externalsource"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"externalsource"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"externalsource"}}],[11,"is_absent","","",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_source","","",17,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"filemap"}}],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",3,{"i":[{"n":"d"}],"o":{"g":["filemap"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",3,{"i":[{"n":"filename"},{"n":"bool"},{"n":"filename"},{"n":"string"},{"n":"bytepos"}],"o":{"n":"filemap"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",3,{"i":[{"n":"self"},{"n":"bytepos"}]}],[11,"line_begin_pos","","Return the BytePos of the beginning of the current line.",3,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"add_external_src","","Add externally loaded source. If the hash of the input doesn't match or no input is supplied via None, it is interpreted as an error and the corresponding enum variant is set. The return value signifies whether some kind of source is present.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"get_line","","Get a line from the list of pre-computed line-beginnings. The line number here is 0-based.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["cow"],"n":"option"}}],[11,"record_multibyte_char","","",3,{"i":[{"n":"self"},{"n":"bytepos"},{"n":"usize"}]}],[11,"record_width","","",3,{"i":[{"n":"self"},{"n":"bytepos"},{"n":"char"}]}],[11,"is_real_file","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_imported","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"byte_length","","",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"count_lines","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",3,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"g":["usize"],"n":"option"}}],[11,"line_bounds","","",3,null],[11,"contains","","",3,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"bytepos"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"ordering"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"charpos"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"ordering"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_usize","","",4,{"i":[{"n":"usize"}],"o":{"n":"bytepos"}}],[11,"to_usize","","",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bytepos"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"bytepos"}],"o":{"n":"bytepos"}}],[11,"encode","","",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"decode","","",4,{"i":[{"n":"d"}],"o":{"g":["bytepos"],"n":"result"}}],[11,"from_usize","","",5,{"i":[{"n":"usize"}],"o":{"n":"charpos"}}],[11,"to_usize","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"add","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"charpos"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"charpos"}],"o":{"n":"charpos"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"loc"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"lineinfo"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"lineinfo"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"lineinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"spanlineserror"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"spanlineserror"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"spanlineserror"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"spansnippeterror"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"spansnippeterror"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"spansnippeterror"}],"o":{"n":"bool"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"distinctsources"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"distinctsources"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"distinctsources"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"malformedcodemappositions"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"malformedcodemappositions"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"malformedcodemappositions"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_ident","syntax_pos::symbol","",33,{"i":[{"n":"ident"}],"o":{"n":"symbol"}}],[11,"to_ident","","",33,{"i":[{"n":"self"}],"o":{"n":"ident"}}]],"paths":[[3,"SpanData"],[3,"SpanLabel"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"FileName"],[4,"NonNarrowChar"],[4,"ExternalSource"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[4,"Edition"],[3,"SyntaxContextData"],[3,"ExpnInfo"],[3,"NameAndSpan"],[4,"MarkKind"],[4,"ExpnFormat"],[4,"CompilerDesugaringKind"],[3,"SyntaxContext"],[3,"Mark"],[3,"HygieneData"],[3,"Span"],[3,"Ident"],[3,"Keyword"],[3,"Symbol"],[3,"Interner"],[3,"LocalInternedString"],[3,"InternedString"],[8,"Pos"],[3,"Globals"],[3,"MultiSpan"]]};
searchIndex["take_mut"] = {"doc":"This crate provides several functions for handling `&mut T` including `take()`.","items":[[5,"take","take_mut","Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.",null,{"i":[{"n":"t"},{"n":"f"}]}],[5,"take_or_recover","","Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.",null,{"i":[{"n":"t"},{"n":"r"},{"n":"f"}]}],[0,"scoped","","This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure. The references are all required to outlive the closure.",null,null],[3,"Scope","take_mut::scoped","Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.",null,null],[3,"Hole","","A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.",null,null],[5,"scope","","Main function to create a `Scope`.",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[11,"take_or_recover","","Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.",0,null],[11,"take","","Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.",0,null],[11,"fill","","Fills the Hole.",1,{"i":[{"n":"self"},{"n":"t"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}]],"paths":[[3,"Scope"],[3,"Hole"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect which terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"o":{"g":["box"],"n":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"o":{"g":["box"],"n":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not >= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"i":[{"n":"str"}],"o":{"g":["pathbuf"],"n":"option"}}],[0,"parser","term::terminfo","`TermInfo` format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"i":[{"n":"read"},{"n":"bool"}],"o":{"g":["terminfo"],"n":"result"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Number","","",4,null],[13,"Words","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator wanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"param"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"default","","",6,{"o":{"n":"variables"}}],[11,"new","","Return a new zero-initialized Variables",6,{"o":{"n":"variables"}}],[11,"fmt","term::terminfo","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"terminfo"}}],[11,"from_env","","Create a `TermInfo` based on current environment.",2,{"o":{"g":["terminfo"],"n":"result"}}],[11,"from_name","","Create a `TermInfo` for the named terminal.",2,{"i":[{"n":"str"}],"o":{"g":["terminfo"],"n":"result"}}],[11,"from_path","","Parse the given `TermInfo`.",2,{"i":[{"n":"p"}],"o":{"g":["terminfo"],"n":"result"}}],[11,"apply_cap","","Retrieve a capability `cmd` and expand it with `params`, writing result to `out`.",2,null],[11,"reset","","Write the reset string to `out`.",2,{"i":[{"n":"self"},{"n":"write"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",3,{"i":[{"n":"fromutf8error"}],"o":{"n":"self"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"terminfoterminal"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fg","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"result"}}],[11,"bg","","",7,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"result"}}],[11,"attr","","",7,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"result"}}],[11,"supports_attr","","",7,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"reset","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_reset","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"supports_color","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cursor_up","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"delete_line","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"carriage_return","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"get_ref","","",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"i":[{"n":"t"},{"n":"terminfo"}],"o":{"n":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"i":[{"n":"t"}],"o":{"g":["terminfoterminal"],"n":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is supported and was sent to the terminal, or `Err(e)` if there was an error or the attribute wasn't supported.",8,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attr"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["termcolor"] = {"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",null,null],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",null,null],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",null,null],[3,"Buffer","","Write colored text to memory.",null,null],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",null,null],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",null,null],[3,"ColorSpec","","A color specification.",null,null],[3,"ParseColorError","","An error from parsing an invalid color specification.",null,null],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",null,null],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,null],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,null],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,null],[13,"Never","","Never emit colors.",0,null],[4,"Color","","The set of available colors for the terminal foreground/background.",null,null],[13,"Black","","",1,null],[13,"Blue","","",1,null],[13,"Green","","",1,null],[13,"Red","","",1,null],[13,"Cyan","","",1,null],[13,"Magenta","","",1,null],[13,"Yellow","","",1,null],[13,"White","","",1,null],[13,"Ansi256","","",1,null],[13,"Rgb","","",1,null],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",null,null],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"set_color","","Set the color settings of the writer.",2,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[10,"reset","","Reset the current color settings to their original settings.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"colorchoice"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"colorchoice"}],"o":{"n":"bool"}}],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,{"i":[{"n":"colorchoice"}],"o":{"n":"standardstream"}}],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,{"i":[{"n":"colorchoice"}],"o":{"n":"standardstream"}}],[11,"lock","","Lock the underlying writer.",3,{"i":[{"n":"self"}],"o":{"n":"standardstreamlock"}}],[11,"write","","",3,null],[11,"flush","","",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",3,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",4,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,{"i":[{"n":"colorchoice"}],"o":{"n":"bufferwriter"}}],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,{"i":[{"n":"colorchoice"}],"o":{"n":"bufferwriter"}}],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,{"i":[{"n":"self"},{"g":["vec"],"n":"option"}]}],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"print","","Prints the contents of the given buffer.",5,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"n":"result"}}],[11,"no_color","","Create a buffer that drops all color information.",6,{"o":{"n":"buffer"}}],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,{"o":{"n":"buffer"}}],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the length of this buffer in bytes.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clear","","Clears this buffer.",6,{"i":[{"n":"self"}]}],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"as_slice","","Return the underlying data of the buffer.",6,null],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",6,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,{"i":[{"n":"w"}],"o":{"n":"nocolor"}}],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",7,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",7,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",7,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,{"i":[{"n":"w"}],"o":{"n":"ansi"}}],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",8,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",8,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"write","","",8,null],[11,"flush","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",8,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"colorspec"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",9,{"o":{"n":"colorspec"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"bool"}}],[11,"new","","Create a new color specification that has no colors or styles.",9,{"o":{"n":"colorspec"}}],[11,"fg","","Get the foreground color.",9,{"i":[{"n":"self"}],"o":{"g":["color"],"n":"option"}}],[11,"set_fg","","Set the foreground color.",9,{"i":[{"n":"self"},{"g":["color"],"n":"option"}],"o":{"n":"colorspec"}}],[11,"bg","","Get the background color.",9,{"i":[{"n":"self"}],"o":{"g":["color"],"n":"option"}}],[11,"set_bg","","Set the background color.",9,{"i":[{"n":"self"},{"g":["color"],"n":"option"}],"o":{"n":"colorspec"}}],[11,"bold","","Get whether this is bold or not.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_bold","","Set whether the text is bolded or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"colorspec"}}],[11,"underline","","Get whether this is underline or not.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_underline","","Set whether the text is underlined or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"colorspec"}}],[11,"intense","","Get whether this is intense or not.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_intense","","Set whether the text is intense or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"colorspec"}}],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,{"i":[{"n":"self"}]}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"parsecolorerror"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"parsecolorerror"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"parsecolorerror"}],"o":{"n":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["color","parsecolorerror"],"n":"result"}}]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"i":[{"n":"str"},{"n":"usize"}],"o":{"n":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"i":[{"n":"str"},{"n":"usize"}],"o":{"g":["cow"],"n":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"i":[{"n":"str"},{"n":"usize"}],"o":{"g":["hyphensplitter"],"n":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"vec"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"nohyphenation"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"split","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"vec"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"hyphensplitter"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"split","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"vec"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"wrapper"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"i":[{"n":"usize"}],"o":{"g":["hyphensplitter"],"n":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"i":[{"n":"usize"},{"n":"s"}],"o":{"n":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["cow"],"n":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"intowrapiter"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"o":{"n":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"o":{"n":"threadlocal"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"o":{"n":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"i":[{"n":"self"}]}],[11,"into_iter","","",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"o":{"n":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"o":{"n":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"i":[{"n":"self"}],"o":{"n":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"i":[{"n":"self"}]}],[11,"into_iter","","",3,{"i":[{"n":"self"}],"o":{"n":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["tm","parseerror"],"n":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"o":{"n":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"o":{"n":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"o":{"n":"f64"}}],[5,"tzset","","",null,{}],[5,"empty_tm","","",null,{"o":{"n":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"o":{"n":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"o":{"n":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"i":[{"n":"str"},{"n":"tm"}],"o":{"g":["string","parseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"i":[{"n":"stdduration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"i":[{"n":"self"}],"o":{"g":["stdduration","outofrangeerror"],"n":"result"}}],[11,"neg","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"outofrangeerror"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"ordering"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"i":[{"n":"i64"},{"n":"i32"}],"o":{"n":"timespec"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"duration"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"o":{"n":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"i":[{"n":"self"},{"n":"precisetime"}],"o":{"n":"duration"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"steadytime"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"ordering"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"o":{"n":"steadytime"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"duration"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"duration"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["tmfmt","parseerror"],"n":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"i":[{"n":"self"}]}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utf8sequence"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"utf8sequence"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"utf8sequence"}],"o":{"n":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"utf8range"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"utf8range"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"utf8range"}],"o":{"n":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"i":[{"n":"char"},{"n":"char"}],"o":{"n":"self"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"void"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
