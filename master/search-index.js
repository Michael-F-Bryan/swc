var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[12,"aut","","",1,null],[12,"text","","",1,null],[12,"texti","","",1,null],[12,"si","","",1,null],[12,"_m","","",1,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[12,"aut","","",2,null],[12,"text","","",2,null],[12,"texti","","",2,null],[12,"si","","",2,null],[12,"outi","","",2,null],[12,"_m","","",2,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[12,"aut","","",3,null],[12,"buf","","",3,null],[12,"texti","","",3,null],[12,"si","","",3,null],[12,"_m","","",3,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[12,"aut","","",4,null],[12,"buf","","",4,null],[12,"texti","","",4,null],[12,"si","","",4,null],[12,"outi","","",4,null],[12,"_m","","",4,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[12,"pats","","",5,null],[12,"trans","","",5,null],[12,"out","","",5,null],[12,"start_bytes","","",5,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[12,"pats","","",6,null],[12,"states","","",6,null],[12,"start_bytes","","",6,null],[3,"State","","",null,null],[12,"out","","",7,null],[12,"fail","","",7,null],[12,"goto","","",7,null],[12,"depth","","",7,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[12,"0","","",8,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[12,"0","","",9,null],[4,"DenseChoice","","",null,null],[13,"Sparse","","",10,null],[13,"Dense","","",10,null],[5,"vec_bytes","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"usize_bytes","","",null,{"inputs":[],"output":{"name":"usize"}}],[0,"autiter","","",null,null],[3,"Match","aho_corasick::autiter","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[12,"aut","","",1,null],[12,"text","","",1,null],[12,"texti","","",1,null],[12,"si","","",1,null],[12,"_m","","",1,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[12,"aut","","",3,null],[12,"buf","","",3,null],[12,"texti","","",3,null],[12,"si","","",3,null],[12,"_m","","",3,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[12,"aut","","",2,null],[12,"text","","",2,null],[12,"texti","","",2,null],[12,"si","","",2,null],[12,"outi","","",2,null],[12,"_m","","",2,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[12,"aut","","",4,null],[12,"buf","","",4,null],[12,"texti","","",4,null],[12,"si","","",4,null],[12,"outi","","",4,null],[12,"_m","","",4,null],[5,"step_to_match","","",null,null],[5,"skip_to_match","","",null,null],[5,"skip1","","",null,null],[5,"skip2","","",null,null],[5,"skip3","","",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",11,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",11,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",11,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",11,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",11,null],[10,"pattern","","Returns the pattern indexed at `i`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[11,"clone","aho_corasick","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"full","","",null,null],[3,"FullAcAutomaton","aho_corasick::full","A complete Aho-Corasick automaton.",null,null],[12,"pats","","",5,null],[12,"trans","","",5,null],[12,"out","","",5,null],[12,"start_bytes","","",5,null],[11,"clone","aho_corasick","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"memory_usage","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_bytes","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"num_states","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"build_matrix","","",5,{"inputs":[{"name":"self"},{"name":"acautomaton"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[17,"FAIL_STATE","","",null,null],[17,"ROOT_STATE","","",null,null],[17,"DENSE_DEPTH_THRESHOLD","","",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",11,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",11,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",11,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",11,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",11,null],[10,"pattern","","Returns the pattern indexed at `i`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","aho_corasick::autiter","Return the number of patterns in the automaton.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",11,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","aho_corasick","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",12,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",12,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Create a new automaton from an iterator of patterns.",6,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",6,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",6,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"num_states","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"heap_bytes","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_state","","",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",6,null],[11,"patterns","","",6,null],[11,"pattern","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"build","","",6,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"acautomaton"}}],[11,"fill","","",6,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"add_state","","",6,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"stateidx"}}],[11,"new","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"state"}}],[11,"goto","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"densechoice"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",8,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",6,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"debug","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"string"}}],[11,"goto_string","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"string"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dot","","",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"MatchesOverlapping"],[3,"StreamMatches"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[3,"AcAutomaton"],[3,"State"],[3,"Dense"],[3,"Sparse"],[4,"DenseChoice"],[8,"Automaton"],[8,"Transitions"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[12,"0","","",0,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[12,"0","","",2,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",3,null],[12,"background","","The style's background colour, if it has one.",3,null],[12,"is_bold","","Whether this style is bold.",3,null],[12,"is_dimmed","","Whether this style is dimmed.",3,null],[12,"is_italic","","Whether this style is italic.",3,null],[12,"is_underline","","Whether this style is underlined.",3,null],[12,"is_blink","","Whether this style is blinking.",3,null],[12,"is_reverse","","Whether this style has reverse colours.",3,null],[12,"is_hidden","","Whether this style is hidden.",3,null],[12,"is_strikethrough","","Whether this style is struckthrough.",3,null],[3,"ANSIGenericString","","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[12,"style","","",4,null],[12,"string","","",4,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",5,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",6,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",6,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",6,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",6,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",6,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",6,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",6,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",6,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",6,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",6,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",6,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",6,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",6,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",6,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",6,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",6,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",6,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",6,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",6,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",6,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[0,"ansi","","",null,null],[3,"Prefix","ansi_term::ansi","Like `ANSIString`, but only displays the style prefix.",null,null],[12,"0","","",0,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[12,"0","","",2,null],[7,"RESET","","The code to send to reset all styles and return to `Style::default()`.",null,null],[11,"write_prefix","ansi_term","Write any ANSI codes that go before a piece of text. These should be the codes to set the terminal to a different colour or font style.",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_suffix","","Write any ANSI codes that go after a piece of text. These should be the codes to reset the terminal back to its normal colour and style.",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_foreground_code","","",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_background_code","","",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prefix","","The prefix for this style.",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this style and another.",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this style.",3,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"prefix","","The prefix for this colour.",6,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this colour and another.",6,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this colour.",6,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"style","","",null,null],[3,"Style","ansi_term::style","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",3,null],[12,"background","","The style's background colour, if it has one.",3,null],[12,"is_bold","","Whether this style is bold.",3,null],[12,"is_dimmed","","Whether this style is dimmed.",3,null],[12,"is_italic","","Whether this style is italic.",3,null],[12,"is_underline","","Whether this style is underlined.",3,null],[12,"is_blink","","Whether this style is blinking.",3,null],[12,"is_reverse","","Whether this style has reverse colours.",3,null],[12,"is_hidden","","Whether this style is hidden.",3,null],[12,"is_strikethrough","","Whether this style is struckthrough.",3,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",6,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",6,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",6,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",6,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",6,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",6,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",6,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",6,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",6,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",6,null],[11,"eq","ansi_term","",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Creates a new Style with no differences.",3,{"inputs":[],"output":{"name":"style"}}],[11,"bold","","Returns a Style with the bold property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",3,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",3,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",3,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"bold","","Returns a Style with the bold property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",6,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",6,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",3,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[0,"difference","","",null,null],[4,"Difference","ansi_term::difference","When printing out one coloured string followed by another, use one of these rules to figure out which extra control codes need to be sent.",null,null],[13,"ExtraStyles","","Print out the control codes specified by this style to end up looking like the second string's styles.",7,null],[13,"Reset","","Converting between these two is impossible, so just send a reset command and then the second string's styles.",7,null],[13,"NoDifference","","The before style is exactly the same as the after style, so no further control codes need to be printed.",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"difference"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"difference"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"between","","Compute the 'style difference' required to turn an existing style into the given, second style.",7,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"difference"}}],[0,"display","ansi_term","",null,null],[3,"ANSIGenericString","ansi_term::display","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[12,"style","","",4,null],[12,"string","","",4,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",5,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"eq","ansi_term","",4,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"from","","",4,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"fmt","ansi_term::display","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",9,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_to_any","ansi_term","",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","ansi_term::display","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",11,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_to_any","ansi_term","",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"write","","",null,null],[8,"AnyWrite","ansi_term::write","",null,null],[16,"wstr","","",12,null],[16,"Error","","",12,null],[10,"write_fmt","","",12,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[10,"write_str","","",12,null],[0,"windows","ansi_term","",null,null],[0,"debug","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null]],"paths":[[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"Style"],[3,"ANSIGenericString"],[3,"ANSIGenericStrings"],[4,"Colour"],[4,"Difference"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"],[8,"AnyWrite"]]};
searchIndex["ast_node"] = {"doc":"","items":[[5,"derive","ast_node","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"ast_node","","Alias for `#[derive(Clone, Debug, PartialEq, AstNode)]`",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"fold","","",null,null],[5,"derive_fold","ast_node::fold","",null,{"inputs":[{"name":"deriveinput"}],"output":{"name":"itemimpl"}}],[5,"should_skip_field","","",null,{"inputs":[{"name":"field"}],"output":{"name":"bool"}}],[5,"normalize_type_for_bound","","",null,{"inputs":[{"name":"type"}],"output":{"name":"type"}}]],"paths":[]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["base64"] = {"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[12,"char_set","","Character set to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"strip_whitespace","","Remove whitespace before decoding, at the cost of an allocation. Whitespace is defined according to POSIX-locale `isspace`, meaning \\n \\r \\f \\t \\v and space.",0,null],[12,"line_wrap","","ADT signifying whether to linewrap output, and if so by how many characters and with what ending",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"LineEnding","","Line ending used in optional line wrapping.",null,null],[13,"LF","","Unix-style \\n",2,null],[13,"CRLF","","Windows-style \\r\\n",2,null],[4,"LineWrap","","Line wrap configuration.",null,null],[13,"NoWrap","","Don't wrap.",3,null],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,null],[4,"DecodeError","","Errors that can occur while decoding.",null,null],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",4,null],[13,"InvalidLength","","The length of the input is invalid.",4,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",null,null],[5,"encode_with_padding_line_wrap","","B64-encode, pad, and line wrap (if configured).",null,null],[5,"encode_to_slice","","Encode input bytes to utf8 base64 bytes. Does not pad or line wrap. `output` must be long enough to hold the encoded `input` without padding or line wrapping. Returns the number of bytes written.",null,null],[5,"encoded_size","","calculate the base64 encoded string size, including padding and line wraps if appropriate",null,{"inputs":[{"name":"usize"},{"name":"config"}],"output":{"generics":["usize"],"name":"option"}}],[5,"add_padding","","Write padding characters. `output` is the slice where padding should be written, of length at least 2.",null,null],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"generics":["decodeerror"],"name":"result"}}],[5,"decode_chunk","","",null,null],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",null,null],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",null,null],[12,"bytes","","",5,null],[12,"chunked_encoder","","",5,null],[3,"FormatterSink","","",null,null],[12,"f","","",6,null],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",null,null],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"displayerror"}],"output":{"name":"bool"}}],[11,"with_config","","Create a `Base64Display` with the provided config.",5,null],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,null],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_encoded_bytes","","",6,null],[0,"tables","base64","",null,null],[17,"INVALID_VALUE","base64::tables","",null,null],[17,"STANDARD_ENCODE","","",null,null],[17,"STANDARD_DECODE","","",null,null],[17,"URL_SAFE_ENCODE","","",null,null],[17,"URL_SAFE_DECODE","","",null,null],[0,"chunked_encoder","base64","",null,null],[3,"ChunkedEncoder","base64::chunked_encoder","A base64 encoder that emits encoded bytes in chunks without heap allocation.",null,null],[12,"config","","",8,null],[12,"max_input_chunk_len","","",8,null],[4,"ChunkedEncoderError","","",null,null],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (see BUF_SIZE).",9,null],[5,"max_input_length","","Calculate the longest input that can be encoded for the given output buffer size.",null,{"inputs":[{"name":"usize"},{"name":"config"}],"output":{"generics":["usize","chunkedencodererror"],"name":"result"}}],[17,"BUF_SIZE","","",null,null],[8,"Sink","","The output mechanism for ChunkedEncoder's encoded bytes.",null,null],[16,"Error","","",10,null],[10,"write_encoded_bytes","","Handle a chunk of encoded base64 data (as UTF-8 bytes)",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"chunkedencodererror"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"config"}],"output":{"generics":["chunkedencoder","chunkedencodererror"],"name":"result"}}],[11,"encode","","",8,null],[0,"line_wrap","base64","",null,null],[3,"LineWrapParameters","base64::line_wrap","",null,null],[12,"lines_with_endings","","",11,null],[12,"last_line_len","","",11,null],[12,"total_full_wrapped_lines_len","","",11,null],[12,"total_len","","",11,null],[12,"total_line_endings_len","","",11,null],[5,"line_wrap_parameters","","Calculations about how many lines we'll get for a given line length, line ending, etc. This assumes that the last line will not get an ending, even if it is the full line length.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"lineending"}],"output":{"name":"linewrapparameters"}}],[5,"line_wrap","","Insert line endings into the encoded base64 after each complete line (except the last line, even if it is complete). The provided buffer must be large enough to handle the increased size after endings are inserted. `input_len` is the length of the encoded data in `encoded_buf`. `line_len` is the width without line ending characters. Returns the number of line ending bytes added.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"linewrapparameters"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"linewrapparameters"}],"output":{"name":"bool"}}],[17,"STANDARD","base64","Standard character set with padding.",null,null],[17,"STANDARD_NO_PAD","","Standard character set without padding.",null,null],[17,"MIME","","As per standards for MIME encoded messages",null,null],[17,"URL_SAFE","","URL-safe character set with padding",null,null],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode_table","","",1,null],[11,"decode_table","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Config`.",0,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DecodeError"],[3,"Base64Display"],[3,"FormatterSink"],[4,"DisplayError"],[3,"ChunkedEncoder"],[4,"ChunkedEncoderError"],[8,"Sink"],[3,"LineWrapParameters"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[12,"bits","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null],[14,"__bitflags","","",null,null],[14,"__impl_bitflags","","",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[5,"extend_sign","","",null,{"inputs":[{"name":"u64"},{"name":"usize"}],"output":{"name":"i64"}}],[5,"unextend_sign","","",null,{"inputs":[{"name":"i64"},{"name":"usize"}],"output":{"name":"u64"}}],[5,"pack_size","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"usize"}}],[0,"io","","",null,null],[5,"slice_to_u8_mut","byteorder::io","Convert a slice of T (where T is plain old data) to its mutable binary representation.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[0,"private","byteorder","",null,null],[8,"Sealed","byteorder::private","Sealed stops crates other than byteorder from implementing any traits that use it.",null,null],[6,"BE","byteorder","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","byteorder::io","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","byteorder","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","byteorder::io","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","byteorder","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null],[14,"__cfg_if_items","","",null,null],[14,"__cfg_if_apply","","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[12,"secs","","",0,null],[12,"nanos","","",0,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[12,"date","","",1,null],[12,"offset","","",1,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[12,"datetime","","",2,null],[12,"offset","","",2,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[12,"_dummy","","",3,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",4,null],[13,"Tue","","Tuesday.",4,null],[13,"Wed","","Wednesday.",4,null],[13,"Thu","","Thursday.",4,null],[13,"Fri","","Friday.",4,null],[13,"Sat","","Saturday.",4,null],[13,"Sun","","Sunday.",4,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"div","","Integer division utilities. (Shamelessly copied from num)",null,null],[5,"div_rem","chrono::div","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[12,"local_minus_utc","","",5,null],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",null,null],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",6,null],[13,"Single","","Given local time representation has a single unique result.",6,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",6,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"Utc","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","chrono::offset","",7,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"today","","Returns a `Date` which corresponds to the current date.",7,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",7,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from_offset","","",7,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",7,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",7,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[12,"local_minus_utc","","",5,null],[5,"add_with_leapsecond","","",null,{"inputs":[{"name":"t"},{"name":"i32"}],"output":{"name":"t"}}],[11,"clone","chrono::offset","",5,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",5,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",5,{"inputs":[{"name":"i32"}],"output":{"generics":["fixedoffset"],"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",5,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",5,{"inputs":[{"name":"i32"}],"output":{"generics":["fixedoffset"],"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",5,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",5,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",5,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_utc_date","","",5,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",5,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","chrono","",2,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[5,"tm_to_datetime","","Converts a `time::Tm` struct into the timezone-aware `DateTime`. This assumes that `time` is working correctly, i.e. any error is fatal.",null,{"inputs":[{"name":"tm"}],"output":{"generics":["local"],"name":"datetime"}}],[5,"datetime_to_timespec","","Converts a local `NaiveDateTime` to the `time::Timespec`.",null,{"inputs":[{"name":"naivedatetime"},{"name":"bool"}],"output":{"name":"timespec"}}],[11,"clone","chrono::offset","",8,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",8,{"inputs":[],"output":{"generics":["local"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",8,{"inputs":[],"output":{"generics":["local"],"name":"datetime"}}],[11,"from_offset","","",8,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_utc_date","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"from_local_datetime","","",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"from_utc_date","","",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["local"],"name":"date"}}],[11,"from_utc_datetime","","",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["local"],"name":"datetime"}}],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",10,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",10,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",10,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",10,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",10,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",10,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",10,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",10,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",10,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",10,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",10,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",10,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",6,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[12,"ymdf","","",11,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[12,"ywf","","",12,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[12,"secs","","",13,null],[12,"frac","","",13,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[12,"date","","",14,null],[12,"time","","",14,null],[3,"TsSeconds","","A DateTime that can be deserialized from a seconds-based timestamp",null,null],[12,"0","","",15,null],[0,"internals","","The internal implementation of the calendar and ordinal date.",null,null],[3,"YearFlags","chrono::naive::internals","The year flags (aka the dominical letter).",null,null],[12,"0","","",16,null],[3,"Of","","Ordinal (day of year) and year flags: `(ordinal << 4) | flags`.",null,null],[12,"0","","",17,null],[3,"Mdf","","Month, day of month and year flags: `(month << 9) | (day << 4) | flags`",null,null],[12,"0","","",18,null],[5,"cycle_to_yo","","",null,null],[5,"yo_to_cycle","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[6,"DateImpl","","The internal date representation. This also includes the packed `Mdf` value.",null,null],[7,"YEAR_TO_FLAGS","","",null,null],[7,"YEAR_DELTAS","","",null,null],[7,"MDL_TO_OL","","",null,null],[7,"OL_TO_MDL","","",null,null],[17,"MAX_YEAR","","",null,null],[17,"MIN_YEAR","","",null,null],[17,"A","","",null,null],[17,"AG","","",null,null],[17,"B","","",null,null],[17,"BA","","",null,null],[17,"C","","",null,null],[17,"CB","","",null,null],[17,"D","","",null,null],[17,"DC","","",null,null],[17,"E","","",null,null],[17,"ED","","",null,null],[17,"F","","",null,null],[17,"FE","","",null,null],[17,"G","","",null,null],[17,"GF","","",null,null],[17,"MIN_OL","","",null,null],[17,"MAX_OL","","",null,null],[17,"MIN_MDL","","",null,null],[17,"MAX_MDL","","",null,null],[17,"XX","","",null,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"yearflags"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"yearflags"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"yearflags"}}],[11,"from_year","","",16,{"inputs":[{"name":"i32"}],"output":{"name":"yearflags"}}],[11,"from_year_mod_400","","",16,{"inputs":[{"name":"i32"}],"output":{"name":"yearflags"}}],[11,"ndays","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"isoweek_delta","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nisoweeks","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"of"}}],[11,"clamp_ordinal","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"new","","",17,{"inputs":[{"name":"u32"},{"name":"yearflags"}],"output":{"name":"of"}}],[11,"from_mdf","","",17,{"inputs":[{"name":"mdf"}],"output":{"name":"of"}}],[11,"valid","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ordinal","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_ordinal","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"of"}}],[11,"flags","","",17,{"inputs":[{"name":"self"}],"output":{"name":"yearflags"}}],[11,"with_flags","","",17,{"inputs":[{"name":"self"},{"name":"yearflags"}],"output":{"name":"of"}}],[11,"weekday","","",17,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate_raw","","",17,null],[11,"to_mdf","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mdf"}}],[11,"succ","","",17,{"inputs":[{"name":"self"}],"output":{"name":"of"}}],[11,"pred","","",17,{"inputs":[{"name":"self"}],"output":{"name":"of"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mdf"}}],[11,"clamp_month","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"clamp_day","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"new","","",18,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"yearflags"}],"output":{"name":"mdf"}}],[11,"from_of","","",18,{"inputs":[{"name":"of"}],"output":{"name":"mdf"}}],[11,"valid","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"month","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_month","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"mdf"}}],[11,"day","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_day","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"mdf"}}],[11,"flags","","",18,{"inputs":[{"name":"self"}],"output":{"name":"yearflags"}}],[11,"with_flags","","",18,{"inputs":[{"name":"self"},{"name":"yearflags"}],"output":{"name":"mdf"}}],[11,"to_of","","",18,{"inputs":[{"name":"self"}],"output":{"name":"of"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[12,"ymdf","","",11,null],[17,"MAX_YEAR","","",null,null],[17,"MIN_YEAR","","",null,null],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","chrono::naive","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_of","","Makes a new `NaiveDate` from year and packed ordinal-flags, with a verification.",11,{"inputs":[{"name":"i32"},{"name":"of"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_mdf","","Makes a new `NaiveDate` from year and packed month-day-flags, with a verification.",11,{"inputs":[{"name":"i32"},{"name":"mdf"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",11,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",11,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",11,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",11,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",11,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",11,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",11,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",11,{"inputs":[{"name":"i32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"mdf","","Returns the packed month-day-flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"mdf"}}],[11,"of","","Returns the packed ordinal-flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"of"}}],[11,"with_mdf","","Makes a new `NaiveDate` with the packed month-day-flags changed.",11,{"inputs":[{"name":"self"},{"name":"mdf"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_of","","Makes a new `NaiveDate` with the packed ordinal-flags changed.",11,{"inputs":[{"name":"self"},{"name":"of"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",11,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",11,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",11,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",11,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[0,"isoweek","","ISO 8601 week.",null,null],[3,"IsoWeek","chrono::naive::isoweek","ISO 8601 week.",null,null],[12,"ywf","","",12,null],[5,"iso_week_from_yof","","Returns the corresponding `IsoWeek` from the year and the `Of` internal value.",null,{"inputs":[{"name":"i32"},{"name":"of"}],"output":{"name":"isoweek"}}],[11,"eq","chrono::naive","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"year","","Returns the year number for this ISO week.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"week","","Returns the ISO week number starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"week0","","Returns the ISO week number starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"time","","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[12,"secs","","",13,null],[12,"frac","","",13,null],[11,"eq","chrono::naive","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",13,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",13,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",13,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",13,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"hms","","Returns a triple of the hour, minute and second numbers.",13,null],[11,"hour","","Returns the hour number from 0 to 23.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"add_assign","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub_assign","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[0,"datetime","","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[12,"date","","",14,null],[12,"time","","",14,null],[3,"TsSeconds","","A DateTime that can be deserialized from a seconds-based timestamp",null,null],[12,"0","","",15,null],[17,"MAX_SECS_BITS","","The tight upper bound guarantees that a duration with `|Duration| >= 2^MAX_SECS_BITS` will always overflow the addition with any date and time type.",null,null],[11,"eq","chrono::naive","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"from","","Pull the internal NaiveDateTime out",14,{"inputs":[{"name":"tsseconds"}],"output":{"name":"naivedatetime"}}],[11,"deref","","",15,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",14,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",14,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[11,"date","","Retrieves a date component.",14,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",14,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",14,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",14,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",14,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",14,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",14,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",14,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"hash","","",14,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"add_assign","","",14,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub_assign","","",14,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[12,"date","","",1,null],[12,"offset","","",1,null],[5,"map_local","","Maps the local date to other date with given conversion function.",null,{"inputs":[{"name":"date"},{"name":"f"}],"output":{"generics":["date"],"name":"option"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[11,"clone","chrono","",1,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",1,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",1,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",1,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",1,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",1,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",1,null],[11,"timezone","","Retrieves an associated time zone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",1,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",1,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["date"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",1,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["date"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",1,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",1,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",1,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","",1,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",1,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_month","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_month0","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_day","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_day0","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_ordinal","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_ordinal0","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[12,"datetime","","",2,null],[12,"offset","","",2,null],[5,"map_local","","Maps the local datetime to other datetime with given conversion function.",null,{"inputs":[{"name":"datetime"},{"name":"f"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"clone","chrono","",2,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",2,null],[11,"date","","Retrieves a date component.",2,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",2,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",2,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",2,null],[11,"timezone","","Retrieves an associated time zone.",2,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",2,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",2,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",2,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",2,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",2,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",2,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",2,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",2,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",2,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",2,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"hour","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from","","",2,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",2,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[0,"format","","Formatting (and parsing) utilities for date and time.",null,null],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",19,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"isoyear","","Year in the ISO week date.",19,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"month","","Month (1--12).",19,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",19,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",19,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",19,null],[12,"weekday","","Day of the week.",19,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",19,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",19,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",19,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",19,null],[12,"minute","","Minute number (0--59).",19,null],[12,"second","","Second number (0--60, accounting for leap seconds).",19,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",19,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",19,null],[12,"offset","","Offset from the local time to UTC, in seconds.",19,null],[12,"_dummy","","A dummy field to make this type not fully destructible (required for API stability).",19,null],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",null,null],[12,"_dummy","","",20,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[12,"_dummy","","",21,null],[3,"ParseError","","An error from the `parse` function.",null,null],[12,"0","","",22,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[12,"date","","The date view, if any.",23,null],[12,"time","","The time view, if any.",23,null],[12,"off","","The name and local-to-UTC difference for the offset (timezone), if any.",23,null],[12,"items","","An iterator returning formatting items.",23,null],[4,"Void","","An unhabitated type used for `InternalNumeric` and `InternalFixed` below.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",24,null],[13,"Zero","","Zero (`0`) padding.",24,null],[13,"Space","","Space padding.",24,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",25,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",25,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",25,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",25,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",25,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",25,null],[13,"Month","","Month (FW=PW=2).",25,null],[13,"Day","","Day of the month (FW=PW=2).",25,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",25,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",25,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",25,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",25,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",25,null],[13,"Ordinal","","Day of the year (FW=PW=3).",25,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",25,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",25,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",25,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",25,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",25,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",25,null],[13,"Internal","","Internal uses only.",25,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",26,null],[13,"LongMonthName","","Full month names.",26,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",26,null],[13,"LongWeekdayName","","Full day of the week names.",26,null],[13,"LowerAmPm","","AM/PM.",26,null],[13,"UpperAmPm","","AM/PM.",26,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",26,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",26,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",26,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",26,null],[13,"TimezoneName","","Timezone name.",26,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",26,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",26,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",26,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",26,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",26,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",26,null],[13,"Internal","","Internal uses only.",26,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",27,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",27,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",27,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",27,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",27,null],[13,"Fixed","","Fixed-format item.",27,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",27,null],[4,"ParseErrorKind","","",null,null],[13,"OutOfRange","","Given field is out of permitted range.",28,null],[13,"Impossible","","There is no possible date and time value with given set of fields.",28,null],[13,"NotEnough","","Given set of fields is not enough to make a requested date and time value.",28,null],[13,"Invalid","","The input string has some invalid character sequence for given formatting items.",28,null],[13,"TooShort","","The input string has been prematurely ended.",28,null],[13,"TooLong","","All formatting items have been read but there is a remaining input.",28,null],[13,"BadFormat","","There was an error on the formatting string, or there were non-supported formating items.",28,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",19,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"isoyear","","Year in the ISO week date.",19,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",19,null],[12,"month","","Month (1--12).",19,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",19,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",19,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",19,null],[12,"weekday","","Day of the week.",19,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",19,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",19,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",19,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",19,null],[12,"minute","","Minute number (0--59).",19,null],[12,"second","","Second number (0--60, accounting for leap seconds).",19,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",19,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",19,null],[12,"offset","","Offset from the local time to UTC, in seconds.",19,null],[12,"_dummy","","A dummy field to make this type not fully destructible (required for API stability).",19,null],[5,"set_if_consistent","","Checks if `old` is either empty or has the same value to `new` (i.e. \"consistent\"), and if it is empty, set `old` to `new` as well.",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"parseresult"}}],[11,"clone","chrono::format","",19,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",19,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",19,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",19,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",19,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",19,{"inputs":[{"name":"self"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",19,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",19,{"inputs":[{"name":"self"}],"output":{"generics":["fixedoffset"],"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",19,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",19,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[0,"scan","","Various scanning routines for the parser.",null,null],[5,"equals","chrono::format::scan","Returns true when two slices are equal case-insensitively (in ASCII). Assumes that the `pattern` is already converted to lower case.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"number","","Tries to parse the non-negative number from `min` to `max` digits.",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"parseresult"}}],[5,"nanosecond","","Tries to consume at least one digits as a fractional second. Returns the number of whole nanoseconds (0--999,999,999).",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"short_month0","","Tries to parse the month index (0 through 11) with the first three ASCII letters.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"short_weekday","","Tries to parse the weekday with the first three ASCII letters.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"short_or_long_month0","","Tries to parse the month index (0 through 11) with short or long month names. It prefers long month names to short month names when both are possible.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"short_or_long_weekday","","Tries to parse the weekday with short or long weekday names. It prefers long weekday names to short weekday names when both are possible.",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[5,"char","","Tries to consume exactly one given character.",null,{"inputs":[{"name":"str"},{"name":"u8"}],"output":{"generics":["str"],"name":"parseresult"}}],[5,"space","","Tries to consume one or more whitespace.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"parseresult"}}],[5,"colon_or_space","","Consumes any number (including zero) of colon or spaces.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"parseresult"}}],[5,"timezone_offset","","Tries to parse `[-+]\\d\\d` continued by `\\d\\d`. Return an offset in seconds if possible.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"parseresult"}}],[5,"timezone_offset_zulu","","Same to `timezone_offset` but also allows for `z`/`Z` which is same to `+00:00`.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"parseresult"}}],[5,"timezone_offset_2822","","Same to `timezone_offset` but also allows for RFC 2822 legacy timezones. May return `None` which indicates an insufficient offset data (i.e. `-0000`).",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"parse","chrono::format","Date and time parsing routines.",null,null],[5,"set_weekday_with_num_days_from_sunday","chrono::format::parse","",null,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[5,"set_weekday_with_number_from_monday","","",null,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[5,"parse_rfc2822","","",null,{"inputs":[{"name":"parsed"},{"name":"str"}],"output":{"name":"parseresult"}}],[5,"parse_rfc3339","","",null,{"inputs":[{"name":"parsed"},{"name":"str"}],"output":{"name":"parseresult"}}],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[12,"remainder","","Remaining portion of the string.",29,null],[12,"recons","","If the current specifier is composed of multiple formatting items (e.g. `%+`), parser refers to the statically reconstructed slice of them. If `recons` is not empty they have to be returned earlier than the `remainder`.",29,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",29,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["item"],"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[17,"OUT_OF_RANGE","","",null,null],[17,"IMPOSSIBLE","","",null,null],[17,"NOT_ENOUGH","","",null,null],[17,"INVALID","","",null,null],[17,"TOO_SHORT","","",null,null],[17,"TOO_LONG","","",null,null],[17,"BAD_FORMAT","","",null,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"void"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",30,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"parseerrorkind"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"parseerrorkind"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",28,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,{"inputs":[{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,{"inputs":[{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","chrono","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",31,null],[10,"month","","Returns the month number starting from 1.",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",31,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"iso_week","","Returns the ISO week.",31,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[10,"with_year","","Makes a new value with the year number changed.",31,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",31,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",32,null],[10,"minute","","Returns the minute number from 0 to 59.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"succ","","The next day in the week.",4,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",4,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",4,{"inputs":[{"name":"i64"}],"output":{"generics":["weekday"],"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"u64"}],"output":{"generics":["weekday"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseweekdayerror"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,{"inputs":[{"name":"self"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","chrono::naive","",13,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}]],"paths":[[3,"Duration"],[3,"Date"],[3,"DateTime"],[3,"ParseWeekdayError"],[4,"Weekday"],[3,"FixedOffset"],[4,"LocalResult"],[3,"Utc"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"TsSeconds"],[3,"YearFlags"],[3,"Of"],[3,"Mdf"],[3,"Parsed"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[4,"ParseErrorKind"],[3,"StrftimeItems"],[4,"Void"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[12,"b","","",0,null],[12,"s","","",0,null],[12,"v","","",0,null],[12,"index","","",0,null],[12,"r_ifs","","",0,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[12,"name","","",1,null],[12,"args","","",1,null],[12,"required","","",1,null],[12,"requires","","",1,null],[12,"conflicts","","",1,null],[12,"multiple","","",1,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[12,"args","","",2,null],[12,"subcommand","","",2,null],[12,"usage","","",2,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[12,"iter","","",3,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[12,"name","","",4,null],[12,"matches","","",4,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[12,"iter","","",5,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[12,"p","","",6,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",7,null],[12,"kind","","The type of error",7,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",7,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",8,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",8,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",8,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",8,null],[13,"Hidden","","The argument should not be shown in help text",8,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",8,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",8,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",8,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",8,null],[13,"HidePossibleValues","","Hides the possible values from the help string",8,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",8,null],[13,"RequireEquals","","Require options use `--option=val` syntax",8,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",8,null],[13,"HideDefaultValue","","Hides the default value from the help string",8,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",8,null],[13,"HideEnvValues","","Hides ENV values in the help message",8,null],[13,"RequiredUnlessAll","","",8,null],[13,"ValueDelimiterNotSet","","",8,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",9,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",9,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",9,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",9,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",9,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",9,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",9,null],[13,"ColoredHelp","","Uses colorized help messages.",9,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",9,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",9,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",9,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",9,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",9,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",9,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",9,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",9,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",9,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",9,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",9,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",9,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",9,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",9,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",9,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",9,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",9,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",9,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",9,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",9,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",9,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",9,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",9,null],[13,"NeedsLongVersion","","",9,null],[13,"NeedsLongHelp","","",9,null],[13,"NeedsSubcommandHelp","","",9,null],[13,"LowIndexMultiplePositional","","",9,null],[13,"TrailingValues","","",9,null],[13,"ValidNegNumFound","","",9,null],[13,"Propagated","","",9,null],[13,"ValidArgFound","","",9,null],[13,"ContainsLast","","",9,null],[4,"Format","","Defines styles for different types of error messages. Defaults to Error=Red, Warning=Yellow, and Good=Green",null,null],[13,"Error","","Defines the style used for errors, defaults to Red",10,null],[13,"Warning","","Defines the style used for warnings, defaults to Yellow",10,null],[13,"Good","","Defines the style used for good values, defaults to Green",10,null],[13,"None","","Defines no formatting style",10,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",11,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",11,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",11,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",11,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",11,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",11,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",11,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",11,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",11,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",11,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",11,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",11,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",11,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",11,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",11,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",11,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",11,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",11,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",11,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",11,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",12,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",12,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",12,null],[13,"PowerShell","","Generates a completion file for PowerShell",12,null],[0,"macros","","",null,null],[0,"debug_macros","clap::macros","",null,null],[0,"app","clap","",null,null],[3,"App","clap::app","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[12,"p","","",6,null],[0,"settings","","",null,null],[3,"Flags","clap::app::settings","",null,null],[12,"bits","","",13,null],[3,"AppFlags","","",null,null],[12,"0","","",14,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",9,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",9,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",9,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",9,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",9,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",9,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",9,null],[13,"ColoredHelp","","Uses colorized help messages.",9,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",9,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",9,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",9,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",9,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",9,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",9,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",9,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",9,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",9,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",9,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",9,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",9,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",9,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",9,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",9,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",9,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",9,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",9,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",9,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",9,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",9,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",9,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",9,null],[13,"NeedsLongVersion","","",9,null],[13,"NeedsLongHelp","","",9,null],[13,"NeedsSubcommandHelp","","",9,null],[13,"LowIndexMultiplePositional","","",9,null],[13,"TrailingValues","","",9,null],[13,"ValidNegNumFound","","",9,null],[13,"Propagated","","",9,null],[13,"ValidArgFound","","",9,null],[13,"ContainsLast","","",9,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SC_NEGATE_REQS","","",13,null],[18,"SC_REQUIRED","","",13,null],[18,"A_REQUIRED_ELSE_HELP","","",13,null],[18,"GLOBAL_VERSION","","",13,null],[18,"VERSIONLESS_SC","","",13,null],[18,"UNIFIED_HELP","","",13,null],[18,"WAIT_ON_ERROR","","",13,null],[18,"SC_REQUIRED_ELSE_HELP","","",13,null],[18,"NEEDS_LONG_HELP","","",13,null],[18,"NEEDS_LONG_VERSION","","",13,null],[18,"NEEDS_SC_HELP","","",13,null],[18,"DISABLE_VERSION","","",13,null],[18,"HIDDEN","","",13,null],[18,"TRAILING_VARARG","","",13,null],[18,"NO_BIN_NAME","","",13,null],[18,"ALLOW_UNK_SC","","",13,null],[18,"UTF8_STRICT","","",13,null],[18,"UTF8_NONE","","",13,null],[18,"LEADING_HYPHEN","","",13,null],[18,"NO_POS_VALUES","","",13,null],[18,"NEXT_LINE_HELP","","",13,null],[18,"DERIVE_DISP_ORDER","","",13,null],[18,"COLORED_HELP","","",13,null],[18,"COLOR_ALWAYS","","",13,null],[18,"COLOR_AUTO","","",13,null],[18,"COLOR_NEVER","","",13,null],[18,"DONT_DELIM_TRAIL","","",13,null],[18,"ALLOW_NEG_NUMS","","",13,null],[18,"LOW_INDEX_MUL_POS","","",13,null],[18,"DISABLE_HELP_SC","","",13,null],[18,"DONT_COLLAPSE_ARGS","","",13,null],[18,"ARGS_NEGATE_SCS","","",13,null],[18,"PROPAGATE_VALS_DOWN","","",13,null],[18,"ALLOW_MISSING_POS","","",13,null],[18,"TRAILING_VALUES","","",13,null],[18,"VALID_NEG_NUM_FOUND","","",13,null],[18,"PROPAGATED","","",13,null],[18,"VALID_ARG_FOUND","","",13,null],[18,"INFER_SUBCOMMANDS","","",13,null],[18,"CONTAINS_LAST","","",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"u64"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"u64"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",13,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"appflags"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"appflags"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"appflags"}],"output":{"name":"bool"}}],[11,"bitor","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"zeroed","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"set","","",14,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":null}],[11,"unset","","",14,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":null}],[11,"is_set","","",14,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"fmt","clap","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"parser","clap::app","",null,null],[3,"Parser","clap::app::parser","",null,null],[12,"meta","","",15,null],[12,"settings","","",15,null],[12,"g_settings","","",15,null],[12,"flags","","",15,null],[12,"opts","","",15,null],[12,"positionals","","",15,null],[12,"subcommands","","",15,null],[12,"groups","","",15,null],[12,"global_args","","",15,null],[12,"required","","",15,null],[12,"r_ifs","","",15,null],[12,"overrides","","",15,null],[12,"help_short","","",15,null],[12,"version_short","","",15,null],[12,"cache","","",15,null],[12,"help_message","","",15,null],[12,"version_message","","",15,null],[4,"ParseResult","","",null,null],[13,"Flag","","",16,null],[13,"Opt","","",16,null],[13,"Pos","","",16,null],[13,"MaybeHyphenValue","","",16,null],[13,"MaybeNegNum","","",16,null],[13,"NotFound","","",16,null],[13,"ValuesDone","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"parser"}}],[11,"with_name","","",15,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"help_short","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"version_short","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"gen_completions_to","","",15,{"inputs":[{"name":"self"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"gen_completions","","",15,{"inputs":[{"name":"self"},{"name":"shell"},{"name":"osstring"}],"output":null}],[11,"app_debug_asserts","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_asserts","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"add_conditional_reqs","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"add_arg_groups","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"add_reqs","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"implied_settings","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"add_arg","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"add_arg_ref","","",15,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"add_group","","",15,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":null}],[11,"add_subcommand","","",15,{"inputs":[{"name":"self"},{"name":"app"}],"output":null}],[11,"propagate_settings","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"derive_display_order","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"required","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"iter"}}],[11,"has_args","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_opts","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_flags","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_positionals","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subcommands","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_visible_opts","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_visible_flags","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_visible_positionals","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_visible_subcommands","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_set","","",15,{"inputs":[{"name":"self"},{"name":"as"}],"output":{"name":"bool"}}],[11,"set","","",15,{"inputs":[{"name":"self"},{"name":"as"}],"output":null}],[11,"unset","","",15,{"inputs":[{"name":"self"},{"name":"as"}],"output":null}],[11,"verify_positionals","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"propagate_globals","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"possible_subcommand","","",15,null],[11,"parse_help_subcommand","","",15,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"is_new_arg","","",15,{"inputs":[{"name":"self"},{"name":"osstr"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"get_matches_with","","",15,{"inputs":[{"name":"self"},{"name":"argmatcher"},{"name":"peekable"}],"output":{"name":"clapresult"}}],[11,"remove_overrides","","",15,{"inputs":[{"name":"self"},{"name":"argmatcher"}],"output":null}],[11,"propagate_help_version","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"build_bin_names","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_subcommand","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"argmatcher"},{"name":"peekable"}],"output":{"name":"clapresult"}}],[11,"groups_for_arg","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec"],"name":"option"}}],[11,"args_in_group","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[11,"arg_names_in_group","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"vec"}}],[11,"create_help_and_version","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"check_for_help_and_version_str","","",15,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"clapresult"}}],[11,"check_for_help_and_version_char","","",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"clapresult"}}],[11,"use_long_help","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"_help","","",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"error"}}],[11,"_version","","",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"error"}}],[11,"parse_long_arg","","",15,{"inputs":[{"name":"self"},{"name":"argmatcher"},{"name":"osstr"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"parse_short_arg","","",15,{"inputs":[{"name":"self"},{"name":"argmatcher"},{"name":"osstr"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"parse_opt","","",15,{"inputs":[{"name":"self"},{"generics":["osstr"],"name":"option"},{"name":"optbuilder"},{"name":"bool"},{"name":"argmatcher"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"add_val_to_arg","","",15,{"inputs":[{"name":"self"},{"name":"a"},{"name":"osstr"},{"name":"argmatcher"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"add_single_val_to_arg","","",15,{"inputs":[{"name":"self"},{"name":"a"},{"name":"osstr"},{"name":"argmatcher"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"parse_flag","","",15,{"inputs":[{"name":"self"},{"name":"flagbuilder"},{"name":"argmatcher"}],"output":{"generics":["parseresult"],"name":"clapresult"}}],[11,"did_you_mean_error","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"print_version","","",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"clapresult"}}],[11,"write_version","","",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_help","","",15,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_help_err","","",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"add_defaults","","",15,{"inputs":[{"name":"self"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"add_env","","",15,{"inputs":[{"name":"self"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"flags","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["flagbuilder"],"name":"iter"}}],[11,"opts","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["optbuilder"],"name":"iter"}}],[11,"positionals","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize","posbuilder"],"name":"values"}}],[11,"subcommands","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["app"],"name":"iter"}}],[11,"color","","",15,{"inputs":[{"name":"self"}],"output":{"name":"colorwhen"}}],[11,"find_any_arg","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["anyarg"],"name":"option"}}],[11,"is_bin_name","","Check is a given string matches the binary name for this parser",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_alias","","Check is a given string is an alias for this parser",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find_subcommand","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["app"],"name":"option"}}],[11,"contains_long","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"contains_short","","",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[0,"meta","clap::app","",null,null],[3,"AppMeta","clap::app::meta","",null,null],[12,"name","","",17,null],[12,"bin_name","","",17,null],[12,"author","","",17,null],[12,"version","","",17,null],[12,"long_version","","",17,null],[12,"about","","",17,null],[12,"long_about","","",17,null],[12,"more_help","","",17,null],[12,"pre_help","","",17,null],[12,"aliases","","",17,null],[12,"usage_str","","",17,null],[12,"usage","","",17,null],[12,"help_str","","",17,null],[12,"disp_ord","","",17,null],[12,"term_w","","",17,null],[12,"max_w","","",17,null],[12,"template","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"appmeta"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"appmeta"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"with_name","","",17,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[0,"help","clap::app","",null,null],[3,"Help","clap::app::help","`clap` Help Writer.",null,null],[12,"writer","","",18,null],[12,"next_line_help","","",18,null],[12,"hide_pv","","",18,null],[12,"term_w","","",18,null],[12,"color","","",18,null],[12,"cizer","","",18,null],[12,"longest","","",18,null],[12,"force_next_line","","",18,null],[12,"use_long","","",18,null],[4,"CopyUntilResult","","Possible results for a copying function that stops when a given byte was found.",null,null],[13,"DelimiterFound","","",19,null],[13,"DelimiterNotFound","","",19,null],[13,"ReaderEmpty","","",19,null],[13,"ReadError","","",19,null],[13,"WriteError","","",19,null],[5,"str_width","","",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[5,"as_arg_trait","","",null,{"inputs":[{"name":"t"}],"output":{"name":"argwithorder"}}],[5,"copy_until","","Copies the contents of a reader into a writer until a delimiter byte is found. On success, the total number of bytes that were copied from reader to writer is returned.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"copyuntilresult"}}],[5,"copy_and_capture","","Copies the contents of a reader into a writer until a {tag} is found, copying the tag content to a buffer and returning its size. In addition to errors, there are three possible outputs:   - `None`: The reader was consumed.   - `Some(Ok(0))`: No tag was captured but the reader still contains data.   - `Some(Ok(length>0))`: a tag with `length` was captured to the `tag_buffer`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"cursor"}],"output":{"generics":["result"],"name":"option"}}],[5,"wrap_help","","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[0,"term_size","","",null,null],[5,"dimensions","clap::app::help::term_size","",null,{"inputs":[],"output":{"name":"option"}}],[17,"TAB","clap::app::help","",null,null],[8,"ArgWithDisplay","","",null,null],[8,"ArgWithOrder","","",null,null],[10,"as_base","","",20,{"inputs":[{"name":"self"}],"output":{"name":"argwithdisplay"}}],[11,"disp_ord","clap","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","clap::app::help","Create a new `Help` instance.",18,{"inputs":[{"name":"write"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"colorizer"},{"generics":["usize"],"name":"option"},{"generics":["usize"],"name":"option"},{"name":"bool"}],"output":{"name":"self"}}],[11,"write_app_help","","Reads help settings from an App and write its help to the wrapped stream.",18,{"inputs":[{"name":"write"},{"name":"app"},{"name":"bool"}],"output":{"name":"clapresult"}}],[11,"write_parser_help","","Reads help settings from a Parser and write its help to the wrapped stream.",18,{"inputs":[{"name":"write"},{"name":"parser"},{"name":"bool"}],"output":{"name":"clapresult"}}],[11,"write_parser_help_to_stderr","","Reads help settings from a Parser and write its help to the wrapped stream which will be stderr. This method prevents formatting when required.",18,{"inputs":[{"name":"write"},{"name":"parser"}],"output":{"name":"clapresult"}}],[11,"_write_parser_help","","",18,{"inputs":[{"name":"write"},{"name":"parser"},{"name":"bool"},{"name":"bool"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the parser help to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"clapresult"}}],[11,"write_args_unsorted","","Writes help for each argument in the order they were declared to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"write_args","","Sorts arguments by length and display order and write their help to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"write_arg","","Writes help for an argument to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"argwithdisplay"}],"output":{"name":"result"}}],[11,"short","","Writes argument's short command to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"argwithdisplay"}],"output":{"name":"result"}}],[11,"long","","Writes argument's long command to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"argwithdisplay"}],"output":{"name":"result"}}],[11,"val","","Writes argument's possible values to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"argwithdisplay"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"write_before_after_help","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"help","","Writes argument's help to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"argwithdisplay"},{"name":"str"}],"output":{"name":"result"}}],[11,"spec_vals","","",18,{"inputs":[{"name":"self"},{"name":"argwithdisplay"}],"output":{"name":"string"}}],[11,"write_all_args","","Writes help for all arguments (options, flags, args, subcommands) including titles of a Parser Object to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"clapresult"}}],[11,"write_subcommands","","Writes help for subcommands of a Parser Object to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"result"}}],[11,"write_version","","Writes version of a Parser Object to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"result"}}],[11,"write_bin_name","","Writes binary name of a Parser Object to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"result"}}],[11,"write_default_help","","Writes default help for a Parser Object to the wrapped stream.",18,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"clapresult"}}],[11,"write_templated_help","","Write help to stream for the parser in the format defined by the template.",18,{"inputs":[{"name":"self"},{"name":"parser"},{"name":"str"}],"output":{"name":"clapresult"}}],[0,"validator","clap::app","",null,null],[3,"Validator","clap::app::validator","",null,null],[12,"0","","",21,null],[11,"new","","",21,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"validate","","",21,{"inputs":[{"name":"self"},{"name":"parseresult"},{"generics":["string"],"name":"option"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_arg_values","","",21,{"inputs":[{"name":"self"},{"name":"a"},{"name":"matchedarg"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"build_err","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_blacklist","","",21,{"inputs":[{"name":"self"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_matched_args","","",21,{"inputs":[{"name":"self"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_arg_num_occurs","","",21,{"inputs":[{"name":"self"},{"name":"a"},{"name":"matchedarg"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_arg_num_vals","","",21,{"inputs":[{"name":"self"},{"name":"a"},{"name":"matchedarg"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_arg_requires","","",21,{"inputs":[{"name":"self"},{"name":"a"},{"name":"matchedarg"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_required","","",21,{"inputs":[{"name":"self"},{"name":"argmatcher"}],"output":{"name":"clapresult"}}],[11,"validate_arg_conflicts","","",21,{"inputs":[{"name":"self"},{"name":"anyarg"},{"name":"argmatcher"}],"output":{"generics":["bool"],"name":"option"}}],[11,"validate_required_unless","","",21,{"inputs":[{"name":"self"},{"name":"anyarg"},{"name":"argmatcher"}],"output":{"generics":["bool"],"name":"option"}}],[11,"missing_required_error","","",21,{"inputs":[{"name":"self"},{"name":"argmatcher"},{"generics":["str"],"name":"option"}],"output":{"name":"clapresult"}}],[11,"is_missing_required_ok","","",21,{"inputs":[{"name":"self"},{"name":"anyarg"},{"name":"argmatcher"}],"output":{"name":"bool"}}],[0,"usage","clap::app","",null,null],[5,"create_usage_with_title","clap::app::usage","",null,null],[5,"create_error_usage","","",null,{"inputs":[{"name":"parser"},{"name":"argmatcher"},{"generics":["str"],"name":"option"}],"output":{"name":"string"}}],[5,"create_usage_no_title","","",null,null],[5,"create_help_usage","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"string"}}],[5,"create_smart_usage","","",null,null],[5,"get_args_tag","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"generics":["string"],"name":"option"}}],[5,"needs_flags_tag","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[5,"get_required_usage_from","","",null,null],[11,"new","clap","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",6,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",6,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",6,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",6,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",6,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",6,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",6,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",6,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",6,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",6,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",6,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",6,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",6,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",6,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",6,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",6,{"inputs":[{"name":"self"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"name","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"overrides","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"requires","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"blacklist","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"required_unless","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"val_names","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["vecmap"],"name":"option"}}],[11,"is_set","","",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"val_terminator","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set","","",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"has_switch","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_vals","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"num_vals","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"possible_vals","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"validator","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"validator_os","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"min_vals","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"short","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"long","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"val_delim","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"takes_value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"help","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"long_help","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default_val","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default_vals_ifs","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["values"],"name":"option"}}],[11,"env","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"longest_filter","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aliases","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"args","","",null,null],[0,"macros","clap::args","",null,null],[0,"arg","","",null,null],[3,"Arg","clap::args::arg","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[12,"b","","",0,null],[12,"s","","",0,null],[12,"v","","",0,null],[12,"index","","",0,null],[12,"r_ifs","","",0,null],[11,"default","clap","",0,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",0,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",0,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",0,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",0,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",0,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",0,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",0,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",0,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",0,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",0,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",0,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",0,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",0,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["str"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",0,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["osstr"],"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",0,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",0,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",0,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",0,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",0,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",0,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"setb","","",0,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"unsetb","","",0,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[0,"any_arg","clap::args","",null,null],[8,"AnyArg","clap::args::any_arg","",null,null],[10,"name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"overrides","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"aliases","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[10,"requires","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"blacklist","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"required_unless","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_set","","",22,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[10,"set","","",22,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[10,"has_switch","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"max_vals","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"min_vals","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"num_vals","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"possible_vals","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"validator","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[10,"validator_os","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[10,"short","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[10,"long","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"val_delim","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[10,"takes_value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"val_names","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["vecmap"],"name":"option"}}],[10,"help","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"long_help","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[10,"default_val","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[10,"default_vals_ifs","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["values"],"name":"option"}}],[10,"env","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"longest_filter","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"val_terminator","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[8,"DispOrder","","",null,null],[10,"disp_ord","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"arg_matches","clap::args","",null,null],[3,"ArgMatches","clap::args::arg_matches","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[12,"args","","",2,null],[12,"subcommand","","",2,null],[12,"usage","","",2,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[12,"iter","","",5,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[12,"iter","","",3,null],[11,"fmt","clap","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["cow"],"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["values"],"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["vec"],"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osvalues"],"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["argmatches"],"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",2,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[0,"arg_matcher","clap::args","",null,null],[3,"ArgMatcher","clap::args::arg_matcher","",null,null],[12,"0","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"process_arg_overrides","","",24,{"inputs":[{"name":"self"},{"generics":["anyarg"],"name":"option"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"is_present","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"propagate_globals","","",24,null],[11,"fill_in_global_values","","",24,null],[11,"get_mut","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["matchedarg"],"name":"option"}}],[11,"get","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["matchedarg"],"name":"option"}}],[11,"remove","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"remove_all","","",24,null],[11,"insert","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"contains","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_empty","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"usage","","",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"arg_names","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"vec"}}],[11,"entry","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str","matchedarg"],"name":"entry"}}],[11,"subcommand","","",24,{"inputs":[{"name":"self"},{"name":"subcommand"}],"output":null}],[11,"subcommand_name","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["str","matchedarg"],"name":"iter"}}],[11,"inc_occurrence_of","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"inc_occurrences_of","","",24,null],[11,"add_val_to","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"osstr"}],"output":null}],[11,"needs_more_vals","","",24,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"into","","",24,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[0,"subcommand","clap::args","",null,null],[3,"SubCommand","clap::args::subcommand","The abstract representation of a command line subcommand.",null,null],[12,"name","","",4,null],[12,"matches","","",4,null],[11,"fmt","clap","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",4,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[0,"arg_builder","clap::args","",null,null],[0,"flag","clap::args::arg_builder","",null,null],[3,"FlagBuilder","clap::args::arg_builder::flag","",null,null],[12,"b","","",25,null],[12,"s","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"flagbuilder"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"flagbuilder"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",25,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",25,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"from","","",25,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"overrides","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"requires","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"blacklist","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"required_unless","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_set","","",25,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"has_switch","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"takes_value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",25,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"max_vals","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"val_names","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["vecmap"],"name":"option"}}],[11,"num_vals","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"possible_vals","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"validator","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"validator_os","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"min_vals","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"short","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"long","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"val_delim","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"help","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"long_help","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"val_terminator","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default_val","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default_vals_ifs","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["values"],"name":"option"}}],[11,"env","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"longest_filter","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aliases","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"disp_ord","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"flagbuilder"}],"output":{"name":"bool"}}],[0,"positional","clap::args::arg_builder","",null,null],[3,"PosBuilder","clap::args::arg_builder::positional","",null,null],[12,"b","","",26,null],[12,"v","","",26,null],[12,"index","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"posbuilder"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"posbuilder"}}],[11,"new","","",26,{"inputs":[{"name":"str"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from_arg_ref","","",26,{"inputs":[{"name":"arg"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from_arg","","",26,{"inputs":[{"name":"arg"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple_str","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_no_brackets","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"overrides","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"requires","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"blacklist","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"required_unless","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"val_names","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["vecmap"],"name":"option"}}],[11,"is_set","","",26,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","",26,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"has_switch","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_vals","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"val_terminator","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"num_vals","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"possible_vals","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"validator","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"validator_os","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"min_vals","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"short","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"long","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"val_delim","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"takes_value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"help","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"long_help","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default_vals_ifs","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["values"],"name":"option"}}],[11,"default_val","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"env","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"longest_filter","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aliases","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"disp_ord","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"posbuilder"}],"output":{"name":"bool"}}],[0,"option","clap::args::arg_builder","",null,null],[3,"OptBuilder","clap::args::arg_builder::option","",null,null],[12,"b","","",27,null],[12,"s","","",27,null],[12,"v","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"optbuilder"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"optbuilder"}}],[11,"new","","",27,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",27,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"from","","",27,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"overrides","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"requires","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"blacklist","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"required_unless","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"val_names","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["vecmap"],"name":"option"}}],[11,"is_set","","",27,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"has_switch","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",27,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"max_vals","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"val_terminator","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"num_vals","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"possible_vals","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"validator","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"validator_os","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[11,"min_vals","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"short","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"long","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"val_delim","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"takes_value","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"help","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"long_help","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default_val","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default_vals_ifs","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["values"],"name":"option"}}],[11,"env","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"longest_filter","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aliases","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"disp_ord","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"optbuilder"}],"output":{"name":"bool"}}],[0,"base","clap::args::arg_builder","",null,null],[3,"Base","clap::args::arg_builder::base","",null,null],[12,"name","","",28,null],[12,"help","","",28,null],[12,"long_help","","",28,null],[12,"blacklist","","",28,null],[12,"settings","","",28,null],[12,"r_unless","","",28,null],[12,"overrides","","",28,null],[12,"groups","","",28,null],[12,"requires","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"base"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"base"}}],[11,"new","","",28,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"set","","",28,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"unset","","",28,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"is_set","","",28,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"from","","",28,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"base"}],"output":{"name":"bool"}}],[0,"valued","clap::args::arg_builder","",null,null],[3,"Valued","clap::args::arg_builder::valued","",null,null],[12,"possible_vals","","",29,null],[12,"val_names","","",29,null],[12,"num_vals","","",29,null],[12,"max_vals","","",29,null],[12,"min_vals","","",29,null],[12,"validator","","",29,null],[12,"validator_os","","",29,null],[12,"val_delim","","",29,null],[12,"default_val","","",29,null],[12,"default_vals_ifs","","",29,null],[12,"env","","",29,null],[12,"terminator","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"valued"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"fill_in","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",29,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[0,"switched","clap::args::arg_builder","",null,null],[3,"Switched","clap::args::arg_builder::switched","",null,null],[12,"short","","",30,null],[12,"long","","",30,null],[12,"aliases","","",30,null],[12,"disp_ord","","",30,null],[12,"unified_ord","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"matched_arg","clap::args","",null,null],[3,"MatchedArg","clap::args::matched_arg","",null,null],[12,"occurs","","",31,null],[12,"vals","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"matchedarg"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"self"}}],[0,"group","clap::args","",null,null],[3,"ArgGroup","clap::args::group","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[12,"name","","",1,null],[12,"args","","",1,null],[12,"required","","",1,null],[12,"requires","","",1,null],[12,"conflicts","","",1,null],[12,"multiple","","",1,null],[11,"default","clap","",1,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",1,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",1,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"settings","clap::args","",null,null],[3,"Flags","clap::args::settings","",null,null],[12,"bits","","",32,null],[3,"ArgFlags","","",null,null],[12,"0","","",33,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",8,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",8,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",8,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",8,null],[13,"Hidden","","The argument should not be shown in help text",8,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",8,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",8,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",8,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",8,null],[13,"HidePossibleValues","","Hides the possible values from the help string",8,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",8,null],[13,"RequireEquals","","Require options use `--option=val` syntax",8,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",8,null],[13,"HideDefaultValue","","Hides the default value from the help string",8,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",8,null],[13,"HideEnvValues","","Hides ENV values in the help message",8,null],[13,"RequiredUnlessAll","","",8,null],[13,"ValueDelimiterNotSet","","",8,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"REQUIRED","","",32,null],[18,"MULTIPLE","","",32,null],[18,"EMPTY_VALS","","",32,null],[18,"GLOBAL","","",32,null],[18,"HIDDEN","","",32,null],[18,"TAKES_VAL","","",32,null],[18,"USE_DELIM","","",32,null],[18,"NEXT_LINE_HELP","","",32,null],[18,"R_UNLESS_ALL","","",32,null],[18,"REQ_DELIM","","",32,null],[18,"DELIM_NOT_SET","","",32,null],[18,"HIDE_POS_VALS","","",32,null],[18,"ALLOW_TAC_VALS","","",32,null],[18,"REQUIRE_EQUALS","","",32,null],[18,"LAST","","",32,null],[18,"HIDE_DEFAULT_VAL","","",32,null],[18,"CASE_INSENSITIVE","","",32,null],[18,"HIDE_ENV_VALS","","",32,null],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",32,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",32,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",32,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"argflags"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"set","","",33,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"unset","","",33,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":null}],[11,"is_set","","",33,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","clap","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"usage_parser","","",null,null],[3,"UsageParser","clap::usage_parser","",null,null],[12,"usage","","",34,null],[12,"pos","","",34,null],[12,"start","","",34,null],[12,"prev","","",34,null],[12,"explicit_name_set","","",34,null],[4,"UsageToken","","",null,null],[13,"Name","","",35,null],[13,"ValName","","",35,null],[13,"Short","","",35,null],[13,"Long","","",35,null],[13,"Help","","",35,null],[13,"Multiple","","",35,null],[13,"Unknown","","",35,null],[5,"name_end","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"token","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"long_end","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"help_start","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"usagetoken"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",34,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","",34,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"parse","","",34,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"name","","",34,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"stop_at","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"short_or_long","","",34,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"long","","",34,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"short","","",34,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"multiple","","",34,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[11,"help","","",34,{"inputs":[{"name":"self"},{"name":"arg"}],"output":null}],[0,"fmt","clap","",null,null],[3,"ColorizerOption","clap::fmt","",null,null],[12,"use_stderr","","",36,null],[12,"when","","",36,null],[3,"Colorizer","","",null,null],[12,"when","","",37,null],[4,"ColorWhen","","",null,null],[13,"Auto","","",38,null],[13,"Always","","",38,null],[13,"Never","","",38,null],[4,"Format","","Defines styles for different types of error messages. Defaults to Error=Red, Warning=Yellow, and Good=Green",null,null],[13,"Error","","Defines the style used for errors, defaults to Red",10,null],[13,"Warning","","Defines the style used for warnings, defaults to Yellow",10,null],[13,"Good","","Defines the style used for good values, defaults to Green",10,null],[13,"None","","Defines no formatting style",10,null],[5,"is_a_tty","","",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"is_term_dumb","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"colorwhen"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"colorwhen"}],"output":{"name":"bool"}}],[11,"new","","",37,{"inputs":[{"name":"colorizeroption"}],"output":{"name":"colorizer"}}],[11,"good","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"format"}}],[11,"warning","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"format"}}],[11,"error","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"format"}}],[11,"none","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"format"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","clap","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"format","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ansistring"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"suggestions","","",null,null],[5,"did_you_mean","clap::suggestions","Produces a string from a given list of possible values which is similar to the passed in value `v` with a certain confidence. Thus in a list of possible values like [\"foo\", \"bar\"], the value \"fop\" will yield `Some(\"foo\")`, whereas \"blark\" would yield `None`.",null,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"generics":["str"],"name":"option"}}],[5,"did_you_mean_flag_suffix","","Returns a suffix that can be empty, or is the standard 'did you mean' phrase",null,null],[5,"did_you_mean_value_suffix","","Returns a suffix that can be empty, or is the standard 'did you mean' phrase",null,null],[0,"errors","clap","",null,null],[3,"Error","clap::errors","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",7,null],[12,"kind","","The type of error",7,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",7,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",11,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",11,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",11,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",11,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",11,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",11,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",11,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",11,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",11,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",11,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",11,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",11,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",11,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",11,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",11,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",11,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",11,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",11,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",11,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",11,null],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[11,"fmt","clap","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",7,null],[11,"write_to","","",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"argument_conflict","","",7,{"inputs":[{"name":"anyarg"},{"name":"option"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"empty_value","","",7,{"inputs":[{"name":"anyarg"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"invalid_value","","",7,null],[11,"invalid_subcommand","","",7,{"inputs":[{"name":"s"},{"name":"d"},{"name":"n"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"unrecognized_subcommand","","",7,{"inputs":[{"name":"s"},{"name":"n"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"missing_required_argument","","",7,{"inputs":[{"name":"r"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"missing_subcommand","","",7,{"inputs":[{"name":"n"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"invalid_utf8","","",7,{"inputs":[{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"too_many_values","","",7,{"inputs":[{"name":"v"},{"name":"anyarg"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"too_few_values","","",7,{"inputs":[{"name":"anyarg"},{"name":"u64"},{"name":"usize"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"value_validation","","",7,{"inputs":[{"generics":["anyarg"],"name":"option"},{"name":"string"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"value_validation_auto","","",7,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"wrong_number_of_values","","",7,{"inputs":[{"name":"anyarg"},{"name":"u64"},{"name":"usize"},{"name":"s"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"unexpected_multiple_usage","","",7,{"inputs":[{"name":"anyarg"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"unknown_argument","","",7,{"inputs":[{"name":"a"},{"name":"str"},{"name":"u"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"io_error","","",7,{"inputs":[{"name":"error"},{"name":"colorwhen"}],"output":{"name":"self"}}],[11,"argument_not_found_auto","","",7,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"with_description","","Create an error with a custom description.",7,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"osstringext","","",null,null],[3,"OsSplit","clap::osstringext","",null,null],[12,"sep","","",39,null],[12,"val","","",39,null],[12,"pos","","",39,null],[8,"OsStrExt2","","",null,null],[10,"starts_with","","",40,null],[10,"split_at_byte","","",40,null],[10,"split_at","","",40,null],[10,"trim_left_matches","","",40,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"osstr"}}],[10,"len_","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"contains_byte","","",40,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[10,"is_empty_","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"split","","",40,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"ossplit"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ossplit"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[0,"strext","clap","",null,null],[8,"_StrExt","clap::strext","",null,null],[10,"_is_char_boundary","","",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[0,"completions","clap","",null,null],[3,"ComplGen","clap::completions","",null,null],[12,"p","","",42,null],[5,"all_subcommand_names","","",null,{"inputs":[{"name":"parser"}],"output":{"generics":["string"],"name":"vec"}}],[5,"all_subcommands","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[5,"subcommands_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[5,"get_all_subcommand_paths","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"generics":["string"],"name":"vec"}}],[0,"macros","","",null,null],[0,"bash","","",null,null],[3,"BashGen","clap::completions::bash","",null,null],[12,"p","","",43,null],[11,"new","","",43,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"generate_to","","",43,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"all_subcommands","","",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"subcommand_details","","",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"option_details_for_path","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"vals_for","","",43,{"inputs":[{"name":"self"},{"name":"optbuilder"}],"output":{"name":"string"}}],[11,"all_options_for_path","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[0,"fish","clap::completions","",null,null],[3,"FishGen","clap::completions::fish","",null,null],[12,"p","","",44,null],[5,"escape_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gen_fish_inner","","",null,{"inputs":[{"name":"str"},{"name":"fishgen"},{"name":"str"},{"name":"string"}],"output":null}],[11,"new","","",44,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"generate_to","","",44,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[0,"zsh","clap::completions","",null,null],[3,"ZshGen","clap::completions::zsh","",null,null],[12,"p","","",45,null],[5,"subcommand_details","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[5,"subcommands_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[5,"get_subcommands_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[5,"parser_of","","",null,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"parser"}}],[5,"get_args_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[5,"escape_help","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_value","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"write_opts_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[5,"write_flags_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[5,"write_positionals_of","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[11,"new","","",45,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"generate_to","","",45,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[0,"powershell","clap::completions","",null,null],[3,"PowerShellGen","clap::completions::powershell","",null,null],[12,"p","","",46,null],[5,"generate_inner","","",null,null],[11,"new","","",46,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"generate_to","","",46,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[0,"shell","clap::completions","",null,null],[4,"Shell","clap::completions::shell","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",12,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",12,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",12,null],[13,"PowerShell","","Generates a completion file for PowerShell",12,null],[11,"fmt","clap","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",12,null],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","clap::completions","",42,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"generate","","",42,{"inputs":[{"name":"self"},{"name":"shell"},{"name":"w"}],"output":null}],[0,"map","clap","",null,null],[0,"vec_map","clap::map","",null,null],[3,"VecMap","clap::map::vec_map","",null,null],[12,"inner","","",47,null],[3,"Iter","","",null,null],[12,"inner","","",48,null],[6,"Values","","",null,null],[6,"Entry","","",null,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"vecmap"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"values","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"values"}}],[11,"iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"contains_key","","",47,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"entry","","",47,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"entry"}}],[11,"get","","",47,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Result","clap","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[17,"INTERNAL_ERROR_MSG","","",null,null],[17,"INVALID_UTF8","","",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Arg"],[3,"ArgGroup"],[3,"ArgMatches"],[3,"OsValues"],[3,"SubCommand"],[3,"Values"],[3,"App"],[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"Format"],[4,"ErrorKind"],[4,"Shell"],[3,"Flags"],[3,"AppFlags"],[3,"Parser"],[4,"ParseResult"],[3,"AppMeta"],[3,"Help"],[4,"CopyUntilResult"],[8,"ArgWithOrder"],[3,"Validator"],[8,"AnyArg"],[8,"DispOrder"],[3,"ArgMatcher"],[3,"FlagBuilder"],[3,"PosBuilder"],[3,"OptBuilder"],[3,"Base"],[3,"Valued"],[3,"Switched"],[3,"MatchedArg"],[3,"Flags"],[3,"ArgFlags"],[3,"UsageParser"],[4,"UsageToken"],[3,"ColorizerOption"],[3,"Colorizer"],[4,"ColorWhen"],[3,"OsSplit"],[8,"OsStrExt2"],[8,"_StrExt"],[3,"ComplGen"],[3,"BashGen"],[3,"FishGen"],[3,"ZshGen"],[3,"PowerShellGen"],[3,"VecMap"],[3,"Iter"]]};
searchIndex["coco"] = {"doc":"Concurrent collections.","items":[[0,"deque","coco","A lock-free work-stealing deque.",null,null],[3,"Buffer","coco::deque","A buffer where deque elements are stored.",null,null],[12,"ptr","","Pointer to the allocated memory.",0,null],[12,"cap","","Capacity of the buffer. Always a power of two.",0,null],[3,"Deque","","",null,null],[12,"bottom","","",1,null],[12,"top","","",1,null],[12,"buffer","","",1,null],[3,"Worker","","Worker side of a work-stealing deque.",null,null],[12,"deque","","",2,null],[12,"_marker","","",2,null],[3,"Stealer","","Stealer side of a work-stealing deque.",null,null],[12,"deque","","",3,null],[12,"_marker","","",3,null],[5,"new","","Returns a new work-stealing deque.",null,null],[17,"MIN_CAP","","Minimum buffer capacity for a deque.",null,null],[11,"new","","Returns a new buffe with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"at","","Returns a pointer to the element at the specified `index`.",0,null],[11,"write","","Writes `value` into the specified `index`.",0,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"t"}],"output":null}],[11,"read","","Reads the value from the specified `index`.",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"t"}}],[11,"new","","Returns a new, empty deque.",1,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"resize","","Resizes the buffer with new capacity of `new_cap`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"push","","Pushes an element onto the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal_as_worker","","Steals an element from the top of the deque, but only the worker may call this method.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element onto the bottom of the deque.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the deque.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"epoch","coco","Epoch-based garbage collection.",null,null],[3,"Atomic","coco::epoch","A tagged atomic nullable pointer.",null,null],[12,"data","","",4,null],[12,"_marker","","",4,null],[3,"Ptr","","A tagged nullable pointer.",null,null],[12,"data","","",5,null],[12,"_marker","","",5,null],[3,"Garbage","","A garbage queue.",null,null],[12,"head","","Head of the queue.",6,null],[12,"tail","","Tail of the queue.",6,null],[12,"pending","","The next bag that will be pushed into the queue as soon as it gets full.",6,null],[3,"Pin","","A witness that the current thread is pinned.",null,null],[12,"bag","","A pointer to the cell within the harness, which holds a pointer to the local bag.",7,null],[5,"defer_free","","Stashes away an object that will later be freed.",null,null],[5,"flush","","Flushes the buffered thread-local garbage.",null,{"inputs":[{"name":"pin"}],"output":null}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[0,"atomic","","",null,null],[3,"Atomic","coco::epoch::atomic","A tagged atomic nullable pointer.",null,null],[12,"data","","",4,null],[12,"_marker","","",4,null],[3,"Ptr","","A tagged nullable pointer.",null,null],[12,"data","","",5,null],[12,"_marker","","",5,null],[5,"low_bits","","Returns a mask containing unused least significant bits of an aligned pointer to `T`.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"raw_and_tag","","Tags the unused least significant bits of `raw` with `tag`.",null,null],[11,"fmt","coco::epoch","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_data","","Constructs a tagged atomic pointer from raw data.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"null","","Returns a new, null atomic pointer tagged with `tag`.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","Allocates `data` on the heap and returns a new atomic pointer that points to it and is tagged with `tag`.",4,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_ptr","","Returns a new atomic pointer initialized with `ptr`.",4,{"inputs":[{"name":"ptr"}],"output":{"name":"self"}}],[11,"from_box","","Returns a new atomic pointer initialized with `b` and `tag`.",4,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","Returns a new atomic pointer initialized with `raw` and `tag`.",4,null],[11,"load","","Loads the tagged atomic pointer.",4,{"inputs":[{"name":"self"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"load_raw","","Loads the tagged atomic pointer as a raw pointer and a tag.",4,null],[11,"store","","Stores `new` tagged with `tag` into the atomic.",4,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":null}],[11,"store_box","","Stores `new` tagged with `tag` into the atomic and returns it.",4,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"store_raw","","Stores `new` tagged with `tag` into the atomic.",4,null],[11,"swap","","Stores `new` into the atomic, returning the old tagged pointer.",4,{"inputs":[{"name":"self"},{"name":"ptr"}],"output":{"name":"ptr"}}],[11,"swap_box","","Stores `new` tagged with `tag` into the atomic, returning the old tagged pointer.",4,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"pin"}],"output":{"name":"ptr"}}],[11,"swap_raw","","Stores `new` tagged with `tag` into the atomic, returning the old tagged pointer.",4,null],[11,"cas","","If the tagged atomic pointer is equal to `current`, stores `new`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_sc","","If the tagged atomic pointer is equal to `current`, stores `new`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_weak","","If the tagged atomic pointer is equal to `current`, stores `new`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_weak_sc","","If the tagged atomic pointer is equal to `current`, stores `new`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"ptr"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box_sc","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box_weak","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_box_weak_sc","","If the tagged atomic pointer is equal to `current`, stores `new` tagged with `tag`.",4,{"inputs":[{"name":"self"},{"name":"ptr"},{"name":"box"},{"name":"usize"}],"output":{"generics":["ptr"],"name":"result"}}],[11,"cas_raw","","If the tagged atomic pointer is equal to `current`, stores `new`.",4,null],[11,"cas_raw_weak","","If the tagged atomic pointer is equal to `current`, stores `new`.",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_data","","Constructs a nullable pointer from raw data.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"null","","Returns a null pointer with a tag.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","Constructs a tagged pointer from a raw pointer and tag.",5,null],[11,"is_null","","Returns `true` if the pointer is null.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts the pointer to a reference.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_raw","","Converts the pointer to a raw pointer.",5,null],[11,"unwrap","","Returns a reference to the pointing object.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"tag","","Returns the tag.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Constructs a new tagged pointer with a different tag.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[0,"garbage","","Garbage collection.",null,null],[3,"Bag","coco::epoch::garbage","Holds removed objects that will be eventually destroyed.",null,null],[12,"len","","Number of objects in the bag.",8,null],[12,"objects","","Removed objects.",8,null],[12,"epoch","","The global epoch at the moment when this bag got pushed into the queue.",8,null],[12,"next","","The next bag in the queue.",8,null],[3,"Garbage","","A garbage queue.",null,null],[12,"head","","Head of the queue.",6,null],[12,"tail","","Tail of the queue.",6,null],[12,"pending","","The next bag that will be pushed into the queue as soon as it gets full.",6,null],[5,"global","","Returns a reference to a global garbage, which is lazily initialized.",null,{"inputs":[],"output":{"name":"garbage"}}],[5,"push","","Pushes a bag into the global garbage.",null,{"inputs":[{"generics":["bag"],"name":"box"},{"name":"pin"}],"output":null}],[5,"collect","","Collects several bags from the global queue and destroys their objects.",null,{"inputs":[{"name":"pin"}],"output":null}],[7,"EPOCH","","The global epoch.",null,null],[17,"MAX_OBJECTS","","Maximum number of objects a bag can contain.",null,null],[11,"new","","Returns a new, empty bag.",8,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Returns `true` if the bag is empty.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_insert","","Attempts to insert a garbage object into the bag and returns `true` if succeeded.",8,null],[11,"destroy_all_objects","","Destroys all objects in the bag.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"new","coco::epoch","Returns a new, empty garbage queue.",6,{"inputs":[],"output":{"name":"self"}}],[11,"replace_pending","","Attempts to compare-and-swap the pending bag `old` with a new, empty one.",6,{"inputs":[{"name":"self"},{"generics":["bag"],"name":"ptr"},{"name":"pin"}],"output":{"generics":["ptr","ptr"],"name":"result"}}],[11,"defer_free","","Adds an object that will later be freed.",6,null],[11,"defer_drop","","Adds an object that will later be dropped and freed.",6,null],[11,"defer_destroy","","Adds an object that will later be destroyed using `destroy`.",6,null],[11,"flush","","Flushes the buffered garbage.",6,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"collect","","Collects some garbage from the queue and destroys it.",6,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"push","","Pushes a bag into the queue.",6,{"inputs":[{"name":"self"},{"generics":["bag"],"name":"box"},{"name":"pin"}],"output":null}],[11,"try_pop_if","","Attempts to pop a bag from the front of the queue and returns it if `condition` is met.",6,{"inputs":[{"name":"self"},{"name":"f"},{"name":"pin"}],"output":{"generics":["bag"],"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"thread","","Thread synchronization and pinning.",null,null],[3,"Harness","coco::epoch::thread","Holds thread-local data and unregisters the thread when dropped.",null,null],[12,"thread","","This thread's entry in the participants list.",9,null],[12,"is_pinned","","Whether the thread is currently pinned.",9,null],[12,"pin_count","","Total number of pinnings performed.",9,null],[12,"bag","","The local bag of objects that will be later freed.",9,null],[3,"Thread","","An entry in the linked list of participating threads.",null,null],[12,"state","","The least significant bit is set if the thread is currently pinned. The rest of the bits encode the current epoch.",10,null],[12,"next","","The next thread in the linked list of participants. If the tag is 1, this entry is deleted and can be unlinked from the list.",10,null],[3,"Pin","","A witness that the current thread is pinned.",null,null],[12,"bag","","A pointer to the cell within the harness, which holds a pointer to the local bag.",7,null],[5,"participants","","Returns a reference to the head pointer of the list of participating threads.",null,{"inputs":[],"output":{"name":"atomic"}}],[5,"try_advance","","Attempts to advance the global epoch.",null,{"inputs":[{"name":"pin"}],"output":null}],[5,"pin","","Pins the current thread.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"defer_free","","Stashes away an object that will later be freed.",null,null],[5,"flush","","Flushes the buffered thread-local garbage.",null,{"inputs":[{"name":"pin"}],"output":null}],[17,"HARNESS","","The thread registration harness.",null,null],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"set_pinned","","Marks the thread as pinned.",10,{"inputs":[{"name":"self"},{"name":"pin"}],"output":null}],[11,"set_unpinned","","Marks the thread as unpinned.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"register","","Registers a thread by adding a new entry to the list of participanting threads.",10,null],[11,"unregister","","Unregisters the thread by marking it's entry as deleted.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","coco::epoch","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stack","coco","A lock-free stack.",null,null],[3,"Node","coco::stack","A single node in a stack.",null,null],[12,"value","","The payload.",11,null],[12,"next","","The next node in the stack.",11,null],[3,"Stack","","A lock-free stack.",null,null],[12,"head","","",12,null],[11,"new","","Returns a new, empty stack.",12,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Returns `true` if the stack is empty.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Pushes a new value onto the stack.",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attemps to pop an value from the stack.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Buffer"],[3,"Deque"],[3,"Worker"],[3,"Stealer"],[3,"Atomic"],[3,"Ptr"],[3,"Garbage"],[3,"Pin"],[3,"Bag"],[3,"Harness"],[3,"Thread"],[3,"Node"],[3,"Stack"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[12,"dtors","","",0,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[12,"inner","","",1,null],[12,"packet","","",1,null],[12,"thread","","",1,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[12,"data","","",2,null],[12,"_marker","","",2,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[12,"ptr","","",3,null],[12,"_marker","","",3,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[12,"_marker","","",4,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[12,"data","","",5,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[12,"data","","",6,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[0,"atomic","","",null,null],[3,"Atomic","crossbeam::mem::epoch::atomic","Like `std::sync::atomic::AtomicPtr`.",null,null],[12,"ptr","","",3,null],[12,"_marker","","",3,null],[5,"opt_shared_into_raw","","",null,null],[5,"opt_owned_as_raw","","",null,null],[5,"opt_owned_into_raw","","",null,null],[11,"fmt","crossbeam::mem::epoch","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",3,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",3,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",3,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",3,{"inputs":[{"name":"self"},{"generics":["owned"],"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",3,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",3,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",3,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"generics":["owned"],"name":"option"},{"name":"ordering"}],"output":{"generics":["option"],"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",3,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared","owned"],"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",3,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"generics":["shared"],"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",3,{"inputs":[{"name":"self"},{"generics":["owned"],"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",3,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[0,"garbage","","",null,null],[3,"Item","crossbeam::mem::epoch::garbage","One item of garbage.",null,null],[12,"ptr","","",7,null],[12,"free","","",7,null],[3,"Bag","","A single, thread-local bag of garbage.",null,null],[12,"0","","",8,null],[3,"Local","","A thread-local set of garbage bags.",null,null],[12,"old","","Garbage added at least one epoch behind the current local epoch",9,null],[12,"cur","","Garbage added in the current local epoch or earlier",9,null],[12,"new","","Garbage added in the current global epoch",9,null],[3,"ConcBag","","A concurrent garbage bag, currently based on Treiber's stack.",null,null],[12,"head","","",10,null],[3,"Node","","",null,null],[12,"data","","",11,null],[12,"next","","",11,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"bag"}}],[11,"insert","","",8,null],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"collect","","Deallocate all garbage in the bag",8,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"local"}}],[11,"insert","","",9,null],[11,"collect","","Collect one epoch of garbage, rotating the local garbage bags.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","",10,{"inputs":[{"name":"self"},{"name":"bag"}],"output":null}],[11,"collect","","",10,{"inputs":[{"name":"self"}],"output":null}],[0,"global","crossbeam::mem::epoch","",null,null],[3,"EpochState","crossbeam::mem::epoch::global","Global epoch state",null,null],[12,"epoch","","Current global epoch",12,null],[12,"garbage","","Global garbage bags",12,null],[12,"participants","","Participant list",12,null],[0,"imp","","",null,null],[5,"get","crossbeam::mem::epoch::global::imp","",null,{"inputs":[],"output":{"name":"epochstate"}}],[7,"EPOCH","","",null,null],[11,"new","crossbeam::mem::epoch::global","",12,{"inputs":[],"output":{"name":"epochstate"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"guard","crossbeam::mem::epoch","",null,null],[3,"Guard","crossbeam::mem::epoch::guard","An RAII-style guard for pinning the current epoch.",null,null],[12,"_marker","","",4,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","crossbeam::mem::epoch","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",4,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[0,"local","","",null,null],[3,"LocalEpoch","crossbeam::mem::epoch::local","",null,null],[12,"participant","","",13,null],[5,"with_participant","","",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[17,"LOCAL_EPOCH","","",null,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"localepoch"}}],[11,"get","","",13,{"inputs":[{"name":"self"}],"output":{"name":"participant"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[0,"participant","crossbeam::mem::epoch","",null,null],[3,"Participant","crossbeam::mem::epoch::participant","Thread-local data for epoch participation.",null,null],[12,"epoch","","The local epoch.",14,null],[12,"in_critical","","Number of pending uses of `epoch::pin()`; keeping a count allows for reentrant use of epoch management.",14,null],[12,"garbage","","Thread-local garbage tracking",14,null],[12,"active","","Is the thread still active? Becomes `false` when the thread exits. This is ultimately used to free `Participant` records.",14,null],[12,"next","","The participant list is coded intrusively; here's the `next` pointer.",14,null],[17,"GC_THRESH","","",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"participant"}}],[11,"enter","","Enter a critical section.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Exit the current (nested) critical section.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"reclaim","","Begin the reclamation process for a piece of data.",14,null],[11,"try_collect","","Attempt to collect garbage by moving the global epoch forward.",14,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"bool"}}],[11,"migrate_garbage","","Move the current thread-local garbage into the global garbage bags.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"garbage_size","","How much garbage is this participant currently storing?",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"should_gc","","Is this participant past its local GC threshhold?",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"participants","crossbeam::mem::epoch","",null,null],[3,"Participants","crossbeam::mem::epoch::participants","Global, threadsafe list of threads participating in epoch management.",null,null],[12,"head","","",15,null],[3,"ParticipantNode","","",null,null],[12,"0","","",16,null],[3,"Iter","","",null,null],[12,"guard","","",17,null],[12,"next","","",17,null],[12,"needs_acq","","",17,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"participantnode"}}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"participant"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"participant"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"participants"}}],[11,"enroll","","Enroll a new thread in epoch management by adding a new `Particpant` record to the global list.",15,null],[11,"iter","","",15,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"iter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["participant"],"name":"option"}}],[11,"fmt","crossbeam::mem::epoch","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",5,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"as_raw","","",5,null],[11,"into_inner","","Move data out of the owned box, deallocating the box.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_raw","","",6,null],[11,"from_ref","","",6,{"inputs":[{"name":"t"}],"output":{"name":"shared"}}],[11,"from_owned","","",6,{"inputs":[{"name":"owned"}],"output":{"name":"shared"}}],[11,"as_raw","","",6,null],[0,"cache_padded","crossbeam::mem","",null,null],[3,"Padding","crossbeam::mem::cache_padded","",null,null],[12,"0","","",18,null],[12,"1","","",18,null],[12,"2","","",18,null],[12,"3","","",18,null],[3,"CachePadded","","Pad `T` to the length of a cacheline.",null,null],[12,"data","","",2,null],[12,"_marker","","",2,null],[5,"assert_valid","","Assert that the size and alignment of `T` are consistent with `CachePadded<T>`.",null,{"inputs":[],"output":null}],[17,"CACHE_LINE","","",null,null],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","crossbeam::mem","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",2,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",2,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[12,"head","","",19,null],[12,"tail","","",19,null],[3,"AtomicOption","","",null,null],[12,"inner","","",20,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[12,"head","","",21,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[12,"head","","",22,null],[12,"tail","","",22,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[12,"0","","",23,null],[12,"1","","",23,null],[0,"atomic_option","","",null,null],[3,"AtomicOption","crossbeam::sync::atomic_option","",null,null],[12,"inner","","",20,null],[11,"fmt","crossbeam::sync","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_inner","","",20,null],[11,"swap_box","","",20,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",20,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",20,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[0,"ms_queue","","",null,null],[3,"MsQueue","crossbeam::sync::ms_queue","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[12,"head","","",19,null],[12,"tail","","",19,null],[3,"Node","","",null,null],[12,"payload","","",24,null],[12,"next","","",24,null],[3,"Signal","","A blocked request for data, which includes a slot to write the data.",null,null],[12,"thread","","Thread to unpark when data is ready.",25,null],[12,"data","","The actual data, when available.",25,null],[12,"ready","","Is the data ready? Needed to cope with spurious wakeups.",25,null],[4,"Payload","","",null,null],[13,"Data","","A node with actual data that can be popped.",26,null],[13,"Blocked","","A node representing a blocked request for data.",26,null],[11,"fmt","crossbeam::sync","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","crossbeam::sync::ms_queue","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_data","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","crossbeam::sync","Create a new, empty queue.",19,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push_internal","","Attempt to atomically place `n` into the `next` pointer of `onto`.",19,{"inputs":[{"name":"self"},{"name":"guard"},{"generics":["node"],"name":"shared"},{"generics":["node"],"name":"owned"}],"output":{"generics":["owned"],"name":"result"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop_internal","","",19,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"generics":["option"],"name":"result"}}],[11,"is_empty","","Check if this queue is empty.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"treiber_stack","","",null,null],[3,"TreiberStack","crossbeam::sync::treiber_stack","Treiber's lock-free stack.",null,null],[12,"head","","",21,null],[3,"Node","","",null,null],[12,"data","","",27,null],[12,"next","","",27,null],[11,"fmt","crossbeam::sync","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","crossbeam::sync::treiber_stack","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","crossbeam::sync","Create a new, empty stack.",21,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"seg_queue","","",null,null],[3,"SegQueue","crossbeam::sync::seg_queue","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[12,"head","","",22,null],[12,"tail","","",22,null],[3,"Segment","","",null,null],[12,"low","","",28,null],[12,"data","","",28,null],[12,"high","","",28,null],[12,"next","","",28,null],[17,"SEG_SIZE","","",null,null],[11,"fmt","crossbeam::sync","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","crossbeam::sync::seg_queue","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"segment"}}],[11,"new","crossbeam::sync","Create a new, empty queue.",22,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Attempt to dequeue from the front.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Deque","crossbeam::sync::chase_lev","",null,null],[12,"bottom","","",29,null],[12,"top","","",29,null],[12,"array","","",29,null],[3,"Worker","","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[12,"deque","","",30,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[12,"deque","","",31,null],[3,"Buffer","","",null,null],[12,"storage","","",32,null],[12,"log_size","","",32,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",33,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",33,null],[13,"Data","","The stealer has successfully stolen some data.",33,null],[5,"deque","","Creates a new empty deque",null,null],[17,"K","","",null,null],[17,"MIN_BITS","","",null,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",31,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"deque"}}],[11,"push","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","",29,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"maybe_shrink","","",29,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"guard"}],"output":null}],[11,"swap_buffer","","",29,{"inputs":[{"name":"self"},{"generics":["buffer"],"name":"shared"},{"name":"buffer"},{"name":"guard"}],"output":{"generics":["buffer"],"name":"shared"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",32,{"inputs":[{"name":"u32"}],"output":{"name":"buffer"}}],[11,"size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"mask","","",32,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"elem","","",32,null],[11,"get","","",32,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"t"}}],[11,"put","","",32,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"t"}],"output":null}],[11,"resize","","",32,{"inputs":[{"name":"self"},{"name":"isize"},{"name":"isize"},{"name":"i32"}],"output":{"name":"buffer"}}],[0,"arc_cell","crossbeam::sync","",null,null],[3,"ArcCell","crossbeam::sync::arc_cell","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[12,"0","","",23,null],[12,"1","","",23,null],[11,"fmt","crossbeam::sync","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",23,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"take","","",23,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"put","","",23,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",23,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",23,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[0,"scoped","crossbeam","",null,null],[3,"Scope","crossbeam::scoped","",null,null],[12,"dtors","","",0,null],[3,"DtorChain","","",null,null],[12,"dtor","","",34,null],[12,"next","","",34,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[12,"inner","","",1,null],[12,"packet","","",1,null],[12,"thread","","",1,null],[4,"JoinState","","",null,null],[13,"Running","","",35,null],[13,"Joined","","",35,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"join","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","crossbeam","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop_all","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"defer","","Schedule code to be executed when exiting the scope.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",1,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[8,"FnBox","","",null,null],[10,"call_box","","",36,{"inputs":[{"name":"box"}],"output":null}]],"paths":[[3,"Scope"],[3,"ScopedJoinHandle"],[3,"CachePadded"],[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"Item"],[3,"Bag"],[3,"Local"],[3,"ConcBag"],[3,"Node"],[3,"EpochState"],[3,"LocalEpoch"],[3,"Participant"],[3,"Participants"],[3,"ParticipantNode"],[3,"Iter"],[3,"Padding"],[3,"MsQueue"],[3,"AtomicOption"],[3,"TreiberStack"],[3,"SegQueue"],[3,"ArcCell"],[3,"Node"],[3,"Signal"],[4,"Payload"],[3,"Node"],[3,"Segment"],[3,"Deque"],[3,"Worker"],[3,"Stealer"],[3,"Buffer"],[4,"Steal"],[3,"DtorChain"],[4,"JoinState"],[8,"FnBox"]]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[14,"debug_unreachable","debug_unreachable","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[0,"diyfp","","",null,null],[3,"DiyFp","dtoa::diyfp","",null,null],[12,"f","","",0,null],[12,"e","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"diyfp"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"self"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"dtoa","dtoa","",null,null],[7,"DEC_DIGITS_LUT","","",null,null],[7,"CACHED_POWERS_F_32","","",null,null],[7,"CACHED_POWERS_E_32","","",null,null],[7,"CACHED_POWERS_F_64","","",null,null],[7,"CACHED_POWERS_E_64","","",null,null],[17,"MAX_DECIMAL_PLACES","","",null,null],[8,"Floating","","",null,null],[10,"write","","",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[3,"DiyFp"],[8,"Floating"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["enum_kind"] = {"doc":"Atributes on enum ## functions `#[kind(functions(name = \"return_type\"))]`","items":[[5,"derive_kind","enum_kind","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"expand","","",null,null],[5,"expand","enum_kind::expand","",null,{"inputs":[{"name":"input"}],"output":{"name":"item"}}],[0,"input","enum_kind","",null,null],[3,"Input","enum_kind::input","Parsed input.",null,null],[12,"attrs","","",0,null],[12,"name","","Name of enum.",0,null],[12,"vis","","",0,null],[12,"generics","","",0,null],[12,"variants","","",0,null],[3,"EnumAttrs","","",null,null],[12,"fns","","",1,null],[12,"extras","","",1,null],[3,"FnDef","","Function to generate.",null,null],[12,"name","","Name of function.",2,null],[12,"return_type","","",2,null],[12,"default_value","","",2,null],[3,"EnumVar","","Variant of enum.",null,null],[12,"name","","Name of variant.",3,null],[12,"attrs","","",3,null],[12,"data","","",3,null],[3,"VariantAttrs","","Parsed attributes.",null,null],[12,"fn_values","","",4,null],[12,"extras","","",4,null],[12,"has_delegate","","Does this variant has `#[kind(delegate)]`?",4,null],[3,"VariantAttr","","",null,null],[12,"fn_name","","",5,null],[12,"value","","",5,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"enumattrs"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"variantattrs"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"parse","enum_kind","",null,null],[5,"parse_attrs","enum_kind::parse","Parse kind attr as MetaItem.",null,{"inputs":[{"generics":["attribute"],"name":"vec"}],"output":{"name":"t"}}],[5,"parse_str_as_tokens","","Parse content of string literal.",null,{"inputs":[{"name":"litstr"}],"output":{"name":"t"}}],[11,"from","enum_kind::input","",0,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"parse","","",1,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"result"}],"output":null}],[11,"def_value_for_type","","",2,{"inputs":[{"name":"type"}],"output":{"generics":["expr"],"name":"option"}}],[11,"parse","","",2,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"from","","",3,{"inputs":[{"name":"variant"}],"output":{"name":"self"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"add_assign","","",4,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"result"}],"output":null}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"util","enum_kind","",null,null],[5,"is_bool","enum_kind::util","",null,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"expand","enum_kind::input","",2,null]],"paths":[[3,"Input"],[3,"EnumAttrs"],[3,"FnDef"],[3,"EnumVar"],[3,"VariantAttrs"],[3,"VariantAttr"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[12,"0","","",0,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["isatty"] = {"doc":"This crate provides the following three functions:","items":[[5,"stdin_isatty","isatty","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"stdout_isatty","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"stderr_isatty","","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"stream","","",null,null],[4,"Stream","isatty::stream","",null,null],[13,"Stdin","","",0,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[0,"unix","isatty","",null,null],[5,"isatty","isatty::unix","",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}]],"paths":[[4,"Stream"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[17,"DEC_DIGITS_LUT","","",null,null],[17,"MAX_LEN","","",null,null],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[8,"IntegerPrivate","","",null,null],[10,"write_to","","",1,null]],"paths":[[8,"Integer"],[8,"IntegerPrivate"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[0,"lazy","","",null,null],[17,"ONCE_INIT","lazy_static::lazy","Initialization value for static [`Once`] values.",null,null],[3,"Lazy","","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[8,"LazyStatic","lazy_static","Support trait for enabling a few common operation on lazy static values.",null,null],[10,"initialize","","",1,{"inputs":[{"name":"self"}],"output":null}],[14,"__lazy_static_create","","",null,null],[14,"__lazy_static_internal","","",null,null],[14,"lazy_static","","",null,null]],"paths":[[3,"Lazy"],[8,"LazyStatic"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[12,"__align","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[12,"__ss_align","","",24,null],[12,"__ss_pad2","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pad","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[12,"fds_bits","","",28,null],[3,"tm","","",null,null],[12,"tm_sec","","",29,null],[12,"tm_min","","",29,null],[12,"tm_hour","","",29,null],[12,"tm_mday","","",29,null],[12,"tm_mon","","",29,null],[12,"tm_year","","",29,null],[12,"tm_wday","","",29,null],[12,"tm_yday","","",29,null],[12,"tm_isdst","","",29,null],[12,"tm_gmtoff","","",29,null],[12,"tm_zone","","",29,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",30,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",31,null],[12,"dli_fbase","","",31,null],[12,"dli_sname","","",31,null],[12,"dli_saddr","","",31,null],[3,"epoll_event","","",null,null],[12,"events","","",32,null],[12,"u64","","",32,null],[3,"utsname","","",null,null],[12,"sysname","","",33,null],[12,"nodename","","",33,null],[12,"release","","",33,null],[12,"version","","",33,null],[12,"machine","","",33,null],[12,"domainname","","",33,null],[3,"lconv","","",null,null],[12,"decimal_point","","",34,null],[12,"thousands_sep","","",34,null],[12,"grouping","","",34,null],[12,"int_curr_symbol","","",34,null],[12,"currency_symbol","","",34,null],[12,"mon_decimal_point","","",34,null],[12,"mon_thousands_sep","","",34,null],[12,"mon_grouping","","",34,null],[12,"positive_sign","","",34,null],[12,"negative_sign","","",34,null],[12,"int_frac_digits","","",34,null],[12,"frac_digits","","",34,null],[12,"p_cs_precedes","","",34,null],[12,"p_sep_by_space","","",34,null],[12,"n_cs_precedes","","",34,null],[12,"n_sep_by_space","","",34,null],[12,"p_sign_posn","","",34,null],[12,"n_sign_posn","","",34,null],[12,"int_p_cs_precedes","","",34,null],[12,"int_p_sep_by_space","","",34,null],[12,"int_n_cs_precedes","","",34,null],[12,"int_n_sep_by_space","","",34,null],[12,"int_p_sign_posn","","",34,null],[12,"int_n_sign_posn","","",34,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",35,null],[12,"sigev_signo","","",35,null],[12,"sigev_notify","","",35,null],[12,"sigev_notify_thread_id","","",35,null],[12,"__unused1","","",35,null],[3,"dirent","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"dirent64","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",38,null],[12,"rlim_max","","",38,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[12,"__unused1","","",39,null],[12,"__unused2","","",39,null],[12,"__unused3","","",39,null],[12,"__unused4","","",39,null],[12,"__unused5","","",39,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",40,null],[12,"ifa_name","","",40,null],[12,"ifa_flags","","",40,null],[12,"ifa_addr","","",40,null],[12,"ifa_netmask","","",40,null],[12,"ifa_ifu","","",40,null],[12,"ifa_data","","",40,null],[3,"pthread_mutex_t","","",null,null],[12,"__align","","",41,null],[12,"size","","",41,null],[3,"pthread_rwlock_t","","",null,null],[12,"__align","","",42,null],[12,"size","","",42,null],[3,"pthread_mutexattr_t","","",null,null],[12,"__align","","",43,null],[12,"size","","",43,null],[3,"pthread_rwlockattr_t","","",null,null],[12,"__align","","",44,null],[12,"size","","",44,null],[3,"pthread_cond_t","","",null,null],[12,"__align","","",45,null],[12,"size","","",45,null],[3,"pthread_condattr_t","","",null,null],[12,"__align","","",46,null],[12,"size","","",46,null],[3,"passwd","","",null,null],[12,"pw_name","","",47,null],[12,"pw_passwd","","",47,null],[12,"pw_uid","","",47,null],[12,"pw_gid","","",47,null],[12,"pw_gecos","","",47,null],[12,"pw_dir","","",47,null],[12,"pw_shell","","",47,null],[3,"spwd","","",null,null],[12,"sp_namp","","",48,null],[12,"sp_pwdp","","",48,null],[12,"sp_lstchg","","",48,null],[12,"sp_min","","",48,null],[12,"sp_max","","",48,null],[12,"sp_warn","","",48,null],[12,"sp_inact","","",48,null],[12,"sp_expire","","",48,null],[12,"sp_flag","","",48,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",49,null],[12,"f_frsize","","",49,null],[12,"f_blocks","","",49,null],[12,"f_bfree","","",49,null],[12,"f_bavail","","",49,null],[12,"f_files","","",49,null],[12,"f_ffree","","",49,null],[12,"f_favail","","",49,null],[12,"f_fsid","","",49,null],[12,"f_flag","","",49,null],[12,"f_namemax","","",49,null],[12,"__f_spare","","",49,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",50,null],[12,"dqb_bsoftlimit","","",50,null],[12,"dqb_curspace","","",50,null],[12,"dqb_ihardlimit","","",50,null],[12,"dqb_isoftlimit","","",50,null],[12,"dqb_curinodes","","",50,null],[12,"dqb_btime","","",50,null],[12,"dqb_itime","","",50,null],[12,"dqb_valid","","",50,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",51,null],[12,"ssi_errno","","",51,null],[12,"ssi_code","","",51,null],[12,"ssi_pid","","",51,null],[12,"ssi_uid","","",51,null],[12,"ssi_fd","","",51,null],[12,"ssi_tid","","",51,null],[12,"ssi_band","","",51,null],[12,"ssi_overrun","","",51,null],[12,"ssi_trapno","","",51,null],[12,"ssi_status","","",51,null],[12,"ssi_int","","",51,null],[12,"ssi_ptr","","",51,null],[12,"ssi_utime","","",51,null],[12,"ssi_stime","","",51,null],[12,"ssi_addr","","",51,null],[12,"_pad","","",51,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",52,null],[12,"it_value","","",52,null],[3,"fsid_t","","",null,null],[12,"__val","","",53,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",54,null],[12,"mq_maxmsg","","",54,null],[12,"mq_msgsize","","",54,null],[12,"mq_curmsgs","","",54,null],[12,"pad","","",54,null],[3,"cpu_set_t","","",null,null],[12,"bits","","",55,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",56,null],[12,"if_name","","",56,null],[3,"msginfo","","",null,null],[12,"msgpool","","",57,null],[12,"msgmap","","",57,null],[12,"msgmax","","",57,null],[12,"msgmnb","","",57,null],[12,"msgmni","","",57,null],[12,"msgssz","","",57,null],[12,"msgtql","","",57,null],[12,"msgseg","","",57,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",58,null],[12,"msg_len","","",58,null],[3,"sembuf","","",null,null],[12,"sem_num","","",59,null],[12,"sem_op","","",59,null],[12,"sem_flg","","",59,null],[3,"input_event","","",null,null],[12,"time","","",60,null],[12,"type_","","",60,null],[12,"code","","",60,null],[12,"value","","",60,null],[3,"input_id","","",null,null],[12,"bustype","","",61,null],[12,"vendor","","",61,null],[12,"product","","",61,null],[12,"version","","",61,null],[3,"input_absinfo","","",null,null],[12,"value","","",62,null],[12,"minimum","","",62,null],[12,"maximum","","",62,null],[12,"fuzz","","",62,null],[12,"flat","","",62,null],[12,"resolution","","",62,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",63,null],[12,"len","","",63,null],[12,"index","","",63,null],[12,"keycode","","",63,null],[12,"scancode","","",63,null],[3,"input_mask","","",null,null],[12,"type_","","",64,null],[12,"codes_size","","",64,null],[12,"codes_ptr","","",64,null],[3,"ff_replay","","",null,null],[12,"length","","",65,null],[12,"delay","","",65,null],[3,"ff_trigger","","",null,null],[12,"button","","",66,null],[12,"interval","","",66,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",67,null],[12,"attack_level","","",67,null],[12,"fade_length","","",67,null],[12,"fade_level","","",67,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",68,null],[12,"envelope","","",68,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",69,null],[12,"end_level","","",69,null],[12,"envelope","","",69,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",70,null],[12,"left_saturation","","",70,null],[12,"right_coeff","","",70,null],[12,"left_coeff","","",70,null],[12,"deadband","","",70,null],[12,"center","","",70,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",71,null],[12,"period","","",71,null],[12,"magnitude","","",71,null],[12,"offset","","",71,null],[12,"phase","","",71,null],[12,"envelope","","",71,null],[12,"custom_len","","",71,null],[12,"custom_data","","",71,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",72,null],[12,"weak_magnitude","","",72,null],[3,"ff_effect","","",null,null],[12,"type_","","",73,null],[12,"id","","",73,null],[12,"direction","","",73,null],[12,"trigger","","",73,null],[12,"replay","","",73,null],[12,"u","","",73,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",74,null],[12,"dlpi_name","","",74,null],[12,"dlpi_phdr","","",74,null],[12,"dlpi_phnum","","",74,null],[12,"dlpi_adds","","",74,null],[12,"dlpi_subs","","",74,null],[12,"dlpi_tls_modid","","",74,null],[12,"dlpi_tls_data","","",74,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",75,null],[12,"p_offset","","",75,null],[12,"p_vaddr","","",75,null],[12,"p_paddr","","",75,null],[12,"p_filesz","","",75,null],[12,"p_memsz","","",75,null],[12,"p_flags","","",75,null],[12,"p_align","","",75,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",76,null],[12,"p_flags","","",76,null],[12,"p_offset","","",76,null],[12,"p_vaddr","","",76,null],[12,"p_paddr","","",76,null],[12,"p_filesz","","",76,null],[12,"p_memsz","","",76,null],[12,"p_align","","",76,null],[3,"ucred","","",null,null],[12,"pid","","",77,null],[12,"uid","","",77,null],[12,"gid","","",77,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",78,null],[12,"mnt_dir","","",78,null],[12,"mnt_type","","",78,null],[12,"mnt_opts","","",78,null],[12,"mnt_freq","","",78,null],[12,"mnt_passno","","",78,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",79,null],[12,"aio_lio_opcode","","",79,null],[12,"aio_reqprio","","",79,null],[12,"aio_buf","","",79,null],[12,"aio_nbytes","","",79,null],[12,"aio_sigevent","","",79,null],[12,"__next_prio","","",79,null],[12,"__abs_prio","","",79,null],[12,"__policy","","",79,null],[12,"__error_code","","",79,null],[12,"__return_value","","",79,null],[12,"aio_offset","","",79,null],[12,"__glibc_reserved","","",79,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",80,null],[12,"e_exit","","",80,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",81,null],[12,"tv_usec","","",81,null],[3,"utmpx","","",null,null],[12,"ut_type","","",82,null],[12,"ut_pid","","",82,null],[12,"ut_line","","",82,null],[12,"ut_id","","",82,null],[12,"ut_user","","",82,null],[12,"ut_host","","",82,null],[12,"ut_exit","","",82,null],[12,"ut_session","","",82,null],[12,"ut_tv","","",82,null],[12,"ut_addr_v6","","",82,null],[12,"__glibc_reserved","","",82,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",83,null],[12,"sa_mask","","",83,null],[12,"sa_flags","","",83,null],[12,"sa_restorer","","",83,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",84,null],[12,"ss_flags","","",84,null],[12,"ss_size","","",84,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",85,null],[12,"si_errno","","",85,null],[12,"si_code","","",85,null],[12,"_pad","","",85,null],[12,"_align","","",85,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",86,null],[12,"gl_pathv","","",86,null],[12,"gl_offs","","",86,null],[12,"gl_flags","","",86,null],[12,"__unused1","","",86,null],[12,"__unused2","","",86,null],[12,"__unused3","","",86,null],[12,"__unused4","","",86,null],[12,"__unused5","","",86,null],[3,"statfs","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_spare","","",87,null],[3,"msghdr","","",null,null],[12,"msg_name","","",88,null],[12,"msg_namelen","","",88,null],[12,"msg_iov","","",88,null],[12,"msg_iovlen","","",88,null],[12,"msg_control","","",88,null],[12,"msg_controllen","","",88,null],[12,"msg_flags","","",88,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",89,null],[12,"cmsg_level","","",89,null],[12,"cmsg_type","","",89,null],[3,"termios","","",null,null],[12,"c_iflag","","",90,null],[12,"c_oflag","","",90,null],[12,"c_cflag","","",90,null],[12,"c_lflag","","",90,null],[12,"c_line","","",90,null],[12,"c_cc","","",90,null],[12,"c_ispeed","","",90,null],[12,"c_ospeed","","",90,null],[3,"flock","","",null,null],[12,"l_type","","",91,null],[12,"l_whence","","",91,null],[12,"l_start","","",91,null],[12,"l_len","","",91,null],[12,"l_pid","","",91,null],[3,"sem_t","","",null,null],[12,"__size","","",92,null],[12,"__align","","",92,null],[3,"sigset_t","","",null,null],[12,"__val","","",93,null],[3,"sysinfo","","",null,null],[12,"uptime","","",94,null],[12,"loads","","",94,null],[12,"totalram","","",94,null],[12,"freeram","","",94,null],[12,"sharedram","","",94,null],[12,"bufferram","","",94,null],[12,"totalswap","","",94,null],[12,"freeswap","","",94,null],[12,"procs","","",94,null],[12,"pad","","",94,null],[12,"totalhigh","","",94,null],[12,"freehigh","","",94,null],[12,"mem_unit","","",94,null],[12,"_f","","",94,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",95,null],[12,"msg_stime","","",95,null],[12,"msg_rtime","","",95,null],[12,"msg_ctime","","",95,null],[12,"__msg_cbytes","","",95,null],[12,"msg_qnum","","",95,null],[12,"msg_qbytes","","",95,null],[12,"msg_lspid","","",95,null],[12,"msg_lrpid","","",95,null],[12,"__glibc_reserved4","","",95,null],[12,"__glibc_reserved5","","",95,null],[3,"stat","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"__pad0","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[12,"__unused","","",96,null],[3,"stat64","","",null,null],[12,"st_dev","","",97,null],[12,"st_ino","","",97,null],[12,"st_nlink","","",97,null],[12,"st_mode","","",97,null],[12,"st_uid","","",97,null],[12,"st_gid","","",97,null],[12,"__pad0","","",97,null],[12,"st_rdev","","",97,null],[12,"st_size","","",97,null],[12,"st_blksize","","",97,null],[12,"st_blocks","","",97,null],[12,"st_atime","","",97,null],[12,"st_atime_nsec","","",97,null],[12,"st_mtime","","",97,null],[12,"st_mtime_nsec","","",97,null],[12,"st_ctime","","",97,null],[12,"st_ctime_nsec","","",97,null],[12,"__reserved","","",97,null],[3,"statfs64","","",null,null],[12,"f_type","","",98,null],[12,"f_bsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_fsid","","",98,null],[12,"f_namelen","","",98,null],[12,"f_frsize","","",98,null],[12,"f_flags","","",98,null],[12,"f_spare","","",98,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",99,null],[12,"f_frsize","","",99,null],[12,"f_blocks","","",99,null],[12,"f_bfree","","",99,null],[12,"f_bavail","","",99,null],[12,"f_files","","",99,null],[12,"f_ffree","","",99,null],[12,"f_favail","","",99,null],[12,"f_fsid","","",99,null],[12,"f_flag","","",99,null],[12,"f_namemax","","",99,null],[12,"__f_spare","","",99,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",100,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",101,null],[12,"exponent","","",101,null],[12,"__private","","",101,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",102,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",103,null],[12,"swd","","",103,null],[12,"ftw","","",103,null],[12,"fop","","",103,null],[12,"rip","","",103,null],[12,"rdp","","",103,null],[12,"mxcsr","","",103,null],[12,"mxcr_mask","","",103,null],[12,"_st","","",103,null],[12,"_xmm","","",103,null],[12,"__private","","",103,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",104,null],[12,"swd","","",104,null],[12,"ftw","","",104,null],[12,"fop","","",104,null],[12,"rip","","",104,null],[12,"rdp","","",104,null],[12,"mxcsr","","",104,null],[12,"mxcr_mask","","",104,null],[12,"st_space","","",104,null],[12,"xmm_space","","",104,null],[12,"padding","","",104,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",105,null],[12,"r14","","",105,null],[12,"r13","","",105,null],[12,"r12","","",105,null],[12,"rbp","","",105,null],[12,"rbx","","",105,null],[12,"r11","","",105,null],[12,"r10","","",105,null],[12,"r9","","",105,null],[12,"r8","","",105,null],[12,"rax","","",105,null],[12,"rcx","","",105,null],[12,"rdx","","",105,null],[12,"rsi","","",105,null],[12,"rdi","","",105,null],[12,"orig_rax","","",105,null],[12,"rip","","",105,null],[12,"cs","","",105,null],[12,"eflags","","",105,null],[12,"rsp","","",105,null],[12,"ss","","",105,null],[12,"fs_base","","",105,null],[12,"gs_base","","",105,null],[12,"ds","","",105,null],[12,"es","","",105,null],[12,"fs","","",105,null],[12,"gs","","",105,null],[3,"user","","",null,null],[12,"regs","","",106,null],[12,"u_fpvalid","","",106,null],[12,"i387","","",106,null],[12,"u_tsize","","",106,null],[12,"u_dsize","","",106,null],[12,"u_ssize","","",106,null],[12,"start_code","","",106,null],[12,"start_stack","","",106,null],[12,"signal","","",106,null],[12,"__reserved","","",106,null],[12,"u_ar0","","",106,null],[12,"u_fpstate","","",106,null],[12,"magic","","",106,null],[12,"u_comm","","",106,null],[12,"u_debugreg","","",106,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",107,null],[12,"fpregs","","",107,null],[12,"__private","","",107,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",108,null],[12,"uc_link","","",108,null],[12,"uc_stack","","",108,null],[12,"uc_mcontext","","",108,null],[12,"uc_sigmask","","",108,null],[12,"__private","","",108,null],[3,"ipc_perm","","",null,null],[12,"__key","","",109,null],[12,"uid","","",109,null],[12,"gid","","",109,null],[12,"cuid","","",109,null],[12,"cgid","","",109,null],[12,"mode","","",109,null],[12,"__pad1","","",109,null],[12,"__seq","","",109,null],[12,"__pad2","","",109,null],[12,"__unused1","","",109,null],[12,"__unused2","","",109,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",110,null],[12,"shm_segsz","","",110,null],[12,"shm_atime","","",110,null],[12,"shm_dtime","","",110,null],[12,"shm_ctime","","",110,null],[12,"shm_cpid","","",110,null],[12,"shm_lpid","","",110,null],[12,"shm_nattch","","",110,null],[12,"__unused4","","",110,null],[12,"__unused5","","",110,null],[3,"termios2","","",null,null],[12,"c_iflag","","",111,null],[12,"c_oflag","","",111,null],[12,"c_cflag","","",111,null],[12,"c_lflag","","",111,null],[12,"c_line","","",111,null],[12,"c_cc","","",111,null],[12,"c_ispeed","","",111,null],[12,"c_ospeed","","",111,null],[4,"c_void","","",null,null],[13,"__variant1","","",112,null],[13,"__variant2","","",112,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[0,"macros","","",null,null],[0,"dox","","",null,null],[0,"imp","libc::dox","",null,null],[4,"Option","libc::dox::imp","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",113,null],[13,"Some","","Some value `T`",113,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",114,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",114,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[0,"mem","","Basic functions for dealing with memory.",null,null],[5,"forget","libc::dox::imp::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[12,"0","","",115,null],[12,"1","","",115,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[12,"value","","",116,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"unix","libc","Definitions found commonly among almost all Unix derivatives",null,null],[3,"group","libc::unix","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[12,"__align","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[0,"notbsd","","",null,null],[3,"sockaddr","libc::unix::notbsd","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[12,"__ss_align","","",24,null],[12,"__ss_pad2","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pad","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[12,"fds_bits","","",28,null],[3,"tm","","",null,null],[12,"tm_sec","","",29,null],[12,"tm_min","","",29,null],[12,"tm_hour","","",29,null],[12,"tm_mday","","",29,null],[12,"tm_mon","","",29,null],[12,"tm_year","","",29,null],[12,"tm_wday","","",29,null],[12,"tm_yday","","",29,null],[12,"tm_isdst","","",29,null],[12,"tm_gmtoff","","",29,null],[12,"tm_zone","","",29,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",30,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",31,null],[12,"dli_fbase","","",31,null],[12,"dli_sname","","",31,null],[12,"dli_saddr","","",31,null],[3,"epoll_event","","",null,null],[12,"events","","",32,null],[12,"u64","","",32,null],[3,"utsname","","",null,null],[12,"sysname","","",33,null],[12,"nodename","","",33,null],[12,"release","","",33,null],[12,"version","","",33,null],[12,"machine","","",33,null],[12,"domainname","","",33,null],[3,"lconv","","",null,null],[12,"decimal_point","","",34,null],[12,"thousands_sep","","",34,null],[12,"grouping","","",34,null],[12,"int_curr_symbol","","",34,null],[12,"currency_symbol","","",34,null],[12,"mon_decimal_point","","",34,null],[12,"mon_thousands_sep","","",34,null],[12,"mon_grouping","","",34,null],[12,"positive_sign","","",34,null],[12,"negative_sign","","",34,null],[12,"int_frac_digits","","",34,null],[12,"frac_digits","","",34,null],[12,"p_cs_precedes","","",34,null],[12,"p_sep_by_space","","",34,null],[12,"n_cs_precedes","","",34,null],[12,"n_sep_by_space","","",34,null],[12,"p_sign_posn","","",34,null],[12,"n_sign_posn","","",34,null],[12,"int_p_cs_precedes","","",34,null],[12,"int_p_sep_by_space","","",34,null],[12,"int_n_cs_precedes","","",34,null],[12,"int_n_sep_by_space","","",34,null],[12,"int_p_sign_posn","","",34,null],[12,"int_n_sign_posn","","",34,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",35,null],[12,"sigev_signo","","",35,null],[12,"sigev_notify","","",35,null],[12,"sigev_notify_thread_id","","",35,null],[12,"__unused1","","",35,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[0,"linux","","Linux-specific definitions for linux-like values",null,null],[3,"dirent","libc::unix::notbsd::linux","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"dirent64","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",38,null],[12,"rlim_max","","",38,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[12,"__unused1","","",39,null],[12,"__unused2","","",39,null],[12,"__unused3","","",39,null],[12,"__unused4","","",39,null],[12,"__unused5","","",39,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",40,null],[12,"ifa_name","","",40,null],[12,"ifa_flags","","",40,null],[12,"ifa_addr","","",40,null],[12,"ifa_netmask","","",40,null],[12,"ifa_ifu","","",40,null],[12,"ifa_data","","",40,null],[3,"pthread_mutex_t","","",null,null],[12,"__align","","",41,null],[12,"size","","",41,null],[3,"pthread_rwlock_t","","",null,null],[12,"__align","","",42,null],[12,"size","","",42,null],[3,"pthread_mutexattr_t","","",null,null],[12,"__align","","",43,null],[12,"size","","",43,null],[3,"pthread_rwlockattr_t","","",null,null],[12,"__align","","",44,null],[12,"size","","",44,null],[3,"pthread_cond_t","","",null,null],[12,"__align","","",45,null],[12,"size","","",45,null],[3,"pthread_condattr_t","","",null,null],[12,"__align","","",46,null],[12,"size","","",46,null],[3,"passwd","","",null,null],[12,"pw_name","","",47,null],[12,"pw_passwd","","",47,null],[12,"pw_uid","","",47,null],[12,"pw_gid","","",47,null],[12,"pw_gecos","","",47,null],[12,"pw_dir","","",47,null],[12,"pw_shell","","",47,null],[3,"spwd","","",null,null],[12,"sp_namp","","",48,null],[12,"sp_pwdp","","",48,null],[12,"sp_lstchg","","",48,null],[12,"sp_min","","",48,null],[12,"sp_max","","",48,null],[12,"sp_warn","","",48,null],[12,"sp_inact","","",48,null],[12,"sp_expire","","",48,null],[12,"sp_flag","","",48,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",49,null],[12,"f_frsize","","",49,null],[12,"f_blocks","","",49,null],[12,"f_bfree","","",49,null],[12,"f_bavail","","",49,null],[12,"f_files","","",49,null],[12,"f_ffree","","",49,null],[12,"f_favail","","",49,null],[12,"f_fsid","","",49,null],[12,"f_flag","","",49,null],[12,"f_namemax","","",49,null],[12,"__f_spare","","",49,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",50,null],[12,"dqb_bsoftlimit","","",50,null],[12,"dqb_curspace","","",50,null],[12,"dqb_ihardlimit","","",50,null],[12,"dqb_isoftlimit","","",50,null],[12,"dqb_curinodes","","",50,null],[12,"dqb_btime","","",50,null],[12,"dqb_itime","","",50,null],[12,"dqb_valid","","",50,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",51,null],[12,"ssi_errno","","",51,null],[12,"ssi_code","","",51,null],[12,"ssi_pid","","",51,null],[12,"ssi_uid","","",51,null],[12,"ssi_fd","","",51,null],[12,"ssi_tid","","",51,null],[12,"ssi_band","","",51,null],[12,"ssi_overrun","","",51,null],[12,"ssi_trapno","","",51,null],[12,"ssi_status","","",51,null],[12,"ssi_int","","",51,null],[12,"ssi_ptr","","",51,null],[12,"ssi_utime","","",51,null],[12,"ssi_stime","","",51,null],[12,"ssi_addr","","",51,null],[12,"_pad","","",51,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",52,null],[12,"it_value","","",52,null],[3,"fsid_t","","",null,null],[12,"__val","","",53,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",54,null],[12,"mq_maxmsg","","",54,null],[12,"mq_msgsize","","",54,null],[12,"mq_curmsgs","","",54,null],[12,"pad","","",54,null],[3,"cpu_set_t","","",null,null],[12,"bits","","",55,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",56,null],[12,"if_name","","",56,null],[3,"msginfo","","",null,null],[12,"msgpool","","",57,null],[12,"msgmap","","",57,null],[12,"msgmax","","",57,null],[12,"msgmnb","","",57,null],[12,"msgmni","","",57,null],[12,"msgssz","","",57,null],[12,"msgtql","","",57,null],[12,"msgseg","","",57,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",58,null],[12,"msg_len","","",58,null],[3,"sembuf","","",null,null],[12,"sem_num","","",59,null],[12,"sem_op","","",59,null],[12,"sem_flg","","",59,null],[3,"input_event","","",null,null],[12,"time","","",60,null],[12,"type_","","",60,null],[12,"code","","",60,null],[12,"value","","",60,null],[3,"input_id","","",null,null],[12,"bustype","","",61,null],[12,"vendor","","",61,null],[12,"product","","",61,null],[12,"version","","",61,null],[3,"input_absinfo","","",null,null],[12,"value","","",62,null],[12,"minimum","","",62,null],[12,"maximum","","",62,null],[12,"fuzz","","",62,null],[12,"flat","","",62,null],[12,"resolution","","",62,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",63,null],[12,"len","","",63,null],[12,"index","","",63,null],[12,"keycode","","",63,null],[12,"scancode","","",63,null],[3,"input_mask","","",null,null],[12,"type_","","",64,null],[12,"codes_size","","",64,null],[12,"codes_ptr","","",64,null],[3,"ff_replay","","",null,null],[12,"length","","",65,null],[12,"delay","","",65,null],[3,"ff_trigger","","",null,null],[12,"button","","",66,null],[12,"interval","","",66,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",67,null],[12,"attack_level","","",67,null],[12,"fade_length","","",67,null],[12,"fade_level","","",67,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",68,null],[12,"envelope","","",68,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",69,null],[12,"end_level","","",69,null],[12,"envelope","","",69,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",70,null],[12,"left_saturation","","",70,null],[12,"right_coeff","","",70,null],[12,"left_coeff","","",70,null],[12,"deadband","","",70,null],[12,"center","","",70,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",71,null],[12,"period","","",71,null],[12,"magnitude","","",71,null],[12,"offset","","",71,null],[12,"phase","","",71,null],[12,"envelope","","",71,null],[12,"custom_len","","",71,null],[12,"custom_data","","",71,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",72,null],[12,"weak_magnitude","","",72,null],[3,"ff_effect","","",null,null],[12,"type_","","",73,null],[12,"id","","",73,null],[12,"direction","","",73,null],[12,"trigger","","",73,null],[12,"replay","","",73,null],[12,"u","","",73,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",74,null],[12,"dlpi_name","","",74,null],[12,"dlpi_phdr","","",74,null],[12,"dlpi_phnum","","",74,null],[12,"dlpi_adds","","",74,null],[12,"dlpi_subs","","",74,null],[12,"dlpi_tls_modid","","",74,null],[12,"dlpi_tls_data","","",74,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",75,null],[12,"p_offset","","",75,null],[12,"p_vaddr","","",75,null],[12,"p_paddr","","",75,null],[12,"p_filesz","","",75,null],[12,"p_memsz","","",75,null],[12,"p_flags","","",75,null],[12,"p_align","","",75,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",76,null],[12,"p_flags","","",76,null],[12,"p_offset","","",76,null],[12,"p_vaddr","","",76,null],[12,"p_paddr","","",76,null],[12,"p_filesz","","",76,null],[12,"p_memsz","","",76,null],[12,"p_align","","",76,null],[3,"ucred","","",null,null],[12,"pid","","",77,null],[12,"uid","","",77,null],[12,"gid","","",77,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",78,null],[12,"mnt_dir","","",78,null],[12,"mnt_type","","",78,null],[12,"mnt_opts","","",78,null],[12,"mnt_freq","","",78,null],[12,"mnt_passno","","",78,null],[4,"fpos64_t","","",null,null],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[0,"other","","",null,null],[3,"aiocb","libc::unix::notbsd::linux::other","",null,null],[12,"aio_fildes","","",79,null],[12,"aio_lio_opcode","","",79,null],[12,"aio_reqprio","","",79,null],[12,"aio_buf","","",79,null],[12,"aio_nbytes","","",79,null],[12,"aio_sigevent","","",79,null],[12,"__next_prio","","",79,null],[12,"__abs_prio","","",79,null],[12,"__policy","","",79,null],[12,"__error_code","","",79,null],[12,"__return_value","","",79,null],[12,"aio_offset","","",79,null],[12,"__glibc_reserved","","",79,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",80,null],[12,"e_exit","","",80,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",81,null],[12,"tv_usec","","",81,null],[3,"utmpx","","",null,null],[12,"ut_type","","",82,null],[12,"ut_pid","","",82,null],[12,"ut_line","","",82,null],[12,"ut_id","","",82,null],[12,"ut_user","","",82,null],[12,"ut_host","","",82,null],[12,"ut_exit","","",82,null],[12,"ut_session","","",82,null],[12,"ut_tv","","",82,null],[12,"ut_addr_v6","","",82,null],[12,"__glibc_reserved","","",82,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",83,null],[12,"sa_mask","","",83,null],[12,"sa_flags","","",83,null],[12,"sa_restorer","","",83,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",84,null],[12,"ss_flags","","",84,null],[12,"ss_size","","",84,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",85,null],[12,"si_errno","","",85,null],[12,"si_code","","",85,null],[12,"_pad","","",85,null],[12,"_align","","",85,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",86,null],[12,"gl_pathv","","",86,null],[12,"gl_offs","","",86,null],[12,"gl_flags","","",86,null],[12,"__unused1","","",86,null],[12,"__unused2","","",86,null],[12,"__unused3","","",86,null],[12,"__unused4","","",86,null],[12,"__unused5","","",86,null],[3,"statfs","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_spare","","",87,null],[3,"msghdr","","",null,null],[12,"msg_name","","",88,null],[12,"msg_namelen","","",88,null],[12,"msg_iov","","",88,null],[12,"msg_iovlen","","",88,null],[12,"msg_control","","",88,null],[12,"msg_controllen","","",88,null],[12,"msg_flags","","",88,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",89,null],[12,"cmsg_level","","",89,null],[12,"cmsg_type","","",89,null],[3,"termios","","",null,null],[12,"c_iflag","","",90,null],[12,"c_oflag","","",90,null],[12,"c_cflag","","",90,null],[12,"c_lflag","","",90,null],[12,"c_line","","",90,null],[12,"c_cc","","",90,null],[12,"c_ispeed","","",90,null],[12,"c_ospeed","","",90,null],[3,"flock","","",null,null],[12,"l_type","","",91,null],[12,"l_whence","","",91,null],[12,"l_start","","",91,null],[12,"l_len","","",91,null],[12,"l_pid","","",91,null],[3,"sem_t","","",null,null],[12,"__size","","",92,null],[12,"__align","","",92,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[0,"b64","","64-bit specific definitions for linux-like values",null,null],[3,"sigset_t","libc::unix::notbsd::linux::other::b64","",null,null],[12,"__val","","",93,null],[3,"sysinfo","","",null,null],[12,"uptime","","",94,null],[12,"loads","","",94,null],[12,"totalram","","",94,null],[12,"freeram","","",94,null],[12,"sharedram","","",94,null],[12,"bufferram","","",94,null],[12,"totalswap","","",94,null],[12,"freeswap","","",94,null],[12,"procs","","",94,null],[12,"pad","","",94,null],[12,"totalhigh","","",94,null],[12,"freehigh","","",94,null],[12,"mem_unit","","",94,null],[12,"_f","","",94,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",95,null],[12,"msg_stime","","",95,null],[12,"msg_rtime","","",95,null],[12,"msg_ctime","","",95,null],[12,"__msg_cbytes","","",95,null],[12,"msg_qnum","","",95,null],[12,"msg_qbytes","","",95,null],[12,"msg_lspid","","",95,null],[12,"msg_lrpid","","",95,null],[12,"__glibc_reserved4","","",95,null],[12,"__glibc_reserved5","","",95,null],[0,"x86_64","","x86_64-specific definitions for 64-bit linux-like values",null,null],[3,"stat","libc::unix::notbsd::linux::other::b64::x86_64","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"__pad0","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[12,"__unused","","",96,null],[3,"stat64","","",null,null],[12,"st_dev","","",97,null],[12,"st_ino","","",97,null],[12,"st_nlink","","",97,null],[12,"st_mode","","",97,null],[12,"st_uid","","",97,null],[12,"st_gid","","",97,null],[12,"__pad0","","",97,null],[12,"st_rdev","","",97,null],[12,"st_size","","",97,null],[12,"st_blksize","","",97,null],[12,"st_blocks","","",97,null],[12,"st_atime","","",97,null],[12,"st_atime_nsec","","",97,null],[12,"st_mtime","","",97,null],[12,"st_mtime_nsec","","",97,null],[12,"st_ctime","","",97,null],[12,"st_ctime_nsec","","",97,null],[12,"__reserved","","",97,null],[3,"statfs64","","",null,null],[12,"f_type","","",98,null],[12,"f_bsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_fsid","","",98,null],[12,"f_namelen","","",98,null],[12,"f_frsize","","",98,null],[12,"f_flags","","",98,null],[12,"f_spare","","",98,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",99,null],[12,"f_frsize","","",99,null],[12,"f_blocks","","",99,null],[12,"f_bfree","","",99,null],[12,"f_bavail","","",99,null],[12,"f_files","","",99,null],[12,"f_ffree","","",99,null],[12,"f_favail","","",99,null],[12,"f_fsid","","",99,null],[12,"f_flag","","",99,null],[12,"f_namemax","","",99,null],[12,"__f_spare","","",99,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",100,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",101,null],[12,"exponent","","",101,null],[12,"__private","","",101,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",102,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",103,null],[12,"swd","","",103,null],[12,"ftw","","",103,null],[12,"fop","","",103,null],[12,"rip","","",103,null],[12,"rdp","","",103,null],[12,"mxcsr","","",103,null],[12,"mxcr_mask","","",103,null],[12,"_st","","",103,null],[12,"_xmm","","",103,null],[12,"__private","","",103,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",104,null],[12,"swd","","",104,null],[12,"ftw","","",104,null],[12,"fop","","",104,null],[12,"rip","","",104,null],[12,"rdp","","",104,null],[12,"mxcsr","","",104,null],[12,"mxcr_mask","","",104,null],[12,"st_space","","",104,null],[12,"xmm_space","","",104,null],[12,"padding","","",104,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",105,null],[12,"r14","","",105,null],[12,"r13","","",105,null],[12,"r12","","",105,null],[12,"rbp","","",105,null],[12,"rbx","","",105,null],[12,"r11","","",105,null],[12,"r10","","",105,null],[12,"r9","","",105,null],[12,"r8","","",105,null],[12,"rax","","",105,null],[12,"rcx","","",105,null],[12,"rdx","","",105,null],[12,"rsi","","",105,null],[12,"rdi","","",105,null],[12,"orig_rax","","",105,null],[12,"rip","","",105,null],[12,"cs","","",105,null],[12,"eflags","","",105,null],[12,"rsp","","",105,null],[12,"ss","","",105,null],[12,"fs_base","","",105,null],[12,"gs_base","","",105,null],[12,"ds","","",105,null],[12,"es","","",105,null],[12,"fs","","",105,null],[12,"gs","","",105,null],[3,"user","","",null,null],[12,"regs","","",106,null],[12,"u_fpvalid","","",106,null],[12,"i387","","",106,null],[12,"u_tsize","","",106,null],[12,"u_dsize","","",106,null],[12,"u_ssize","","",106,null],[12,"start_code","","",106,null],[12,"start_stack","","",106,null],[12,"signal","","",106,null],[12,"__reserved","","",106,null],[12,"u_ar0","","",106,null],[12,"u_fpstate","","",106,null],[12,"magic","","",106,null],[12,"u_comm","","",106,null],[12,"u_debugreg","","",106,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",107,null],[12,"fpregs","","",107,null],[12,"__private","","",107,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",108,null],[12,"uc_link","","",108,null],[12,"uc_stack","","",108,null],[12,"uc_mcontext","","",108,null],[12,"uc_sigmask","","",108,null],[12,"__private","","",108,null],[3,"ipc_perm","","",null,null],[12,"__key","","",109,null],[12,"uid","","",109,null],[12,"gid","","",109,null],[12,"cuid","","",109,null],[12,"cgid","","",109,null],[12,"mode","","",109,null],[12,"__pad1","","",109,null],[12,"__seq","","",109,null],[12,"__pad2","","",109,null],[12,"__unused1","","",109,null],[12,"__unused2","","",109,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",110,null],[12,"shm_segsz","","",110,null],[12,"shm_atime","","",110,null],[12,"shm_dtime","","",110,null],[12,"shm_ctime","","",110,null],[12,"shm_cpid","","",110,null],[12,"shm_lpid","","",110,null],[12,"shm_nattch","","",110,null],[12,"__unused4","","",110,null],[12,"__unused5","","",110,null],[3,"termios2","","",null,null],[12,"c_iflag","","",111,null],[12,"c_oflag","","",111,null],[12,"c_cflag","","",111,null],[12,"c_lflag","","",111,null],[12,"c_line","","",111,null],[12,"c_cc","","",111,null],[12,"c_ispeed","","",111,null],[12,"c_ospeed","","",111,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[11,"clone","libc","",96,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[0,"not_x32","libc::unix::notbsd::linux::other::b64","",null,null],[5,"sysctl","libc::unix::notbsd::linux::other::b64::not_x32","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[6,"clock_t","libc::unix::notbsd::linux::other::b64","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[11,"clone","libc","",93,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[6,"__priority_which_t","libc::unix::notbsd::linux::other","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"AF_MAX","","",null,null],[17,"PF_MAX","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[11,"clone","libc","",79,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[6,"useconds_t","libc::unix::notbsd::linux","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[11,"clone","libc","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[6,"sa_family_t","libc::unix::notbsd","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[17,"ULONG_SIZE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[11,"clone","libc","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[6,"pid_t","libc::unix","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[11,"clone","libc","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"AF_MAX","","",null,null],[17,"PF_MAX","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[11,"is_some","libc::dox::imp","Returns `true` if the option is a [`Some`] value.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",113,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",113,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",113,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",113,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",113,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",113,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",113,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",113,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",113,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",113,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"deref_mut","libc::dox::imp::mem","",116,null],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",116,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","libc::dox::imp","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","libc::dox::imp::mem","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"deref","libc::dox::imp::mem","",116,null],[11,"cmp","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","","",113,null],[11,"eq","libc::dox::imp::mem","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","libc::dox::imp::mem","",115,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","libc::dox::imp","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_result","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",113,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",113,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"from","","",113,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",113,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"hash","","",113,null],[11,"hash","libc::dox::imp::mem","",115,null],[11,"hash","","",116,null],[11,"into_iter","libc::dox::imp","Returns a consuming iterator over the possibly contained value.",113,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","Returns [`None`].",113,{"inputs":[],"output":{"name":"option"}}],[11,"default","libc::dox::imp::mem","",116,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"new","","Wrap a value to be manually dropped.",116,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",116,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",116,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[4,"c_void"],[4,"Option"],[8,"Clone"],[3,"Discriminant"],[19,"ManuallyDrop"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[12,"metadata","","",0,null],[12,"location","","",0,null],[12,"args","","",0,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[12,"level","","",1,null],[12,"target","","",1,null],[3,"NopLogger","","",null,null],[3,"LogLocation","","The location of a log message.",null,null],[12,"__module_path","","",2,null],[12,"__file","","",2,null],[12,"__line","","",2,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[12,"0","","",3,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[12,"0","","",4,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[12,"0","","",5,null],[3,"LoggerGuard","","",null,null],[12,"0","","",6,null],[3,"LoggerAdaptor","","",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",7,null],[13,"Warn","","The \"warn\" level.",7,null],[13,"Info","","The \"info\" level.",7,null],[13,"Debug","","The \"debug\" level.",7,null],[13,"Trace","","The \"trace\" level.",7,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",8,null],[13,"Error","","Corresponds to the `Error` log level.",8,null],[13,"Warn","","Corresponds to the `Warn` log level.",8,null],[13,"Info","","Corresponds to the `Info` log level.",8,null],[13,"Debug","","Corresponds to the `Debug` log level.",8,null],[13,"Trace","","Corresponds to the `Trace` log level.",8,null],[5,"ok_or","","",null,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[5,"eq_ignore_ascii_case","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[5,"logger","","",null,{"inputs":[],"output":{"generics":["loggerguard"],"name":"option"}}],[5,"__enabled","","",null,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"bool"}}],[5,"__log","","",null,{"inputs":[{"name":"loglevel"},{"name":"str"},{"name":"loglocation"},{"name":"arguments"}],"output":null}],[5,"__static_max_level","","",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[0,"macros","","",null,null],[7,"LOGGER","","",null,null],[7,"STATE","","",null,null],[7,"REFCOUNT","","",null,null],[7,"LOG_LEVEL_NAMES","","",null,null],[17,"INITIALIZING","","",null,null],[17,"INITIALIZED","","",null,null],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",9,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",9,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",7,{"inputs":[{"name":"usize"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"from_new","","",7,{"inputs":[{"name":"level"}],"output":{"name":"loglevel"}}],[11,"to_new","","",7,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"max","","Returns the most verbose logging level.",7,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",7,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",8,{"inputs":[{"name":"usize"}],"output":{"generics":["loglevelfilter"],"name":"option"}}],[11,"from_new","","",8,{"inputs":[{"name":"levelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_new","","",8,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"max","","Returns the most verbose logging level filter.",8,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",8,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",0,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",0,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"enabled","","",10,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",10,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",3,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"log"}}],[11,"log","","",11,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"enabled","","",11,{"inputs":[{"name":"self"},{"name":"metadata"}],"output":{"name":"bool"}}],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":null}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"],[3,"LoggerGuard"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"NopLogger"],[3,"LoggerAdaptor"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[5,"contains_zero_byte","memchr","Return `true` if `x` contains any zero byte.",null,{"inputs":[{"name":"usize"}],"output":{"name":"bool"}}],[5,"repeat_byte","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[17,"LO_U64","","",null,null],[17,"HI_U64","","",null,null],[17,"LO_USIZE","","",null,null],[17,"HI_USIZE","","",null,null],[17,"USIZE_BYTES","","",null,null]],"paths":[]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_num_physical_cpus","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_num_cpus","","",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[12,"a","","",0,null],[12,"n","","",0,null],[12,"k","","",0,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multiply_and_divide","","Calculate r * a / b, avoiding overflows and fractions.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",0,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"IterBinomial"],[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[12,"state","","",0,null],[12,"stop","","",0,null],[12,"one","","",0,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[12,"range","","",1,null],[12,"done","","",1,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[12,"state","","",2,null],[12,"stop","","",2,null],[12,"step","","",2,null],[12,"rev","","",2,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[12,"state","","",3,null],[12,"stop","","",3,null],[12,"step","","",3,null],[12,"rev","","",3,null],[12,"done","","",3,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",15,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",15,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[5,"integer_decode_f32","num_traits::float","",null,null],[5,"integer_decode_f64","","",null,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",16,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",16,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",16,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",16,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",16,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",16,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",16,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",16,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",17,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",17,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",17,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",18,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",18,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",21,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",22,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",24,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",24,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Real"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[12,"owner","","",0,null],[12,"reference","","",0,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[12,"owner","","",1,null],[12,"reference","","",1,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[12,"handle","","",2,null],[12,"_owner","","",2,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",3,null],[10,"into_erased","","Perform the type erasure.",3,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",4,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",4,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",5,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",5,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",0,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",0,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",0,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",0,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",0,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningrefmut"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",2,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",2,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[12,"0","","",0,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[12,"raw","","",1,null],[12,"data","","",1,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[12,"raw","","",2,null],[12,"data","","",2,null],[12,"marker","","",2,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[12,"raw","","",3,null],[12,"data","","",3,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[12,"raw","","",4,null],[12,"data","","",4,null],[12,"marker","","",4,null],[3,"Condvar","","A Condition Variable",null,null],[12,"state","","",5,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[12,"0","","",6,null],[3,"RwLock","","A reader-writer lock",null,null],[12,"raw","","",7,null],[12,"data","","",7,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[12,"raw","","",8,null],[12,"data","","",8,null],[12,"marker","","",8,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[12,"raw","","",9,null],[12,"data","","",9,null],[12,"marker","","",9,null],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",null,null],[12,"raw","","",10,null],[12,"data","","",10,null],[12,"marker","","",10,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",11,null],[13,"Poisoned","","A closure was executed but panicked.",11,null],[13,"InProgress","","A thread is currently executing a closure.",11,null],[13,"Done","","A closure has completed sucessfully.",11,null],[0,"util","","",null,null],[5,"unreachable","parking_lot::util","",null,null],[8,"UncheckedOptionExt","","",null,null],[10,"unchecked_unwrap","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"elision","parking_lot","",null,null],[5,"have_elision","parking_lot::elision","",null,{"inputs":[],"output":{"name":"bool"}}],[8,"AtomicElisionExt","","",null,null],[16,"IntType","","",13,null],[10,"elision_acquire","","",13,null],[10,"elision_release","","",13,null],[0,"raw_mutex","parking_lot","",null,null],[3,"RawMutex","parking_lot::raw_mutex","",null,null],[12,"state","","",14,null],[6,"U8","","",null,null],[17,"TOKEN_NORMAL","","",null,null],[17,"TOKEN_HANDOFF","","",null,null],[17,"LOCKED_BIT","","",null,null],[17,"PARKED_BIT","","",null,null],[11,"new","","",14,{"inputs":[],"output":{"name":"rawmutex"}}],[11,"lock","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_until","","",14,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_for","","",14,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_lock","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"mark_parked_if_locked","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark_parked","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"lock_slow","","",14,{"inputs":[{"name":"self"},{"generics":["instant"],"name":"option"}],"output":{"name":"bool"}}],[11,"unlock_slow","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[0,"raw_remutex","parking_lot","",null,null],[3,"RawReentrantMutex","parking_lot::raw_remutex","",null,null],[12,"owner","","",15,null],[12,"lock_count","","",15,null],[12,"mutex","","",15,null],[5,"get_thread_id","","",null,{"inputs":[],"output":{"name":"usize"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"rawreentrantmutex"}}],[11,"lock_internal","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"lock","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_until","","",15,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_for","","",15,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_lock","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock","","",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[0,"raw_rwlock","parking_lot","",null,null],[3,"RawRwLock","parking_lot::raw_rwlock","",null,null],[12,"state","","",16,null],[5,"checked_add","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[17,"USABLE_BITS_MASK","","",null,null],[17,"PARKED_BIT","","",null,null],[17,"UPGRADING_BIT","","",null,null],[17,"SHARED_GUARD","","",null,null],[17,"GUARD_COUNT_MASK","","",null,null],[17,"EXCLUSIVE_GUARD","","",null,null],[17,"UPGRADABLE_GUARD","","",null,null],[17,"TOKEN_SHARED","","",null,null],[17,"TOKEN_EXCLUSIVE","","",null,null],[17,"TOKEN_UPGRADABLE","","",null,null],[17,"TOKEN_UPGRADING","","",null,null],[11,"new","","",16,{"inputs":[],"output":{"name":"rawrwlock"}}],[11,"lock_exclusive","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_exclusive_until","","",16,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_exclusive_for","","",16,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_lock_exclusive","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_exclusive","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"exclusive_to_shared","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_shared_fast","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"lock_shared","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"try_lock_shared_until","","",16,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_shared_for","","",16,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_lock_shared","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"unlock_shared","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"try_lock_upgradable_fast","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lock_upgradable","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_upgradable_until","","",16,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_upgradable_for","","",16,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_lock_upgradable","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_upgradable","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"upgradable_to_shared","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"upgradable_to_exclusive","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"try_upgradable_to_exclusive_until","","",16,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_upgradable_to_exclusive_for","","",16,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_upgradable_to_exclusive","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lock_exclusive_slow","","",16,{"inputs":[{"name":"self"},{"generics":["instant"],"name":"option"}],"output":{"name":"bool"}}],[11,"unlock_exclusive_slow","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"exclusive_to_shared_slow","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"lock_shared_slow","","",16,{"inputs":[{"name":"self"},{"name":"bool"},{"generics":["instant"],"name":"option"}],"output":{"name":"bool"}}],[11,"try_lock_shared_slow","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"unlock_shared_slow","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"lock_upgradable_slow","","",16,{"inputs":[{"name":"self"},{"generics":["instant"],"name":"option"}],"output":{"name":"bool"}}],[11,"try_lock_upgradable_slow","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_upgradable_slow","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"upgradable_to_shared_slow","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"upgradable_to_exclusive_slow","","",16,{"inputs":[{"name":"self"},{"generics":["instant"],"name":"option"}],"output":{"name":"bool"}}],[0,"condvar","parking_lot","",null,null],[3,"WaitTimeoutResult","parking_lot::condvar","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[12,"0","","",6,null],[3,"Condvar","","A Condition Variable",null,null],[12,"state","","",5,null],[11,"fmt","parking_lot","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",5,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_one_slow","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all_slow","","",5,null],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",5,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",5,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_until_internal","","",5,{"inputs":[{"name":"self"},{"name":"rawmutex"},{"generics":["instant"],"name":"option"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",5,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"condvar"}}],[0,"mutex","","",null,null],[3,"Mutex","parking_lot::mutex","A mutual exclusion primitive useful for protecting shared data",null,null],[12,"raw","","",1,null],[12,"data","","",1,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[12,"raw","","",2,null],[12,"data","","",2,null],[12,"marker","","",2,null],[5,"guard_lock","","",null,{"inputs":[{"name":"mutexguard"}],"output":{"name":"rawmutex"}}],[11,"new","parking_lot","Creates a new mutex in an unlocked state ready for use.",1,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"guard","","",1,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",1,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",1,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",1,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `MutexGuard` for a component of the locked data.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mutexguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[0,"remutex","","",null,null],[3,"ReentrantMutex","parking_lot::remutex","A mutex which can be recursively locked by a single thread.",null,null],[12,"raw","","",3,null],[12,"data","","",3,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[12,"raw","","",4,null],[12,"data","","",4,null],[12,"marker","","",4,null],[11,"new","parking_lot","Creates a new reentrant mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this reentrant mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"guard","","",3,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `ReentrantMutexGuard` for a component of the locked data.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"reentrantmutexguard"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[0,"rwlock","","",null,null],[3,"RwLock","parking_lot::rwlock","A reader-writer lock",null,null],[12,"raw","","",7,null],[12,"data","","",7,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[12,"raw","","",8,null],[12,"data","","",8,null],[12,"marker","","",8,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[12,"raw","","",9,null],[12,"data","","",9,null],[12,"marker","","",9,null],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",null,null],[12,"raw","","",10,null],[12,"data","","",10,null],[12,"marker","","",10,null],[11,"new","parking_lot","Creates a new instance of an `RwLock<T>` which is unlocked.",7,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_guard","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"write_guard","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"upgradable_guard","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockupgradablereadguard"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"upgradable_read","","Locks this rwlock with upgradable read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlockupgradablereadguard"}}],[11,"try_upgradable_read","","Attempts to acquire this rwlock with upgradable read access.",7,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"try_upgradable_read_for","","Attempts to acquire this rwlock with upgradable read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"try_upgradable_read_until","","Attempts to acquire this rwlock with upgradable read access until a timeout is reached.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_upgradable_read","","Releases upgradable read access of the rwlock.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_upgradable_read_fair","","Releases upgradable read access of the rwlock using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade","","Atomically downgrades a write lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_downgrade_upgradable_read","","Atomically downgrades an upgradable read lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_read_recursive","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read_recursive","","Attempts to acquire this rwlock with shared read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_upgradable_read","","Locks this rwlock with upgradable read access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_upgradable_read","","Attempts to acquire this rwlock with upgradable read access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_upgrade","","Upgrades this rwlock from upgradable read access to exclusive write access, blocking the current thread until it can be acquired.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_upgrade","","Attempts to upgrade this rwlock from upgradable read access to exclusive write access.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `RwLockReadGuard` for a component of the locked data.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Make a new `RwLockWriteGuard` for a component of the locked data.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",10,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",10,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",10,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",10,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[0,"once","","",null,null],[3,"Once","parking_lot::once","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[12,"0","","",0,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",11,null],[13,"Poisoned","","A closure was executed but panicked.",11,null],[13,"InProgress","","A thread is currently executing a closure.",11,null],[13,"Done","","A closure has completed sucessfully.",11,null],[6,"U8","","",null,null],[17,"DONE_BIT","","",null,null],[17,"POISON_BIT","","",null,null],[17,"LOCKED_BIT","","",null,null],[17,"PARKED_BIT","","",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[11,"clone","parking_lot","",11,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",0,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_slow","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"fnmut"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"once"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"ReentrantMutexGuardRef","","Typedef of an owning reference that uses a `ReentrantMutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"RwLockUpgradableReadGuardRef","","Typedef of an owning reference that uses a `RwLockUpgradableReadGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[3,"Once"],[3,"Mutex"],[3,"MutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"Condvar"],[3,"WaitTimeoutResult"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[4,"OnceState"],[8,"UncheckedOptionExt"],[8,"AtomicElisionExt"],[3,"RawMutex"],[3,"RawReentrantMutex"],[3,"RawRwLock"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",0,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[12,"counter","","",3,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",4,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",4,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",4,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",5,null],[13,"Invalid","","The validation callback returned false.",5,null],[13,"TimedOut","","The timeout expired.",5,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",6,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",6,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",6,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"generics":["instant"],"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[0,"thread_parker","","",null,null],[3,"ThreadParker","parking_lot_core::thread_parker","",null,null],[12,"futex","","",7,null],[3,"UnparkHandle","","",null,null],[12,"futex","","",8,null],[17,"FUTEX_WAIT","","",null,null],[17,"FUTEX_WAKE","","",null,null],[17,"FUTEX_PRIVATE","","",null,null],[11,"new","","",7,{"inputs":[],"output":{"name":"threadparker"}}],[11,"prepare_park","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"timed_out","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"park","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"park_until","","",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"unpark_lock","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unparkhandle"}}],[11,"unpark","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"util","parking_lot_core","",null,null],[5,"unreachable","parking_lot_core::util","",null,null],[8,"UncheckedOptionExt","","",null,null],[10,"unchecked_unwrap","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"spinwait","parking_lot_core","",null,null],[3,"SpinWait","parking_lot_core::spinwait","A counter used to perform exponential backoff in spin loops.",null,null],[12,"counter","","",3,null],[5,"thread_yield","","",null,{"inputs":[],"output":null}],[5,"cpu_relax","","",null,{"inputs":[{"name":"u32"}],"output":null}],[11,"new","parking_lot_core","Creates a new `SpinWait`.",3,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",3,{"inputs":[],"output":{"name":"spinwait"}}],[0,"word_lock","","",null,null],[3,"ThreadData","parking_lot_core::word_lock","",null,null],[12,"parker","","",10,null],[12,"queue_tail","","",10,null],[12,"prev","","",10,null],[12,"next","","",10,null],[3,"WordLock","","",null,null],[12,"state","","",11,null],[5,"get_thread_data","","",null,{"inputs":[{"name":"option"}],"output":{"name":"threaddata"}}],[17,"LOCKED_BIT","","",null,null],[17,"QUEUE_LOCKED_BIT","","",null,null],[17,"QUEUE_MASK","","",null,null],[11,"new","","",10,{"inputs":[],"output":{"name":"threaddata"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"wordlock"}}],[11,"lock","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"unlock","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"lock_slow","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"unlock_slow","","",11,{"inputs":[{"name":"self"}],"output":null}],[0,"parking_lot","parking_lot_core","",null,null],[3,"HashTable","parking_lot_core::parking_lot","",null,null],[12,"entries","","",12,null],[12,"hash_bits","","",12,null],[12,"_prev","","",12,null],[3,"Bucket","","",null,null],[12,"mutex","","",13,null],[12,"queue_head","","",13,null],[12,"queue_tail","","",13,null],[12,"fair_timeout","","",13,null],[12,"_padding","","",13,null],[3,"FairTimeout","","",null,null],[12,"timeout","","",14,null],[12,"rng","","",14,null],[3,"ThreadData","","",null,null],[12,"parker","","",15,null],[12,"key","","",15,null],[12,"next_in_queue","","",15,null],[12,"unpark_token","","",15,null],[12,"park_token","","",15,null],[12,"parked_with_timeout","","",15,null],[12,"deadlock_data","","",15,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"ParkToken","","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",0,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",5,null],[13,"Invalid","","The validation callback returned false.",5,null],[13,"TimedOut","","The timeout expired.",5,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",6,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",6,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",6,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",4,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",4,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",4,null],[5,"get_thread_data","","",null,{"inputs":[{"name":"option"}],"output":{"name":"threaddata"}}],[5,"get_hashtable","","",null,null],[5,"grow_hashtable","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"hash","","",null,{"inputs":[{"name":"usize"},{"name":"u32"}],"output":{"name":"usize"}}],[5,"lock_bucket","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"bucket"}}],[5,"lock_bucket_checked","","",null,null],[5,"lock_bucket_pair","","",null,null],[5,"unlock_bucket_pair","","",null,{"inputs":[{"name":"bucket"},{"name":"bucket"}],"output":null}],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"generics":["instant"],"name":"option"}],"output":{"name":"parkresult"}}],[5,"park_internal","","",null,{"inputs":[{"name":"usize"},{"name":"fnmut"},{"name":"fnmut"},{"name":"fnmut"},{"name":"parktoken"},{"generics":["instant"],"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_one_internal","","",null,{"inputs":[{"name":"usize"},{"name":"fnmut"}],"output":{"name":"unparkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_requeue_internal","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"fnmut"},{"name":"fnmut"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter_internal","","",null,{"inputs":[{"name":"usize"},{"name":"fnmut"},{"name":"fnmut"}],"output":{"name":"unparkresult"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[3,"DeadlockData","parking_lot_core::parking_lot::deadlock","",null,null],[5,"acquire_resource","","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"on_unpark","","",null,{"inputs":[{"name":"threaddata"}],"output":null}],[11,"new","","",16,{"inputs":[],"output":{"name":"self"}}],[7,"NUM_THREADS","parking_lot_core::parking_lot","",null,null],[7,"HASHTABLE","","",null,null],[17,"LOAD_FACTOR","","",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null],[17,"DEFAULT_PARK_TOKEN","","A default park token to use.",null,null],[11,"new","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bucket"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fairtimeout"}}],[11,"should_timeout","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"threaddata"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","parking_lot_core","",5,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[3,"SpinWait"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"ThreadParker"],[3,"UnparkHandle"],[8,"UncheckedOptionExt"],[3,"ThreadData"],[3,"WordLock"],[3,"HashTable"],[3,"Bucket"],[3,"FairTimeout"],[3,"ThreadData"],[3,"DeadlockData"]]};
searchIndex["parser_macros"] = {"doc":"Simulates unhygienic macro to make parser's code cleaner. It lives here because it's not a generic purpose macro (at all).","items":[[5,"parser","parser_macros","This attribute macro injects first argument of function (typically `self`) to all known macros invocation in a function.",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"expand","","",null,null],[3,"InjectSelf","parser_macros::expand","",null,null],[12,"parser","","",0,null],[5,"expand","","",null,{"inputs":[{"name":"tokenstream"},{"name":"item"}],"output":{"name":"item"}}],[5,"get_joinned_span","","",null,{"inputs":[{"name":"totokens"}],"output":{"name":"span"}}],[5,"parse_args","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"punctuated"}}],[11,"fold_expr_method_call","","",0,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[11,"fold_method_sig","","",0,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fold_macro","","",0,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"macro"}}]],"paths":[[3,"InjectSelf"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["plist"] = {"doc":"Plist","items":[[3,"Date","plist","A UTC timestamp. Used for serialization to and from the plist date type.",null,null],[12,"inner","","",0,null],[3,"EventReader","","",null,null],[12,"0","","",1,null],[4,"Plist","","",null,null],[13,"Array","","",2,null],[13,"Dictionary","","",2,null],[13,"Boolean","","",2,null],[13,"Data","","",2,null],[13,"Date","","",2,null],[13,"Real","","",2,null],[13,"Integer","","",2,null],[13,"String","","",2,null],[4,"PlistEvent","","An encoding of a plist as a flat structure.",null,null],[13,"StartArray","","",3,null],[13,"EndArray","","",3,null],[13,"StartDictionary","","",3,null],[13,"EndDictionary","","",3,null],[13,"BooleanValue","","",3,null],[13,"DataValue","","",3,null],[13,"DateValue","","",3,null],[13,"IntegerValue","","",3,null],[13,"RealValue","","",3,null],[13,"StringValue","","",3,null],[4,"Error","","",null,null],[13,"InvalidData","","",4,null],[13,"UnexpectedEof","","",4,null],[13,"Io","","",4,null],[13,"Serde","","",4,null],[4,"EventReaderInner","","",null,null],[13,"Uninitialized","","",5,null],[13,"Xml","","",5,null],[13,"Binary","","",5,null],[5,"u64_to_usize","","",null,{"inputs":[{"name":"u64"}],"output":{"generics":["usize"],"name":"result"}}],[5,"u64_option_to_usize","","",null,{"inputs":[{"generics":["u64"],"name":"option"}],"output":{"generics":["option"],"name":"result"}}],[0,"binary","","",null,null],[3,"EventReader","plist::binary","https://opensource.apple.com/source/CF/CF-550/CFBinaryPList.c https://hg.python.org/cpython/file/3.4/Lib/plistlib.py",null,null],[12,"stack","","",6,null],[12,"object_offsets","","",6,null],[12,"reader","","",6,null],[12,"ref_size","","",6,null],[12,"finished","","",6,null],[12,"max_allocation_bytes","","",6,null],[12,"max_stack_depth","","",6,null],[12,"max_objects","","",6,null],[12,"current_objects","","",6,null],[0,"reader","","",null,null],[3,"StackItem","plist::binary::reader","",null,null],[12,"object_refs","","",7,null],[12,"ty","","",7,null],[3,"EventReader","","https://opensource.apple.com/source/CF/CF-550/CFBinaryPList.c https://hg.python.org/cpython/file/3.4/Lib/plistlib.py",null,null],[12,"stack","","",6,null],[12,"object_offsets","","",6,null],[12,"reader","","",6,null],[12,"ref_size","","",6,null],[12,"finished","","",6,null],[12,"max_allocation_bytes","","",6,null],[12,"max_stack_depth","","",6,null],[12,"max_objects","","",6,null],[12,"current_objects","","",6,null],[4,"StackType","","",null,null],[13,"Array","","",8,null],[13,"Dict","","",8,null],[13,"Root","","",8,null],[11,"from","plist","",4,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"error"}}],[11,"new","plist::binary","",6,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"can_allocate","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"allocate_vec","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"read_trailer","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_ints","","",6,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u8"}],"output":{"generics":["vec"],"name":"result"}}],[11,"read_refs","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["vec"],"name":"result"}}],[11,"read_object_len","","",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_data","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["vec"],"name":"result"}}],[11,"seek_to_object","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"xml","plist","",null,null],[3,"EventReader","plist::xml","",null,null],[12,"xml_reader","","",9,null],[12,"queued_event","","",9,null],[12,"element_stack","","",9,null],[12,"finished","","",9,null],[3,"EventWriter","","",null,null],[12,"xml_writer","","",10,null],[12,"stack","","",10,null],[12,"empty_namespace","","",10,null],[0,"reader","","",null,null],[3,"EventReader","plist::xml::reader","",null,null],[12,"xml_reader","","",9,null],[12,"queued_event","","",9,null],[12,"element_stack","","",9,null],[12,"finished","","",9,null],[11,"new","plist::xml","",9,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"read_content","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["plistevent"],"name":"result"}}],[11,"next_event","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["xmlevent"],"name":"result"}}],[11,"read_next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"writer","","",null,null],[3,"EventWriter","plist::xml::writer","",null,null],[12,"xml_writer","","",10,null],[12,"stack","","",10,null],[12,"empty_namespace","","",10,null],[4,"Element","","",null,null],[13,"Dictionary","","",11,null],[13,"Array","","",11,null],[13,"Root","","",11,null],[4,"DictionaryState","","",null,null],[13,"ExpectKey","","",12,null],[13,"ExpectValue","","",12,null],[11,"from","plist","",4,{"inputs":[{"name":"xmlwritererror"}],"output":{"name":"error"}}],[11,"new","plist::xml","",10,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"write_element_and_value","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"start_element","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"end_element","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_value","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"maybe_end_plist","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",10,{"inputs":[{"name":"self"},{"name":"plistevent"}],"output":{"name":"result"}}],[11,"write","","",10,{"inputs":[{"name":"self"},{"name":"plistevent"}],"output":{"name":"result"}}],[0,"builder","plist","",null,null],[3,"Builder","plist::builder","",null,null],[12,"stream","","",13,null],[12,"token","","",13,null],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["plist"],"name":"result"}}],[11,"bump","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build_value","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["plist"],"name":"result"}}],[11,"build_array","","",13,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"option"}],"output":{"generics":["vec"],"name":"result"}}],[11,"build_dict","","",13,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"option"}],"output":{"generics":["btreemap"],"name":"result"}}],[0,"date","plist","",null,null],[3,"Date","plist::date","A UTC timestamp. Used for serialization to and from the plist date type.",null,null],[12,"inner","","",0,null],[0,"serde_impls","","",null,null],[3,"DateNewtypeVisitor","plist::date::serde_impls","",null,null],[3,"DateStrVisitor","","",null,null],[17,"DATE_NEWTYPE_STRUCT_NAME","","",null,null],[11,"serialize","plist","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"expecting","plist::date::serde_impls","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","plist","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"from_seconds_since_plist_epoch","","",0,{"inputs":[{"name":"f64"}],"output":{"generics":["date"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"generics":["utc"],"name":"datetime"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"plist","","",null,null],[4,"Plist","plist::plist","",null,null],[13,"Array","","",2,null],[13,"Dictionary","","",2,null],[13,"Boolean","","",2,null],[13,"Data","","",2,null],[13,"Date","","",2,null],[13,"Real","","",2,null],[13,"Integer","","",2,null],[13,"String","","",2,null],[11,"clone","plist","",2,{"inputs":[{"name":"self"}],"output":{"name":"plist"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"plist"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"plist"}],"output":{"name":"bool"}}],[11,"read","","",2,{"inputs":[{"name":"r"}],"output":{"generics":["plist"],"name":"result"}}],[11,"from_events","","",2,{"inputs":[{"name":"t"}],"output":{"generics":["plist"],"name":"result"}}],[11,"into_events","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["plistevent"],"name":"vec"}}],[11,"into_events_inner","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"as_array","","If the `Plist` is an Array, returns the associated Vec. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Plist` is an Array, returns the associated mutable Vec. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_dictionary","","If the `Plist` is a Dictionary, returns the associated BTreeMap. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"as_dictionary_mut","","If the `Plist` is a Dictionary, returns the associated mutable BTreeMap. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"as_boolean","","If the `Plist` is a Boolean, returns the associated bool. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_data","","If the `Plist` is a Data, returns the underlying Vec. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_data","","If the `Plist` is a Data, returns the associated Vec. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_date","","If the `Plist` is a Date, returns the associated DateTime. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"as_real","","If the `Plist` is a Real, returns the associated f64. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"as_integer","","If the `Plist` is an Integer, returns the associated i64. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","If the `Plist` is a String, returns the underlying String. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"as_string","","If the `Plist` is a String, returns the associated str. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"generics":["plist"],"name":"vec"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"generics":["string","plist"],"name":"btreemap"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"bool"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"bool"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"date"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"date"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"f32"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"f32"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"plist"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"plist"}}],[0,"serde","","",null,null],[3,"Deserializer","plist::serde","",null,null],[12,"events","","",16,null],[3,"Serializer","","",null,null],[12,"writer","","",17,null],[5,"deserialize","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"serialize_to_xml","","",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[0,"de","","",null,null],[3,"Deserializer","plist::serde::de","",null,null],[12,"events","","",16,null],[3,"StructValueDeserializer","","",null,null],[12,"de","","",18,null],[3,"MapAndSeqAccess","","",null,null],[12,"de","","",19,null],[12,"is_struct","","",19,null],[12,"remaining","","",19,null],[5,"event_mismatch_error","","",null,{"inputs":[],"output":{"name":"error"}}],[11,"custom","plist","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","plist::serde","",16,{"inputs":[{"name":"i"}],"output":{"name":"deserializer"}}],[11,"deserialize_any","plist::serde::de","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"new","","",19,{"inputs":[{"name":"deserializer"},{"name":"bool"},{"generics":["usize"],"name":"option"}],"output":{"name":"mapandseqaccess"}}],[11,"next_element_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_key_seed","","",19,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"ser","plist::serde","",null,null],[3,"Serializer","plist::serde::ser","",null,null],[12,"writer","","",17,null],[3,"StructFieldSerializer","","",null,null],[12,"ser","","",20,null],[12,"field_name","","",20,null],[3,"DateSerializer","","",null,null],[12,"ser","","",21,null],[3,"Compound","","",null,null],[12,"ser","","",22,null],[11,"custom","plist","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","plist::serde","",17,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"emit","","",17,{"inputs":[{"name":"self"},{"name":"plistevent"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_inner","","",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"single_key_dict","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"single_key_dict_end","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"use_ser","plist::serde::ser","",20,{"inputs":[{"name":"self"}],"output":{"generics":["serializer","error"],"name":"result"}}],[11,"serialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",20,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",20,null],[11,"serialize_none","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_unit","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",20,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",20,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"expecting_date_error","","",21,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"serialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",21,null],[11,"serialize_none","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_unit","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",21,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",21,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_element","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","plist","",null,null],[8,"EventWriter","","",null,null],[10,"write","","",23,{"inputs":[{"name":"self"},{"name":"plistevent"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"plistevent"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"plistevent"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"plistevent"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"new","","",1,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"is_binary","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["bool"],"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}]],"paths":[[3,"Date"],[3,"EventReader"],[4,"Plist"],[4,"PlistEvent"],[4,"Error"],[4,"EventReaderInner"],[3,"EventReader"],[3,"StackItem"],[4,"StackType"],[3,"EventReader"],[3,"EventWriter"],[4,"Element"],[4,"DictionaryState"],[3,"Builder"],[3,"DateNewtypeVisitor"],[3,"DateStrVisitor"],[3,"Deserializer"],[3,"Serializer"],[3,"StructValueDeserializer"],[3,"MapAndSeqAccess"],[3,"StructFieldSerializer"],[3,"DateSerializer"],[3,"Compound"],[8,"EventWriter"]]};
searchIndex["pmutil"] = {"doc":"Utils for implementing proc-macro. Works on stable.","items":[[3,"Quote","pmutil","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[0,"comment","","",null,null],[5,"comment","pmutil::comment","Creates a comment from `s`.",null,{"inputs":[{"name":"s"}],"output":{"name":"attribute"}}],[0,"prelude","pmutil","Prelude for convenience.",null,null],[3,"Literal","pmutil::prelude","",null,null],[12,"0","","",1,null],[3,"Span","","",null,null],[12,"0","","",2,null],[3,"Term","","",null,null],[12,"0","","",3,null],[3,"TokenStream","","",null,null],[12,"0","","",4,null],[3,"TokenTree","","",null,null],[12,"span","","",5,null],[12,"kind","","",5,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[12,"term","","",6,null],[12,"span","","",6,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[8,"SpanExt","","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[10,"into_pm2_span","","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"spanned_quote","pmutil","Span-aware quasi quotting built on top of `quote` crate.",null,null],[3,"Location","pmutil::spanned_quote","Location of `smart_quote!` macro invocation.",null,null],[12,"file_name","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[3,"Quote","","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[0,"buffer","","",null,null],[3,"Quote","pmutil::spanned_quote::buffer","Buffer for quasi quotting.",null,null],[12,"tts","","",0,null],[12,"span","","",0,null],[12,"sources","","Location of smart_quote! invokations. Used for error reporting.",0,null],[3,"Location","","Location of `smart_quote!` macro invocation.",null,null],[12,"file_name","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[17,"INVALID_SPAN_STATE","","",null,null],[11,"clone","pmutil::spanned_quote","",8,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","pmutil","",0,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"new_call_site","","Shorthand for",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_tokens","","Shorthand for",0,{"inputs":[{"name":"totokens"}],"output":{"name":"self"}}],[11,"from_tokens_or","","Shorthand for",0,{"inputs":[{"name":"option"},{"name":"span"}],"output":{"name":"self"}}],[11,"parse","","Parse tokens as `Node`. Panics if parsing failed.",0,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"report_loc","","Reports location of `smart_quote!` invocation.",0,{"inputs":[{"name":"self"},{"name":"location"}],"output":null}],[11,"quote_with","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"push_parsed","","Parse `token` and append it to `self`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_node","","Respan token and append it to `self`.",0,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":null}],[11,"push_sym","","Respan symbol and append it to `self`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_group","","Respan and append `TokenStream::Group`",0,{"inputs":[{"name":"self"},{"name":"delimiter"},{"name":"f"}],"output":null}],[11,"push_tokens","","Appends node into `self` without respanning.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"into_iter","","",0,null],[11,"from","pmutil::prelude","",4,{"inputs":[{"name":"quote"}],"output":{"name":"self"}}],[11,"to_tokens","pmutil","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[0,"respan","","Span support for quasi-quotting.",null,null],[3,"FirstLast","pmutil::respan","",null,null],[12,"first","","",9,null],[12,"last","","",9,null],[8,"Respan","","",null,null],[10,"span_for","","Used while quasi quotting.",10,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"respan","","",10,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"span_for","pmutil::prelude","",2,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"fmt","pmutil::respan","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"firstlast"}}],[11,"span_for","","",9,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"from_tokens","","",9,{"inputs":[{"name":"totokens"}],"output":{"name":"self"}}],[0,"span_ext","pmutil","",null,null],[8,"SpanExt","pmutil::span_ext","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","pmutil::prelude","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[10,"into_pm2_span","pmutil::span_ext","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"into_pm2_span","pmutil::prelude","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"synom_ext","pmutil","Utils for tokens from synom::tokens.",null,null],[8,"FromSpan","pmutil::synom_ext","See [SpanExt#as_token][] for usage. Create tokens from [Span][].",null,null],[10,"from_span","","",11,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"from_span","pmutil::prelude","",2,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[8,"SpanExt","pmutil","Extension trait for [Span][] and [syn::Span][].",null,null],[11,"new_ident","pmutil::prelude","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ident"}}],[11,"as_token","","Creates `Token` from `self`.",7,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[10,"into_pm2_span","pmutil","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[8,"IdentExt","","Extension trait for [syn::Ident][].",null,null],[10,"new_ident_with","","Creates a new ident with same span by applying `map` to `self`.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ident"}}],[8,"ToTokensExt","","",null,null],[11,"dump","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"first_last","","Usage: `Quote::new(body.first_last())`",13,{"inputs":[{"name":"self"}],"output":{"name":"firstlast"}}],[11,"new_ident_with","pmutil::prelude","Creates a new ident with same span by applying `map` to `self`.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ident"}}],[14,"quoter_location","pmutil","",null,null],[14,"handle_vars_for_quote","","Usage: __sq_handle_vars! { a, b: expression(), c, };",null,null],[14,"declare_vars_for_quote","","This macro handles `Vars`, and creates a new hidden macro used inside quasi-quotting.",null,null],[14,"__sq_quote_tokens_to","","This macro assumes that `Vars` is already handled.",null,null],[14,"__sq_quote_closure","","",null,null],[14,"smart_quote","","ide-friendly quasi quotting.",null,null],[11,"integer","pmutil::prelude","",1,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",1,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",1,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",1,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",1,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",1,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",1,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",1,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",1,null],[11,"byte_char","","",1,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",1,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",1,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",1,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"from","","",5,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",2,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"from","","",4,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_tokens","","",5,null],[11,"to_tokens","","",4,null],[11,"to_tokens","","",3,null],[11,"to_tokens","","",1,null],[11,"from","","",4,{"inputs":[{"name":"tokens"}],"output":{"name":"tokenstream"}}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"self_"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"crate"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"capself"}],"output":{"name":"ident"}}],[11,"from","","",6,{"inputs":[{"name":"super"}],"output":{"name":"ident"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_tokens","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"call_site","","",2,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",2,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",2,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",2,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",2,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",2,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"intern","","",3,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates an ident with the given string representation.",6,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}]],"paths":[[3,"Quote"],[3,"Literal"],[3,"Span"],[3,"Term"],[3,"TokenStream"],[3,"TokenTree"],[3,"Ident"],[8,"SpanExt"],[3,"Location"],[3,"FirstLast"],[8,"Respan"],[8,"FromSpan"],[8,"IdentExt"],[8,"ToTokensExt"]]};
searchIndex["precomputed_hash"] = {"doc":"A base trait to expose a precomputed hash for a type.","items":[[8,"PrecomputedHash","precomputed_hash","A trait to expose a precomputed hash for a type.",null,null],[10,"precomputed_hash","","Return the precomputed hash for this item.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[8,"PrecomputedHash"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the `proc_macro` API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[12,"0","","",0,null],[3,"LexError","","",null,null],[12,"0","","",1,null],[3,"FileName","","",null,null],[12,"0","","",2,null],[3,"SourceFile","","",null,null],[12,"0","","",3,null],[3,"LineColumn","","",null,null],[12,"line","","",4,null],[12,"column","","",4,null],[3,"Span","","",null,null],[12,"0","","",5,null],[3,"TokenTree","","",null,null],[12,"span","","",6,null],[12,"kind","","",6,null],[3,"Term","","",null,null],[12,"0","","",7,null],[3,"Literal","","",null,null],[12,"0","","",8,null],[3,"TokenTreeIter","","",null,null],[12,"0","","",9,null],[4,"TokenNode","","",null,null],[13,"Group","","",10,null],[13,"Term","","",10,null],[13,"Op","","",10,null],[13,"Literal","","",10,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",11,null],[13,"Brace","","",11,null],[13,"Bracket","","",11,null],[13,"None","","",11,null],[4,"Spacing","","",null,null],[13,"Alone","","",12,null],[13,"Joint","","",12,null],[0,"imp","","",null,null],[3,"TokenStream","proc_macro2::imp","",null,null],[12,"0","","",13,null],[3,"LexError","","",null,null],[12,"0","","",14,null],[3,"TokenTreeIter","","",null,null],[12,"0","","",15,null],[3,"FileName","","",null,null],[12,"0","","",2,null],[3,"SourceFile","","",null,null],[12,"0","","",16,null],[12,"1","","",16,null],[3,"LineColumn","","",null,null],[12,"line","","",17,null],[12,"column","","",17,null],[3,"Span","","",null,null],[12,"0","","",18,null],[3,"Term","","",null,null],[12,"0","","",19,null],[3,"Literal","","",null,null],[12,"0","","",20,null],[5,"to_literal","","",null,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"empty","","",13,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",13,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"size_hint","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","proc_macro2","",2,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","proc_macro2::imp","",16,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"new","","",16,{"inputs":[{"name":"sourcefile"}],"output":{"name":"self"}}],[11,"path","","Get the path to this source file as a string.",16,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"is_real","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"from","proc_macro2","",5,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"call_site","proc_macro2::imp","",18,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",18,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","",18,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",18,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",18,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"intern","","",19,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"byte_char","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"byte_string","","",20,null],[11,"doccomment","","",20,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"float","","",20,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"integer","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"raw_string","","",20,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",20,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"from","","",20,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[0,"macros","proc_macro2","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",0,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"empty","","",0,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"sourcefile"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"path","","Get the path to this source file as a string.",3,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"is_real","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","",5,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",5,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",5,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"intern","","",7,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"integer","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",8,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",8,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",8,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",8,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",8,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",8,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",8,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",8,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",8,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",8,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",8,null],[11,"byte_char","","",8,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",8,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",8,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",8,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TokenStream"],[3,"LexError"],[3,"FileName"],[3,"SourceFile"],[3,"LineColumn"],[3,"Span"],[3,"TokenTree"],[3,"Term"],[3,"Literal"],[3,"TokenTreeIter"],[4,"TokenNode"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"LexError"],[3,"TokenTreeIter"],[3,"SourceFile"],[3,"LineColumn"],[3,"Span"],[3,"Term"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",null,null],[12,"tts","","",0,null],[0,"tokens","","",null,null],[3,"Tokens","quote::tokens","Tokens produced by a [`quote!`] invocation.",null,null],[12,"tts","","",0,null],[5,"tt_eq","","",null,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[5,"tt_hash","","",null,{"inputs":[{"name":"tokentree"},{"name":"h"}],"output":null}],[0,"private","","",null,null],[3,"IntoIter","quote::tokens::private","",null,null],[12,"0","","",1,null],[5,"into_iter","","",null,{"inputs":[{"generics":["tokentree"],"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","quote","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"tokens"}}],[11,"new","","Empty tokens.",0,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"into_iter","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"to_tokens","","",null,null],[5,"tt","quote::to_tokens","",null,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[0,"__rt","quote","",null,null],[5,"parse","quote::__rt","",null,{"inputs":[{"name":"tokens"},{"name":"span"},{"name":"str"}],"output":null}],[5,"append_kind","","",null,{"inputs":[{"name":"tokens"},{"name":"span"},{"name":"tokennode"}],"output":null}],[8,"ToTokens","quote","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","quote::to_tokens","Convert `self` directly into a `Tokens` object.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[14,"quote","quote","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[14,"pounded_var_names","","",null,null],[14,"nested_tuples_pat","","",null,null],[14,"multi_zip_expr","","",null,null],[14,"quote_each_token","","",null,null]],"paths":[[3,"Tokens"],[3,"IntoIter"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[12,"rng","","",0,null],[12,"_marker","","",0,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[12,"rng","","",1,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[12,"z","","",2,null],[12,"w","","",2,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",3,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",4,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[12,"rng","","",5,null],[3,"ThreadRngReseeder","","Controls how the thread-local RNG is reseeded.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[12,"rng","","",6,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"weak_seed","","",null,null],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[12,"_marker","","",7,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",8,null],[12,"item","","The actual item which is being weighted",8,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[12,"items","","",9,null],[12,"weight_range","","",9,null],[5,"ziggurat","","Sample a random number using the Ziggurat method (specifically the ZIGNOR variant from Doornik 2005). Most of the arguments are directly from the paper:",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[12,"low","","",10,null],[12,"range","","",10,null],[12,"accept_zone","","",10,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",11,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",10,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[12,"repr","","",12,null],[3,"GammaSmallShape","","Gamma distribution where the shape parameter is less than 1.",null,null],[12,"inv_shape","","",13,null],[12,"large_shape","","",13,null],[3,"GammaLargeShape","","Gamma distribution where the shape parameter is larger than 1.",null,null],[12,"scale","","",14,null],[12,"c","","",14,null],[12,"d","","",14,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[12,"repr","","",15,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[12,"numer","","",16,null],[12,"denom","","",16,null],[12,"dof_ratio","","",16,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[12,"chi","","",17,null],[12,"dof","","",17,null],[4,"GammaRepr","","",null,null],[13,"Large","","",18,null],[13,"One","","",18,null],[13,"Small","","",18,null],[4,"ChiSquaredRepr","","",null,null],[13,"DoFExactlyOne","","",19,null],[13,"DoFAnythingElse","","",19,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"gammarepr"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"gammasmallshape"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"gammalargeshape"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",12,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"new_raw","","",13,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gammasmallshape"}}],[11,"new_raw","","",14,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gammalargeshape"}}],[11,"sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"chisquaredrepr"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",15,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",16,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",17,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",20,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[12,"mean","","",21,null],[12,"std_dev","","",21,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[12,"norm","","",22,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",21,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",22,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",23,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[12,"lambda_inverse","","`lambda` stored as `1/lambda`, since this is what we scale by.",24,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",24,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"ziggurat_tables","rand::distributions","",null,null],[6,"ZigTable","rand::distributions::ziggurat_tables","",null,null],[7,"ZIG_NORM_X","","",null,null],[7,"ZIG_NORM_F","","",null,null],[7,"ZIG_EXP_X","","",null,null],[7,"ZIG_EXP_F","","",null,null],[17,"ZIG_NORM_R","","",null,null],[17,"ZIG_EXP_R","","",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",9,null],[11,"sample","","",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[12,"cnt","","",27,null],[12,"rsl","","",27,null],[12,"mem","","",27,null],[12,"a","","",27,null],[12,"b","","",27,null],[12,"c","","",27,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[12,"cnt","","",28,null],[12,"rsl","","",28,null],[12,"mem","","",28,null],[12,"a","","",28,null],[12,"b","","",28,null],[12,"c","","",28,null],[7,"EMPTY","","",null,null],[7,"EMPTY_64","","",null,null],[17,"RAND_SIZE_LEN","","",null,null],[17,"RAND_SIZE","","",null,null],[17,"RAND_SIZE_USIZE","","",null,null],[17,"RAND_SIZE_64_LEN","","",null,null],[17,"RAND_SIZE_64","","",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",27,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"init","","Initialises `self`. If `use_rsl` is true, then use the current value of `rsl` as a seed, otherwise construct one algorithmically (not randomly).",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"isaac","","Refills the output buffer (`self.rsl`)",27,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",28,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"init","","Initialises `self`. If `use_rsl` is true, then use the current value of `rsl` as a seed, otherwise construct one algorithmically (not randomly).",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"isaac64","","Refills the output buffer (`self.rsl`)",28,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",28,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",28,null],[11,"rand","","",28,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[12,"buffer","","",29,null],[12,"state","","",29,null],[12,"index","","",29,null],[5,"core","","",null,null],[7,"EMPTY","","",null,null],[17,"KEY_WORDS","","",null,null],[17,"STATE_WORDS","","",null,null],[17,"CHACHA_ROUNDS","","",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",29,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",29,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"init","","Initializes `self.state` with the appropriate key and constants",29,null],[11,"update","","Refill the internal output buffer (`self.buffer`)",29,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",29,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",29,null],[11,"rand","","",29,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"rng","","",30,null],[12,"generation_threshold","","",30,null],[12,"bytes_generated","","",30,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",30,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[17,"DEFAULT_GENERATION_THRESHOLD","","How many bytes of entropy the underling RNG is allowed to generate before it is reseeded",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",30,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",30,null],[11,"reseed","","",30,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",30,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",32,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",32,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[0,"rand_impls","rand","The implementations of `Rand` for the built-in types.",null,null],[0,"f64_rand_impls","rand::rand_impls","",null,null],[17,"SCALE","rand::rand_impls::f64_rand_impls","",null,null],[11,"rand","rand","",3,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[0,"f32_rand_impls","rand::rand_impls","",null,null],[17,"SCALE","rand::rand_impls::f32_rand_impls","",null,null],[11,"rand","rand","",3,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[12,"0","","",33,null],[5,"next_u32","","",null,{"inputs":[{"name":"fnmut"}],"output":{"name":"u32"}}],[5,"next_u64","","",null,{"inputs":[{"name":"fnmut"}],"output":{"name":"u64"}}],[0,"imp","","",null,null],[3,"OsRng","rand::os::imp","",null,null],[12,"inner","","",34,null],[4,"OsRngInner","","",null,null],[13,"OsGetrandomRng","","",35,null],[13,"OsReadRng","","",35,null],[5,"getrandom","","",null,null],[5,"getrandom_fill_bytes","","",null,null],[5,"is_getrandom_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","",34,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",34,null],[11,"new","rand::os","Create a new `OsRng`.",33,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[12,"reader","","",36,null],[5,"fill","","",null,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",36,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",36,null],[6,"w64","rand","",null,null],[6,"w32","","",null,null],[6,"ThreadRngInner","","",null,null],[17,"THREAD_RNG_RESEED_THRESHOLD","","",null,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",37,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",38,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",38,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",38,null],[11,"gen","","Return a random value of a `Rand` type.",38,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",38,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",38,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",38,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",38,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",38,null],[11,"shuffle","","Shuffle a mutable slice in place.",38,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",39,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",39,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",2,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",2,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",2,null],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",5,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",5,null],[11,"from_seed","","",5,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",40,{"inputs":[{"name":"self"},{"name":"stdrng"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",6,null]],"paths":[[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"Open01"],[3,"Closed01"],[3,"StdRng"],[3,"ThreadRng"],[3,"RandSample"],[3,"Weighted"],[3,"WeightedChoice"],[3,"Range"],[8,"SampleRange"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[4,"GammaRepr"],[4,"ChiSquaredRepr"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"OsRng"],[4,"OsRngInner"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"ThreadRngReseeder"]]};
searchIndex["rayon"] = {"doc":"Data-parallelism library that is easy to convert sequential computations into parallel.","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"Configuration","","Contains the rayon thread pool configuration.",null,null],[12,"num_threads","","The number of threads in the rayon thread pool. If zero will use the RAYON_NUM_THREADS environment variable. If RAYON_NUM_THREADS is invalid or zero will use the default.",0,null],[12,"panic_handler","","Custom closure, if any, to handle a panic that we cannot propagate anywhere else.",0,null],[12,"get_thread_name","","Closure to compute the name of a thread.",0,null],[12,"stack_size","","The stack size for the created worker threads",0,null],[12,"start_handler","","Closure invoked on worker thread start.",0,null],[12,"exit_handler","","Closure invoked on worker thread exit.",0,null],[12,"breadth_first","","If false, worker threads will execute spawned jobs in a \"depth-first\" fashion. If true, they will do a \"breadth-first\" fashion. Depth-first is the default.",0,null],[5,"initialize","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[3,"ThreadPool","","ThreadPool",null,null],[12,"registry","","",1,null],[5,"join","","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","The `join_context` function is identical to `join`, except the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[12,"migrated","","",2,null],[12,"_marker","","disable `Send` and `Sync`, just for a little future-proofing.",2,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[12,"owner_thread_index","","thread where `scope()` was executed (note that individual jobs may be executing on different worker threads, though they should always be within the same pool of threads)",3,null],[12,"registry","","thread registry where `scope()` was executed.",3,null],[12,"panic","","if some job panicked, the error is stored here; it will be propagated to the one who created the scope",3,null],[12,"job_completed_latch","","latch to set when the counter drops to zero (and hence this scope is complete)",3,null],[12,"marker","","You can think of a scope as containing a list of closures to execute, all of which outlive `'scope`.  They're not actually required to be `Sync`, but it's still safe to let the `Scope` implement `Sync` because the closures are only moved across threads to be executed.",3,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"delegate","","Macros for delegating newtype iterators to inner types.",null,null],[0,"private","","The public parts of this private module are used to create traits that cannot be implemented outside of our own crate.  This way we can feel free to extend those traits without worrying about it being a breaking change for other implementations.",null,null],[3,"PrivateMarker","rayon::private","If this type is pub but not publicly reachable, third parties can't name it and can't implement traits using it.",null,null],[0,"split_producer","rayon","Common splitter for strings and slices",null,null],[3,"SplitProducer","rayon::split_producer","Common producer for splitting on a predicate.",null,null],[12,"data","","",4,null],[12,"separator","","",4,null],[12,"tail","","Marks the endpoint beyond which we've already found no separators.",4,null],[8,"Fissile","","Helper trait so `&str`, `&[T]`, and `&mut [T]` can share `SplitProducer`.",null,null],[10,"length","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"midpoint","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"find","","",5,{"inputs":[{"name":"self"},{"name":"p"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[10,"rfind","","",5,{"inputs":[{"name":"self"},{"name":"p"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[10,"split_once","","",5,null],[10,"fold_splits","","",5,{"inputs":[{"name":"self"},{"name":"p"},{"name":"f"},{"name":"bool"}],"output":{"name":"f"}}],[11,"new","","",4,{"inputs":[{"name":"v"},{"name":"p"}],"output":{"name":"self"}}],[11,"fold_with","","Common `fold_with` implementation, integrating `SplitTerminator`'s need to sometimes skip its final empty item.",4,{"inputs":[{"name":"self"},{"name":"f"},{"name":"bool"}],"output":{"name":"f"}}],[11,"split","","",4,null],[11,"fold_with","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[0,"collections","rayon","This module contains the parallel iterator types for standard collections. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[12,"inner","","",6,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[12,"inner","","",7,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",6,null],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",6,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",7,null],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",7,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[12,"inner","","",8,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[12,"inner","","",9,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[12,"inner","","",10,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[12,"inner","","",11,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[12,"inner","","",12,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[12,"inner","","",13,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[12,"inner","","",14,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[12,"inner","","",15,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[12,"inner","","",16,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[12,"inner","","",17,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[12,"inner","","",18,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[12,"inner","","",19,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[12,"inner","","",20,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",18,null],[11,"opt_len","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[12,"inner","","",21,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[12,"inner","","",22,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[12,"inner","","",23,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",21,null],[11,"opt_len","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",21,null],[11,"len","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",22,null],[11,"opt_len","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",22,null],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",22,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",23,null],[11,"opt_len","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",23,null],[11,"len","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",23,null],[0,"iter","rayon","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",24,null],[13,"Right","","A value of type `R`.",24,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[12,"a","","",25,null],[12,"b","","",25,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`ParallelIterator`]",null,null],[12,"base","","",26,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[12,"base","","",27,null],[12,"filter_op","","",27,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[12,"base","","",28,null],[12,"filter_op","","",28,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[12,"base","","",29,null],[12,"map_op","","",29,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[12,"base","","",30,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[12,"base","","",31,null],[12,"identity","","",31,null],[12,"fold_op","","",31,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[12,"base","","",32,null],[12,"item","","",32,null],[12,"fold_op","","",32,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`ParallelIterator`]",null,null],[12,"base","","",33,null],[12,"n","","",33,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[12,"data","","",34,null],[12,"splitter","","",34,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`ParallelIterator`]",null,null],[12,"base","","",35,null],[12,"n","","",35,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[12,"base","","",36,null],[12,"map_op","","",36,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[12,"base","","",37,null],[12,"item","","",37,null],[12,"map_op","","",37,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[12,"a","","",38,null],[12,"b","","",38,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[12,"zip","","",39,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[12,"i","","",40,null],[12,"j","","",40,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[12,"interleave","","",41,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[12,"base","","",42,null],[12,"item","","",42,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[12,"base","","",43,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[12,"base","","",44,null],[12,"min","","",44,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[12,"base","","",45,null],[12,"max","","",45,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[12,"base","","",46,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[12,"base","","",47,null],[12,"inspect_op","","",47,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[12,"base","","",48,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[12,"element","","",49,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[12,"element","","",50,null],[12,"count","","",50,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[12,"marker","","",51,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[12,"item","","",52,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"find","","",null,null],[3,"FindConsumer","rayon::iter::find","",null,null],[12,"find_op","","",53,null],[12,"found","","",53,null],[3,"FindFolder","","",null,null],[12,"find_op","","",54,null],[12,"found","","",54,null],[12,"item","","",54,null],[3,"FindReducer","","",null,null],[5,"find","","",null,{"inputs":[{"name":"i"},{"name":"p"}],"output":{"name":"option"}}],[11,"new","","",53,{"inputs":[{"name":"p"},{"name":"atomicbool"}],"output":{"name":"self"}}],[11,"split_at","","",53,null],[11,"into_folder","","",53,null],[11,"full","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",53,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",53,null],[11,"consume","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",54,null],[11,"full","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduce","","",55,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[0,"find_first_last","rayon::iter","",null,null],[3,"FindConsumer","rayon::iter::find_first_last","",null,null],[12,"find_op","","",56,null],[12,"lower_bound","","",56,null],[12,"upper_bound","","",56,null],[12,"match_position","","",56,null],[12,"best_found","","",56,null],[3,"FindFolder","","",null,null],[12,"find_op","","",57,null],[12,"boundary","","",57,null],[12,"match_position","","",57,null],[12,"best_found","","",57,null],[12,"item","","",57,null],[3,"FindReducer","","",null,null],[12,"match_position","","",58,null],[4,"MatchPosition","","",null,null],[13,"Leftmost","","",59,null],[13,"Rightmost","","",59,null],[5,"better_position","","Returns true if pos1 is a better match than pos2 according to MatchPosition",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"matchposition"}],"output":{"name":"bool"}}],[5,"find_first","","",null,{"inputs":[{"name":"i"},{"name":"p"}],"output":{"name":"option"}}],[5,"find_last","","",null,{"inputs":[{"name":"i"},{"name":"p"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"matchposition"}}],[11,"new","","",56,{"inputs":[{"name":"p"},{"name":"matchposition"},{"name":"atomicusize"}],"output":{"name":"self"}}],[11,"current_index","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",56,null],[11,"into_folder","","",56,null],[11,"full","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",56,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",56,null],[11,"consume","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",57,null],[11,"full","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduce","","",58,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[0,"chain","rayon::iter","",null,null],[3,"Chain","rayon::iter::chain","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[12,"a","","",25,null],[12,"b","","",25,null],[3,"ChainProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"a_len","","",60,null],[12,"a","","",60,null],[12,"b","","",60,null],[3,"ChainSeq","","//////////////////////////////////////////////////////////////////////// Wrapper for Chain to implement ExactSizeIterator",null,null],[12,"chain","","",61,null],[5,"new","","Create a new `Chain` iterator.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chain"}}],[11,"fmt","rayon::iter","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"drive_unindexed","","",25,null],[11,"opt_len","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",25,null],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",25,null],[11,"new","rayon::iter::chain","",60,{"inputs":[{"name":"usize"},{"name":"a"},{"name":"b"}],"output":{"name":"self"}}],[11,"into_iter","","",60,null],[11,"min_len","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",60,null],[11,"fold_with","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"new","","",61,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chainseq"}}],[11,"next","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"collect","rayon::iter","",null,null],[3,"Collect","rayon::iter::collect","Manage the collection vector.",null,null],[12,"writes","","",62,null],[12,"vec","","",62,null],[12,"len","","",62,null],[5,"collect_into","","Collects the results of the exact iterator into the specified vector.",null,{"inputs":[{"name":"i"},{"name":"vec"}],"output":null}],[5,"special_extend","","Collects the results of the iterator into the specified vector.",null,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"vec"}],"output":null}],[5,"unzip_into","","Unzips the results of the exact iterator into the specified vectors.",null,{"inputs":[{"name":"i"},{"name":"vec"},{"name":"vec"}],"output":null}],[0,"consumer","","",null,null],[3,"CollectConsumer","rayon::iter::collect::consumer","",null,null],[12,"writes","","Tracks how many items we successfully wrote. Used to guarantee safety in the face of panics or buggy parallel iterators.",63,null],[12,"target","","A slice covering the target memory, not yet initialized!",63,null],[3,"CollectFolder","","",null,null],[12,"global_writes","","",64,null],[12,"local_writes","","",64,null],[12,"target","","An iterator over the uninitialized target memory.",64,null],[11,"new","","The target memory is considered uninitialized, and will be overwritten without dropping anything.",63,null],[11,"split_at","","",63,null],[11,"into_folder","","",63,{"inputs":[{"name":"self"}],"output":{"name":"collectfolder"}}],[11,"full","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"consume","","",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"collectfolder"}}],[11,"complete","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"full","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",63,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",63,null],[11,"new","rayon::iter::collect","",62,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"as_consumer","","Create a consumer on a slice of our memory.",62,{"inputs":[{"name":"self"}],"output":{"name":"collectconsumer"}}],[11,"complete","","Update the final vector length.",62,{"inputs":[{"name":"self"}],"output":null}],[0,"enumerate","rayon::iter","",null,null],[3,"Enumerate","rayon::iter::enumerate","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`ParallelIterator`]",null,null],[12,"base","","",26,null],[3,"EnumerateProducer","","//////////////////////////////////////////////////////////////////////// Producer implementation",null,null],[12,"base","","",65,null],[12,"offset","","",65,null],[5,"new","","Create a new `Enumerate` iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[11,"fmt","rayon::iter","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",26,null],[11,"opt_len","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",26,null],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",26,null],[11,"into_iter","rayon::iter::enumerate","",65,null],[11,"min_len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",65,null],[0,"filter","rayon::iter","",null,null],[3,"Filter","rayon::iter::filter","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[12,"base","","",27,null],[12,"filter_op","","",27,null],[3,"FilterConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",66,null],[12,"filter_op","","",66,null],[3,"FilterFolder","","",null,null],[12,"base","","",67,null],[12,"filter_op","","",67,null],[5,"new","","Create a new `Filter` iterator.",null,{"inputs":[{"name":"i"},{"name":"p"}],"output":{"name":"filter"}}],[11,"clone","rayon::iter","",27,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",27,null],[11,"new","rayon::iter::filter","",66,{"inputs":[{"name":"c"},{"name":"p"}],"output":{"name":"self"}}],[11,"split_at","","",66,null],[11,"into_folder","","",66,null],[11,"full","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",66,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",66,null],[11,"consume","","",67,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",67,null],[11,"full","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"filter_map","rayon::iter","",null,null],[3,"FilterMap","rayon::iter::filter_map","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[12,"base","","",28,null],[12,"filter_op","","",28,null],[3,"FilterMapConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",68,null],[12,"filter_op","","",68,null],[3,"FilterMapFolder","","",null,null],[12,"base","","",69,null],[12,"filter_op","","",69,null],[5,"new","","Create a new `FilterMap` iterator.",null,{"inputs":[{"name":"i"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"clone","rayon::iter","",28,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",28,null],[11,"new","rayon::iter::filter_map","",68,{"inputs":[{"name":"c"},{"name":"p"}],"output":{"name":"self"}}],[11,"split_at","","",68,null],[11,"into_folder","","",68,null],[11,"full","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",68,null],[11,"consume","","",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",69,null],[11,"full","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"flat_map","rayon::iter","",null,null],[3,"FlatMap","rayon::iter::flat_map","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[12,"base","","",29,null],[12,"map_op","","",29,null],[3,"FlatMapConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",70,null],[12,"map_op","","",70,null],[3,"FlatMapFolder","","",null,null],[12,"base","","",71,null],[12,"map_op","","",71,null],[12,"previous","","",71,null],[5,"new","","Create a new `FlatMap` iterator.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"clone","rayon::iter","",29,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",29,null],[11,"new","rayon::iter::flat_map","",70,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"self"}}],[11,"split_at","","",70,null],[11,"into_folder","","",70,null],[11,"full","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",70,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",70,null],[11,"consume","","",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",71,null],[11,"full","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"flatten","rayon::iter","",null,null],[3,"Flatten","rayon::iter::flatten","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[12,"base","","",30,null],[5,"new","","Create a new `Flatten` iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"fmt","rayon::iter","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"drive_unindexed","","",30,null],[0,"from_par_iter","","",null,null],[5,"collect_extended","rayon::iter::from_par_iter","Create an empty default collection and extend it.",null,{"inputs":[{"name":"i"}],"output":{"name":"c"}}],[0,"plumbing","rayon::iter","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See `README.md` for a high-level overview.",null,null],[3,"Splitter","rayon::iter::plumbing","A splitter controls the policy for splitting into smaller work items.",null,null],[12,"splits","","The `splits` tell us approximately how many remaining times we'd like to split this job.  We always just divide it by two though, so the effective number of pieces will be `next_power_of_two()`.",72,null],[3,"LengthSplitter","","The length splitter is built on thief-splitting, but additionally takes into account the remaining length of the iterator.",null,null],[12,"inner","","",73,null],[12,"min","","The smallest we're willing to divide into.  Usually this is just 1, but you can choose a larger working size with `with_min_len()`.",73,null],[5,"bridge","","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[5,"bridge_unindexed_producer_consumer","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",74,null],[10,"callback","","",74,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[16,"Item","","",75,null],[16,"IntoIter","","",75,null],[10,"into_iter","","",75,null],[11,"min_len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",75,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",76,null],[16,"Reducer","","",76,null],[16,"Result","","",76,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",76,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",76,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",77,null],[10,"consume","","Consume next item and return new sequential state.",77,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",77,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",77,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",78,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off_left","","",79,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",79,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[16,"Item","","",80,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",80,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"splitter"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"splitter"}}],[11,"try","","",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"lengthsplitter"}}],[11,"new","","Create a new splitter based on lengths.",73,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"lengthsplitter"}}],[11,"try","","",73,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bool"}}],[0,"for_each","rayon::iter","",null,null],[3,"ForEachConsumer","rayon::iter::for_each","",null,null],[12,"op","","",81,null],[5,"for_each","","",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":null}],[11,"split_at","","",81,null],[11,"into_folder","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"full","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"consume","","",81,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"full","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",81,{"inputs":[{"name":"self"}],"output":{"name":"noopreducer"}}],[0,"fold","rayon::iter","",null,null],[3,"Fold","rayon::iter::fold","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[12,"base","","",31,null],[12,"identity","","",31,null],[12,"fold_op","","",31,null],[3,"FoldConsumer","","",null,null],[12,"base","","",82,null],[12,"fold_op","","",82,null],[12,"identity","","",82,null],[3,"FoldFolder","","",null,null],[12,"base","","",83,null],[12,"fold_op","","",83,null],[12,"item","","",83,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[12,"base","","",32,null],[12,"item","","",32,null],[12,"fold_op","","",32,null],[3,"FoldWithConsumer","","",null,null],[12,"base","","",84,null],[12,"item","","",84,null],[12,"fold_op","","",84,null],[5,"fold","","",null,{"inputs":[{"name":"i"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[5,"fold_with","","",null,{"inputs":[{"name":"i"},{"name":"u"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"clone","rayon::iter","",31,{"inputs":[{"name":"self"}],"output":{"name":"fold"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",31,null],[11,"split_at","rayon::iter::fold","",82,null],[11,"into_folder","","",82,null],[11,"full","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",82,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",82,null],[11,"consume","","",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",83,null],[11,"full","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","rayon::iter","",32,{"inputs":[{"name":"self"}],"output":{"name":"foldwith"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",32,null],[11,"split_at","rayon::iter::fold","",84,null],[11,"into_folder","","",84,null],[11,"full","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",84,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",84,null],[0,"reduce","rayon::iter","",null,null],[3,"ReduceConsumer","rayon::iter::reduce","",null,null],[12,"identity","","",85,null],[12,"reduce_op","","",85,null],[3,"ReduceFolder","","",null,null],[12,"reduce_op","","",86,null],[12,"item","","",86,null],[5,"reduce","","",null,{"inputs":[{"name":"pi"},{"name":"id"},{"name":"r"}],"output":{"name":"t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"split_at","","",85,null],[11,"into_folder","","",85,null],[11,"full","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",85,null],[11,"reduce","","",85,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"consume","","",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"consume_iter","","",86,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"complete","","",86,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"full","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"skip","rayon::iter","",null,null],[3,"Skip","rayon::iter::skip","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`ParallelIterator`]",null,null],[12,"base","","",33,null],[12,"n","","",33,null],[5,"new","","Create a new `Skip` iterator.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"fmt","rayon::iter","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"with_producer","","",33,null],[0,"splitter","","",null,null],[3,"Split","rayon::iter::splitter","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[12,"data","","",34,null],[12,"splitter","","",34,null],[3,"SplitProducer","","",null,null],[12,"data","","",87,null],[12,"splitter","","",87,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[11,"clone","rayon::iter","",34,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",34,null],[11,"split","rayon::iter::splitter","",87,null],[11,"fold_with","","",87,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[0,"take","rayon::iter","",null,null],[3,"Take","rayon::iter::take","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`ParallelIterator`]",null,null],[12,"base","","",35,null],[12,"n","","",35,null],[5,"new","","Create a new `Take` iterator.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"take"}}],[11,"fmt","rayon::iter","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[0,"map","","",null,null],[3,"Map","rayon::iter::map","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[12,"base","","",36,null],[12,"map_op","","",36,null],[3,"MapProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"base","","",88,null],[12,"map_op","","",88,null],[3,"MapConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",89,null],[12,"map_op","","",89,null],[3,"MapFolder","","",null,null],[12,"base","","",90,null],[12,"map_op","","",90,null],[5,"new","","Create a new `Map` iterator.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"map"}}],[11,"clone","rayon::iter","",36,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",36,null],[11,"opt_len","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",36,null],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",36,null],[11,"into_iter","rayon::iter::map","",88,null],[11,"min_len","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",88,null],[11,"new","","",89,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"self"}}],[11,"split_at","","",89,null],[11,"into_folder","","",89,null],[11,"full","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",89,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",89,null],[11,"consume","","",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",90,null],[11,"full","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"map_with","rayon::iter","",null,null],[3,"MapWith","rayon::iter::map_with","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[12,"base","","",37,null],[12,"item","","",37,null],[12,"map_op","","",37,null],[3,"MapWithProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"base","","",91,null],[12,"item","","",91,null],[12,"map_op","","",91,null],[3,"MapWithIter","","",null,null],[12,"base","","",92,null],[12,"item","","",92,null],[12,"map_op","","",92,null],[3,"MapWithConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",93,null],[12,"item","","",93,null],[12,"map_op","","",93,null],[3,"MapWithFolder","","",null,null],[12,"base","","",94,null],[12,"item","","",94,null],[12,"map_op","","",94,null],[5,"new","","Create a new `MapWith` iterator.",null,{"inputs":[{"name":"i"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"clone","rayon::iter","",37,{"inputs":[{"name":"self"}],"output":{"name":"mapwith"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",37,null],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",37,null],[11,"into_iter","rayon::iter::map_with","",91,null],[11,"min_len","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",91,null],[11,"next","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",93,{"inputs":[{"name":"c"},{"name":"u"},{"name":"f"}],"output":{"name":"self"}}],[11,"split_at","","",93,null],[11,"into_folder","","",93,null],[11,"full","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",93,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",93,null],[11,"consume","","",94,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"consume_iter","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"complete","","",94,null],[11,"full","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"zip","rayon::iter","",null,null],[3,"Zip","rayon::iter::zip","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[12,"a","","",38,null],[12,"b","","",38,null],[3,"ZipProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"a","","",95,null],[12,"b","","",95,null],[5,"new","","Create a new `Zip` iterator.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zip"}}],[11,"fmt","rayon::iter","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",38,null],[11,"into_iter","rayon::iter::zip","",95,null],[11,"min_len","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",95,null],[0,"zip_eq","rayon::iter","",null,null],[3,"ZipEq","rayon::iter::zip_eq","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[12,"zip","","",39,null],[5,"new","","Create a new `ZipEq` iterator.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipeq"}}],[11,"fmt","rayon::iter","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",39,null],[0,"interleave","","",null,null],[3,"Interleave","rayon::iter::interleave","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[12,"i","","",40,null],[12,"j","","",40,null],[3,"InterleaveProducer","","",null,null],[12,"i","","",96,null],[12,"j","","",96,null],[12,"i_len","","",96,null],[12,"j_len","","",96,null],[12,"i_next","","",96,null],[3,"InterleaveSeq","","Wrapper for Interleave to implement DoubleEndedIterator and ExactSizeIterator.",null,null],[12,"i","","",97,null],[12,"j","","",97,null],[12,"i_next","","Flag to control which iterator should provide the next element. When `false` then `i` produces the next element, otherwise `j` produces the next element.",97,null],[5,"new","","Create a new `Interleave` iterator",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"fmt","rayon::iter","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",40,null],[11,"new","rayon::iter::interleave","",96,{"inputs":[{"name":"i"},{"name":"j"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"interleaveproducer"}}],[11,"into_iter","","",96,null],[11,"min_len","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","We know 0 < index <= self.i_len + self.j_len",96,null],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"interleave_shortest","rayon::iter","",null,null],[3,"InterleaveShortest","rayon::iter::interleave_shortest","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[12,"interleave","","",41,null],[5,"new","","Create a new `InterleaveShortest` iterator",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","rayon::iter","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[0,"intersperse","","",null,null],[3,"Intersperse","rayon::iter::intersperse","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[12,"base","","",42,null],[12,"item","","",42,null],[3,"IntersperseProducer","","",null,null],[12,"base","","",98,null],[12,"item","","",98,null],[12,"len","","",98,null],[12,"clone_first","","",98,null],[3,"IntersperseIter","","",null,null],[12,"base","","",99,null],[12,"item","","",99,null],[12,"clone_first","","",99,null],[12,"clone_last","","",99,null],[3,"IntersperseConsumer","","",null,null],[12,"base","","",100,null],[12,"item","","",100,null],[12,"clone_first","","",100,null],[3,"IntersperseFolder","","",null,null],[12,"base","","",101,null],[12,"item","","",101,null],[12,"clone_first","","",101,null],[5,"new","","Create a new `Intersperse` iterator",null,null],[11,"clone","rayon::iter","",42,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"new","rayon::iter::intersperse","",98,null],[11,"into_iter","","",98,null],[11,"min_len","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",98,null],[11,"next","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",100,{"inputs":[{"name":"c"},{"name":"t"}],"output":{"name":"self"}}],[11,"split_at","","",100,null],[11,"into_folder","","",100,null],[11,"full","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",100,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",100,null],[11,"consume","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",101,null],[11,"full","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"noop","rayon::iter","",null,null],[3,"NoopConsumer","rayon::iter::noop","",null,null],[3,"NoopReducer","","",null,null],[11,"new","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"split_at","","",102,null],[11,"into_folder","","",102,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"full","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"consume","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"full","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",102,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",102,{"inputs":[{"name":"self"}],"output":{"name":"noopreducer"}}],[11,"reduce","","",103,null],[0,"rev","rayon::iter","",null,null],[3,"Rev","rayon::iter::rev","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[12,"base","","",43,null],[3,"RevProducer","","",null,null],[12,"base","","",104,null],[12,"len","","",104,null],[5,"new","","Create a new `Rev` iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[11,"fmt","rayon::iter","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"into_iter","rayon::iter::rev","",104,null],[11,"min_len","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",104,null],[0,"len","rayon::iter","",null,null],[3,"MinLen","rayon::iter::len","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[12,"base","","",44,null],[12,"min","","",44,null],[3,"MinLenProducer","","//////////////////////////////////////////////////////////////////////// `MinLenProducer` implementation",null,null],[12,"base","","",105,null],[12,"min","","",105,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[12,"base","","",45,null],[12,"max","","",45,null],[3,"MaxLenProducer","","//////////////////////////////////////////////////////////////////////// `MaxLenProducer` implementation",null,null],[12,"base","","",106,null],[12,"max","","",106,null],[5,"new_min_len","","Create a new `MinLen` iterator.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"minlen"}}],[5,"new_max_len","","Create a new `MaxLen` iterator.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"maxlen"}}],[11,"fmt","rayon::iter","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"minlen"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",44,null],[11,"into_iter","rayon::iter::len","",105,null],[11,"min_len","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",105,null],[11,"fmt","rayon::iter","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"maxlen"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"into_iter","rayon::iter::len","",106,null],[11,"min_len","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",106,null],[0,"sum","rayon::iter","",null,null],[3,"SumConsumer","rayon::iter::sum","",null,null],[12,"_marker","","",107,null],[3,"SumFolder","","",null,null],[12,"sum","","",108,null],[5,"sum","","",null,{"inputs":[{"name":"pi"}],"output":{"name":"s"}}],[5,"add","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"sumconsumer"}}],[11,"split_at","","",107,null],[11,"into_folder","","",107,null],[11,"full","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",107,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",107,null],[11,"reduce","","",107,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"}],"output":{"name":"s"}}],[11,"consume","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"consume_iter","","",108,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"complete","","",108,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"full","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"product","rayon::iter","",null,null],[3,"ProductConsumer","rayon::iter::product","",null,null],[12,"_marker","","",109,null],[3,"ProductFolder","","",null,null],[12,"product","","",110,null],[5,"product","","",null,{"inputs":[{"name":"pi"}],"output":{"name":"p"}}],[5,"mul","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","",109,{"inputs":[],"output":{"name":"productconsumer"}}],[11,"split_at","","",109,null],[11,"into_folder","","",109,null],[11,"full","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",109,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",109,null],[11,"reduce","","",109,{"inputs":[{"name":"self"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"consume","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"consume_iter","","",110,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"complete","","",110,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"full","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"cloned","rayon::iter","",null,null],[3,"Cloned","rayon::iter::cloned","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[12,"base","","",46,null],[3,"ClonedProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"base","","",111,null],[3,"ClonedConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",112,null],[3,"ClonedFolder","","",null,null],[12,"base","","",113,null],[5,"new","","Create a new `Cloned` iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[11,"fmt","rayon::iter","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",46,null],[11,"into_iter","rayon::iter::cloned","",111,null],[11,"min_len","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",111,null],[11,"new","","",112,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"split_at","","",112,null],[11,"into_folder","","",112,null],[11,"full","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",112,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",112,null],[11,"consume","","",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",113,null],[11,"full","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"inspect","rayon::iter","",null,null],[3,"Inspect","rayon::iter::inspect","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[12,"base","","",47,null],[12,"inspect_op","","",47,null],[3,"InspectProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"base","","",114,null],[12,"inspect_op","","",114,null],[3,"InspectConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",115,null],[12,"inspect_op","","",115,null],[3,"InspectFolder","","",null,null],[12,"base","","",116,null],[12,"inspect_op","","",116,null],[5,"new","","Create a new `Inspect` iterator.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"clone","rayon::iter","",47,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"into_iter","rayon::iter::inspect","",114,null],[11,"min_len","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","",114,null],[11,"new","","",115,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"self"}}],[11,"split_at","","",115,null],[11,"into_folder","","",115,null],[11,"full","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",115,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",115,null],[11,"consume","","",116,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",116,null],[11,"full","","",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"while_some","rayon::iter","",null,null],[3,"WhileSome","rayon::iter::while_some","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[12,"base","","",48,null],[3,"WhileSomeConsumer","","//////////////////////////////////////////////////////////////////////// Consumer implementation",null,null],[12,"base","","",117,null],[12,"full","","",117,null],[3,"WhileSomeFolder","","",null,null],[12,"base","","",118,null],[12,"full","","",118,null],[5,"new","","Create a new `WhileSome` iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"whilesome"}}],[11,"fmt","rayon::iter","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"drive_unindexed","","",48,null],[11,"split_at","rayon::iter::while_some","",117,null],[11,"into_folder","","",117,null],[11,"full","","",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",117,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",117,null],[11,"consume","","",118,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"complete","","",118,null],[11,"full","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"extend","rayon::iter","",null,null],[5,"extend","rayon::iter::extend","Perform a generic `par_extend` by collecting to a `LinkedList<Vec<_>>` in parallel, then extending the collection sequentially.",null,{"inputs":[{"name":"c"},{"name":"i"},{"name":"f"}],"output":null}],[5,"len","","Compute the total length of a `LinkedList<Vec<_>>`.",null,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[5,"str_len","","Compute the total string length of a `LinkedList<Vec<AsRef<str>>>`.",null,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[0,"unzip","rayon::iter","",null,null],[3,"Unzip","rayon::iter::unzip","An `UnzipOp` that splits a tuple directly into the two consumers.",null,null],[3,"Partition","","An `UnzipOp` that routes items depending on a predicate function.",null,null],[12,"predicate","","",119,null],[3,"PartitionMap","","An `UnzipOp` that routes items depending on how they are mapped `Either`.",null,null],[12,"predicate","","",120,null],[3,"UnzipA","","A fake iterator to intercept the `Consumer` for type `A`.",null,null],[12,"base","","",121,null],[12,"op","","",121,null],[12,"b","","",121,null],[3,"UnzipB","","A fake iterator to intercept the `Consumer` for type `B`.",null,null],[12,"base","","",122,null],[12,"op","","",122,null],[12,"left_consumer","","",122,null],[12,"left_result","","",122,null],[3,"UnzipConsumer","","`Consumer` that unzips into two other `Consumer`s",null,null],[12,"op","","",123,null],[12,"left","","",123,null],[12,"right","","",123,null],[3,"UnzipFolder","","`Folder` that unzips into two other `Folder`s",null,null],[12,"op","","",124,null],[12,"left","","",124,null],[12,"right","","",124,null],[3,"UnzipReducer","","`Reducer` that unzips into two other `Reducer`s",null,null],[12,"left","","",125,null],[12,"right","","",125,null],[5,"execute","","Run an unzip-like operation into `ParallelExtend` collections.",null,null],[5,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",null,null],[5,"unzip_indexed","","Unzip an `IndexedParallelIterator` into two arbitrary `Consumer`s.",null,null],[5,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",null,null],[5,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",null,null],[8,"UnzipOp","","This trait abstracts the different ways we can \"unzip\" one parallel iterator into two distinct consumers, which we can handle almost identically apart from how to process the individual items.",null,null],[16,"Left","","The type of item expected by the left consumer.",126,null],[16,"Right","","The type of item expected by the right consumer.",126,null],[10,"consume","","Consume one item and feed it to one or both of the underlying folders.",126,null],[11,"indexable","","Reports whether this op may support indexed consumers. - e.g. true for `unzip` where the item count passed through directly. - e.g. false for `partition` where the sorting is not yet known.",126,{"inputs":[],"output":{"name":"bool"}}],[11,"consume","","",127,null],[11,"indexable","","",127,{"inputs":[],"output":{"name":"bool"}}],[11,"consume","","",119,null],[11,"consume","","",120,null],[11,"drive_unindexed","","",121,null],[11,"opt_len","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",122,null],[11,"opt_len","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"split_at","","",123,null],[11,"into_folder","","",123,null],[11,"full","","",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off_left","","",123,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_reducer","","",123,null],[11,"consume","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"complete","","",124,null],[11,"full","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduce","","",125,null],[0,"repeat","rayon::iter","",null,null],[3,"Repeat","rayon::iter::repeat","Iterator adaptor for the `repeat()` function.",null,null],[12,"element","","",49,null],[3,"RepeatProducer","","Unindexed producer for `Repeat`.",null,null],[12,"element","","",128,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[12,"element","","",50,null],[12,"count","","",50,null],[3,"RepeatNProducer","","Producer for `RepeatN`.",null,null],[12,"element","","",129,null],[12,"count","","",129,null],[3,"Iter","","Iterator for `RepeatN`.",null,null],[12,"element","","",130,null],[12,"count","","",130,null],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"repeatn"}}],[11,"fmt","rayon::iter","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",49,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"generics":["repeatn"],"name":"zip"}}],[11,"drive_unindexed","","",49,null],[11,"split","rayon::iter::repeat","",128,null],[11,"fold_with","","",128,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"fmt","rayon::iter","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"repeatn"}}],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",50,null],[11,"with_producer","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","rayon::iter::repeat","",129,null],[11,"split_at","","",129,null],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next_back","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"empty","rayon::iter","",null,null],[3,"Empty","rayon::iter::empty","Iterator adaptor for the `empty()` function.",null,null],[12,"marker","","",51,null],[3,"EmptyProducer","","Private empty producer",null,null],[12,"0","","",131,null],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","rayon::iter","",51,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",51,null],[11,"opt_len","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",51,null],[11,"len","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",51,null],[11,"into_iter","rayon::iter::empty","",131,null],[11,"split_at","","",131,null],[0,"once","rayon::iter","",null,null],[3,"Once","rayon::iter::once","Iterator adaptor for the `once()` function.",null,null],[12,"item","","",52,null],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"clone","rayon::iter","",52,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",52,null],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","",132,null],[16,"Item","","",132,null],[10,"into_par_iter","","",132,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","",133,null],[16,"Item","","",133,null],[10,"par_iter","","",133,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","",134,null],[16,"Item","","",134,null],[10,"par_iter_mut","","",134,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",135,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",135,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",135,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",135,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",135,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",135,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",135,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",135,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",135,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",135,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",135,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",135,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",135,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",135,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",135,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",135,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",135,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",135,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",135,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",135,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find","","",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",135,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",135,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",135,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",135,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",135,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",135,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",135,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",135,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",135,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",136,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",136,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",136,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",136,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleaveshortest"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",136,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",136,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",136,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",136,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",136,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position","","",136,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",136,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",136,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",136,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",136,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the conversion from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","",137,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","",138,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","This module contains the parallel iterator types for options (`Option<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::option","Parallel iterator over an option",null,null],[12,"opt","","",139,null],[3,"Iter","","Parallel iterator over an immutable reference to an option",null,null],[12,"inner","","",140,null],[3,"IterMut","","Parallel iterator over a mutable reference to an option",null,null],[12,"inner","","",141,null],[3,"OptionProducer","","Private producer for an option",null,null],[12,"opt","","",142,null],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",139,null],[11,"opt_len","","",139,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",139,null],[11,"len","","",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",139,null],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",140,null],[11,"opt_len","","",140,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",140,null],[11,"len","","",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",140,null],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",141,null],[11,"opt_len","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",141,null],[11,"len","","",141,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",141,null],[11,"into_iter","","",142,null],[11,"split_at","","",142,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","This module contains the parallel iterator types for ranges (`Range<T>`); this is the type for values created by a `a..b` expression. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[12,"range","","",143,null],[3,"IterProducer","","",null,null],[12,"range","","",144,null],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"drive_unindexed","","",143,null],[11,"opt_len","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",143,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",143,null],[11,"into_iter","","",144,null],[11,"split_at","","",144,null],[11,"len","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"drive_unindexed","","",143,null],[11,"split","","",144,null],[11,"fold_with","","",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"len","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"drive_unindexed","","",143,null],[11,"split","","",144,null],[11,"fold_with","","",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[0,"result","rayon","This module contains the parallel iterator types for results (`Result<T, E>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[12,"inner","","",145,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[12,"inner","","",146,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[12,"inner","","",147,null],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",145,null],[11,"opt_len","","",145,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",145,null],[11,"len","","",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",145,null],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",146,null],[11,"opt_len","","",146,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",146,null],[11,"len","","",146,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",146,null],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",147,null],[11,"opt_len","","",147,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",147,null],[11,"len","","",147,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",147,null],[0,"slice","rayon","This module contains the parallel iterator types for slices (`[T]`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[12,"slice","","",148,null],[3,"IterProducer","","",null,null],[12,"slice","","",149,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[12,"chunk_size","","",150,null],[12,"slice","","",150,null],[3,"ChunksProducer","","",null,null],[12,"chunk_size","","",151,null],[12,"slice","","",151,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[12,"window_size","","",152,null],[12,"slice","","",152,null],[3,"WindowsProducer","","",null,null],[12,"window_size","","",153,null],[12,"slice","","",153,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[12,"slice","","",154,null],[3,"IterMutProducer","","",null,null],[12,"slice","","",155,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[12,"chunk_size","","",156,null],[12,"slice","","",156,null],[3,"ChunksMutProducer","","",null,null],[12,"chunk_size","","",157,null],[12,"slice","","",157,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[12,"slice","","",158,null],[12,"separator","","",158,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[12,"slice","","",159,null],[12,"separator","","",159,null],[0,"mergesort","","Parallel merge sort.",null,null],[3,"CopyOnDrop","rayon::slice::mergesort","When dropped, copies from `src` into `dest` a sequence of length `len`.",null,null],[12,"src","","",160,null],[12,"dest","","",160,null],[12,"len","","",160,null],[3,"Run","","A sorted run that starts at index `start` and is of length `len`.",null,null],[12,"start","","",161,null],[12,"len","","",161,null],[4,"MergesortResult","","The result of merge sort.",null,null],[13,"NonDescending","","The slice has already been sorted.",162,null],[13,"Descending","","The slice has been descending and therefore it was left intact.",162,null],[13,"Sorted","","The slice was sorted.",162,null],[5,"get_and_increment","","",null,null],[5,"decrement_and_get","","",null,null],[5,"insert_head","","Inserts `v[0]` into pre-sorted sequence `v[1..]` so that whole `v[..]` becomes sorted.",null,null],[5,"merge","","Merges non-decreasing runs `v[..mid]` and `v[mid..]` using `buf` as temporary storage, and stores the result into `v[..]`.",null,null],[5,"collapse","","Examines the stack of runs and identifies the next pair of runs to merge. More specifically, if `Some(r)` is returned, that means `runs[r]` and `runs[r + 1]` must be merged next. If the algorithm should continue building a new run instead, `None` is returned.",null,null],[5,"mergesort","","Sorts a slice using merge sort, unless it is already in descending order.",null,null],[5,"split_for_merge","","Splits two sorted slices so that they can be merged in parallel.",null,null],[5,"par_merge","","Merges slices `left` and `right` in parallel and stores the result into `dest`.",null,null],[5,"recurse","","Recursively merges pre-sorted chunks inside `v`.",null,null],[5,"par_mergesort","","Sorts `v` using merge sort in parallel.",null,null],[11,"drop","","",160,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"mergesortresult"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"mergesortresult"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",162,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"run"}}],[0,"quicksort","rayon::slice","Parallel quicksort.",null,null],[3,"WriteOnDrop","rayon::slice::quicksort","When dropped, takes the value out of `Option` and writes it into `dest`.",null,null],[12,"value","","",163,null],[12,"dest","","",163,null],[3,"NoDrop","","Holds a value, but never drops it.",null,null],[12,"value","","",164,null],[3,"CopyOnDrop","","When dropped, copies from `src` into `dest`.",null,null],[12,"src","","",165,null],[12,"dest","","",165,null],[5,"shift_head","","Shifts the first element to the right until it encounters a greater or equal element.",null,null],[5,"shift_tail","","Shifts the last element to the left until it encounters a smaller or equal element.",null,null],[5,"partial_insertion_sort","","Partially sorts a slice by shifting several out-of-order elements around.",null,null],[5,"insertion_sort","","Sorts a slice using insertion sort, which is `O(n^2)` worst-case.",null,null],[5,"heapsort","","Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case.",null,null],[5,"partition_in_blocks","","Partitions `v` into elements smaller than `pivot`, followed by elements greater than or equal to `pivot`.",null,null],[5,"partition","","Partitions `v` into elements smaller than `v[pivot]`, followed by elements greater than or equal to `v[pivot]`.",null,null],[5,"partition_equal","","Partitions `v` into elements equal to `v[pivot]` followed by elements greater than `v[pivot]`.",null,null],[5,"break_patterns","","Scatters some elements around in an attempt to break patterns that might cause imbalanced partitions in quicksort.",null,null],[5,"choose_pivot","","Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.",null,null],[5,"recurse","","Sorts `v` recursively.",null,null],[5,"par_quicksort","","Sorts `v` using pattern-defeating quicksort in parallel.",null,null],[11,"drop","","",163,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",164,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",165,{"inputs":[{"name":"self"}],"output":null}],[8,"ParallelSlice","rayon::slice","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",166,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",166,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",166,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",166,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",167,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",167,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",167,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",167,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",167,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",148,null],[11,"opt_len","","",148,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",148,null],[11,"len","","",148,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",148,null],[11,"into_iter","","",149,null],[11,"split_at","","",149,null],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",150,null],[11,"opt_len","","",150,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",150,null],[11,"len","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",150,null],[11,"into_iter","","",151,null],[11,"split_at","","",151,null],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",152,null],[11,"opt_len","","",152,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",152,null],[11,"len","","",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",152,null],[11,"into_iter","","",153,null],[11,"split_at","","",153,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",154,null],[11,"opt_len","","",154,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",154,null],[11,"len","","",154,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",154,null],[11,"into_iter","","",155,null],[11,"split_at","","",155,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",156,null],[11,"opt_len","","",156,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",156,null],[11,"len","","",156,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",156,null],[11,"into_iter","","",157,null],[11,"split_at","","",157,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",158,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",159,null],[0,"str","rayon","This module contains extension methods for `String` that expose parallel iterators, such as `par_split_whitespace()`. You will rarely need to interact with it directly, since if you add `use rayon::prelude::*` to your file, that will include the helper traits defined in this module.",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[12,"chars","","",168,null],[3,"CharsProducer","","",null,null],[12,"chars","","",169,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[12,"chars","","",170,null],[12,"separator","","",170,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[12,"chars","","",171,null],[12,"terminator","","",171,null],[3,"SplitTerminatorProducer","","",null,null],[12,"splitter","","",172,null],[12,"skip_last","","",172,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[12,"0","","",173,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[12,"0","","",174,null],[5,"is_char_boundary","","Test if a byte is the start of a UTF-8 character. (extracted from `str::is_char_boundary`)",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"find_char_midpoint","","Find the index of a character boundary near the midpoint.",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[0,"private","","We hide the `Pattern` trait in a private module, as its API is not meant for general consumption.  If we could have privacy on trait items, then it would be nicer to have its basic existence and implementors public while keeping all of the methods private.",null,null],[8,"Pattern","rayon::str::private","Pattern-matching trait for `ParallelString`, somewhat like a mix of `std::str::pattern::{Pattern, Searcher}`.",null,null],[10,"__rayon_private__","","This trait is private; this method exists to make it impossible to implement outside the crate.",175,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[10,"find_in","","",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[10,"rfind_in","","",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[10,"is_suffix_of","","",175,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"fold_with","","",175,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"},{"name":"bool"}],"output":{"name":"f"}}],[8,"ParallelString","rayon::str","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",176,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",176,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",176,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",176,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",176,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",176,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"drive_unindexed","","",168,null],[11,"split","","",169,null],[11,"fold_with","","",169,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"new","","",170,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",170,null],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"new","","",171,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",172,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",171,null],[11,"split","","",172,null],[11,"fold_with","","",172,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"drive_unindexed","","",173,null],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",174,null],[0,"vec","rayon","This module contains the parallel iterator types for vectors (`Vec<T>`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[12,"vec","","",177,null],[3,"VecProducer","","////////////////////////////////////////////////////////////////////////",null,null],[12,"slice","","",178,null],[3,"SliceDrain","","////////////////////////////////////////////////////////////////////////",null,null],[12,"iter","","",179,null],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",177,null],[11,"opt_len","","",177,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",177,null],[11,"len","","",177,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",177,null],[11,"into_iter","","",178,null],[11,"split_at","","",178,null],[11,"drop","","",178,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",179,null],[11,"next_back","","",179,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",179,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",179,{"inputs":[{"name":"self"}],"output":null}],[0,"par_either","rayon","",null,null],[11,"drive_unindexed","rayon::iter","",24,null],[11,"opt_len","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",24,null],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",24,null],[11,"par_extend","","",24,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"new","rayon","Creates and return a valid rayon thread pool configuration, but does not initialize it.",0,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",0,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"configuration"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Set the stack size of the worker threads",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",0,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"drop","","",1,null],[11,"default","","",0,{"inputs":[],"output":{"name":"configuration"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","rayon::iter","",24,null],[11,"extend","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"into","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"read_to_end","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"as_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"hash","","",24,null],[11,"description","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"fill_buf","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",24,null],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",24,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from","","",24,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"deref_mut","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","rayon","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",1,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,null],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",3,null],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",24,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",24,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",24,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",24,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",24,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",24,{"inputs":[{"name":"self"}],"output":{"name":"either"}}]],"paths":[[3,"Configuration"],[3,"ThreadPool"],[3,"FnContext"],[3,"Scope"],[3,"SplitProducer"],[8,"Fissile"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[3,"FindConsumer"],[3,"FindFolder"],[3,"FindReducer"],[3,"FindConsumer"],[3,"FindFolder"],[3,"FindReducer"],[4,"MatchPosition"],[3,"ChainProducer"],[3,"ChainSeq"],[3,"Collect"],[3,"CollectConsumer"],[3,"CollectFolder"],[3,"EnumerateProducer"],[3,"FilterConsumer"],[3,"FilterFolder"],[3,"FilterMapConsumer"],[3,"FilterMapFolder"],[3,"FlatMapConsumer"],[3,"FlatMapFolder"],[3,"Splitter"],[3,"LengthSplitter"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"ForEachConsumer"],[3,"FoldConsumer"],[3,"FoldFolder"],[3,"FoldWithConsumer"],[3,"ReduceConsumer"],[3,"ReduceFolder"],[3,"SplitProducer"],[3,"MapProducer"],[3,"MapConsumer"],[3,"MapFolder"],[3,"MapWithProducer"],[3,"MapWithIter"],[3,"MapWithConsumer"],[3,"MapWithFolder"],[3,"ZipProducer"],[3,"InterleaveProducer"],[3,"InterleaveSeq"],[3,"IntersperseProducer"],[3,"IntersperseIter"],[3,"IntersperseConsumer"],[3,"IntersperseFolder"],[3,"NoopConsumer"],[3,"NoopReducer"],[3,"RevProducer"],[3,"MinLenProducer"],[3,"MaxLenProducer"],[3,"SumConsumer"],[3,"SumFolder"],[3,"ProductConsumer"],[3,"ProductFolder"],[3,"ClonedProducer"],[3,"ClonedConsumer"],[3,"ClonedFolder"],[3,"InspectProducer"],[3,"InspectConsumer"],[3,"InspectFolder"],[3,"WhileSomeConsumer"],[3,"WhileSomeFolder"],[3,"Partition"],[3,"PartitionMap"],[3,"UnzipA"],[3,"UnzipB"],[3,"UnzipConsumer"],[3,"UnzipFolder"],[3,"UnzipReducer"],[8,"UnzipOp"],[3,"Unzip"],[3,"RepeatProducer"],[3,"RepeatNProducer"],[3,"Iter"],[3,"EmptyProducer"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"OptionProducer"],[3,"Iter"],[3,"IterProducer"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IterProducer"],[3,"Chunks"],[3,"ChunksProducer"],[3,"Windows"],[3,"WindowsProducer"],[3,"IterMut"],[3,"IterMutProducer"],[3,"ChunksMut"],[3,"ChunksMutProducer"],[3,"Split"],[3,"SplitMut"],[3,"CopyOnDrop"],[3,"Run"],[4,"MergesortResult"],[3,"WriteOnDrop"],[3,"NoDrop"],[3,"CopyOnDrop"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Chars"],[3,"CharsProducer"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitTerminatorProducer"],[3,"Lines"],[3,"SplitWhitespace"],[8,"Pattern"],[8,"ParallelString"],[3,"IntoIter"],[3,"VecProducer"],[3,"SliceDrain"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","ThreadPool",null,null],[12,"registry","","",0,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[12,"owner_thread_index","","thread where `scope()` was executed (note that individual jobs may be executing on different worker threads, though they should always be within the same pool of threads)",1,null],[12,"registry","","thread registry where `scope()` was executed.",1,null],[12,"panic","","if some job panicked, the error is stored here; it will be propagated to the one who created the scope",1,null],[12,"job_completed_latch","","latch to set when the counter drops to zero (and hence this scope is complete)",1,null],[12,"marker","","You can think of a scope as containing a list of closures to execute, all of which outlive `'scope`.  They're not actually required to be `Sync`, but it's still safe to let the `Scope` implement `Sync` because the closures are only moved across threads to be executed.",1,null],[3,"Configuration","","Contains the rayon thread pool configuration.",null,null],[12,"num_threads","","The number of threads in the rayon thread pool. If zero will use the RAYON_NUM_THREADS environment variable. If RAYON_NUM_THREADS is invalid or zero will use the default.",2,null],[12,"panic_handler","","Custom closure, if any, to handle a panic that we cannot propagate anywhere else.",2,null],[12,"get_thread_name","","Closure to compute the name of a thread.",2,null],[12,"stack_size","","The stack size for the created worker threads",2,null],[12,"start_handler","","Closure invoked on worker thread start.",2,null],[12,"exit_handler","","Closure invoked on worker thread exit.",2,null],[12,"breadth_first","","If false, worker threads will execute spawned jobs in a \"depth-first\" fashion. If true, they will do a \"breadth-first\" fashion. Depth-first is the default.",2,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[12,"migrated","","",3,null],[12,"_marker","","disable `Send` and `Sync`, just for a little future-proofing.",3,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[5,"join","","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","The `join_context` function is identical to `join`, except the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. In fact, calling `initialize` is not recommended, except for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[0,"log","","Debug Logging",null,null],[3,"LOG_ENV","rayon_core::log","",null,null],[12,"__private_field","","",4,null],[4,"Event","","",null,null],[13,"Tickle","","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[12,"old_state","","",5,null],[13,"GetSleepy","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[12,"state","","",5,null],[13,"GotSleepy","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[12,"old_state","","",5,null],[12,"new_state","","",5,null],[13,"GotAwoken","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"FellAsleep","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"GotInterrupted","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"FoundWork","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[12,"yields","","",5,null],[13,"DidNotFindWork","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[12,"yields","","",5,null],[13,"StoleWork","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[12,"victim","","",5,null],[13,"UninjectedWork","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"WaitUntil","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"LatchSet","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"InjectJobs","rayon_core::log","",5,null],[12,"count","rayon_core::log::Event","",5,null],[13,"Join","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"PoppedJob","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"PoppedRhs","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"LostJob","rayon_core::log","",5,null],[12,"worker","rayon_core::log::Event","",5,null],[13,"JobCompletedOk","rayon_core::log","",5,null],[12,"owner_thread","rayon_core::log::Event","",5,null],[13,"JobPanickedErrorStored","rayon_core::log","",5,null],[12,"owner_thread","rayon_core::log::Event","",5,null],[13,"JobPanickedErrorNotStored","rayon_core::log","",5,null],[12,"owner_thread","rayon_core::log::Event","",5,null],[13,"ScopeCompletePanicked","rayon_core::log","",5,null],[12,"owner_thread","rayon_core::log::Event","",5,null],[13,"ScopeCompleteNoPanic","rayon_core::log","",5,null],[12,"owner_thread","rayon_core::log::Event","",5,null],[7,"LOG_ENV","rayon_core::log","",null,null],[17,"DUMP_LOGS","","",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initialize","","",4,{"inputs":[{"name":"self"}],"output":null}],[0,"latch","rayon_core","",null,null],[3,"SpinLatch","rayon_core::latch","Spin latches are the simplest, most efficient kind, but they do not support a `wait()` operation. They just have a boolean flag that becomes true when `set()` is called.",null,null],[12,"b","","",6,null],[3,"LockLatch","","A Latch starts as false and eventually becomes true. You can block until it becomes true.",null,null],[12,"m","","",7,null],[12,"v","","",7,null],[3,"CountLatch","","Counting latches are used to implement scopes. They track a counter. Unlike other latches, calling `set()` does not necessarily make the latch be considered `set()`; instead, it just decrements the counter. The latch is only \"set\" (in the sense that `probe()` returns true) once the counter reaches zero.",null,null],[12,"counter","","",8,null],[3,"TickleLatch","","A tickling latch wraps another latch type, and will also awaken a thread pool when it is set.  This is useful for jobs injected between thread pools, so the source pool can continue processing its own work while waiting.",null,null],[12,"inner","","",9,null],[12,"sleep","","",9,null],[8,"Latch","","We define various kinds of latches, which are all a primitive signaling mechanism. A latch starts as false. Eventually someone calls `set()` and it becomes true. You can test if it has been set by calling `probe()`.",null,null],[10,"set","","Set the latch, signalling others.",10,{"inputs":[{"name":"self"}],"output":null}],[8,"LatchProbe","","",null,null],[10,"probe","","Test if the latch is set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"spinlatch"}}],[11,"probe","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",7,{"inputs":[],"output":{"name":"locklatch"}}],[11,"wait","","Block until latch is set.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"probe","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"countlatch"}}],[11,"increment","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"probe","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","Set the latch to true, releasing all threads who are waiting.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",9,{"inputs":[{"name":"l"},{"name":"sleep"}],"output":{"name":"self"}}],[11,"probe","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set","","",9,{"inputs":[{"name":"self"}],"output":null}],[0,"join","rayon_core","",null,null],[5,"join","rayon_core::join","The `join` function takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","The `join_context` function is identical to `join`, except the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"join_recover_from_panic","","If job A panics, we still cannot return until we are sure that job B is complete. This is because it may contain references into the enclosing stack frame(s).",null,null],[0,"job","rayon_core","",null,null],[3,"JobRef","rayon_core::job","Effectively a Job trait object. Each JobRef must be executed exactly once, or else data may leak.",null,null],[12,"pointer","","",12,null],[12,"execute_fn","","",12,null],[3,"StackJob","","A job that will be owned by a stack slot. This means that when it executes it need not free any heap data, the cleanup occurs when the stack frame is later popped.  The function parameter indicates `true` if the job was stolen -- executed on a different thread.",null,null],[12,"latch","","",13,null],[12,"func","","",13,null],[12,"result","","",13,null],[3,"HeapJob","","Represents a job stored in the heap. Used to implement `scope`. Unlike `StackJob`, when executed, `HeapJob` simply invokes a closure, which then triggers the appropriate logic to signal that the job executed.",null,null],[12,"job","","",14,null],[4,"JobResult","","",null,null],[13,"None","","",15,null],[13,"Ok","","",15,null],[13,"Panic","","",15,null],[8,"Job","","A `Job` is used to advertise work for other threads that they may want to steal. In accordance with time honored tradition, jobs are arranged in a deque, so that thieves can take from the top of the deque while the main worker manages the bottom of the deque. This deque is managed by the `thread_pool` module.",null,null],[10,"execute","","Unsafe: this may be called from a different thread than the one which scheduled the job, so the implementer must ensure the appropriate traits are met, whether `Send`, `Sync`, or both.",16,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"jobref"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"jobref"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"jobref"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"new","","Unsafe: caller asserts that `data` will remain valid until the job is executed.",12,null],[11,"execute","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",13,{"inputs":[{"name":"f"},{"name":"l"}],"output":{"name":"stackjob"}}],[11,"as_job_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"jobref"}}],[11,"run_inline","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"r"}}],[11,"into_result","","",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"execute","","",13,null],[11,"new","","",14,{"inputs":[{"name":"body"}],"output":{"name":"self"}}],[11,"as_job_ref","","Creates a `JobRef` from this job -- note that this hides all lifetimes, so it is up to you to ensure that this JobRef doesn't outlive any data that it closes over.",14,{"inputs":[{"name":"box"}],"output":{"name":"jobref"}}],[11,"execute","","",14,null],[11,"into_return_value","","Convert the `JobResult` for a job that has finished (and hence its JobResult is populated) into its return value.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"registry","rayon_core","",null,null],[3,"GlobalPoolAlreadyInitialized","rayon_core::registry","Error if the gloal thread pool is initialized multiple times.",null,null],[3,"Registry","","",null,null],[12,"thread_infos","","",17,null],[12,"state","","",17,null],[12,"sleep","","",17,null],[12,"job_uninjector","","",17,null],[12,"panic_handler","","",17,null],[12,"start_handler","","",17,null],[12,"exit_handler","","",17,null],[12,"terminate_latch","","",17,null],[3,"RegistryState","","",null,null],[12,"job_injector","","",18,null],[3,"Terminator","","",null,null],[12,"0","","",19,null],[3,"RegistryId","","",null,null],[12,"addr","","",20,null],[3,"ThreadInfo","","",null,null],[12,"primed","","Latch set once thread has started and we are entering into the main loop. Used to wait for worker threads to become primed, primarily of interest for benchmarking.",21,null],[12,"stopped","","Latch is set once worker thread has completed. Used to wait until workers have stopped; only used for tests.",21,null],[12,"stealer","","the \"stealer\" half of the worker's deque",21,null],[3,"WorkerThread","","//////////////////////////////////////////////////////////////////////// WorkerThread identifiers",null,null],[12,"worker","","the \"worker\" half of our local deque",22,null],[12,"index","","",22,null],[12,"breadth_first","","are these workers configured to steal breadth-first or not?",22,null],[12,"rng","","A weak random number generator.",22,null],[12,"registry","","",22,null],[5,"global_registry","","Starts the worker threads (if that has not already happened). If initialization has not already occurred, use the default configuration.",null,{"inputs":[],"output":{"name":"arc"}}],[5,"init_global_registry","","Starts the worker threads (if that has not already happened) with the given configuration.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["registry","box"],"name":"result"}}],[5,"init_registry","","Initializes the global registry with the given configuration. Meant to be called from within the `THE_REGISTRY_SET` once function. Declared `unsafe` because it writes to `THE_REGISTRY` in an unsynchronized fashion.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[5,"main_loop","","////////////////////////////////////////////////////////////////////////",null,{"inputs":[{"generics":["jobref"],"name":"worker"},{"generics":["registry"],"name":"arc"},{"name":"usize"},{"name":"bool"}],"output":null}],[5,"in_worker","","If already in a worker-thread, just execute `op`.  Otherwise, execute `op` in the default thread-pool. Either way, block until `op` completes and return its return value. If `op` panics, that panic will be propagated as well.  The second argument indicates `true` if injection was performed, `false` if executed directly.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[7,"THE_REGISTRY","","//////////////////////////////////////////////////////////////////////// Initialization",null,null],[7,"THE_REGISTRY_SET","","",null,null],[17,"WORKER_THREAD_STATE","","",null,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"globalpoolalreadyinitialized"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",17,{"inputs":[{"name":"configuration"}],"output":{"generics":["arc","box"],"name":"result"}}],[11,"current","","",17,{"inputs":[],"output":{"generics":["registry"],"name":"arc"}}],[11,"current_num_threads","","Returns the number of threads in the current registry.  This is better than `Registry::current().num_threads()` because it avoids incrementing the `Arc`.",17,{"inputs":[],"output":{"name":"usize"}}],[11,"id","","Returns an opaque identifier for this registry.",17,{"inputs":[{"name":"self"}],"output":{"name":"registryid"}}],[11,"num_threads","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"handle_panic","","",17,{"inputs":[{"name":"self"},{"generics":["any"],"name":"box"}],"output":null}],[11,"wait_until_primed","","Waits for the worker threads to get up and running.  This is meant to be used for benchmarking purposes, primarily, so that you can get more consistent numbers by having everything \"ready to go\".",17,{"inputs":[{"name":"self"}],"output":null}],[11,"inject_or_push","","//////////////////////////////////////////////////////////////////////// MAIN LOOP",17,{"inputs":[{"name":"self"},{"name":"jobref"}],"output":null}],[11,"inject","","Push a job into the \"external jobs\" queue; it will be taken by whatever worker has nothing to do. Use this is you know that you are not on a worker of this registry.",17,null],[11,"pop_injected_job","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["jobref"],"name":"option"}}],[11,"in_worker","","If already in a worker-thread of this registry, just execute `op`. Otherwise, inject `op` in this thread-pool. Either way, block until `op` completes and return its return value. If `op` panics, that panic will be propagated as well.  The second argument indicates `true` if injection was performed, `false` if executed directly.",17,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"in_worker_cold","","",17,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"in_worker_cross","","",17,{"inputs":[{"name":"self"},{"name":"workerthread"},{"name":"op"}],"output":{"name":"r"}}],[11,"increment_terminate_count","","Increment the terminate counter. This increment should be balanced by a call to `terminate`, which will decrement. This is used when spawning asynchronous work, which needs to prevent the registry from terminating so long as it is active.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","Signals that the thread-pool which owns this registry has been dropped. The worker threads will gradually terminate, once any extant work is completed.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"registryid"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"registryid"}],"output":{"name":"ordering"}}],[11,"new","","",18,{"inputs":[{"generics":["jobref"],"name":"worker"}],"output":{"name":"registrystate"}}],[11,"new","","",21,{"inputs":[{"generics":["jobref"],"name":"stealer"}],"output":{"name":"threadinfo"}}],[11,"current","","Gets the `WorkerThread` index for the current thread; returns NULL if this is not a worker thread. This pointer is valid anywhere on the current thread.",22,null],[11,"set_current","","Sets `self` as the worker thread index for the current thread. This is done during worker thread startup.",22,null],[11,"registry","","Returns the registry that owns this worker thread.",22,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"index","","Our index amongst the worker threads (ranges from `0..self.num_threads()`).",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",22,{"inputs":[{"name":"self"},{"name":"jobref"}],"output":null}],[11,"local_deque_is_empty","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take_local_job","","Attempts to obtain a \"local\" job -- typically this means popping from the top of the stack, though if we are configured for breadth-first execution, it would mean dequeuing from the bottom.",22,{"inputs":[{"name":"self"}],"output":{"generics":["jobref"],"name":"option"}}],[11,"wait_until","","Wait until the latch is set. Try to keep busy by popping and stealing tasks as necessary.",22,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"wait_until_cold","","",22,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"execute","","",22,{"inputs":[{"name":"self"},{"name":"jobref"}],"output":null}],[11,"steal","","Try to steal a single job and return it.",22,{"inputs":[{"name":"self"}],"output":{"generics":["jobref"],"name":"option"}}],[0,"scope","rayon_core","",null,null],[3,"Scope","rayon_core::scope","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[12,"owner_thread_index","","thread where `scope()` was executed (note that individual jobs may be executing on different worker threads, though they should always be within the same pool of threads)",1,null],[12,"registry","","thread registry where `scope()` was executed.",1,null],[12,"panic","","if some job panicked, the error is stored here; it will be propagated to the one who created the scope",1,null],[12,"job_completed_latch","","latch to set when the counter drops to zero (and hence this scope is complete)",1,null],[12,"marker","","You can think of a scope as containing a list of closures to execute, all of which outlive `'scope`.  They're not actually required to be `Sync`, but it's still safe to let the `Scope` implement `Sync` because the closures are only moved across threads to be executed.",1,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","rayon_core","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to `self` as argument. This can be used to inject new jobs into `self`.",1,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"execute_job","","Executes `func` as a job, either aborting or executing as appropriate.",1,{"inputs":[{"name":"self"},{"name":"func"}],"output":null}],[11,"execute_job_closure","","Executes `func` as a job in scope. Adjusts the \"job completed\" counters and also catches any panic and stores it into `scope`.",1,{"inputs":[{"name":"self"},{"name":"func"}],"output":{"name":"option"}}],[11,"job_panicked","","",1,{"inputs":[{"name":"self"},{"generics":["any"],"name":"box"}],"output":null}],[11,"job_completed_ok","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"steal_till_jobs_complete","","",1,{"inputs":[{"name":"self"},{"name":"workerthread"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sleep","","Code that decides when workers should go to sleep. See README.md for an overview.",null,null],[3,"Sleep","rayon_core::sleep","",null,null],[12,"state","","",24,null],[12,"data","","",24,null],[12,"tickle","","",24,null],[17,"AWAKE","","",null,null],[17,"SLEEPING","","",null,null],[17,"ROUNDS_UNTIL_SLEEPY","","",null,null],[17,"ROUNDS_UNTIL_ASLEEP","","",null,null],[11,"new","","",24,{"inputs":[],"output":{"name":"sleep"}}],[11,"anyone_sleeping","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"any_worker_is_sleepy","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"worker_is_sleepy","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"with_sleepy_worker","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"work_found","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"no_work_found","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"tickle","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"tickle_cold","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_sleepy","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"still_sleepy","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"sleep","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"spawn","rayon_core","",null,null],[5,"spawn","rayon_core::spawn","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"spawn_in","","Spawn an asynchronous job in `registry.`",null,{"inputs":[{"name":"f"},{"name":"arc"}],"output":null}],[0,"thread_pool","rayon_core","",null,null],[3,"ThreadPool","rayon_core::thread_pool","ThreadPool",null,null],[12,"registry","","",0,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[11,"new","rayon_core","Constructs a new thread pool with the given configuration. If the configuration is not valid, returns a suitable `Err` result.  See `InitError` for more details.",0,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",0,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",0,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",0,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",0,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"unwind","","Package up unwind recovery. Note that if you are in some sensitive place, you can use the `AbortIfPanic` helper to protect against accidental panics in the rayon code itself.",null,null],[3,"AbortIfPanic","rayon_core::unwind","",null,null],[5,"halt_unwinding","","Executes `f` and captures any panic, translating that panic into a `Err` result. The assumption is that any panic will be propagated later with `resume_unwinding`, and hence `f` can be treated as exception safe.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwinding","","",null,null],[11,"drop","","",25,{"inputs":[{"name":"self"}],"output":null}],[0,"util","rayon_core","",null,null],[5,"leak","rayon_core::util","",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[6,"PanicHandler","rayon_core","The type for a panic handling closure. Note that this same closure may be invoked multiple times in parallel.",null,null],[6,"StartHandler","","The type for a closure that gets invoked when a thread starts. The closure is passed the index of the thread on which it is invoked. Note that this same closure may be invoked multiple times in parallel.",null,null],[6,"ExitHandler","","The type for a closure that gets invoked when a thread exits. The closure is passed the index of the thread on which is is invoked. Note that this same closure may be invoked multiple times in parallel.",null,null],[11,"default","","",2,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",2,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",2,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"get_num_threads","","Get the number of threads that will be used for the thread pool. See `num_threads()` for more information.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_thread_name","","Get the thread name for the thread with the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["string"],"name":"option"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"take_panic_handler","","Returns a copy of the current panic handler.",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"get_stack_size","","Get the stack size of the worker threads",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"stack_size","","Set the stack size of the worker threads",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"get_breadth_first","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take_start_handler","","Takes the current thread start callback, leaving `None`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"take_exit_handler","","Returns a current thread exit callback, leaving `None`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ThreadPool"],[3,"Scope"],[3,"Configuration"],[3,"FnContext"],[3,"LOG_ENV"],[4,"Event"],[3,"SpinLatch"],[3,"LockLatch"],[3,"CountLatch"],[3,"TickleLatch"],[8,"Latch"],[8,"LatchProbe"],[3,"JobRef"],[3,"StackJob"],[3,"HeapJob"],[4,"JobResult"],[8,"Job"],[3,"Registry"],[3,"RegistryState"],[3,"Terminator"],[3,"RegistryId"],[3,"ThreadInfo"],[3,"WorkerThread"],[3,"GlobalPoolAlreadyInitialized"],[3,"Sleep"],[3,"AbortIfPanic"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[12,"0","","",0,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[12,"0","","",1,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[12,"matched_any","","",2,null],[12,"matches","","",2,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[12,"0","","",3,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[12,"0","","",4,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[12,"0","","",5,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[12,"text","","",6,null],[12,"slots","","",6,null],[12,"named_groups","","",6,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[12,"idx","","",7,null],[12,"caps","","",7,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[12,"idx","","",8,null],[12,"slots","","",8,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[12,"caps","","",9,null],[12,"names","","",9,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[12,"0","","",10,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[12,"0","","",11,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[12,"0","","",12,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",13,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[12,"finder","","",14,null],[12,"last","","",14,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[12,"splits","","",15,null],[12,"n","","",15,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",16,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",16,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",16,null],[13,"__Nonexhaustive","","Hints that destructuring should not be exhaustive.",16,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[12,"0","","",17,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[12,"0","","",18,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[12,"matched_any","","",19,null],[12,"matches","","",19,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[12,"0","","",20,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[12,"0","","",21,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[12,"0","","",22,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[12,"0","","",23,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[12,"0","","",24,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[12,"finder","","",25,null],[12,"last","","",25,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[12,"splits","","",26,null],[12,"n","","",26,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[12,"0","","",27,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[12,"text","","",28,null],[12,"slots","","",28,null],[12,"named_groups","","",28,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[12,"idx","","",29,null],[12,"caps","","",29,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[12,"idx","","",30,null],[12,"slots","","",30,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[12,"caps","","",31,null],[12,"names","","",31,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",32,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",33,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",33,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[0,"backtrack","regex","",null,null],[3,"Bounded","regex::backtrack","A backtracking matching engine.",null,null],[12,"prog","","",34,null],[12,"input","","",34,null],[12,"matches","","",34,null],[12,"slots","","",34,null],[12,"m","","",34,null],[3,"Cache","","Shared cached state between multiple invocations of a backtracking engine in the same thread.",null,null],[12,"jobs","","",35,null],[12,"visited","","",35,null],[4,"Job","","A job is an explicit unit of stack space in the backtracking engine.",null,null],[13,"Inst","","",36,null],[12,"ip","regex::backtrack::Job","",36,null],[12,"at","","",36,null],[13,"SaveRestore","regex::backtrack","",36,null],[12,"slot","regex::backtrack::Job","",36,null],[12,"old_pos","","",36,null],[5,"should_exec","regex::backtrack","Returns true iff the given regex and input should be executed by this engine with reasonable memory usage.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[5,"usize_to_u32","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u32"}}],[6,"Bits","","",null,null],[17,"BIT_SIZE","","",null,null],[17,"MAX_SIZE_BYTES","","",null,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new empty cache for the backtracking engine.",35,{"inputs":[{"name":"program"}],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"job"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"exec","","Execute the backtracking matching engine.",34,null],[11,"clear","","Clears the cache such that the backtracking engine can be executed on some input of fixed length.",34,{"inputs":[{"name":"self"}],"output":null}],[11,"exec_","","Start backtracking at the given position in the input, but also look for literal prefixes.",34,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"bool"}}],[11,"backtrack","","The main backtracking loop starting at the given input position.",34,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"bool"}}],[11,"step","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"inputat"}],"output":{"name":"bool"}}],[11,"has_visited","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"inputat"}],"output":{"name":"bool"}}],[0,"utf8","regex","",null,null],[5,"next_utf8","regex::utf8","Returns the smallest possible index of the next valid UTF-8 sequence starting after `i`.",null,null],[5,"encode_utf8","","Encode the given Unicode character to `dst` as a single UTF-8 sequence.",null,null],[5,"decode_utf8","","Decode a single UTF-8 sequence into a single Unicode codepoint from `src`.",null,null],[5,"decode_last_utf8","","Like decode_utf8, but decodes the last UTF-8 sequence in `src` instead of the first.",null,null],[5,"is_start_byte","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[17,"TAG_CONT","","",null,null],[17,"TAG_TWO","","",null,null],[17,"TAG_THREE","","",null,null],[17,"TAG_FOUR","","",null,null],[0,"compile","regex","",null,null],[3,"Patch","regex::compile","",null,null],[12,"hole","","",37,null],[12,"entry","","",37,null],[3,"Compiler","","A compiler translates a regular expression AST to a sequence of instructions. The sequence of instructions represents an NFA.",null,null],[12,"insts","","",38,null],[12,"compiled","","",38,null],[12,"capture_name_idx","","",38,null],[12,"num_exprs","","",38,null],[12,"size_limit","","",38,null],[12,"suffix_cache","","",38,null],[12,"utf8_seqs","","",38,null],[12,"byte_classes","","",38,null],[3,"CompileClass","","",null,null],[12,"c","","",39,null],[12,"ranges","","",39,null],[3,"SuffixCache","","SuffixCache is a simple bounded hash map for caching suffix entries in UTF-8 automata. For example, consider the Unicode range \\u{0}-\\u{FFFF}. The set of byte ranges looks like this:",null,null],[12,"table","","",40,null],[12,"version","","",40,null],[3,"SuffixCacheEntry","","",null,null],[12,"key","","",41,null],[12,"pc","","",41,null],[12,"version","","",41,null],[3,"SuffixCacheKey","","",null,null],[12,"from_inst","","",42,null],[12,"start","","",42,null],[12,"end","","",42,null],[3,"ByteClassSet","","",null,null],[12,"0","","",43,null],[4,"Hole","","",null,null],[13,"None","","",44,null],[13,"One","","",44,null],[13,"Many","","",44,null],[4,"MaybeInst","","",null,null],[13,"Compiled","","",45,null],[13,"Uncompiled","","",45,null],[13,"Split","","",45,null],[13,"Split1","","",45,null],[13,"Split2","","",45,null],[4,"InstHole","","",null,null],[13,"Save","","",46,null],[12,"slot","regex::compile::InstHole","",46,null],[13,"EmptyLook","regex::compile","",46,null],[12,"look","regex::compile::InstHole","",46,null],[13,"Char","regex::compile","",46,null],[12,"c","regex::compile::InstHole","",46,null],[13,"Ranges","regex::compile","",46,null],[12,"ranges","regex::compile::InstHole","",46,null],[13,"Bytes","regex::compile","",46,null],[12,"start","regex::compile::InstHole","",46,null],[12,"end","","",46,null],[5,"u32_to_usize","regex::compile","",null,{"inputs":[{"name":"u32"}],"output":{"name":"usize"}}],[6,"InstHoleIdx","","",null,null],[6,"Result","","",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new regular expression compiler.",38,{"inputs":[],"output":{"name":"self"}}],[11,"size_limit","","The size of the resulting program is limited by size_limit. If the program approximately exceeds the given size (in bytes), then compilation will stop and return an error.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bytes","","If bytes is true, then the program is compiled as a byte based automaton, which incorporates UTF-8 decoding into the machine. If it's false, then the automaton is Unicode scalar value based, e.g., an engine utilizing such an automaton is resposible for UTF-8 decoding.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"only_utf8","","When disabled, the program compiled may match arbitrary bytes.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"dfa","","When set, the machine returned is suitable for use in the DFA matching engine.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"reverse","","When set, the machine returned is suitable for matching text in reverse. In particular, all concatenations are flipped.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"compile","","Compile a regular expression given its AST.",38,null],[11,"compile_one","","",38,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"generics":["program","error"],"name":"result"}}],[11,"compile_many","","",38,null],[11,"compile_finish","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["program","error"],"name":"result"}}],[11,"c","","",38,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_capture","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"expr"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_dotstar","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_literal","","",38,null],[11,"c_char","","",38,{"inputs":[{"name":"self"},{"name":"char"},{"name":"bool"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_class","","",38,null],[11,"c_bytes","","",38,null],[11,"c_byte","","",38,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"bool"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_class_bytes","","",38,null],[11,"c_empty_look","","",38,{"inputs":[{"name":"self"},{"name":"emptylook"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_concat","","",38,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_alternate","","",38,null],[11,"c_repeat","","",38,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"repeater"},{"name":"bool"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_repeat_zero_or_one","","",38,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"bool"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_repeat_zero_or_more","","",38,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"bool"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_repeat_one_or_more","","",38,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"bool"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_repeat_range_min_or_more","","",38,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"bool"},{"name":"u32"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_repeat_range","","",38,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"fill","","",38,{"inputs":[{"name":"self"},{"name":"hole"},{"name":"usize"}],"output":null}],[11,"fill_to_next","","",38,{"inputs":[{"name":"self"},{"name":"hole"}],"output":null}],[11,"fill_split","","",38,{"inputs":[{"name":"self"},{"name":"hole"},{"generics":["usize"],"name":"option"},{"generics":["usize"],"name":"option"}],"output":{"name":"hole"}}],[11,"push_compiled","","",38,{"inputs":[{"name":"self"},{"name":"inst"}],"output":null}],[11,"push_hole","","",38,{"inputs":[{"name":"self"},{"name":"insthole"}],"output":{"name":"hole"}}],[11,"push_split_hole","","",38,{"inputs":[{"name":"self"}],"output":{"name":"hole"}}],[11,"check_size","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"maybeinst"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fill_split","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"half_fill_split_goto1","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"half_fill_split_goto2","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"unwrap","","",45,{"inputs":[{"name":"self"}],"output":{"name":"inst"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"insthole"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"inst"}}],[11,"compile","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_utf8_seq","","",39,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"c_utf8_seq_","","",39,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"suffixcacheentry"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"suffixcacheentry"}}],[11,"assert_receiver_is_total_eq","","",41,null],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"suffixcacheentry"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"suffixcacheentry"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"suffixcachekey"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"suffixcachekey"}}],[11,"assert_receiver_is_total_eq","","",42,null],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"suffixcachekey"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"suffixcachekey"}],"output":{"name":"bool"}}],[11,"new","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get","","",40,{"inputs":[{"name":"self"},{"name":"suffixcachekey"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clear","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",40,{"inputs":[{"name":"self"},{"name":"suffixcachekey"}],"output":{"name":"usize"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"set_range","","",43,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"set_word_boundary","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"byte_classes","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[0,"dfa","regex","The DFA matching engine.",null,null],[3,"Cache","regex::dfa","A reusable cache of DFA states.",null,null],[12,"inner","","Group persistent DFA related cache state together. The sparse sets listed below are used as scratch space while computing uncached states.",47,null],[12,"qcur","","qcur and qnext are ordered sets with constant time addition/membership/clearing-whole-set and linear time iteration. They are used to manage the sets of NFA states in DFA states when computing cached DFA states. In particular, the order of the NFA states matters for leftmost-first style matching. Namely, when computing a cached state, the set of NFA states stops growing as soon as the first Match instruction is observed.",47,null],[12,"qnext","","",47,null],[3,"CacheInner","","CacheInner is logically just a part of Cache, but groups together fields that aren't passed as function parameters throughout search. (This split is mostly an artifact of the borrow checker. It is happily paid.)",null,null],[12,"compiled","","A cache of pre-compiled DFA states, keyed by the set of NFA states and the set of empty-width flags set at the byte in the input when the state was observed.",48,null],[12,"trans","","The transition table.",48,null],[12,"states","","Our set of states. Note that `StatePtr / num_byte_classes` indexes this Vec rather than just a `StatePtr`.",48,null],[12,"start_states","","A set of cached start states, which are limited to the number of permutations of flags set just before the initial byte of input. (The index into this vec is a `EmptyFlags`.)",48,null],[12,"stack","","Stack scratch space used to follow epsilon transitions in the NFA. (This permits us to avoid recursion.)",48,null],[12,"flush_count","","The total number of times this cache has been flushed by the DFA because of space constraints.",48,null],[12,"size","","The total heap size of the DFA's cache. We use this to determine when we should flush the cache.",48,null],[3,"Transitions","","The transition table.",null,null],[12,"table","","The table.",49,null],[12,"num_byte_classes","","The stride.",49,null],[3,"Fsm","","Fsm encapsulates the actual execution of the DFA.",null,null],[12,"prog","","prog contains the NFA instruction opcodes. DFA execution uses either the `dfa` instructions or the `dfa_reverse` instructions from `exec::ExecReadOnly`. (It never uses `ExecReadOnly.nfa`, which may have Unicode opcodes that cannot be executed by the DFA.)",50,null],[12,"start","","The start state. We record it here because the pointer may change when the cache is wiped.",50,null],[12,"at","","The current position in the input.",50,null],[12,"quit_after_match","","Should we quit after seeing the first match? e.g., When the caller uses `is_match` or `shortest_match`.",50,null],[12,"last_match_si","","The last state that matched.",50,null],[12,"last_cache_flush","","The input position of the last cache flush. We use this to determine if we're thrashing in the cache too often. If so, the DFA quits so that we can fall back to the NFA algorithm.",50,null],[12,"cache","","All cached DFA information that is persisted between searches.",50,null],[3,"State","","State is a DFA state. It contains an ordered set of NFA states (not necessarily complete) and a smattering of flags.",null,null],[12,"data","","",51,null],[3,"InstPtrs","","",null,null],[12,"base","","",52,null],[12,"data","","",52,null],[3,"Byte","","Byte is a u8 in spirit, but a u16 in practice so that we can represent the special EOF sentinel value.",null,null],[12,"0","","",53,null],[3,"EmptyFlags","","A set of flags for zero-width assertions.",null,null],[12,"start","","",54,null],[12,"end","","",54,null],[12,"start_line","","",54,null],[12,"end_line","","",54,null],[12,"word_boundary","","",54,null],[12,"not_word_boundary","","",54,null],[3,"StateFlags","","A set of flags describing various configurations of a DFA state. This is represented by a `u8` so that it is compact.",null,null],[12,"0","","",55,null],[3,"TransitionsRow","","",null,null],[12,"0","","",56,null],[4,"Result","","The result of running the DFA.",null,null],[13,"Match","","",57,null],[13,"NoMatch","","",57,null],[13,"Quit","","",57,null],[5,"can_exec","","Return true if and only if the given program can be executed by a DFA.",null,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[5,"push_inst_ptr","","Adds ip to data using delta encoding with respect to prev.",null,{"inputs":[{"name":"vec"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"vb","","Helper function for formatting a byte as a nice-to-read escaped string.",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"usize_to_u32","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u32"}}],[5,"show_state_ptr","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"string"}}],[5,"write_vari32","","https://developers.google.com/protocol-buffers/docs/encoding#varints",null,{"inputs":[{"name":"vec"},{"name":"i32"}],"output":null}],[5,"read_vari32","","https://developers.google.com/protocol-buffers/docs/encoding#varints",null,null],[5,"write_varu32","","https://developers.google.com/protocol-buffers/docs/encoding#varints",null,{"inputs":[{"name":"vec"},{"name":"u32"}],"output":null}],[5,"read_varu32","","https://developers.google.com/protocol-buffers/docs/encoding#varints",null,null],[6,"InstPtr","","InstPtr is a 32 bit pointer into a sequence of opcodes (i.e., it indexes an NFA state).",null,null],[6,"StatePtr","","StatePtr is a 32 bit pointer to the start of a row in the transition table.",null,null],[17,"STATE_UNKNOWN","","An unknown state means that the state has not been computed yet, and that the only way to progress is to compute it.",null,null],[17,"STATE_DEAD","","A dead state means that the state has been computed and it is known that once it is entered, no future match can ever occur.",null,null],[17,"STATE_QUIT","","A quit state means that the DFA came across some input that it doesn't know how to process correctly. The DFA should quit and another matching engine should be run in its place.",null,null],[17,"STATE_START","","A start state is a state that the DFA can start in.",null,null],[17,"STATE_MATCH","","A match state means that the regex has successfully matched.",null,null],[17,"STATE_MAX","","The maximum state pointer. This is useful to mask out the \"valid\" state pointer from a state with the \"start\" or \"match\" bits set.",null,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"cacheinner"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transitions"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if this result corresponds to a match.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Maps the given function onto T and returns the result.",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"set_non_match","","Sets the non-match position.",57,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"assert_receiver_is_total_eq","","",51,null],[11,"hash","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flags","","",51,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[11,"inst_ptrs","","",51,{"inputs":[{"name":"self"}],"output":{"name":"instptrs"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"byte"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"emptyflags"}}],[11,"assert_receiver_is_total_eq","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"emptyflags"}}],[11,"hash","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"emptyflags"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"emptyflags"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"stateflags"}}],[11,"assert_receiver_is_total_eq","","",55,null],[11,"default","","",55,{"inputs":[],"output":{"name":"stateflags"}}],[11,"hash","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"new","","Create new empty cache for the DFA engine.",47,{"inputs":[{"name":"program"}],"output":{"name":"self"}}],[11,"reset_size","","Resets the cache size to account for fixed costs, such as the program and stack sizes.",48,{"inputs":[{"name":"self"}],"output":null}],[11,"forward","","",50,null],[11,"reverse","","",50,null],[11,"forward_many","","",50,null],[11,"exec_at","","Executes the DFA on a forward NFA.",50,null],[11,"exec_at_reverse","","Executes the DFA on a reverse NFA.",50,null],[11,"next_si","","next_si transitions to the next state, where the transition input corresponds to text[i].",50,null],[11,"exec_byte","","Computes the next state given the current state and the current input byte (which may be EOF).",50,{"inputs":[{"name":"self"},{"name":"sparseset"},{"name":"sparseset"},{"name":"u32"},{"name":"byte"}],"output":{"generics":["u32"],"name":"option"}}],[11,"follow_epsilons","","Follows the epsilon transitions starting at (and including) `ip`. The resulting states are inserted into the ordered set `q`.",50,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"sparseset"},{"name":"emptyflags"}],"output":null}],[11,"cached_state","","Find a previously computed state matching the given set of instructions and is_match bool.",50,{"inputs":[{"name":"self"},{"name":"sparseset"},{"name":"stateflags"},{"generics":["u32"],"name":"option"}],"output":{"generics":["u32"],"name":"option"}}],[11,"cached_state_key","","Produces a key suitable for describing a state in the DFA cache.",50,{"inputs":[{"name":"self"},{"name":"sparseset"},{"name":"stateflags"}],"output":{"generics":["state"],"name":"option"}}],[11,"clear_cache_and_save","","Clears the cache, but saves and restores current_state if it is not none.",50,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"bool"}}],[11,"clear_cache","","Wipes the state cache, but saves and restores the current start state.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"restore_state","","Restores the given state back into the cache, and returns a pointer to it.",50,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"generics":["u32"],"name":"option"}}],[11,"next_state","","Returns the next state given the current state si and current byte b. {qcur,qnext} are used as scratch space for storing ordered NFA states.",50,{"inputs":[{"name":"self"},{"name":"sparseset"},{"name":"sparseset"},{"name":"u32"},{"name":"byte"}],"output":{"generics":["u32"],"name":"option"}}],[11,"start_state","","Computes and returns the start state, where searching begins at position `at` in `text`. If the state has already been computed, then it is pulled from the cache. If the state hasn't been cached, then it is computed, cached and a pointer to it is returned.",50,{"inputs":[{"name":"self"},{"name":"sparseset"},{"name":"emptyflags"},{"name":"stateflags"}],"output":{"generics":["u32"],"name":"option"}}],[11,"start_flags","","Computes the set of starting flags for the given position in text.",50,null],[11,"start_flags_reverse","","Computes the set of starting flags for the given position in text.",50,null],[11,"state","","Returns a reference to a State given a pointer to it.",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"state"}}],[11,"add_state","","Adds the given state to the DFA.",50,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"generics":["u32"],"name":"option"}}],[11,"prefix_at","","Quickly finds the next occurrence of any literal prefixes in the regex. If there are no literal prefixes, then the current position is returned. If there are literal prefixes and one could not be found, then None is returned.",50,null],[11,"num_byte_classes","","Returns the number of byte classes required to discriminate transitions in each state.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"byte_class","","Given an input byte or the special EOF sentinel, return its corresponding byte class.",50,{"inputs":[{"name":"self"},{"name":"byte"}],"output":{"name":"usize"}}],[11,"u8_class","","Like byte_class, but explicitly for u8s.",50,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"continue_past_first_match","","Returns true if the DFA should continue searching past the first match.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_prefix","","Returns true if there is a prefix we can quickly search for.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start_ptr","","Sets the STATE_START bit in the given state pointer if and only if we have a prefix to scan for.",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"approximate_size","","Approximate size returns the approximate heap space currently used by the DFA. It is used to determine whether the DFA's state cache needs to be wiped. Namely, it is possible that for certain regexes on certain inputs, a new state could be created for every byte of input. (This is bad for memory use, so we bound it with a cache.)",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new transition table.",49,{"inputs":[{"name":"usize"}],"output":{"name":"transitions"}}],[11,"num_states","","Returns the total number of states currently in this table.",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","Allocates room for one additional state and returns a pointer to it.",49,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clear","","Clears the table of all states.",49,{"inputs":[{"name":"self"}],"output":null}],[11,"set_next","","Sets the transition from (si, cls) to next.",49,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"usize"},{"name":"u32"}],"output":null}],[11,"next","","Returns the transition corresponding to (si, cls).",49,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"state_heap_size","","The heap size, in bytes, of a single state in the transition table.",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_unchecked","","Like `next`, but uses unchecked access and is therefore unsafe.",49,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"is_match","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_match","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"is_word","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_word","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_empty","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_empty","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"byte","","",53,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"eof","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"is_eof","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_word","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_byte","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","regex","",null,null],[4,"Error","regex::error","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",16,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",16,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",16,null],[13,"__Nonexhaustive","","Hints that destructuring should not be exhaustive.",16,null],[11,"fmt","regex","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"exec","","",null,null],[3,"Exec","regex::exec","Exec manages the execution of a regular expression.",null,null],[12,"ro","","All read only state.",58,null],[12,"cache","","Caches for the various matching engines.",58,null],[3,"ExecNoSync","","ExecNoSync is like Exec, except it embeds a reference to a cache. This means it is no longer Sync, but we can now avoid the overhead of synchronization to fetch the cache.",null,null],[12,"ro","","All read only state.",59,null],[12,"cache","","Caches for the various matching engines.",59,null],[3,"ExecNoSyncStr","","ExecNoSyncStr is like ExecNoSync, but matches on &str instead of &[u8].",null,null],[12,"0","","",60,null],[3,"ExecReadOnly","","ExecReadOnly comprises all read only state for a regex. Namely, all such state is determined at compile time and never changes during search.",null,null],[12,"res","","The original regular expressions given by the caller to compile.",61,null],[12,"nfa","","A compiled program that is used in the NFA simulation and backtracking. It can be byte-based or Unicode codepoint based.",61,null],[12,"dfa","","A compiled byte based program for DFA execution. This is only used if a DFA can be executed. (Currently, only word boundary assertions are not supported.) Note that this program contains an embedded `.*?` preceding the first capture group, unless the regex is anchored at the beginning.",61,null],[12,"dfa_reverse","","The same as above, except the program is reversed (and there is no preceding `.*?`). This is used by the DFA to find the starting location of matches.",61,null],[12,"suffixes","","A set of suffix literals extracted from the regex.",61,null],[12,"match_type","","match_type encodes as much upfront knowledge about how we're going to execute a search as possible.",61,null],[3,"ExecBuilder","","Facilitates the construction of an executor by exposing various knobs to control how a regex is executed and what kinds of resources it's permitted to use.",null,null],[12,"options","","",62,null],[12,"match_type","","",62,null],[12,"bytes","","",62,null],[12,"only_utf8","","",62,null],[3,"Parsed","","Parsed represents a set of parsed regular expressions and their detected literals.",null,null],[12,"exprs","","",63,null],[12,"prefixes","","",63,null],[12,"suffixes","","",63,null],[12,"bytes","","",63,null],[3,"ProgramCacheInner","","",null,null],[12,"pikevm","","",64,null],[12,"backtrack","","",64,null],[12,"dfa","","",64,null],[12,"dfa_reverse","","",64,null],[4,"MatchType","","",null,null],[13,"Literal","","A single or multiple literal search. This is only used when the regex can be decomposed into unambiguous literal search.",65,null],[13,"Dfa","","A normal DFA search.",65,null],[13,"DfaAnchoredReverse","","A reverse DFA search starting from the end of a haystack.",65,null],[13,"DfaSuffix","","A reverse DFA search with suffix literal scanning.",65,null],[13,"DfaMany","","Use the DFA on two or more regular expressions.",65,null],[13,"Nfa","","An NFA variant.",65,null],[13,"Nothing","","No match is ever possible, so don't ever try to search.",65,null],[4,"MatchLiteralType","","",null,null],[13,"Unanchored","","Match literals anywhere in text.",66,null],[13,"AnchoredStart","","Match literals only at the start of text.",66,null],[13,"AnchoredEnd","","Match literals only at the end of text.",66,null],[4,"MatchNfaType","","",null,null],[13,"Auto","","Choose between Backtrack and PikeVM.",67,null],[13,"Backtrack","","NFA bounded backtracking.",67,null],[13,"PikeVM","","The Pike VM.",67,null],[6,"ProgramCache","","ProgramCache maintains reusable allocations for each matching engine available to a particular program.",null,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a regex execution builder.",62,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"new_many","","Like new, but compiles the union of the given regular expressions.",62,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"new_options","","Create a regex execution builder.",62,{"inputs":[{"name":"regexoptions"}],"output":{"name":"self"}}],[11,"automatic","","Set the matching engine to be automatically determined.",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"nfa","","Sets the matching engine to use the NFA algorithm no matter what optimizations are possible.",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bounded_backtracking","","Sets the matching engine to use a bounded backtracking engine no matter what optimizations are possible.",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Compiles byte based programs for use with the NFA matching engines.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"only_utf8","","When disabled, the program compiled may match arbitrary bytes.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"unicode","","Set the Unicode flag.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"parse","","Parse the current set of patterns into their AST and extract literals.",62,{"inputs":[{"name":"self"}],"output":{"generics":["parsed","error"],"name":"result"}}],[11,"build","","Build an executor that can run a regular expression.",62,{"inputs":[{"name":"self"}],"output":{"generics":["exec","error"],"name":"result"}}],[11,"slots_len","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_after_empty","","",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shortest_match_at","","",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"is_match_at","","",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"find_at","","",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"option"}}],[11,"read_captures_at","","",60,null],[11,"slots_len","","Returns the number of capture slots in the regular expression. (There are two slots for every capture group, corresponding to possibly empty start and end locations of the capture.)",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_after_empty","","",59,null],[11,"shortest_match_at","","Returns the end of a match location, possibly occurring before the end location of the correct leftmost-first match.",59,null],[11,"is_match_at","","Returns true if and only if the regex matches text.",59,null],[11,"find_at","","Finds the start and end location of the leftmost-first match, starting at the given location.",59,null],[11,"read_captures_at","","Finds the start and end location of the leftmost-first match and also fills in all matching capture groups.",59,null],[11,"find_literals","","Finds the leftmost-first match using only literal search.",59,null],[11,"find_dfa_forward","","Finds the leftmost-first match (start and end) using only the DFA.",59,null],[11,"find_dfa_anchored_reverse","","Finds the leftmost-first match (start and end) using only the DFA, but assumes the regex is anchored at the end and therefore starts at the end of the regex and matches in reverse.",59,null],[11,"shortest_dfa","","Finds the end of the shortest match using only the DFA.",59,null],[11,"shortest_dfa_reverse_suffix","","Finds the end of the shortest match using only the DFA by scanning for suffix literals.",59,null],[11,"exec_dfa_reverse_suffix","","Finds the end of the shortest match using only the DFA by scanning for suffix literals. It also reports the start of the match.",59,null],[11,"find_dfa_reverse_suffix","","Finds the leftmost-first match (start and end) using only the DFA by scanning for suffix literals.",59,null],[11,"match_nfa","","Executes the NFA engine to return whether there is a match or not.",59,null],[11,"match_nfa_type","","Like match_nfa, but allows specification of the type of NFA engine.",59,null],[11,"shortest_nfa","","Finds the shortest match using an NFA.",59,null],[11,"shortest_nfa_type","","Like shortest_nfa, but allows specification of the type of NFA engine.",59,null],[11,"find_nfa","","Like find, but executes an NFA engine.",59,null],[11,"captures_nfa_with_match","","Like find_nfa, but fills in captures and restricts the search space using previously found match information.",59,null],[11,"captures_nfa","","Like find_nfa, but fills in captures.",59,null],[11,"captures_nfa_type","","Like captures_nfa, but allows specification of type of NFA engine.",59,null],[11,"exec_nfa","","",59,null],[11,"exec_pikevm","","Always run the NFA algorithm.",59,null],[11,"exec_backtrack","","Always runs the NFA using bounded backtracking.",59,null],[11,"many_matches_at","","Finds which regular expressions match the given text.",59,null],[11,"is_anchor_end_match","","",59,null],[11,"capture_name_idx","","",59,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"capture_name_idx","","",60,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"searcher","","Get a searcher that isn't Sync.",58,{"inputs":[{"name":"self"}],"output":{"name":"execnosync"}}],[11,"searcher_str","","Get a searcher that isn't Sync and can match on &str.",58,{"inputs":[{"name":"self"}],"output":{"name":"execnosyncstr"}}],[11,"into_regex","","Build a Regex from this executor.",58,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"into_regex_set","","Build a RegexSet from this executor.",58,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"into_byte_regex","","Build a Regex from this executor that can match arbitrary bytes.",58,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"into_byte_regex_set","","Build a RegexSet from this executor that can match arbitrary bytes.",58,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"regex_strings","","The original regular expressions given by the caller that were compiled.",58,null],[11,"capture_names","","Return a slice of capture names.",58,null],[11,"capture_name_idx","","Return a reference to named groups mapping (from group name to group position).",58,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"exec"}}],[11,"choose_match_type","","",61,{"inputs":[{"name":"self"},{"generics":["matchtype"],"name":"option"}],"output":{"name":"matchtype"}}],[11,"should_suffix_scan","","Returns true if the program is amenable to suffix scanning.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"matchtype"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"matchliteraltype"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"matchnfatype"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"programcacheinner"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",64,{"inputs":[{"name":"execreadonly"}],"output":{"name":"self"}}],[0,"expand","regex","",null,null],[3,"CaptureRef","regex::expand","",null,null],[12,"rest","","",68,null],[12,"cap","","",68,null],[4,"Ref","","",null,null],[13,"Named","","",69,null],[13,"Number","","",69,null],[5,"expand","","",null,null],[5,"find_cap_ref","","",null,null],[5,"is_valid_cap_letter","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"freqs","regex","",null,null],[17,"BYTE_FREQUENCIES","regex::freqs","",null,null],[0,"input","regex","",null,null],[3,"InputAt","regex::input","Represents a location in the input.",null,null],[12,"pos","","",70,null],[12,"c","","",70,null],[12,"byte","","",70,null],[12,"len","","",70,null],[3,"CharInput","","An input reader over characters.",null,null],[12,"0","","",71,null],[3,"ByteInput","","An input reader over bytes.",null,null],[12,"text","","",72,null],[12,"only_utf8","","",72,null],[3,"Char","","An inline representation of `Option<char>`.",null,null],[12,"0","","",73,null],[8,"Input","","An abstraction over input used in the matching engines.",null,null],[10,"at","","Return an encoding of the position at byte offset `i`.",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"inputat"}}],[10,"next_char","","Return the Unicode character occurring next to `at`.",74,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[10,"previous_char","","Return the Unicode character occurring previous to `at`.",74,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[10,"is_empty_match","","Return true if the given empty width instruction matches at the input position given.",74,{"inputs":[{"name":"self"},{"name":"inputat"},{"name":"instemptylook"}],"output":{"name":"bool"}}],[10,"prefix_at","","Scan the input for a matching prefix.",74,{"inputs":[{"name":"self"},{"name":"literalsearcher"},{"name":"inputat"}],"output":{"generics":["inputat"],"name":"option"}}],[10,"len","","The number of bytes in the input.",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"as_bytes","","Return the given input as a sequence of bytes.",74,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"inputat"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_start","","Returns true iff this position is at the beginning of the input.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","Returns true iff this position is past the end of the input.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"char","","Returns the character at this position.",70,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"byte","","Returns the byte at this position.",70,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"len","","Returns the UTF-8 width of the character at this position.",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pos","","Returns the byte offset of this position.",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_pos","","Returns the byte offset of the next position in the input.",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"charinput"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new character input reader for the given string.",71,null],[11,"deref","","",71,null],[11,"at","","",71,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"inputat"}}],[11,"next_char","","",71,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"previous_char","","",71,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"is_empty_match","","",71,{"inputs":[{"name":"self"},{"name":"inputat"},{"name":"instemptylook"}],"output":{"name":"bool"}}],[11,"prefix_at","","",71,{"inputs":[{"name":"self"},{"name":"literalsearcher"},{"name":"inputat"}],"output":{"generics":["inputat"],"name":"option"}}],[11,"len","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","",71,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"byteinput"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return a new byte-based input reader for the given string.",72,null],[11,"deref","","",72,null],[11,"at","","",72,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"inputat"}}],[11,"next_char","","",72,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"previous_char","","",72,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[11,"is_empty_match","","",72,{"inputs":[{"name":"self"},{"name":"inputat"},{"name":"instemptylook"}],"output":{"name":"bool"}}],[11,"prefix_at","","",72,{"inputs":[{"name":"self"},{"name":"literalsearcher"},{"name":"inputat"}],"output":{"generics":["inputat"],"name":"option"}}],[11,"len","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","",72,null],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"hash","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",73,null],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"ordering"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_none","","Returns true iff the character is absent.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len_utf8","","Returns the length of the character's UTF-8 encoding.",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_word_char","","Returns true iff the character is a word character.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_word_byte","","Returns true iff the byte is a word byte.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_char","","Converts the character to a real primitive `char`.",73,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"from","","",73,{"inputs":[{"name":"char"}],"output":{"name":"char"}}],[11,"from","","",73,{"inputs":[{"generics":["char"],"name":"option"}],"output":{"name":"char"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["ordering"],"name":"option"}}],[0,"literals","regex","",null,null],[3,"LiteralSearcher","regex::literals","A prefix extracted from a compiled regular expression.",null,null],[12,"complete","","",75,null],[12,"lcp","","",75,null],[12,"lcs","","",75,null],[12,"matcher","","",75,null],[3,"SingleByteSet","","",null,null],[12,"sparse","","",76,null],[12,"dense","","",76,null],[12,"complete","","",76,null],[12,"all_ascii","","",76,null],[3,"SingleSearch","","Provides an implementation of fast subtring search.",null,null],[12,"pat","","The pattern.",77,null],[12,"char_len","","The number of Unicode characters in the pattern. This is useful for determining the effective length of a pattern when deciding which optimizations to perform. A trailing incomplete UTF-8 sequence counts as one character.",77,null],[12,"rare1","","The rarest byte in the pattern, according to pre-computed frequency analysis.",77,null],[12,"rare1i","","The offset of the rarest byte in `pat`.",77,null],[12,"rare2","","The second rarest byte in the pattern, according to pre-computed frequency analysis. (This may be equivalent to the rarest byte.)",77,null],[12,"rare2i","","The offset of the second rarest byte in `pat`.",77,null],[4,"Matcher","","",null,null],[13,"Empty","","No literals. (Never advances through the input.)",78,null],[13,"Bytes","","A set of four or more single byte literals.",78,null],[13,"Single","","A single substring. (Likely using Boyer-Moore with memchr.)",78,null],[13,"AC","","An Aho-Corasick automaton.",78,null],[13,"Teddy128","","A simd accelerated multiple string matcher.",78,null],[4,"LiteralIter","","",null,null],[13,"Empty","","",79,null],[13,"Bytes","","",79,null],[13,"Single","","",79,null],[13,"AC","","",79,null],[13,"Teddy128","","",79,null],[5,"char_len_lossy","","",null,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"literalsearcher"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"matcher"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns a matcher that never matches and never advances the input.",75,{"inputs":[],"output":{"name":"self"}}],[11,"prefixes","","Returns a matcher for literal prefixes from the given set.",75,{"inputs":[{"name":"literals"}],"output":{"name":"self"}}],[11,"suffixes","","Returns a matcher for literal suffixes from the given set.",75,{"inputs":[{"name":"literals"}],"output":{"name":"self"}}],[11,"new","","",75,{"inputs":[{"name":"literals"},{"name":"matcher"}],"output":{"name":"self"}}],[11,"complete","","Returns true if all matches comprise the entire regular expression.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Find the position of a literal in `haystack` if it exists.",75,null],[11,"find_start","","Like find, except matches must start at index `0`.",75,null],[11,"find_end","","Like find, except matches must end at index `haystack.len()`.",75,null],[11,"iter","","Returns an iterator over all literals to be matched.",75,{"inputs":[{"name":"self"}],"output":{"name":"literaliter"}}],[11,"lcp","","Returns a matcher for the longest common prefix of this matcher.",75,{"inputs":[{"name":"self"}],"output":{"name":"singlesearch"}}],[11,"lcs","","Returns a matcher for the longest common suffix of this matcher.",75,{"inputs":[{"name":"self"}],"output":{"name":"singlesearch"}}],[11,"is_empty","","Returns true iff this prefix is empty.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of prefixes in this machine.",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"approximate_size","","Return the approximate heap usage of literals in bytes.",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"prefixes","","",78,{"inputs":[{"name":"literals"}],"output":{"name":"self"}}],[11,"suffixes","","",78,{"inputs":[{"name":"literals"}],"output":{"name":"self"}}],[11,"new","","",78,{"inputs":[{"name":"literals"},{"name":"singlebyteset"}],"output":{"name":"self"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"singlebyteset"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",76,{"inputs":[],"output":{"name":"singlebyteset"}}],[11,"prefixes","","",76,{"inputs":[{"name":"literals"}],"output":{"name":"singlebyteset"}}],[11,"suffixes","","",76,{"inputs":[{"name":"literals"}],"output":{"name":"singlebyteset"}}],[11,"find","","Faster find that special cases certain sizes to use memchr.",76,null],[11,"_find","","Generic find that works on any sized set.",76,null],[11,"approximate_size","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"singlesearch"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",77,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"singlesearch"}}],[11,"empty","","",77,{"inputs":[],"output":{"name":"singlesearch"}}],[11,"find","","",77,null],[11,"is_suffix","","",77,null],[11,"len","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"char_len","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"approximate_size","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"pikevm","regex","",null,null],[3,"Fsm","regex::pikevm","An NFA simulation matching engine.",null,null],[12,"prog","","The sequence of opcodes (among other things) that is actually executed.",80,null],[12,"stack","","An explicit stack used for following epsilon transitions. (This is borrowed from the cache.)",80,null],[12,"input","","The input to search.",80,null],[3,"Cache","","A cached allocation that can be reused on each execution.",null,null],[12,"clist","","A pair of ordered sets for tracking NFA states.",81,null],[12,"nlist","","",81,null],[12,"stack","","An explicit stack used for following epsilon transitions.",81,null],[3,"Threads","","An ordered set of NFA states and their captures.",null,null],[12,"set","","An ordered set of opcodes (each opcode is an NFA state).",82,null],[12,"caps","","Captures for every NFA state.",82,null],[12,"slots_per_thread","","The number of capture slots stored per thread. (Every capture has two slots.)",82,null],[4,"FollowEpsilon","","A representation of an explicit stack frame when following epsilon transitions. This is used to avoid recursion.",null,null],[13,"IP","","Follow transitions at the given instruction pointer.",83,null],[13,"Capture","","Restore the capture slot with the given position in the input.",83,null],[12,"slot","regex::pikevm::FollowEpsilon","",83,null],[12,"pos","","",83,null],[11,"fmt","regex::pikevm","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"threads"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"followepsilon"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new allocation used by the NFA machine to record execution and captures.",81,{"inputs":[{"name":"program"}],"output":{"name":"self"}}],[11,"exec","","Execute the NFA matching engine.",80,null],[11,"exec_","","",80,null],[11,"step","","Step through the input, one token (byte or codepoint) at a time.",80,null],[11,"add","","Follows epsilon transitions and adds them for processing to nlist, starting at and including ip.",80,null],[11,"add_step","","A helper function for add that avoids excessive pushing to the stack.",80,null],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"resize","","",82,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"caps","","",82,null],[0,"prog","regex","",null,null],[3,"Program","regex::prog","Program is a sequence of instructions and various facts about thos instructions.",null,null],[12,"insts","","A sequence of instructions that represents an NFA.",84,null],[12,"matches","","Pointers to each Match instruction in the sequence.",84,null],[12,"captures","","The ordered sequence of all capture groups extracted from the AST. Unnamed groups are `None`.",84,null],[12,"capture_name_idx","","Pointers to all named capture groups into `captures`.",84,null],[12,"start","","A pointer to the start instruction. This can vary depending on how the program was compiled. For example, programs for use with the DFA engine have a `.*?` inserted at the beginning of unanchored regular expressions. The actual starting point of the program is after the `.*?`.",84,null],[12,"byte_classes","","A set of equivalence classes for discriminating bytes in the compiled program.",84,null],[12,"only_utf8","","When true, this program can only match valid UTF-8.",84,null],[12,"is_bytes","","When true, this program uses byte range instructions instead of Unicode range instructions.",84,null],[12,"is_dfa","","When true, the program is compiled for DFA matching. For example, this implies `is_bytes` and also inserts a preceding `.*?` for unanchored regexes.",84,null],[12,"is_reverse","","When true, the program matches text in reverse (for use only in the DFA).",84,null],[12,"is_anchored_start","","Whether the regex must match from the start of the input.",84,null],[12,"is_anchored_end","","Whether the regex must match at the end of the input.",84,null],[12,"has_unicode_word_boundary","","Whether this program contains a Unicode word boundary instruction.",84,null],[12,"prefixes","","A possibly empty machine for very quickly matching prefix literals.",84,null],[12,"dfa_size_limit","","A limit on the size of the cache that the DFA is allowed to use while matching.",84,null],[3,"InstSave","","Representation of the Save instruction.",null,null],[12,"goto","","The next location to execute in the program.",85,null],[12,"slot","","The capture slot (there are two slots for every capture in a regex, including the zeroth capture for the entire match).",85,null],[3,"InstSplit","","Representation of the Split instruction.",null,null],[12,"goto1","","The first instruction to try. A match resulting from following goto1 has precedence over a match resulting from following goto2.",86,null],[12,"goto2","","The second instruction to try. A match resulting from following goto1 has precedence over a match resulting from following goto2.",86,null],[3,"InstEmptyLook","","Representation of the EmptyLook instruction.",null,null],[12,"goto","","The next location to execute in the program if this instruction succeeds.",87,null],[12,"look","","The type of zero-width assertion to check.",87,null],[3,"InstChar","","Representation of the Char instruction.",null,null],[12,"goto","","The next location to execute in the program if this instruction succeeds.",88,null],[12,"c","","The character to test.",88,null],[3,"InstRanges","","Representation of the Ranges instruction.",null,null],[12,"goto","","The next location to execute in the program if this instruction succeeds.",89,null],[12,"ranges","","The set of Unicode scalar value ranges to test.",89,null],[3,"InstBytes","","Representation of the Bytes instruction.",null,null],[12,"goto","","The next location to execute in the program if this instruction succeeds.",90,null],[12,"start","","The start (inclusive) of this byte range.",90,null],[12,"end","","The end (inclusive) of this byte range.",90,null],[4,"Inst","","Inst is an instruction code in a Regex program.",null,null],[13,"Match","","Match indicates that the program has reached a match state.",91,null],[13,"Save","","Save causes the program to save the current location of the input in the slot indicated by InstSave.",91,null],[13,"Split","","Split causes the program to diverge to one of two paths in the program, preferring goto1 in InstSplit.",91,null],[13,"EmptyLook","","EmptyLook represents a zero-width assertion in a regex program. A zero-width assertion does not consume any of the input text.",91,null],[13,"Char","","Char requires the regex program to match the character in InstChar at the current position in the input.",91,null],[13,"Ranges","","Ranges requires the regex program to match the character at the current position in the input with one of the ranges specified in InstRanges.",91,null],[13,"Bytes","","Bytes is like Ranges, except it expresses a single byte range. It is used in conjunction with Split instructions to implement multi-byte character classes.",91,null],[4,"EmptyLook","","The set of zero-width match instructions.",null,null],[13,"StartLine","","Start of line or input.",92,null],[13,"EndLine","","End of line or input.",92,null],[13,"StartText","","Start of input.",92,null],[13,"EndText","","End of input.",92,null],[13,"WordBoundary","","Word character on one side and non-word character on other.",92,null],[13,"NotWordBoundary","","Word character on both sides or non-word character on both sides.",92,null],[13,"WordBoundaryAscii","","ASCII word boundary.",92,null],[13,"NotWordBoundaryAscii","","Not ASCII word boundary.",92,null],[6,"InstPtr","","InstPtr represents the index of an instruction in a regex program.",null,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"program"}}],[11,"new","","Creates an empty instruction sequence. Fields are given default values.",84,{"inputs":[],"output":{"name":"self"}}],[11,"skip","","If pc is an index to a no-op instruction (like Save), then return the next pc that is not a no-op instruction.",84,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"leads_to_match","","Return true if and only if an execution engine at instruction `pc` will always lead to a match.",84,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"needs_dotstar","","Returns true if the current configuration demands that an implicit `.*?` be prepended to the instruction sequence.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"uses_bytes","","Returns true if this program uses Byte instructions instead of Char/Range instructions.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"only_utf8","","Returns true if this program exclusively matches valid UTF-8 bytes.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"approximate_size","","Return the approximate heap usage of this instruction sequence in bytes.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deref","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"inst"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if this is a match instruction.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"instsave"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"instsplit"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"instemptylook"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"emptylook"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"emptylook"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",92,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"instchar"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"instranges"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","Tests whether the given input character matches this instruction.",89,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"num_chars","","Return the number of distinct characters represented by all of the ranges.",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"instbytes"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",90,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[0,"re_builder","regex","",null,null],[3,"RegexOptions","regex::re_builder","The set of user configurable options for compiling zero or more regexes.",null,null],[12,"pats","","",93,null],[12,"size_limit","","",93,null],[12,"dfa_size_limit","","",93,null],[12,"case_insensitive","","",93,null],[12,"multi_line","","",93,null],[12,"dot_matches_new_line","","",93,null],[12,"swap_greed","","",93,null],[12,"ignore_whitespace","","",93,null],[12,"unicode","","",93,null],[0,"bytes","","",null,null],[3,"RegexBuilder","regex::re_builder::bytes","A configurable builder for a regular expression.",null,null],[12,"0","","",17,null],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",17,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",17,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[0,"unicode","regex::re_builder","",null,null],[3,"RegexBuilder","regex::re_builder::unicode","A configurable builder for a regular expression.",null,null],[12,"0","","",0,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",0,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",0,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"clone","regex::re_builder","",93,{"inputs":[{"name":"self"}],"output":{"name":"regexoptions"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[0,"re_bytes","regex","",null,null],[3,"Regex","regex::re_bytes","A compiled regular expression for matching arbitrary bytes.",null,null],[12,"0","","",22,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[12,"0","","",23,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[12,"0","","",24,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[12,"finder","","",25,null],[12,"last","","",25,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[12,"splits","","",26,null],[12,"n","","",26,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[12,"0","","",27,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[12,"text","","",28,null],[12,"slots","","",28,null],[12,"named_groups","","",28,null],[3,"CapturesDebug","","",null,null],[12,"0","","",94,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[12,"idx","","",29,null],[12,"caps","","",29,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[12,"idx","","",30,null],[12,"slots","","",30,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[12,"caps","","",31,null],[12,"names","","",31,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",32,null],[5,"extend_from_slice","","This hopefully has the same performance characteristics as Vec::extend_from_slice (which was introduced in Rust 1.6), but works on Rust 1.3.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",33,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",33,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",22,{"inputs":[{"name":"exec"}],"output":{"name":"regex"}}],[11,"from_str","","Attempts to parse a string into a regular expression",22,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",22,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",22,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",22,null],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",22,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",22,null],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",22,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",22,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",22,null],[11,"read_captures_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",22,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",22,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",22,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",22,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",22,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",22,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",22,null],[11,"shortest_match","","Returns the end location of a match in the text given.",22,null],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",22,null],[11,"as_str","","Returns the original string of this regex.",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",22,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",28,null],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::re_bytes","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","regex::bytes","",28,null],[11,"index","","",28,null],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",32,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[0,"re_plugin","regex","",null,null],[3,"Plugin","regex::re_plugin","Plugin is the compiler plugin's data structure. It declare some static data (like capture groups and the original regex string), but defines its matching engine as a simple function.",null,null],[12,"original","","",95,null],[12,"names","","",95,null],[12,"groups","","",95,null],[12,"prog","","",95,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"plugin"}}],[11,"slots_len","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_after_empty","","",95,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"shortest_match_at","","",95,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"is_match_at","","",95,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"find_at","","",95,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"option"}}],[11,"read_captures_at","","",95,null],[0,"re_set","regex","",null,null],[0,"unicode","regex::re_set","",null,null],[3,"RegexSet","regex::re_set::unicode","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[12,"0","","",1,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[12,"matched_any","","",2,null],[12,"matches","","",2,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[12,"0","","",3,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[12,"0","","",4,null],[5,"as_bytes_str","","",null,null],[5,"as_bytes_bytes","","",null,null],[11,"clone","regex","",1,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",1,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",2,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"exec"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bytes","regex::re_set","",null,null],[3,"RegexSet","regex::re_set::bytes","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[12,"0","","",18,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[12,"matched_any","","",19,null],[12,"matches","","",19,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[12,"0","","",20,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[12,"0","","",21,null],[5,"as_bytes_str","","",null,null],[5,"as_bytes_bytes","","",null,null],[11,"clone","regex::bytes","",18,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",18,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",18,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",18,null],[11,"len","","Returns the total number of regular expressions in this set.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",19,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"from","","",18,{"inputs":[{"name":"exec"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"re_trait","regex","",null,null],[3,"FindMatches","regex::re_trait","An iterator over all non-overlapping successive leftmost-first matches.",null,null],[12,"re","","",96,null],[12,"text","","",96,null],[12,"last_end","","",96,null],[12,"last_match","","",96,null],[3,"FindCaptures","","An iterator over all non-overlapping successive leftmost-first matches with captures.",null,null],[12,"0","","",97,null],[6,"Slot","","Slot is a single saved capture location. Note that there are two slots for every capture in a regular expression (one slot each for the start and end of the capture).",null,null],[8,"RegularExpression","","RegularExpression describes types that can implement regex searching.",null,null],[16,"Text","","The type of the haystack.",98,null],[10,"slots_len","","The number of capture slots in the compiled regular expression. This is always two times the number of capture groups (two slots per group).",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"next_after_empty","","Returns the position of the next character after `i`.",98,null],[10,"shortest_match_at","","Returns the location of the shortest match.",98,null],[10,"is_match_at","","Returns whether the regex matches the text given.",98,null],[10,"find_at","","Returns the leftmost-first match location if one exists.",98,null],[10,"read_captures_at","","Returns the leftmost-first match location if one exists, and also fills in any matching capture slot locations.",98,null],[11,"find_iter","","Returns an iterator over all non-overlapping successive leftmost-first matches.",98,null],[11,"captures_iter","","Returns an iterator over all non-overlapping successive leftmost-first matches with captures.",98,null],[11,"text","","Return the text being searched.",96,null],[11,"regex","","Return the underlying regex.",96,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"text","","Return the text being searched.",97,null],[11,"regex","","Return the underlying regex.",97,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[0,"re_unicode","regex","",null,null],[3,"Regex","regex::re_unicode","A compiled regular expression for matching Unicode strings.",null,null],[12,"0","","",5,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[12,"0","","",10,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",13,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[12,"finder","","",14,null],[12,"last","","",14,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[12,"splits","","",15,null],[12,"n","","",15,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[12,"text","","",6,null],[12,"slots","","",6,null],[12,"named_groups","","",6,null],[3,"CapturesDebug","","",null,null],[12,"0","","",99,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[12,"idx","","",7,null],[12,"caps","","",7,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[12,"idx","","",8,null],[12,"slots","","",8,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[12,"caps","","",9,null],[12,"names","","",9,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[12,"0","","",11,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[12,"0","","",12,null],[4,"_Regex","","",null,null],[13,"Dynamic","","",100,null],[13,"Plugin","","",100,null],[4,"_CaptureNames","","",null,null],[13,"Plugin","","",101,null],[13,"Dynamic","","",101,null],[4,"NamedGroups","","",null,null],[13,"Plugin","","",102,null],[13,"Dynamic","","",102,null],[4,"NamedGroupsIter","","",null,null],[13,"Plugin","","",103,null],[13,"Dynamic","","",103,null],[4,"FindCapturesInner","","",null,null],[13,"Dynamic","","",104,null],[13,"Plugin","","",104,null],[4,"FindMatchesInner","","",null,null],[13,"Dynamic","","",105,null],[13,"Plugin","","",105,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",106,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",106,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",5,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"clone","regex::re_unicode","",100,{"inputs":[{"name":"self"}],"output":{"name":"_regex"}}],[11,"fmt","regex","Shows the original regular expression.",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"exec"}],"output":{"name":"regex"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",5,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",5,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",5,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"read_captures_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",5,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",5,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",10,null],[11,"reg_replace","","",13,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"from_regex","regex::re_unicode","",102,{"inputs":[{"name":"regex"}],"output":{"name":"namedgroups"}}],[11,"pos","","",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"iter","","",102,{"inputs":[{"name":"self"}],"output":{"name":"namedgroupsiter"}}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pos","regex","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",6,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",6,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",6,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","regex::re_unicode","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","regex","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"text","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"simd_accel","","",null,null],[0,"teddy128","regex::simd_accel","",null,null],[3,"Teddy","regex::simd_accel::teddy128","",null,null],[12,"0","","",107,null],[3,"Match","","",null,null],[12,"pat","","",108,null],[12,"start","","",108,null],[12,"end","","",108,null],[5,"is_teddy_128_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"teddy"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"new","","",107,{"inputs":[{"name":"literals"}],"output":{"generics":["teddy"],"name":"option"}}],[11,"patterns","","",107,null],[11,"len","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"approximate_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"find","","",107,null],[0,"sparse","regex","",null,null],[3,"SparseSet","regex::sparse","A sparse set used for representing ordered NFA states.",null,null],[12,"dense","","Dense contains the instruction pointers in the order in which they were inserted. Accessing elements >= self.size is illegal.",109,null],[12,"sparse","","Sparse maps instruction pointers to their location in dense.",109,null],[12,"size","","The number of elements in the set.",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"sparseset"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"sparseset"}}],[11,"len","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert","","",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"contains","","",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clear","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",109,null],[0,"internal","regex","The `internal` module exists to support the `regex!` macro and other suspicious activity, such as testing different matching engines and supporting the `regex-debug` CLI utility.",null,null],[3,"Compiler","regex::internal","A compiler translates a regular expression AST to a sequence of instructions. The sequence of instructions represents an NFA.",null,null],[12,"insts","","",38,null],[12,"compiled","","",38,null],[12,"capture_name_idx","","",38,null],[12,"num_exprs","","",38,null],[12,"size_limit","","",38,null],[12,"suffix_cache","","",38,null],[12,"utf8_seqs","","",38,null],[12,"byte_classes","","",38,null],[3,"Exec","","Exec manages the execution of a regular expression.",null,null],[12,"ro","","All read only state.",58,null],[12,"cache","","Caches for the various matching engines.",58,null],[3,"ExecBuilder","","Facilitates the construction of an executor by exposing various knobs to control how a regex is executed and what kinds of resources it's permitted to use.",null,null],[12,"options","","",62,null],[12,"match_type","","",62,null],[12,"bytes","","",62,null],[12,"only_utf8","","",62,null],[3,"Char","","An inline representation of `Option<char>`.",null,null],[12,"0","","",73,null],[3,"CharInput","","An input reader over characters.",null,null],[12,"0","","",71,null],[3,"InputAt","","Represents a location in the input.",null,null],[12,"pos","","",70,null],[12,"c","","",70,null],[12,"byte","","",70,null],[12,"len","","",70,null],[3,"LiteralSearcher","","A prefix extracted from a compiled regular expression.",null,null],[12,"complete","","",75,null],[12,"lcp","","",75,null],[12,"lcs","","",75,null],[12,"matcher","","",75,null],[3,"Program","","Program is a sequence of instructions and various facts about thos instructions.",null,null],[12,"insts","","A sequence of instructions that represents an NFA.",84,null],[12,"matches","","Pointers to each Match instruction in the sequence.",84,null],[12,"captures","","The ordered sequence of all capture groups extracted from the AST. Unnamed groups are `None`.",84,null],[12,"capture_name_idx","","Pointers to all named capture groups into `captures`.",84,null],[12,"start","","A pointer to the start instruction. This can vary depending on how the program was compiled. For example, programs for use with the DFA engine have a `.*?` inserted at the beginning of unanchored regular expressions. The actual starting point of the program is after the `.*?`.",84,null],[12,"byte_classes","","A set of equivalence classes for discriminating bytes in the compiled program.",84,null],[12,"only_utf8","","When true, this program can only match valid UTF-8.",84,null],[12,"is_bytes","","When true, this program uses byte range instructions instead of Unicode range instructions.",84,null],[12,"is_dfa","","When true, the program is compiled for DFA matching. For example, this implies `is_bytes` and also inserts a preceding `.*?` for unanchored regexes.",84,null],[12,"is_reverse","","When true, the program matches text in reverse (for use only in the DFA).",84,null],[12,"is_anchored_start","","Whether the regex must match from the start of the input.",84,null],[12,"is_anchored_end","","Whether the regex must match at the end of the input.",84,null],[12,"has_unicode_word_boundary","","Whether this program contains a Unicode word boundary instruction.",84,null],[12,"prefixes","","A possibly empty machine for very quickly matching prefix literals.",84,null],[12,"dfa_size_limit","","A limit on the size of the cache that the DFA is allowed to use while matching.",84,null],[3,"InstRanges","","Representation of the Ranges instruction.",null,null],[12,"goto","","The next location to execute in the program if this instruction succeeds.",89,null],[12,"ranges","","The set of Unicode scalar value ranges to test.",89,null],[3,"Plugin","","Plugin is the compiler plugin's data structure. It declare some static data (like capture groups and the original regex string), but defines its matching engine as a simple function.",null,null],[12,"original","","",95,null],[12,"names","","",95,null],[12,"groups","","",95,null],[12,"prog","","",95,null],[4,"Inst","","Inst is an instruction code in a Regex program.",null,null],[13,"Match","","Match indicates that the program has reached a match state.",91,null],[13,"Save","","Save causes the program to save the current location of the input in the slot indicated by InstSave.",91,null],[13,"Split","","Split causes the program to diverge to one of two paths in the program, preferring goto1 in InstSplit.",91,null],[13,"EmptyLook","","EmptyLook represents a zero-width assertion in a regex program. A zero-width assertion does not consume any of the input text.",91,null],[13,"Char","","Char requires the regex program to match the character in InstChar at the current position in the input.",91,null],[13,"Ranges","","Ranges requires the regex program to match the character at the current position in the input with one of the ranges specified in InstRanges.",91,null],[13,"Bytes","","Bytes is like Ranges, except it expresses a single byte range. It is used in conjunction with Split instructions to implement multi-byte character classes.",91,null],[4,"EmptyLook","","The set of zero-width match instructions.",null,null],[13,"StartLine","","Start of line or input.",92,null],[13,"EndLine","","End of line or input.",92,null],[13,"StartText","","Start of input.",92,null],[13,"EndText","","End of input.",92,null],[13,"WordBoundary","","Word character on one side and non-word character on other.",92,null],[13,"NotWordBoundary","","Word character on both sides or non-word character on both sides.",92,null],[13,"WordBoundaryAscii","","ASCII word boundary.",92,null],[13,"NotWordBoundaryAscii","","Not ASCII word boundary.",92,null],[4,"_Regex","","",null,null],[13,"Dynamic","","",100,null],[13,"Plugin","","",100,null],[8,"Input","","An abstraction over input used in the matching engines.",null,null],[10,"at","","Return an encoding of the position at byte offset `i`.",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"inputat"}}],[10,"next_char","","Return the Unicode character occurring next to `at`.",74,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[10,"previous_char","","Return the Unicode character occurring previous to `at`.",74,{"inputs":[{"name":"self"},{"name":"inputat"}],"output":{"name":"char"}}],[10,"is_empty_match","","Return true if the given empty width instruction matches at the input position given.",74,{"inputs":[{"name":"self"},{"name":"inputat"},{"name":"instemptylook"}],"output":{"name":"bool"}}],[10,"prefix_at","","Scan the input for a matching prefix.",74,{"inputs":[{"name":"self"},{"name":"literalsearcher"},{"name":"inputat"}],"output":{"generics":["inputat"],"name":"option"}}],[10,"len","","The number of bytes in the input.",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"as_bytes","","Return the given input as a sequence of bytes.",74,null],[8,"Replacer","regex","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",106,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"generics":["str"],"name":"cow"}}],[11,"no_expand","regex::re_unicode","Returns a possibly owned string that never needs expansion.",106,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"RegexBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"CaptureNames"],[3,"FindCaptures"],[3,"FindMatches"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[4,"Error"],[3,"RegexBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"NoExpand"],[8,"Replacer"],[3,"Bounded"],[3,"Cache"],[4,"Job"],[3,"Patch"],[3,"Compiler"],[3,"CompileClass"],[3,"SuffixCache"],[3,"SuffixCacheEntry"],[3,"SuffixCacheKey"],[3,"ByteClassSet"],[4,"Hole"],[4,"MaybeInst"],[4,"InstHole"],[3,"Cache"],[3,"CacheInner"],[3,"Transitions"],[3,"Fsm"],[3,"State"],[3,"InstPtrs"],[3,"Byte"],[3,"EmptyFlags"],[3,"StateFlags"],[3,"TransitionsRow"],[4,"Result"],[3,"Exec"],[3,"ExecNoSync"],[3,"ExecNoSyncStr"],[3,"ExecReadOnly"],[3,"ExecBuilder"],[3,"Parsed"],[3,"ProgramCacheInner"],[4,"MatchType"],[4,"MatchLiteralType"],[4,"MatchNfaType"],[3,"CaptureRef"],[4,"Ref"],[3,"InputAt"],[3,"CharInput"],[3,"ByteInput"],[3,"Char"],[8,"Input"],[3,"LiteralSearcher"],[3,"SingleByteSet"],[3,"SingleSearch"],[4,"Matcher"],[4,"LiteralIter"],[3,"Fsm"],[3,"Cache"],[3,"Threads"],[4,"FollowEpsilon"],[3,"Program"],[3,"InstSave"],[3,"InstSplit"],[3,"InstEmptyLook"],[3,"InstChar"],[3,"InstRanges"],[3,"InstBytes"],[4,"Inst"],[4,"EmptyLook"],[3,"RegexOptions"],[3,"CapturesDebug"],[3,"Plugin"],[3,"FindMatches"],[3,"FindCaptures"],[8,"RegularExpression"],[3,"CapturesDebug"],[4,"_Regex"],[4,"_CaptureNames"],[4,"NamedGroups"],[4,"NamedGroupsIter"],[4,"FindCapturesInner"],[4,"FindMatchesInner"],[8,"Replacer"],[3,"Teddy"],[3,"Match"],[3,"SparseSet"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[12,"lits","","",0,null],[12,"limit_size","","",0,null],[12,"limit_class","","",0,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[12,"v","","",1,null],[12,"cut","","",1,null],[3,"CharClass","","A character class.",null,null],[12,"ranges","","",2,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",3,null],[12,"end","","The end character of the range.",3,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[12,"ranges","","",4,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",5,null],[12,"end","","The end byte of the range.",5,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[12,"flags","","",6,null],[12,"nest_limit","","",6,null],[3,"Error","","A parse error.",null,null],[12,"pos","","",7,null],[12,"surround","","",7,null],[12,"kind","","",7,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",8,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",8,null],[12,"chars","regex_syntax::Expr","The characters.",8,null],[12,"casei","","Whether to match case insensitively.",8,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",8,null],[12,"bytes","regex_syntax::Expr","The bytes.",8,null],[12,"casei","","Whether to match case insensitively.",8,null],[13,"AnyChar","regex_syntax","Match any character.",8,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",8,null],[13,"AnyByte","","Match any byte.",8,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",8,null],[13,"Class","","A character class.",8,null],[13,"ClassBytes","","A character class with byte ranges only.",8,null],[13,"StartLine","","Match the start of a line or beginning of input.",8,null],[13,"EndLine","","Match the end of a line or end of input.",8,null],[13,"StartText","","Match the beginning of input.",8,null],[13,"EndText","","Match the end of input.",8,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",8,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",8,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",8,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",8,null],[13,"Group","","A group, possibly non-capturing.",8,null],[12,"e","regex_syntax::Expr","The expression inside the group.",8,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",8,null],[12,"name","","The capture name, only for capturing named groups.",8,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",8,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",8,null],[12,"r","","The type of repeat operator used.",8,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",8,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",8,null],[13,"Alternate","","An alternation of expressions. Only one must match.",8,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",9,null],[13,"ZeroOrMore","","Match zero or more (`*`).",9,null],[13,"OneOrMore","","Match one or more (`+`).",9,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",9,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",9,null],[12,"max","","Optional upper bound on the number of matches.",9,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",10,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",10,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",10,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",10,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",10,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",10,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",10,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",10,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",10,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",10,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",10,null],[12,"end","","The second character specified in the range.",10,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",10,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",10,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",10,null],[12,"max","","The second number specified in the repetition.",10,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",10,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",10,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",10,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",10,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",10,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",10,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",10,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",10,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",10,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",10,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",10,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",10,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",10,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",10,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",10,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",10,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",10,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",10,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",10,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",10,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",10,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",10,null],[13,"__Nonexhaustive","","Hints that destructuring should not be exhaustive.",10,null],[5,"simple_case_fold_both_result","","The result of binary search on the simple case folding table.",null,{"inputs":[{"name":"char"}],"output":{"generics":["usize","usize"],"name":"result"}}],[5,"binary_search","","Binary search to find first element such that `pred(T) == true`.",null,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"quote_char","","",null,{"inputs":[{"name":"char"}],"output":{"name":"string"}}],[5,"quote_byte","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"string"}}],[5,"inc_char","","",null,{"inputs":[{"name":"char"}],"output":{"name":"char"}}],[5,"dec_char","","",null,{"inputs":[{"name":"char"}],"output":{"name":"char"}}],[5,"is_word_char","","Returns true if and only if `c` is a word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if `c` is an ASCII word byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"literals","","",null,null],[3,"Literals","regex_syntax::literals","A set of literal byte strings extracted from a regular expression.",null,null],[12,"lits","","",0,null],[12,"limit_size","","",0,null],[12,"limit_class","","",0,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[12,"v","","",1,null],[12,"cut","","",1,null],[5,"prefixes","","",null,{"inputs":[{"name":"expr"},{"name":"literals"}],"output":null}],[5,"suffixes","","",null,{"inputs":[{"name":"expr"},{"name":"literals"}],"output":null}],[5,"repeat_zero_or_one_literals","","",null,{"inputs":[{"name":"expr"},{"name":"literals"},{"name":"f"}],"output":null}],[5,"repeat_zero_or_more_literals","","",null,{"inputs":[{"name":"expr"},{"name":"literals"},{"name":"f"}],"output":null}],[5,"repeat_one_or_more_literals","","",null,{"inputs":[{"name":"expr"},{"name":"literals"},{"name":"f"}],"output":null}],[5,"repeat_range_literals","","",null,{"inputs":[{"name":"expr"},{"name":"u32"},{"generics":["u32"],"name":"option"},{"name":"bool"},{"name":"literals"},{"name":"f"}],"output":null}],[5,"alternate_literals","","",null,null],[5,"position","","",null,null],[5,"escape_unicode","","",null,null],[5,"escape_bytes","","",null,null],[5,"escape_byte","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"string"}}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",0,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",0,null],[11,"min_len","","Returns the length of the smallest literal.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",0,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",0,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",0,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",0,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",0,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",0,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",0,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",0,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",0,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",0,null],[11,"add","","Adds the given literal to this set.",0,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",0,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_char_class_reverse","","Extends each literal in this set with the character class given, writing the bytes of each character in reverse.",0,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"_add_char_class","","",0,{"inputs":[{"name":"self"},{"name":"charclass"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",0,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_complete","","Pops all complete literals out of this set.",0,{"inputs":[{"name":"self"}],"output":{"generics":["lit"],"name":"vec"}}],[11,"num_bytes","","Returns the total number of bytes in this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"class_exceeds_limits","","Returns true if a character class with the given size would cause this set to exceed its limits.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",1,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"parser","","",null,null],[3,"Parser","regex_syntax::parser","Parser state.",null,null],[12,"chars","","",11,null],[12,"chari","","",11,null],[12,"stack","","",11,null],[12,"caps","","",11,null],[12,"names","","",11,null],[12,"flags","","",11,null],[3,"Flags","","Flag state used in the parser.",null,null],[12,"casei","","i",12,null],[12,"multi","","m",12,null],[12,"dotnl","","s",12,null],[12,"swap_greed","","U",12,null],[12,"ignore_space","","x",12,null],[12,"unicode","","u",12,null],[12,"allow_bytes","","Not actually a flag, but when disabled, every regex that may not match UTF-8 exclusively will cause the parser to return an error.",12,null],[3,"Chars","","",null,null],[12,"chars","","",13,null],[12,"cur","","",13,null],[12,"ignore_space","","",13,null],[4,"Build","","An ephemeral type for representing the expression stack.",null,null],[13,"Expr","","",14,null],[13,"LeftParen","","",14,null],[12,"i","regex_syntax::parser::Build","",14,null],[12,"name","","",14,null],[12,"chari","","",14,null],[12,"old_flags","","",14,null],[5,"rev_concat","regex_syntax::parser","",null,{"inputs":[{"generics":["expr"],"name":"vec"}],"output":{"name":"expr"}}],[5,"is_valid_capture_char","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_punct","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"checkadd","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"unicode_class","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["charclass"],"name":"option"}}],[5,"ascii_class","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["charclass"],"name":"option"}}],[5,"raw_class_to_expr","","",null,null],[6,"Class","","",null,null],[6,"NamedClasses","","",null,null],[17,"ASCII_CLASSES","","",null,null],[17,"ALNUM","","",null,null],[17,"ALPHA","","",null,null],[17,"ASCII","","",null,null],[17,"BLANK","","",null,null],[17,"CNTRL","","",null,null],[17,"DIGIT","","",null,null],[17,"GRAPH","","",null,null],[17,"LOWER","","",null,null],[17,"PRINT","","",null,null],[17,"PUNCT","","",null,null],[17,"SPACE","","",null,null],[17,"UPPER","","",null,null],[17,"WORD","","",null,null],[17,"XDIGIT","","",null,null],[8,"Bumpable","","",null,null],[10,"match_end","","",15,{"inputs":[{"name":"self"},{"name":"parser"}],"output":{"name":"usize"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",11,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"generics":["expr"],"name":"result"}}],[11,"parse_expr","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["expr"],"name":"result"}}],[11,"parse_escape","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_group","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_group_flags","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_group_name","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"parse_counted_repeat","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_simple_repeat","","",11,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_decimal","","",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["u32"],"name":"result"}}],[11,"parse_octal","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_hex","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_hex_many_digits","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_hex_two_digits","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_class","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"parse_class_range","","",11,{"inputs":[{"name":"self"},{"name":"charclass"},{"name":"char"}],"output":{"name":"result"}}],[11,"maybe_parse_ascii","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["charclass"],"name":"option"}}],[11,"parse_unicode_class","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["charclass"],"name":"result"}}],[11,"parse_perl_class","","",11,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"charclass"}}],[11,"parse_one","","",11,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"build"}}],[11,"chars","","",11,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"bump","","",11,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"cur","","",11,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"eof","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bump_get","","",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["string"],"name":"option"}}],[11,"bump_if","","",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"peek_is","","",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"err","","",11,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"error"}}],[11,"errat","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"errorkind"}],"output":{"name":"error"}}],[11,"windowat","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"pop","","",11,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["expr"],"name":"result"}}],[11,"class_transform","","",11,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"codepoint_to_one_byte","","",11,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["u8"],"name":"result"}}],[11,"u32_to_one_byte","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["build"],"name":"result"}}],[11,"lit","","",11,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["build"],"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"new","","",13,null],[11,"c","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"advance","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"next_count","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"alternate","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["build"],"name":"result"}}],[11,"close_paren","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish_concat","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["expr"],"name":"result"}}],[11,"is_empty","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"unicode","regex_syntax","",null,null],[0,"general_category","regex_syntax::unicode","",null,null],[17,"C_table","regex_syntax::unicode::general_category","",null,null],[17,"Cc_table","","",null,null],[17,"Cf_table","","",null,null],[17,"Cn_table","","",null,null],[17,"Co_table","","",null,null],[17,"L_table","","",null,null],[17,"LC_table","","",null,null],[17,"Ll_table","","",null,null],[17,"Lm_table","","",null,null],[17,"Lo_table","","",null,null],[17,"Lt_table","","",null,null],[17,"Lu_table","","",null,null],[17,"M_table","","",null,null],[17,"Mc_table","","",null,null],[17,"Me_table","","",null,null],[17,"Mn_table","","",null,null],[17,"N_table","","",null,null],[17,"Nd_table","","",null,null],[17,"Nl_table","","",null,null],[17,"No_table","","",null,null],[17,"P_table","","",null,null],[17,"Pc_table","","",null,null],[17,"Pd_table","","",null,null],[17,"Pe_table","","",null,null],[17,"Pf_table","","",null,null],[17,"Pi_table","","",null,null],[17,"Po_table","","",null,null],[17,"Ps_table","","",null,null],[17,"S_table","","",null,null],[17,"Sc_table","","",null,null],[17,"Sk_table","","",null,null],[17,"Sm_table","","",null,null],[17,"So_table","","",null,null],[17,"Z_table","","",null,null],[17,"Zl_table","","",null,null],[17,"Zp_table","","",null,null],[17,"Zs_table","","",null,null],[0,"derived_property","regex_syntax::unicode","",null,null],[17,"Alphabetic_table","regex_syntax::unicode::derived_property","",null,null],[17,"Default_Ignorable_Code_Point_table","","",null,null],[17,"Grapheme_Extend_table","","",null,null],[17,"Lowercase_table","","",null,null],[17,"Uppercase_table","","",null,null],[17,"XID_Continue_table","","",null,null],[17,"XID_Start_table","","",null,null],[0,"script","regex_syntax::unicode","",null,null],[17,"Ahom_table","regex_syntax::unicode::script","",null,null],[17,"Anatolian_Hieroglyphs_table","","",null,null],[17,"Arabic_table","","",null,null],[17,"Armenian_table","","",null,null],[17,"Avestan_table","","",null,null],[17,"Balinese_table","","",null,null],[17,"Bamum_table","","",null,null],[17,"Bassa_Vah_table","","",null,null],[17,"Batak_table","","",null,null],[17,"Bengali_table","","",null,null],[17,"Bopomofo_table","","",null,null],[17,"Brahmi_table","","",null,null],[17,"Braille_table","","",null,null],[17,"Buginese_table","","",null,null],[17,"Buhid_table","","",null,null],[17,"Canadian_Aboriginal_table","","",null,null],[17,"Carian_table","","",null,null],[17,"Caucasian_Albanian_table","","",null,null],[17,"Chakma_table","","",null,null],[17,"Cham_table","","",null,null],[17,"Cherokee_table","","",null,null],[17,"Common_table","","",null,null],[17,"Coptic_table","","",null,null],[17,"Cuneiform_table","","",null,null],[17,"Cypriot_table","","",null,null],[17,"Cyrillic_table","","",null,null],[17,"Deseret_table","","",null,null],[17,"Devanagari_table","","",null,null],[17,"Duployan_table","","",null,null],[17,"Egyptian_Hieroglyphs_table","","",null,null],[17,"Elbasan_table","","",null,null],[17,"Ethiopic_table","","",null,null],[17,"Georgian_table","","",null,null],[17,"Glagolitic_table","","",null,null],[17,"Gothic_table","","",null,null],[17,"Grantha_table","","",null,null],[17,"Greek_table","","",null,null],[17,"Gujarati_table","","",null,null],[17,"Gurmukhi_table","","",null,null],[17,"Han_table","","",null,null],[17,"Hangul_table","","",null,null],[17,"Hanunoo_table","","",null,null],[17,"Hatran_table","","",null,null],[17,"Hebrew_table","","",null,null],[17,"Hiragana_table","","",null,null],[17,"Imperial_Aramaic_table","","",null,null],[17,"Inherited_table","","",null,null],[17,"Inscriptional_Pahlavi_table","","",null,null],[17,"Inscriptional_Parthian_table","","",null,null],[17,"Javanese_table","","",null,null],[17,"Kaithi_table","","",null,null],[17,"Kannada_table","","",null,null],[17,"Katakana_table","","",null,null],[17,"Kayah_Li_table","","",null,null],[17,"Kharoshthi_table","","",null,null],[17,"Khmer_table","","",null,null],[17,"Khojki_table","","",null,null],[17,"Khudawadi_table","","",null,null],[17,"Lao_table","","",null,null],[17,"Latin_table","","",null,null],[17,"Lepcha_table","","",null,null],[17,"Limbu_table","","",null,null],[17,"Linear_A_table","","",null,null],[17,"Linear_B_table","","",null,null],[17,"Lisu_table","","",null,null],[17,"Lycian_table","","",null,null],[17,"Lydian_table","","",null,null],[17,"Mahajani_table","","",null,null],[17,"Malayalam_table","","",null,null],[17,"Mandaic_table","","",null,null],[17,"Manichaean_table","","",null,null],[17,"Meetei_Mayek_table","","",null,null],[17,"Mende_Kikakui_table","","",null,null],[17,"Meroitic_Cursive_table","","",null,null],[17,"Meroitic_Hieroglyphs_table","","",null,null],[17,"Miao_table","","",null,null],[17,"Modi_table","","",null,null],[17,"Mongolian_table","","",null,null],[17,"Mro_table","","",null,null],[17,"Multani_table","","",null,null],[17,"Myanmar_table","","",null,null],[17,"Nabataean_table","","",null,null],[17,"New_Tai_Lue_table","","",null,null],[17,"Nko_table","","",null,null],[17,"Ogham_table","","",null,null],[17,"Ol_Chiki_table","","",null,null],[17,"Old_Hungarian_table","","",null,null],[17,"Old_Italic_table","","",null,null],[17,"Old_North_Arabian_table","","",null,null],[17,"Old_Permic_table","","",null,null],[17,"Old_Persian_table","","",null,null],[17,"Old_South_Arabian_table","","",null,null],[17,"Old_Turkic_table","","",null,null],[17,"Oriya_table","","",null,null],[17,"Osmanya_table","","",null,null],[17,"Pahawh_Hmong_table","","",null,null],[17,"Palmyrene_table","","",null,null],[17,"Pau_Cin_Hau_table","","",null,null],[17,"Phags_Pa_table","","",null,null],[17,"Phoenician_table","","",null,null],[17,"Psalter_Pahlavi_table","","",null,null],[17,"Rejang_table","","",null,null],[17,"Runic_table","","",null,null],[17,"Samaritan_table","","",null,null],[17,"Saurashtra_table","","",null,null],[17,"Sharada_table","","",null,null],[17,"Shavian_table","","",null,null],[17,"Siddham_table","","",null,null],[17,"SignWriting_table","","",null,null],[17,"Sinhala_table","","",null,null],[17,"Sora_Sompeng_table","","",null,null],[17,"Sundanese_table","","",null,null],[17,"Syloti_Nagri_table","","",null,null],[17,"Syriac_table","","",null,null],[17,"Tagalog_table","","",null,null],[17,"Tagbanwa_table","","",null,null],[17,"Tai_Le_table","","",null,null],[17,"Tai_Tham_table","","",null,null],[17,"Tai_Viet_table","","",null,null],[17,"Takri_table","","",null,null],[17,"Tamil_table","","",null,null],[17,"Telugu_table","","",null,null],[17,"Thaana_table","","",null,null],[17,"Thai_table","","",null,null],[17,"Tibetan_table","","",null,null],[17,"Tifinagh_table","","",null,null],[17,"Tirhuta_table","","",null,null],[17,"Ugaritic_table","","",null,null],[17,"Vai_table","","",null,null],[17,"Warang_Citi_table","","",null,null],[17,"Yi_table","","",null,null],[0,"property","regex_syntax::unicode","",null,null],[17,"Join_Control_table","regex_syntax::unicode::property","",null,null],[17,"Noncharacter_Code_Point_table","","",null,null],[17,"White_Space_table","","",null,null],[0,"regex","regex_syntax::unicode","",null,null],[17,"UNICODE_CLASSES","regex_syntax::unicode::regex","",null,null],[17,"PERLD","","",null,null],[17,"PERLS","","",null,null],[17,"PERLW","","",null,null],[0,"case_folding","regex_syntax::unicode","",null,null],[17,"C_plus_S_both_table","regex_syntax::unicode::case_folding","",null,null],[6,"CaptureIndex","regex_syntax","",null,null],[6,"CaptureName","","",null,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",9,null],[11,"matches_empty","","Returns true if and only if this repetition can match the empty string.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",6,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["expr"],"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",8,{"inputs":[{"name":"str"}],"output":{"generics":["expr"],"name":"result"}}],[11,"can_repeat","","Returns true iff the expression can be repeated by a quantifier.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simplify","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["expr"],"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",8,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",8,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["classrange"],"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",2,{"inputs":[{"generics":["classrange"],"name":"vec"}],"output":{"name":"charclass"}}],[11,"empty","","Create an empty class.",2,{"inputs":[],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"to_empty","","Create a new empty class from this one.",2,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"to_byte_class","","Create a byte class from this character class.",2,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"canonicalize","","Canonicalze any sequence of ranges.",2,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"negate","","Negates the character class.",2,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",2,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"num_chars","","Returns the number of characters that match this class.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new class range.",3,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classrange"}}],[11,"to_byte_range","","Translate this to a byte class.",3,{"inputs":[{"name":"self"}],"output":{"generics":["byterange"],"name":"option"}}],[11,"one","","Create a range of one character.",3,{"inputs":[{"name":"char"}],"output":{"name":"classrange"}}],[11,"overlapping","","Returns true if and only if the two ranges are overlapping. Note that since ranges are inclusive, `a-c` and `d-f` are overlapping!",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"merge","","Creates a new range representing the union of `self` and `other.",3,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"needs_case_folding","","Returns true if and only if this range contains a character that is in the case folding table.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"case_fold","","Apply case folding to this range.",3,{"inputs":[{"name":"self"}],"output":{"generics":["classrange"],"name":"vec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",4,{"inputs":[{"generics":["byterange"],"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"to_empty","","Create a new empty class from this one.",4,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"canonicalize","","Canonicalze any sequence of ranges.",4,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"negate","","Negates the byte class.",4,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",4,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"num_bytes","","Returns the number of bytes that match this class.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new class range.",5,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"byterange"}}],[11,"overlapping","","Returns true if and only if the two ranges are overlapping. Note that since ranges are inclusive, `a-c` and `d-f` are overlapping!",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"is_intersect_empty","","Returns true if and only if the intersection of self and other is non empty.",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"merge","","Creates a new range representing the union of `self` and `other.",5,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"byterange"}}],[11,"case_fold","","Apply case folding to this range.",5,{"inputs":[{"name":"self"}],"output":{"generics":["byterange"],"name":"vec"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["byterange"],"name":"intoiter"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",7,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ClassRange"],[3,"ByteClass"],[3,"ByteRange"],[3,"ExprBuilder"],[3,"Error"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Parser"],[3,"Flags"],[3,"Chars"],[4,"Build"],[8,"Bumpable"]]};
searchIndex["rustc_data_structures"] = {"doc":"Various data structures used by the Rust compiler. The intention is that code in here should be not be specific to rustc, so that it can be easily unit tested and so forth.","items":[[8,"ToHex","rustc_data_structures","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[5,"__noop_fix_for_27438","","",null,{"inputs":[],"output":null}],[0,"array_vec","","A stack-allocated vector, allowing storage of N elements on the stack.",null,null],[3,"ArrayVec","rustc_data_structures::array_vec","",null,null],[12,"count","","",1,null],[12,"values","","",1,null],[3,"Iter","","",null,null],[12,"indices","","",2,null],[12,"store","","",2,null],[3,"Drain","","",null,null],[12,"tail_start","","",3,null],[12,"tail_len","","",3,null],[12,"iter","","",3,null],[12,"array_vec","","",3,null],[8,"Array","","",null,null],[16,"Element","","",4,null],[16,"PartialStorage","","",4,null],[18,"LEN","","",4,null],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"push","","Panics when the stack vector is full.",1,null],[11,"pop","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drain","","",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",1,null],[0,"accumulate_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"IntoIter","rustc_data_structures::accumulate_vec","",null,null],[12,"repr","","",5,null],[4,"AccumulateVec","","",null,null],[13,"Array","","",6,null],[13,"Heap","","",6,null],[4,"IntoIterRepr","","",null,null],[13,"Array","","",7,null],[13,"Heap","","",7,null],[4,"Drain","","",null,null],[13,"Array","","",8,null],[13,"Heap","","",8,null],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"one","","",6,null],[11,"many","","",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drain","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"name":"accumulatevec"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"into_iter","","",6,null],[11,"from","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"accumulatevec"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"accumulatevec"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"generics":["accumulatevec"],"name":"result"}}],[0,"small_vec","rustc_data_structures","A vector type intended to be used for collecting from iterators onto the stack.",null,null],[3,"SmallVec","rustc_data_structures::small_vec","",null,null],[12,"0","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"one","","",9,null],[11,"many","","",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"expect_one","","",9,null],[11,"push","","Will reallocate onto the heap if needed.",9,null],[11,"reserve","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_len","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"insert","","",9,null],[11,"truncate","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"deref","","",9,null],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"accumulatevec"}}],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"smallvec"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"generics":["smallvec"],"name":"result"}}],[0,"base_n","rustc_data_structures","",null,null],[5,"push_str","rustc_data_structures::base_n","",null,{"inputs":[{"name":"u128"},{"name":"usize"},{"name":"string"}],"output":null}],[5,"encode","","",null,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"string"}}],[17,"MAX_BASE","","",null,null],[17,"ALPHANUMERIC_ONLY","","",null,null],[17,"CASE_INSENSITIVE","","",null,null],[17,"BASE_64","","",null,null],[0,"bitslice","rustc_data_structures","",null,null],[3,"BitLookup","rustc_data_structures::bitslice","",null,null],[12,"word","","An index of the word holding the bit in original `[Word]` of query.",10,null],[12,"bit_in_word","","Index of the particular bit within the word holding the bit.",10,null],[12,"bit_mask","","Word with single 1-bit set corresponding to where the bit is located.",10,null],[3,"Intersect","","",null,null],[3,"Union","","",null,null],[3,"Subtract","","",null,null],[5,"bit_lookup","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"bitlookup"}}],[5,"bit_str","","",null,{"inputs":[{"name":"word"}],"output":{"name":"string"}}],[5,"bits_to_string","","",null,null],[5,"bitwise","","",null,null],[6,"Word","","",null,null],[8,"BitSlice","","`BitSlice` provides helper methods for treating a `[Word]` as a bitvector.",null,null],[10,"clear_bit","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_bit","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_bit","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"BitwiseOperator","","",null,null],[10,"join","","Applies some bit-operation pointwise to each of the bits in the two inputs.",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"join","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"bitvec","rustc_data_structures","",null,null],[3,"BitVector","rustc_data_structures::bitvec","A very simple BitVector type.",null,null],[12,"data","","",16,null],[3,"BitVectorIter","","",null,null],[12,"iter","","",17,null],[12,"current","","",17,null],[12,"idx","","",17,null],[3,"BitMatrix","","A \"bit matrix\" is basically a matrix of booleans represented as one gigantic bitvector. In other words, it is as if you have `rows` bitvectors, each of length `columns`.",null,null],[12,"columns","","",18,null],[12,"vector","","",18,null],[5,"u64s","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"word_mask","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bitvector"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert","","Returns true if the bit has changed.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"insert_all","","",16,{"inputs":[{"name":"self"},{"name":"bitvector"}],"output":{"name":"bool"}}],[11,"grow","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Iterates over indexes of set bits in a sorted order",16,{"inputs":[{"name":"self"}],"output":{"name":"bitvectoriter"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bitmatrix"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `rows x columns` matrix, initially empty.",18,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"range","","The range of bits for a given row.",18,null],[11,"add","","Sets the cell at `(row, column)` to true. Put another way, add `column` to the bitset for `row`.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains","","Do the bits from `row` contain `column`? Put another way, is the matrix cell at `(row, column)` true?  Put yet another way, if the matrix represents (transitive) reachability, can `row` reach `column`?",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"intersection","","Returns those indices that are true in rows `a` and `b`.  This is an O(n) operation where `n` is the number of elements (somewhat independent from the actual size of the intersection, in particular).",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"merge","","Add the bits from row `read` to the bits from row `write`, return true if anything changed.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","","Iterates through all the columns set to true in a given row of the matrix.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bitvectoriter"}}],[0,"blake2b","rustc_data_structures","",null,null],[3,"Blake2bCtx","rustc_data_structures::blake2b","",null,null],[12,"b","","",19,null],[12,"h","","",19,null],[12,"t","","",19,null],[12,"c","","",19,null],[12,"outlen","","",19,null],[12,"finalized","","",19,null],[12,"fnv_hash","","",19,null],[3,"Blake2bHasher","","",null,null],[12,"0","","",20,null],[5,"b2b_g","","",null,null],[5,"blake2b_compress","","",null,{"inputs":[{"name":"blake2bctx"},{"name":"bool"}],"output":null}],[5,"blake2b_new","","",null,null],[5,"blake2b_update","","",null,null],[5,"blake2b_final","","",null,{"inputs":[{"name":"blake2bctx"}],"output":null}],[5,"checked_mem_copy","","",null,null],[5,"blake2b","","",null,null],[17,"BLAKE2B_IV","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",20,null],[11,"finish","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",20,null],[11,"finalize","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"graph","rustc_data_structures","A graph module for use in dataflow, region resolution, and elsewhere.",null,null],[3,"Graph","rustc_data_structures::graph","",null,null],[12,"nodes","","",21,null],[12,"edges","","",21,null],[3,"Node","","",null,null],[12,"first_edge","","",22,null],[12,"data","","",22,null],[3,"Edge","","",null,null],[12,"next_edge","","",23,null],[12,"source","","",23,null],[12,"target","","",23,null],[12,"data","","",23,null],[3,"NodeIndex","","",null,null],[12,"0","","",24,null],[3,"EdgeIndex","","",null,null],[12,"0","","",25,null],[3,"Direction","","",null,null],[12,"repr","","",26,null],[3,"EnumeratedNodes","","",null,null],[12,"iter","","",27,null],[3,"EnumeratedEdges","","",null,null],[12,"iter","","",28,null],[3,"AdjacentEdges","","",null,null],[12,"graph","","",29,null],[12,"direction","","",29,null],[12,"next","","",29,null],[3,"AdjacentTargets","","",null,null],[12,"edges","","",30,null],[3,"AdjacentSources","","",null,null],[12,"edges","","",31,null],[3,"DepthFirstTraversal","","",null,null],[12,"graph","","",32,null],[12,"stack","","",32,null],[12,"visited","","",32,null],[12,"direction","","",32,null],[17,"INVALID_EDGE_INDEX","","",null,null],[17,"OUTGOING","","",null,null],[17,"INCOMING","","",null,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reverse","","",22,null],[11,"reverse","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"graph"}}],[11,"with_capacity","","",21,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"graph"}}],[11,"all_nodes","","",21,null],[11,"len_nodes","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"all_edges","","",21,null],[11,"len_edges","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_node_index","","",21,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"add_node","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"nodeindex"}}],[11,"mut_node_data","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node_data","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"n"}}],[11,"node","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"node"}}],[11,"next_edge_index","","",21,{"inputs":[{"name":"self"}],"output":{"name":"edgeindex"}}],[11,"add_edge","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"e"}],"output":{"name":"edgeindex"}}],[11,"edge","","",21,{"inputs":[{"name":"self"},{"name":"edgeindex"}],"output":{"name":"edge"}}],[11,"enumerated_nodes","","",21,{"inputs":[{"name":"self"}],"output":{"name":"enumeratednodes"}}],[11,"enumerated_edges","","",21,{"inputs":[{"name":"self"}],"output":{"name":"enumeratededges"}}],[11,"each_node","","Iterates over all edges defined in the graph.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"each_edge","","Iterates over all edges defined in the graph",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"outgoing_edges","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"incoming_edges","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentedges"}}],[11,"adjacent_edges","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"adjacentedges"}}],[11,"successor_nodes","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacenttargets"}}],[11,"predecessor_nodes","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"adjacentsources"}}],[11,"depth_traverse","","",21,{"inputs":[{"name":"self"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"depthfirsttraversal"}}],[11,"nodes_in_postorder","","",21,{"inputs":[{"name":"self"},{"name":"direction"},{"name":"nodeindex"}],"output":{"generics":["nodeindex"],"name":"vec"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"targets","","",29,{"inputs":[{"name":"self"}],"output":{"name":"adjacenttargets"}}],[11,"sources","","",29,{"inputs":[{"name":"self"}],"output":{"name":"adjacentsources"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"with_start_node","","",32,{"inputs":[{"name":"graph"},{"name":"nodeindex"},{"name":"direction"}],"output":{"name":"self"}}],[11,"visit","","",32,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":null}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["nodeindex"],"name":"option"}}],[11,"source","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"target","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"source_or_target","","",23,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"nodeindex"}}],[0,"indexed_set","rustc_data_structures","",null,null],[3,"IdxSetBuf","rustc_data_structures::indexed_set","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[12,"_pd","","",33,null],[12,"bits","","",33,null],[3,"IdxSet","","Represents a set (or packed family of sets), of some element type E, where each E is identified by some unique index type `T`.",null,null],[12,"_pd","","",34,null],[12,"bits","","",34,null],[3,"Elems","","",null,null],[12,"i","","",35,null],[12,"set","","",35,null],[12,"universe_size","","",35,null],[3,"Iter","","",null,null],[12,"cur","","",36,null],[12,"iter","","",36,null],[12,"_pd","","",36,null],[5,"each_bit","","",null,{"inputs":[{"name":"idxset"},{"name":"usize"},{"name":"f"}],"output":null}],[11,"assert_receiver_is_total_eq","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"idxsetbuf"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"idxsetbuf"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"d"}],"output":{"generics":["idxsetbuf"],"name":"result"}}],[11,"borrow","","",33,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"borrow_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"to_owned","","",34,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",33,{"inputs":[{"name":"word"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_filled","","Creates set holding every element whose index falls in range 0..universe_size.",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_empty","","Creates set holding no elements.",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_slice","","",34,null],[11,"from_slice_mut","","",34,null],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"idxset"}}],[11,"to_owned","","",34,{"inputs":[{"name":"self"}],"output":{"name":"idxsetbuf"}}],[11,"clear","","Removes all elements",34,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes `elem` from the set `self`; returns true iff this changed `self`.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"add","","Adds `elem` to the set `self`; returns true iff this changed `self`.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"range","","",34,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"range_mut","","",34,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"contains","","Returns true iff set `self` contains `elem`.",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"words","","",34,null],[11,"words_mut","","",34,null],[11,"clone_from","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":null}],[11,"union","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"subtract","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"intersect","","",34,{"inputs":[{"name":"self"},{"name":"idxset"}],"output":{"name":"bool"}}],[11,"iter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"each_bit","","Calls `f` on each index value held in this set, up to the bound `max_bits` on the size of universe of indexes.",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":null}],[11,"reset_to_empty","","Removes all elements from this set.",34,{"inputs":[{"name":"self"}],"output":null}],[11,"elems","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"elems"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"indexed_vec","rustc_data_structures","",null,null],[3,"IndexVec","rustc_data_structures::indexed_vec","",null,null],[12,"raw","","",37,null],[12,"_marker","","",37,null],[3,"IntoIdx","","",null,null],[12,"_marker","","",38,null],[6,"Enumerated","","",null,null],[8,"Idx","","Represents some newtyped `usize` wrapper.",null,null],[10,"new","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"index","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"indexvec"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"indexvec"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"indexvec"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",37,null],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elem","","",37,{"inputs":[{"name":"t"},{"name":"indexvec"}],"output":{"name":"self"}}],[11,"from_elem_n","","",37,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i"}}],[11,"pop","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","",37,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter_enumerated","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter"],"name":"enumerated"}}],[11,"iter","","",37,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_enumerated","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["iter"],"name":"enumerated"}}],[11,"indices","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["range","intoidx"],"name":"map"}}],[11,"iter_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"iter_enumerated_mut","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["itermut"],"name":"enumerated"}}],[11,"drain","","",37,null],[11,"drain_enumerated","","",37,null],[11,"last","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shrink_to_fit","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"swap","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"truncate","","",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"resize","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"binary_search","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"index","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",37,{"inputs":[{"name":"self"},{"name":"j"}],"output":null}],[11,"from_iter","","",37,{"inputs":[{"name":"j"}],"output":{"name":"self"}}],[11,"into_iter","","",37,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","","",38,null],[11,"call_mut","","",38,null],[11,"call_once","","",38,null],[11,"call_mut","","",38,null],[0,"obligation_forest","rustc_data_structures","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the \"backtrace\" of each pending obligation (why we are trying to figure this out in the first place). See README.md for a general overview of how to use this class.",null,null],[3,"ObligationForest","rustc_data_structures::obligation_forest","",null,null],[12,"nodes","","The list of obligations. In between calls to `process_obligations`, this list only contains nodes in the `Pending` or `Success` state (with a non-zero number of incomplete children). During processing, some of those nodes may be changed to the error state, or we may find that they are completed (That is, `num_incomplete_children` drops to 0). At the end of processing, those nodes will be removed by a call to `compress`.",40,null],[12,"done_cache","","A cache of predicates that have been successfully completed.",40,null],[12,"waiting_cache","","An cache of the nodes in `nodes`, indexed by predicate.",40,null],[12,"cache_list","","A list of the obligations added in snapshots, to allow for their removal.",40,null],[12,"scratch","","",40,null],[3,"Node","","",null,null],[12,"obligation","","",41,null],[12,"state","","",41,null],[12,"dependents","","Obligations that depend on this obligation for their completion. They must all be in a non-pending state.",41,null],[12,"parent","","The parent of a node - the original obligation of which it is a subobligation. Except for error reporting, this is just another member of `dependents`.",41,null],[3,"Outcome","","",null,null],[12,"completed","","Obligations that were completely evaluated, including all (transitive) subobligations.",42,null],[12,"errors","","Backtrace of obligations that were found to be in error.",42,null],[12,"stalled","","If true, then we saw no successful obligations, which means there is no point in further iteration. This is based on the assumption that when trait matching returns `Err` or `Ok(None)`, those results do not affect environmental inference state. (Note that if we invoke `process_obligations` with no pending obligations, stalled will be true.)",42,null],[3,"Error","","",null,null],[12,"error","","",43,null],[12,"backtrace","","",43,null],[3,"GetObligation","","",null,null],[12,"0","","",44,null],[4,"NodeState","","The state of one node in some tree within the forest. This represents the current state of processing for the obligation (of type `O`) associated with this node.",null,null],[13,"Pending","","Obligations for which selection had not yet returned a non-ambiguous result.",45,null],[13,"Success","","This obligation was selected successfully, but may or may not have subobligations.",45,null],[13,"Waiting","","This obligation was selected successfully, but it has a pending subobligation.",45,null],[13,"Done","","This obligation, along with its subobligations, are complete, and will be removed in the next collection.",45,null],[13,"Error","","This obligation was resolved to an error. Error nodes are removed from the vector by the compression step.",45,null],[13,"OnDfsStack","","This is a temporary state used in DFS loops to detect cycles, it should not exist outside of these DFSes.",45,null],[0,"node_index","","",null,null],[3,"NodeIndex","rustc_data_structures::obligation_forest::node_index","",null,null],[12,"index","","",46,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"nodeindex"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",46,null],[11,"new","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"nodeindex"}}],[11,"get","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"ForestObligation","rustc_data_structures::obligation_forest","",null,null],[16,"Predicate","","",47,null],[10,"as_predicate","","",47,null],[8,"ObligationProcessor","","",null,null],[16,"Obligation","","",48,null],[16,"Error","","",48,null],[10,"process_obligation","","",48,null],[10,"process_backedge","","As we do the cycle check, we invoke this callback when we encounter an actual cycle. `cycle` is an iterator that starts at the start of the cycle in the stack and walks toward the top.",48,{"inputs":[{"name":"self"},{"name":"i"},{"name":"phantomdata"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"nodestate"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"nodestate"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",45,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",43,null],[11,"new","","",40,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not yet been fully resolved.",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"register_obligation","","Registers an obligation",40,{"inputs":[{"name":"self"},{"name":"o"}],"output":null}],[11,"register_obligation_at","","",40,{"inputs":[{"name":"self"},{"name":"o"},{"generics":["nodeindex"],"name":"option"}],"output":{"name":"result"}}],[11,"to_errors","","Convert all remaining obligations to the given error.",40,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["error"],"name":"vec"}}],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"process_obligations","","Perform a pass through the obligation list. This must be called in a loop until `outcome.stalled` is false.",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"outcome"}}],[11,"process_cycles","","Mark all NodeState::Success nodes as NodeState::Done and report all cycles between them. This should be called after `mark_as_waiting` marks all nodes with pending subobligations as NodeState::Waiting.",40,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"find_cycles_from_node","","",40,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"},{"name":"usize"}],"output":null}],[11,"error_at","","Returns a vector of obligations for `p` and all of its ancestors, putting them into the error state in the process.",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"mark_neighbors_as_waiting_from","","",40,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"mark_as_waiting","","Marks all nodes that depend on a pending node as NodeState::Waiting.",40,{"inputs":[{"name":"self"}],"output":null}],[11,"mark_as_waiting_from","","",40,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"compress","","Compresses the vector, removing all popped nodes. This adjusts the indices and hence invalidates any outstanding indices. Cannot be used during a transaction.",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"apply_rewrites","","",40,null],[11,"new","","",41,{"inputs":[{"generics":["nodeindex"],"name":"option"},{"name":"o"}],"output":{"name":"node"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"getobligation"}}],[11,"call_once","","",44,null],[11,"call_mut","","",44,null],[0,"sip128","rustc_data_structures","This is a copy of `core::hash::sip` adapted to providing 128 bit hashes.",null,null],[3,"SipHasher128","rustc_data_structures::sip128","",null,null],[12,"k0","","",49,null],[12,"k1","","",49,null],[12,"length","","",49,null],[12,"state","","",49,null],[12,"tail","","",49,null],[12,"ntail","","",49,null],[3,"State","","",null,null],[12,"v0","","",50,null],[12,"v2","","",50,null],[12,"v1","","",50,null],[12,"v3","","",50,null],[3,"Sip24Rounds","","",null,null],[5,"u8to64_le","","Load an u64 using up to 7 bytes of a byte slice.",null,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"siphasher128"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new_with_keys","","",49,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher128"}}],[11,"reset","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"short_write","","",49,null],[11,"short_write_gen","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"finish128","","",49,null],[11,"write_u8","","",49,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",49,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",49,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",49,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",49,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",49,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",49,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",49,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_isize","","",49,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"write","","",49,null],[11,"finish","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"sip24rounds"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"sip24rounds"}}],[11,"c_rounds","","",51,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",51,{"inputs":[{"name":"state"}],"output":null}],[0,"snapshot_map","rustc_data_structures","",null,null],[3,"SnapshotMap","rustc_data_structures::snapshot_map","",null,null],[12,"map","","",52,null],[12,"undo_log","","",52,null],[3,"Snapshot","","",null,null],[12,"len","","",53,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","",54,null],[13,"CommittedSnapshot","","",54,null],[13,"Inserted","","",54,null],[13,"Overwrite","","",54,null],[13,"Noop","","",54,null],[11,"new","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",52,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","",52,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"get","","",52,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"snapshot","","",52,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"assert_open_snapshot","","",52,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","",52,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"partial_rollback","","",52,{"inputs":[{"name":"self"},{"name":"snapshot"},{"name":"f"}],"output":null}],[11,"rollback_to","","",52,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"reverse","","",52,{"inputs":[{"name":"self"},{"name":"undolog"}],"output":null}],[11,"index","","",52,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"v"}}],[0,"snapshot_vec","rustc_data_structures","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes.",null,null],[3,"SnapshotVec","rustc_data_structures::snapshot_vec","",null,null],[12,"values","","",55,null],[12,"undo_log","","",55,null],[3,"Snapshot","","",null,null],[12,"length","","",56,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",57,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",57,null],[13,"NewElem","","New variable with given index was created.",57,null],[13,"SetElem","","Variable with given index was changed from the given value.",57,null],[13,"Other","","Extensible set of actions",57,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",58,null],[16,"Undo","","",58,null],[10,"reverse","","",58,null],[11,"new","","",55,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"with_capacity","","",55,{"inputs":[{"name":"usize"}],"output":{"name":"snapshotvec"}}],[11,"in_snapshot","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"record","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",55,null],[11,"get","","",55,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone automatically, so you should be sure call `record()` with some sort of suitable undo action.",55,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if a snapshot is active.",55,null],[11,"start_snapshot","","",55,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"actions_since_snapshot","","",55,null],[11,"assert_open_snapshot","","",55,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"rollback_to","","",55,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",55,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"deref","","",55,null],[11,"deref_mut","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"extend","","",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"stable_hasher","rustc_data_structures","",null,null],[3,"StableHasher","rustc_data_structures::stable_hasher","When hashing something that ends up affecting properties like symbol names, we want these symbol names to be calculated independently of other factors like what architecture you're compiling from.",null,null],[12,"state","","",59,null],[12,"bytes_hashed","","",59,null],[12,"width","","",59,null],[3,"StableVec","","A vector container that makes sure that its items are hashed in a stable order.",null,null],[12,"0","","",60,null],[5,"hash_stable_hashmap","","",null,{"inputs":[{"name":"hcx"},{"name":"stablehasher"},{"name":"hashmap"},{"name":"f"}],"output":null}],[8,"StableHasherResult","","",null,null],[10,"finish","","",61,{"inputs":[{"name":"stablehasher"}],"output":{"name":"self"}}],[8,"StableHashingContextProvider","","Something that can provide a stable hashing context.",null,null],[16,"ContextType","","",62,null],[10,"create_stable_hashing_context","","",62,null],[8,"HashStable","","Something that implements `HashStable<CTX>` can be hashed in a way that is stable across multiple compilation sessions.",null,null],[10,"hash_stable","","",63,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[8,"ToStableHashKey","","Implement this for types that can be turned into stable keys like, for example, for DefId that can be converted to a DefPathHash. This is used for bringing maps into a predictable order before hashing them.",null,null],[16,"KeyType","","",64,null],[10,"to_stable_hash_key","","",64,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",59,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finalize","","",59,null],[11,"bytes_hashed","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"finish","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",59,null],[11,"write_u8","","",59,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",59,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",59,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",59,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_u128","","",59,{"inputs":[{"name":"self"},{"name":"u128"}],"output":null}],[11,"write_usize","","",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_i8","","",59,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"write_i16","","",59,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"write_i32","","",59,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"write_i64","","",59,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"write_i128","","",59,{"inputs":[{"name":"self"},{"name":"i128"}],"output":null}],[11,"write_isize","","",59,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"hash_stable","rustc_data_structures::indexed_vec","",37,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","rustc_data_structures::indexed_set","",33,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"new","rustc_data_structures::stable_hasher","",60,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"hash_stable","","",60,{"inputs":[{"name":"self"},{"name":"hcx"},{"name":"stablehasher"}],"output":null}],[0,"transitive_relation","rustc_data_structures","",null,null],[3,"TransitiveRelation","rustc_data_structures::transitive_relation","",null,null],[12,"elements","","",65,null],[12,"map","","",65,null],[12,"edges","","",65,null],[12,"closure","","",65,null],[3,"Index","","",null,null],[12,"0","","",66,null],[3,"Edge","","",null,null],[12,"source","","",67,null],[12,"target","","",67,null],[5,"pare_down","","Pare down is used as a step in the LUB computation. It edits the candidates array in place by removing any element j for which there exists an earlier element i<j such that i -> j. That is, after you run `pare_down`, you know that for all elements that remain in candidates, they cannot reach any of the elements that come after them.",null,{"inputs":[{"name":"vec"},{"name":"bitmatrix"}],"output":null}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"transitiverelation"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",66,null],[11,"partial_cmp","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"le","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"gt","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ge","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"cmp","","",66,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"ordering"}}],[11,"hash","","",66,null],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"generics":["index"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",67,null],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"generics":["edge"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",65,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"is_empty","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["index"],"name":"option"}}],[11,"add_index","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"index"}}],[11,"maybe_map","","Applies the (partial) function to each edge and returns a new relation.  If `f` returns `None` for any end-point, returns `None`.",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["transitiverelation"],"name":"option"}}],[11,"add","","Indicate that `a < b` (where `<` is this relation)",65,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"contains","","Check whether `a < target` (transitively)",65,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"reachable_from","","Thinking of `x R y` as an edge `x -> y` in a graph, this returns all things reachable from `a`.",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"postdom_upper_bound","","Picks what I am referring to as the \"postdominating\" upper-bound for `a` and `b`. This is usually the least upper bound, but in cases where there is no single least upper bound, it is the \"mutual immediate postdominator\", if you imagine a graph where `a < b` means `a -> b`.",65,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[11,"mutual_immediate_postdominator","","Viewing the relation as a graph, computes the \"mutual immediate postdominator\" of a set of points (if one exists). See `postdom_upper_bound` for details.",65,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"option"}}],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",65,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"vec"}}],[11,"parents","","Given an element A, returns the maximal set {B} of elements B such that",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"postdom_parent","","A \"best\" parent in some sense. See `parents` and `postdom_upper_bound` for more details.",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"with_closure","","",65,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"compute_closure","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bitmatrix"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash_stable","","",65,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",67,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"hash_stable","","",66,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[0,"unify","rustc_data_structures","",null,null],[3,"VarValue","rustc_data_structures::unify","Value of a unification key. We implement Tarjan's union-find algorithm: when two keys are unified, one of them is converted into a \"redirect\" pointing at the other. These redirects form a DAG: the roots of the DAG (nodes that are not redirected) are each associated with a value of type `V` and a rank. The rank is used to keep the DAG relatively balanced, which helps keep the running time of the algorithm under control. For more information, see http://en.wikipedia.org/wiki/Disjoint-set_data_structure.",null,null],[12,"parent","","",68,null],[12,"value","","",68,null],[12,"rank","","",68,null],[3,"UnificationTable","","Table of unification keys and their values.",null,null],[12,"values","","Indicates the current value of each key.",69,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes made during the snapshot may either be committed or rolled back.",null,null],[12,"marker","","",70,null],[12,"snapshot","","",70,null],[3,"Delegate","","",null,null],[12,"0","","",71,null],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type variable. We call such variables unification keys. For example, this trait is implemented by `IntVid`, which represents integral variables.",null,null],[16,"Value","","",72,null],[10,"index","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"from_index","","",72,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"tag","","",72,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[8,"Combine","","This trait is implemented for unify values that can be combined. This relation should be a monoid.",null,null],[10,"combine","","",73,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"varvalue"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"varvalue"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"delegate"}}],[11,"new_var","","",68,null],[11,"new","","",68,null],[11,"redirect","","",68,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"varvalue"}}],[11,"root","","",68,null],[11,"key","","Returns the key of this node. Only valid if this is a root node, which you yourself must ensure.",68,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"parent","","",68,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"if_not_self","","",68,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"option"}}],[11,"new","","",69,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either rolled back or committed in a \"LIFO\" (stack) order.",69,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"rollback_to","","Reverses all changes since the last snapshot. Also removes any keys that have been created since then.",69,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"commit","","Commits all changes since the last snapshot. Of course, they can still be undone if there is a snapshot further out.",69,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"new_key","","",69,null],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path compression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure.",69,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"varvalue"}}],[11,"is_root","","",69,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! This is an internal operation used to impl other things.",69,{"inputs":[{"name":"self"},{"name":"k"},{"name":"varvalue"}],"output":null}],[11,"unify","","Either redirects `node_a` to `node_b` or vice versa, depending on the relative rank. The value associated with the new root will be `new_value`.",69,null],[11,"redirect_root","","",69,null],[11,"reverse","","",71,null],[11,"union","","",69,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"k"}}],[11,"find","","",69,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"k"}}],[11,"find_value","","",69,null],[11,"unify_var_var","","",69,{"inputs":[{"name":"self"},{"name":"k"},{"name":"k"}],"output":{"name":"result"}}],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping relationships, if `a_id` already has a value, it must be the same as `b`.",69,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"has_value","","",69,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"probe","","",69,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"unsolved_variables","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"fx","rustc_data_structures","",null,null],[3,"FxHasher","rustc_data_structures::fx","A speedy hash algorithm for use within rustc. The hashmap in liballoc by default uses SipHash which isn't quite as speedy as we want. In the compiler we're not really worried about DOS attempts, so we use a fast non-cryptographic hash.",null,null],[12,"hash","","",74,null],[5,"FxHashMap","","",null,{"inputs":[],"output":{"name":"fxhashmap"}}],[5,"FxHashSet","","",null,{"inputs":[],"output":{"name":"fxhashset"}}],[6,"FxHashMap","","",null,null],[6,"FxHashSet","","",null,null],[17,"K","","",null,null],[11,"default","","",74,{"inputs":[],"output":{"name":"fxhasher"}}],[11,"add_to_hash","","",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",74,null],[11,"write_u8","","",74,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",74,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",74,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",74,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"tuple_slice","rustc_data_structures","",null,null],[8,"TupleSlice","rustc_data_structures::tuple_slice","Allows to view uniform tuples as slices",null,null],[10,"as_slice","","",75,null],[10,"as_mut_slice","","",75,null],[0,"veccell","rustc_data_structures","",null,null],[3,"VecCell","rustc_data_structures::veccell","",null,null],[12,"data","","",76,null],[11,"with_capacity","","",76,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"swap","","",76,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"control_flow_graph","rustc_data_structures","",null,null],[0,"dominators","rustc_data_structures::control_flow_graph","Algorithm citation: A Simple, Fast Dominance Algorithm. Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy Rice Computer Science TS-06-33870 https://www.cs.rice.edu/~keith/EMBED/dom.pdf",null,null],[3,"Dominators","rustc_data_structures::control_flow_graph::dominators","",null,null],[12,"post_order_rank","","",77,null],[12,"immediate_dominators","","",77,null],[3,"Iter","","",null,null],[12,"dominators","","",78,null],[12,"node","","",78,null],[3,"DominatorTree","","",null,null],[12,"root","","",79,null],[12,"children","","",79,null],[3,"DominatorTreeNode","","",null,null],[12,"tree","","",80,null],[12,"node","","",80,null],[5,"dominators","","",null,{"inputs":[{"name":"g"}],"output":{"name":"dominators"}}],[5,"dominators_given_rpo","","",null,null],[5,"intersect_opt","","",null,{"inputs":[{"name":"indexvec"},{"name":"indexvec"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[5,"intersect","","",null,{"inputs":[{"name":"indexvec"},{"name":"indexvec"},{"name":"node"},{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"dominators"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_reachable","","",77,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"immediate_dominator","","",77,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"node"}}],[11,"dominators","","",77,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"iter"}}],[11,"is_dominated_by","","",77,{"inputs":[{"name":"self"},{"name":"node"},{"name":"node"}],"output":{"name":"bool"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"children","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"iterate","rustc_data_structures::control_flow_graph","",null,null],[5,"post_order_from","rustc_data_structures::control_flow_graph::iterate","",null,null],[5,"post_order_from_to","","",null,null],[5,"post_order_walk","","",null,null],[5,"reverse_post_order","","",null,null],[0,"reference","rustc_data_structures::control_flow_graph","",null,null],[8,"ControlFlowGraph","","",null,null],[16,"Node","","",81,null],[10,"num_nodes","","",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"start_node","","",81,null],[10,"predecessors","","",81,null],[10,"successors","","",81,null],[8,"GraphPredecessors","","",null,null],[16,"Item","","",82,null],[16,"Iter","","",82,null],[8,"GraphSuccessors","","",null,null],[16,"Item","","",83,null],[16,"Iter","","",83,null],[0,"flock","rustc_data_structures","Simple file-locking apis for each OS.",null,null],[3,"Lock","rustc_data_structures::flock","",null,null],[12,"fd","","",84,null],[0,"imp","","",null,null],[3,"Lock","rustc_data_structures::flock::imp","",null,null],[12,"fd","","",84,null],[0,"os","","",null,null],[3,"flock","rustc_data_structures::flock::imp::os","",null,null],[12,"l_type","","",85,null],[12,"l_whence","","",85,null],[12,"l_start","","",85,null],[12,"l_len","","",85,null],[12,"l_pid","","",85,null],[12,"l_sysid","","",85,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[11,"fmt","rustc_data_structures::flock","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",84,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["lock"],"name":"result"}}],[11,"drop","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"panicking_new","","",84,{"inputs":[{"name":"path"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"lock"}}],[0,"sync","rustc_data_structures","This mdoule defines types which are thread safe if cfg!(parallel_queries) is true.",null,null],[3,"Lrc","rustc_data_structures::sync","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[12,"ptr","","",86,null],[12,"phantom","","",86,null],[3,"ReadGuard","","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`.",null,null],[12,"value","","",87,null],[12,"borrow","","",87,null],[3,"WriteGuard","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[12,"value","","",88,null],[12,"borrow","","",88,null],[3,"LockGuard","","A wrapper type for a mutably borrowed value from a `RefCell<T>`.",null,null],[12,"value","","",88,null],[12,"borrow","","",88,null],[3,"RwLock","","A mutable memory location with dynamically checked borrow rules",null,null],[12,"borrow","","",89,null],[12,"value","","",89,null],[3,"MTLock","","",null,null],[12,"0","","",90,null],[3,"LockCell","","",null,null],[12,"0","","",91,null],[3,"Lock","","",null,null],[12,"0","","",92,null],[5,"assert_sync","","",null,{"inputs":[],"output":null}],[5,"assert_send_sync_val","","",null,{"inputs":[{"name":"t"}],"output":null}],[6,"MetadataRef","","",null,null],[8,"Send","","",null,null],[8,"Sync","","",null,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",90,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",91,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"get","","",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_mut","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"get_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates a `LockCell<T>`, with the `Default` value for T.",91,{"inputs":[],"output":{"name":"lockcell"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"name":"bool"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"lockcell"}],"output":{"name":"ordering"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",92,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","",92,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","",92,{"inputs":[{"name":"self"}],"output":{"name":"lockguard"}}],[11,"borrow","","",92,{"inputs":[{"name":"self"}],"output":{"name":"lockguard"}}],[11,"borrow_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"lockguard"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"owning_ref","rustc_data_structures","An owning reference.",null,null],[8,"StableAddress","rustc_data_structures::owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[12,"owner","","",93,null],[12,"reference","","",93,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[12,"owner","","",94,null],[12,"reference","","",94,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[12,"handle","","",95,null],[12,"_owner","","",95,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",96,null],[10,"into_erased","","Perform the type erasure.",96,null],[8,"IntoErasedSendSync","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased + Send + Sync>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased + Send + Sync`.",97,null],[10,"into_erased_send_sync","","Perform the type erasure.",97,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",98,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",98,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",99,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",99,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",93,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",93,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",93,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",93,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_send_sync_owner","","Erases the concrete base type of the owner with a trait object which implements `Send` and `Sync`.",93,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",93,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",93,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",94,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",94,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningrefmut"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",94,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",94,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",94,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",94,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",95,null],[11,"deref_mut","","",95,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",95,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",95,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",95,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",95,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",93,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",94,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",93,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",93,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",93,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",94,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_handle","rustc_data_structures::sync","",89,null],[11,"to_handle_mut","","",89,null],[11,"into_erased","","",86,null],[14,"newtype_index","rustc_data_structures","",null,null],[14,"rustc_erase_owner","","",null,null],[14,"rustc_global","","",null,null],[14,"rustc_access_global","","",null,null],[11,"from","rustc_data_structures::sync","",86,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"deref_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"deref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",89,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",89,{"inputs":[],"output":{"name":"refcell"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","Equality for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",86,{"inputs":[],"output":{"name":"rc"}}],[11,"deref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",86,null],[11,"drop","","Drops the `Rc`.",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"borrow","","",86,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","Comparison for two `Rc`s.",86,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Rc` pointer.",86,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",86,null],[11,"from","","",86,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",86,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"decode","","",89,{"inputs":[{"name":"d"}],"output":{"generics":["refcell"],"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"d"}],"output":{"generics":["rc"],"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"d"}],"output":{"generics":["rc"],"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_handle_mut","","",89,null],[11,"to_handle","","",89,null],[11,"into_erased","","",86,null],[11,"hash_stable","","",86,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"stablehasher"}],"output":null}],[11,"new","","Constructs a new `Rc<T>`.",86,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",86,{"inputs":[{"name":"rc"}],"output":{"generics":["rc"],"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",86,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",86,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",86,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",86,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",86,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",86,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",86,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",86,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",86,{"inputs":[{"name":"self"}],"output":{"generics":["rc","rc"],"name":"result"}}],[11,"clone","","Copies a `Ref`.",87,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",87,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum variant.",88,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"new","","Creates a new `RefCell` containing `value`.",89,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",89,null],[11,"borrow","","Immutably borrows the wrapped value.",89,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",89,{"inputs":[{"name":"self"}],"output":{"generics":["ref","borrowerror"],"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",89,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",89,{"inputs":[{"name":"self"}],"output":{"generics":["refmut","borrowmuterror"],"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[8,"ToHex"],[3,"ArrayVec"],[3,"Iter"],[3,"Drain"],[8,"Array"],[3,"IntoIter"],[4,"AccumulateVec"],[4,"IntoIterRepr"],[4,"Drain"],[3,"SmallVec"],[3,"BitLookup"],[8,"BitSlice"],[8,"BitwiseOperator"],[3,"Intersect"],[3,"Union"],[3,"Subtract"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Blake2bCtx"],[3,"Blake2bHasher"],[3,"Graph"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"EnumeratedNodes"],[3,"EnumeratedEdges"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"IdxSetBuf"],[3,"IdxSet"],[3,"Elems"],[3,"Iter"],[3,"IndexVec"],[3,"IntoIdx"],[8,"Idx"],[3,"ObligationForest"],[3,"Node"],[3,"Outcome"],[3,"Error"],[3,"GetObligation"],[4,"NodeState"],[3,"NodeIndex"],[8,"ForestObligation"],[8,"ObligationProcessor"],[3,"SipHasher128"],[3,"State"],[3,"Sip24Rounds"],[3,"SnapshotMap"],[3,"Snapshot"],[4,"UndoLog"],[3,"SnapshotVec"],[3,"Snapshot"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"StableHasher"],[3,"StableVec"],[8,"StableHasherResult"],[8,"StableHashingContextProvider"],[8,"HashStable"],[8,"ToStableHashKey"],[3,"TransitiveRelation"],[3,"Index"],[3,"Edge"],[3,"VarValue"],[3,"UnificationTable"],[3,"Snapshot"],[3,"Delegate"],[8,"UnifyKey"],[8,"Combine"],[3,"FxHasher"],[8,"TupleSlice"],[3,"VecCell"],[3,"Dominators"],[3,"Iter"],[3,"DominatorTree"],[3,"DominatorTreeNode"],[8,"ControlFlowGraph"],[8,"GraphPredecessors"],[8,"GraphSuccessors"],[3,"Lock"],[3,"flock"],[3,"Lrc"],[3,"ReadGuard"],[3,"LockGuard"],[3,"RwLock"],[3,"MTLock"],[3,"LockCell"],[3,"Lock"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"IntoErased"],[8,"IntoErasedSendSync"],[8,"ToHandle"],[8,"ToHandleMut"],[8,"Erased"]]};
searchIndex["rustc_errors"] = {"doc":"","items":[[3,"CodeSuggestion","rustc_errors","",null,null],[12,"substitutions","","Each substitute can have multiple variants due to multiple applicable suggestions",0,null],[12,"msg","","",0,null],[12,"show_code_when_inline","","",0,null],[3,"Substitution","","See the docs on `CodeSuggestion::substitutions`",null,null],[12,"parts","","",1,null],[3,"SubstitutionPart","","",null,null],[12,"span","","",2,null],[12,"snippet","","",2,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"Diagnostic","","",null,null],[12,"level","","",3,null],[12,"message","","",3,null],[12,"code","","",3,null],[12,"span","","",3,null],[12,"children","","",3,null],[12,"suggestions","","",3,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",4,null],[12,"message","","",4,null],[12,"span","","",4,null],[12,"render_span","","",4,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",5,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"handler","","",6,null],[12,"diagnostic","","",6,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"flags","","",7,null],[12,"err_count","","",7,null],[12,"emitter","","",7,null],[12,"continue_after_error","","",7,null],[12,"delayed_span_bug","","",7,null],[12,"tracked_diagnostics","","",7,null],[12,"emitted_diagnostics","","",7,null],[3,"HandlerFlags","","",null,null],[12,"can_emit_warnings","","",8,null],[12,"treat_err_as_bug","","",8,null],[12,"external_macro_backtrace","","",8,null],[4,"DiagnosticId","","",null,null],[13,"Error","","",9,null],[13,"Lint","","",9,null],[4,"Level","","",null,null],[13,"Bug","","",10,null],[13,"Fatal","","",10,null],[13,"PhaseFatal","","",10,null],[13,"Error","","",10,null],[13,"Warning","","",10,null],[13,"Note","","",10,null],[13,"Help","","",10,null],[13,"Cancelled","","",10,null],[0,"diagnostic","","",null,null],[3,"Diagnostic","rustc_errors::diagnostic","",null,null],[12,"level","","",3,null],[12,"message","","",3,null],[12,"code","","",3,null],[12,"span","","",3,null],[12,"children","","",3,null],[12,"suggestions","","",3,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",4,null],[12,"message","","",4,null],[12,"span","","",4,null],[12,"render_span","","",4,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",5,null],[4,"DiagnosticId","","",null,null],[13,"Error","","",9,null],[13,"Lint","","",9,null],[4,"StringPart","","",null,null],[13,"Normal","","",11,null],[13,"Highlighted","","",11,null],[11,"clone","rustc_errors","",3,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["diagnostic"],"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticid"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"generics":["diagnosticid"],"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"subdiagnostic"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"subdiagnostic"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"generics":["subdiagnostic"],"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"new","","",5,{"inputs":[],"output":{"name":"diagnosticstyledstring"}}],[11,"push_normal","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"push_highlighted","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"normal","","",5,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"highlighted","","",5,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"content","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","rustc_errors::diagnostic","",11,{"inputs":[{"name":"self"},{"name":"stringpart"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"stringpart"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"content","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","rustc_errors","",3,{"inputs":[{"name":"level"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_with_code","","",3,{"inputs":[{"name":"level"},{"generics":["diagnosticid"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or canceled or it will panic when dropped).",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cancelled","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",3,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",3,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note_trait_signature","","",3,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"self"}}],[11,"note","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"highlighted_note","","",3,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"span_note","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion_short","","Prints out a message with a suggested edit of the code. If the suggestion is presented inline it will only show the text message and not the text.",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","Prints out a message with multiple suggested edits of the code.",3,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"set_span","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",3,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"self"}}],[11,"message","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"copy_details_not_message","","Used by a lint. Copies over all details but the \"main message\".",3,{"inputs":[{"name":"self"},{"name":"diagnostic"}],"output":null}],[11,"sub","","Convenience function for internal use, clients should use one of the public methods above.",3,{"inputs":[{"name":"self"},{"name":"level"},{"name":"str"},{"name":"multispan"},{"generics":["multispan"],"name":"option"}],"output":null}],[11,"sub_with_highlights","","Convenience function for internal use, clients should use one of the public methods above.",3,{"inputs":[{"name":"self"},{"name":"level"},{"name":"vec"},{"name":"multispan"},{"generics":["multispan"],"name":"option"}],"output":null}],[11,"message","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"styled_message","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"diagnostic_builder","","",null,null],[3,"DiagnosticBuilder","rustc_errors::diagnostic_builder","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"handler","","",6,null],[12,"diagnostic","","",6,null],[11,"clone","rustc_errors","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"diagnostic"}}],[11,"emit","","Emit the diagnostic.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"is_error","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","Convenience function for internal use, clients should use one of the span_* methods instead.",6,{"inputs":[{"name":"self"},{"name":"level"},{"name":"str"},{"name":"option"}],"output":{"name":"self"}}],[11,"delay_as_bug","","Delay emission of this diagnostic as a bug.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion_short","","",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestion","","",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"set_span","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",6,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"self"}}],[11,"new","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_with_code","","Convenience function for internal use, clients should use one of the struct_* methods on Handler.",6,{"inputs":[{"name":"handler"},{"name":"level"},{"generics":["diagnosticid"],"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"new_diagnostic","","Creates a new `DiagnosticBuilder` with an already constructed diagnostic.",6,{"inputs":[{"name":"handler"},{"name":"diagnostic"}],"output":{"name":"diagnosticbuilder"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"emitter","","",null,null],[3,"EmitterWriter","rustc_errors::emitter","",null,null],[12,"dst","","",12,null],[12,"cm","","",12,null],[12,"short_message","","",12,null],[3,"FileWithAnnotatedLines","","",null,null],[12,"file","","",13,null],[12,"lines","","",13,null],[12,"multiline_depth","","",13,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output it.  This helps to prevent interleaving of multiple error messages when multiple compiler processes error simultaneously",null,null],[12,"buffer","","",14,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",15,null],[13,"Always","","",15,null],[13,"Never","","",15,null],[4,"Destination","","",null,null],[13,"Terminal","","",16,null],[13,"BufferedTerminal","","",16,null],[13,"Raw","","",16,null],[5,"draw_col_separator","","",null,{"inputs":[{"name":"styledbuffer"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"draw_col_separator_no_space","","",null,{"inputs":[{"name":"styledbuffer"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"draw_col_separator_no_space_with_style","","",null,{"inputs":[{"name":"styledbuffer"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[5,"draw_range","","",null,{"inputs":[{"name":"styledbuffer"},{"name":"char"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[5,"draw_note_separator","","",null,{"inputs":[{"name":"styledbuffer"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"draw_multiline_line","","",null,{"inputs":[{"name":"styledbuffer"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[5,"num_overlap","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"overlaps","","",null,{"inputs":[{"name":"annotation"},{"name":"annotation"},{"name":"usize"}],"output":{"name":"bool"}}],[5,"emit_to_destination","","",null,{"inputs":[{"name":"vec"},{"name":"level"},{"name":"destination"},{"name":"bool"}],"output":{"name":"result"}}],[5,"stderr_isatty","","",null,{"inputs":[],"output":{"name":"bool"}}],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[17,"MAX_SUGGESTIONS","","maximum number of suggestions to be shown",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",17,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"emit","","",12,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",15,null],[11,"use_color","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stderr","","",12,{"inputs":[{"name":"colorconfig"},{"generics":["rc"],"name":"option"},{"name":"bool"}],"output":{"name":"emitterwriter"}}],[11,"new","","",12,{"inputs":[{"generics":["write"],"name":"box"},{"generics":["rc"],"name":"option"},{"name":"bool"}],"output":{"name":"emitterwriter"}}],[11,"preprocess_annotations","","",12,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"generics":["filewithannotatedlines"],"name":"vec"}}],[11,"render_source_line","","",12,{"inputs":[{"name":"self"},{"name":"styledbuffer"},{"generics":["filemap"],"name":"rc"},{"name":"line"},{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_multispan_max_line_num","","",12,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"usize"}}],[11,"get_max_line_num","","",12,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"fix_multispan_in_std_macros","","",12,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fix_multispans_in_std_macros","","",12,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"vec"},{"name":"bool"}],"output":null}],[11,"msg_to_buffer","","Add a left margin to every line but the first, given a padding length and the label being displayed, keeping the provided highlighting.",12,null],[11,"emit_message_default","","",12,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"vec"},{"name":"option"},{"name":"level"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_suggestion_default","","",12,{"inputs":[{"name":"self"},{"name":"codesuggestion"},{"name":"level"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_messages_default","","",12,null],[11,"_new","","",14,{"inputs":[],"output":{"name":"bufferedwriter"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_stderr","","When not on Windows, prefer the buffered terminal so that we can buffer an entire error to be emitted at one time.",16,{"inputs":[],"output":{"name":"destination"}}],[11,"apply_style","","",16,{"inputs":[{"name":"self"},{"name":"level"},{"name":"style"}],"output":{"name":"result"}}],[11,"start_attr","","",16,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"reset_attrs","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"snippet","rustc_errors","",null,null],[3,"SnippetData","rustc_errors::snippet","",null,null],[12,"codemap","","",18,null],[12,"files","","",18,null],[3,"FileInfo","","",null,null],[12,"file","","",19,null],[12,"primary_span","","The \"primary file\", if any, gets a `-->` marker instead of `>>>`, and has a line-number/column printed and not just a filename.  It appears first in the listing. It is known to contain at least one primary span, though primary spans (which are designated with `^^^`) may also occur in other files.",19,null],[12,"lines","","",19,null],[3,"Line","","",null,null],[12,"line_index","","",20,null],[12,"annotations","","",20,null],[3,"MultilineAnnotation","","",null,null],[12,"depth","","",21,null],[12,"line_start","","",21,null],[12,"line_end","","",21,null],[12,"start_col","","",21,null],[12,"end_col","","",21,null],[12,"is_primary","","",21,null],[12,"label","","",21,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting characters, not utf-8 bytes. Note that it is important that this field goes first, so that when we sort, we sort orderings by start column.",22,null],[12,"end_col","","End column within the line (exclusive)",22,null],[12,"is_primary","","Is this annotation derived from primary span",22,null],[12,"label","","Optional label to display adjacent to the annotation.",22,null],[12,"annotation_type","","Is this a single line, multiline or multiline span minimized down to a smaller span.",22,null],[3,"StyledString","","",null,null],[12,"text","","",23,null],[12,"style","","",23,null],[4,"AnnotationType","","",null,null],[13,"Singleline","","Annotation under a single line of code",24,null],[13,"Multiline","","Annotation enclosing the first and last character of a multiline span",24,null],[13,"MultilineStart","","Annotation marking the first character of a fully shown multiline span",24,null],[13,"MultilineEnd","","Annotation marking the last character of a fully shown multiline span",24,null],[13,"MultilineLine","","Line at the left enclosing the lines of a fully shown multiline span",24,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",25,null],[13,"LineAndColumn","","",25,null],[13,"LineNumber","","",25,null],[13,"Quotation","","",25,null],[13,"UnderlinePrimary","","",25,null],[13,"UnderlineSecondary","","",25,null],[13,"LabelPrimary","","",25,null],[13,"LabelSecondary","","",25,null],[13,"OldSchoolNoteText","","",25,null],[13,"NoStyle","","",25,null],[13,"Level","","",25,null],[13,"Highlight","","",25,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"snippetdata"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"fileinfo"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"multilineannotation"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"ordering"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"multilineannotation"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"increase_depth","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"as_start","","",21,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_end","","",21,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"as_line","","",21,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"annotationtype"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"ordering"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"annotationtype"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"ordering"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"is_line","","Whether this annotation is a vertical line placeholder.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multiline","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_label","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"takes_space","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"generics":["style"],"name":"result"}}],[0,"registry","rustc_errors","",null,null],[3,"Registry","rustc_errors::registry","",null,null],[12,"descriptions","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"new","","",26,null],[11,"find_description","","",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[0,"styled_buffer","rustc_errors","",null,null],[3,"StyledBuffer","rustc_errors::styled_buffer","",null,null],[12,"text","","",27,null],[12,"styles","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"replace_tabs","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"render","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"vec"}}],[11,"ensure_lines","","",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"putc","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"char"},{"name":"style"}],"output":null}],[11,"puts","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"prepend","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"append","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"num_lines","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"lock","rustc_errors","Bindings to acquire a global named lock.",null,null],[5,"acquire_global_lock","rustc_errors::lock","",null,{"inputs":[{"name":"str"}],"output":{"generics":["any"],"name":"box"}}],[8,"CodeMapper","rustc_errors","",null,null],[10,"lookup_char_pos","","",28,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[10,"span_to_lines","","",28,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[10,"span_to_string","","",28,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[10,"span_to_filename","","",28,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[10,"merge_spans","","",28,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[10,"call_span_if_macro","","",28,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[10,"ensure_filemap_source_present","","",28,{"inputs":[{"name":"self"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"bool"}}],[10,"doctest_offset_line","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codesuggestion"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"codesuggestion"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"generics":["codesuggestion"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"substitution"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"substitution"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"substitution"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["substitution"],"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"substitutionpart"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"substitutionpart"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"substitutionpart"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["substitutionpart"],"name":"result"}}],[11,"splice_lines","","Returns the assembled code suggestions and whether they should be shown with an underline.",0,{"inputs":[{"name":"self"},{"name":"codemapper"}],"output":{"name":"vec"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"handlerflags"}}],[11,"with_tty_emitter","","",7,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"generics":["rc"],"name":"option"}],"output":{"name":"handler"}}],[11,"with_tty_emitter_and_flags","","",7,{"inputs":[{"name":"colorconfig"},{"generics":["rc"],"name":"option"},{"name":"handlerflags"}],"output":{"name":"handler"}}],[11,"with_emitter","","",7,{"inputs":[{"name":"bool"},{"name":"bool"},{"generics":["emitter"],"name":"box"}],"output":{"name":"handler"}}],[11,"with_emitter_and_flags","","",7,{"inputs":[{"generics":["emitter"],"name":"box"},{"name":"handlerflags"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"reset_err_count","","Resets the diagnostic error count as well as the cached emitted diagnostics.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"struct_dummy","","",7,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"diagnosticid"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"diagnosticid"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err_with_code","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"diagnosticid"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"diagnosticid"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",7,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"panic_if_treat_err_as_bug","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"span_fatal","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"diagnosticid"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"mut_span_err","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_err_with_code","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"diagnosticid"}],"output":null}],[11,"span_warn","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"diagnosticid"}],"output":null}],[11,"span_bug","","",7,null],[11,"delay_span_bug","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_diag","","",7,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_unimpl","","",7,null],[11,"fatal","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"warn","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"note_without_error","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"bug","","",7,null],[11,"unimpl","","",7,null],[11,"bump_err_count","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"err_count","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","",7,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",7,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"diagnosticid"},{"name":"level"}],"output":null}],[11,"track_diagnostics","","",7,null],[11,"emit_db","","",7,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"generics":["level"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"color","","",10,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_str","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"CodeSuggestion"],[3,"Substitution"],[3,"SubstitutionPart"],[3,"Diagnostic"],[3,"SubDiagnostic"],[3,"DiagnosticStyledString"],[3,"DiagnosticBuilder"],[3,"Handler"],[3,"HandlerFlags"],[4,"DiagnosticId"],[4,"Level"],[4,"StringPart"],[3,"EmitterWriter"],[3,"FileWithAnnotatedLines"],[3,"BufferedWriter"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"SnippetData"],[3,"FileInfo"],[3,"Line"],[3,"MultilineAnnotation"],[3,"Annotation"],[3,"StyledString"],[4,"AnnotationType"],[4,"Style"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
searchIndex["same_file"] = {"doc":"This crate provides a safe and simple cross platform way to determine whether two file paths refer to the same file or directory.","items":[[3,"Handle","same_file","A handle to a file that can be tested for equality with other handles.",null,null],[12,"0","","",0,null],[5,"is_same_file","","Returns true if the two file paths may correspond to the same file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"generics":["bool"],"name":"result"}}],[0,"unix","","",null,null],[3,"Handle","same_file::unix","",null,null],[12,"file","","",1,null],[12,"is_std","","",1,null],[12,"dev","","",1,null],[12,"ino","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"as_raw_fd","same_file","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"hash","same_file::unix","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from_path","","",1,{"inputs":[{"name":"p"}],"output":{"generics":["handle"],"name":"result"}}],[11,"from_file","","",1,{"inputs":[{"name":"file"}],"output":{"generics":["handle"],"name":"result"}}],[11,"from_std","","",1,{"inputs":[{"name":"file"}],"output":{"generics":["handle"],"name":"result"}}],[11,"stdin","","",1,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"stdout","","",1,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"stderr","","",1,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"as_file","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_file_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"dev","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","same_file","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"from_path","","Construct a handle from a path.",0,{"inputs":[{"name":"p"}],"output":{"generics":["handle"],"name":"result"}}],[11,"from_file","","Construct a handle from a file.",0,{"inputs":[{"name":"file"}],"output":{"generics":["handle"],"name":"result"}}],[11,"stdin","","Construct a handle from stdin.",0,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"stdout","","Construct a handle from stdout.",0,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"stderr","","Construct a handle from stderr.",0,{"inputs":[],"output":{"generics":["handle"],"name":"result"}}],[11,"as_file","","Return a reference to the underlying file.",0,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_file_mut","","Return a mutable reference to the underlying file.",0,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"dev","","Return the underlying device number of this handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","","Return the underlying inode number of this handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}]],"paths":[[3,"Handle"],[3,"Handle"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[12,"__dropfn","","",0,null],[12,"__value","","",0,null],[12,"strategy","","",0,null],[4,"Always","","Always run on scope exit.",null,null],[4,"OnUnwind","","Run on scope exit through unwinding.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[5,"guard_on_unwind","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["onunwind"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",1,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",2,{"inputs":[],"output":{"name":"bool"}}],[11,"should_run","","",3,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",0,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[3,"ScopeGuard"],[8,"Strategy"],[4,"Always"],[4,"OnUnwind"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"lib","serde","A facade around all the types we need from the `std`, `core`, and `alloc` crates. This avoids elaborate import wrangling having to happen in every module.",null,null],[0,"cmp","serde::lib","Functionality for ordering and comparison.",null,null],[8,"PartialEq","serde::lib::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",0,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",0,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[11,"assert_receiver_is_total_eq","","",1,null],[3,"AssertParamIsEq","","",null,null],[12,"_field","","",2,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",3,null],[13,"Equal","","An ordering where a compared value is equal [to another].",3,null],[13,"Greater","","An ordering where a compared value is greater [than another].",3,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",4,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",6,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"iter","serde::lib","Composable external iteration.",null,null],[3,"Rev","serde::lib::iter","A double-ended iterator with the direction inverted.",null,null],[12,"iter","","",7,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[12,"it","","",8,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[12,"orig","","",9,null],[12,"iter","","",9,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[12,"iter","","",10,null],[12,"step","","",10,null],[12,"first_take","","",10,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[12,"a","","",11,null],[12,"b","","",11,null],[12,"state","","",11,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[12,"a","","",12,null],[12,"b","","",12,null],[12,"index","","",12,null],[12,"len","","",12,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[12,"iter","","",13,null],[12,"f","","",13,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[12,"iter","","",14,null],[12,"predicate","","",14,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[12,"iter","","",15,null],[12,"f","","",15,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[12,"iter","","",16,null],[12,"count","","",16,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",null,null],[12,"iter","","",17,null],[12,"peeked","","Remember a peeked value, even if it was None.",17,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[12,"iter","","",18,null],[12,"flag","","",18,null],[12,"predicate","","",18,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[12,"iter","","",19,null],[12,"flag","","",19,null],[12,"predicate","","",19,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[12,"iter","","",20,null],[12,"n","","",20,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[12,"iter","","",21,null],[12,"n","","",21,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[12,"iter","","",22,null],[12,"f","","",22,null],[12,"state","","",22,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",null,null],[12,"iter","","",23,null],[12,"f","","",23,null],[12,"frontiter","","",23,null],[12,"backiter","","",23,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",null,null],[12,"iter","","",24,null],[12,"done","","",24,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",null,null],[12,"iter","","",25,null],[12,"f","","",25,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",26,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",27,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",27,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"rfind","","Searches for an element of an iterator from the right that satisfies a predicate.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",null,null],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",28,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[12,"element","","",29,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[12,"inner","","",30,null],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",31,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[12,"0","","",32,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",33,null],[10,"next","","Advances the iterator and returns the next value.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",33,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","Returns the `n`th element of the iterator.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stepby"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",33,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",33,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"for_each","","Calls a closure on each element of an iterator.",33,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",33,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",33,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",33,{"inputs":[{"name":"self"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first [`None`].",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",33,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",33,null],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","An iterator method that applies a function, producing a single, final value.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",33,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",33,null],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",33,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",33,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",33,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",33,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",33,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",34,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",34,null],[10,"into_iter","","Creates an iterator from a value.",34,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the iterator is empty.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",36,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",37,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"replace_one","","Replaces this step with `1`, returning itself",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"replace_zero","","Replaces this step with `0`, returning itself",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_one","","Adds one to this step, returning the result",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sub_one","","Subtracts one to this step, returning the result",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add_usize","","Add an usize, returning None on overflow",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[0,"mem","serde::lib","Basic functions for dealing with memory.",null,null],[5,"forget","serde::lib::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"zeroed","","Creates a value whose bytes are all zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without deinitializing either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[12,"0","","",38,null],[12,"1","","",38,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",null,{"inputs":[{"name":"t"}],"output":{"name":"discriminant"}}],[19,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",null,null],[12,"value","","",39,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable, enabling further optimizations.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","serde::lib","Overloadable operators.",null,null],[8,"Generator","serde::lib::ops","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",40,null],[16,"Return","","The type of value this generator returns.",40,null],[10,"resume","","Resumes the execution of this generator.",40,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",41,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",42,null],[16,"Error","","The type of this value when viewed as failed.",42,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",42,null],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",42,null],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",43,null],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","Performs the call operation.",44,null],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",null,null],[16,"Output","","The returned type after indexing.",45,null],[10,"index","","Performs the indexing (`container[index]`) operation.",45,null],[8,"Place","","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written. Note that the data at this address is generally uninitialized, and thus one should use `ptr::write` for initializing it.",46,null],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",47,null],[10,"deref","","Dereferences the value.",47,null],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",48,null],[13,"Complete","","The generator completed with a return value.",48,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",49,{"inputs":[],"output":{"name":"self"}}],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",50,null],[10,"not","","Performs the unary `!` operation.",50,null],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",51,null],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",52,null],[8,"Shl","","The left shift operator `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",53,null],[10,"shl","","Performs the `<<` operation.",53,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",54,null],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",55,null],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",56,null],[10,"rem","","Performs the `%` operation.",56,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",57,null],[16,"Place","","The place that will negotiate the storage of the data.",57,null],[10,"finalize","","Converts filled place into final owning value, shifting deallocation/cleanup responsibilities (if any remain), over to returned instance of `Self` and forgetting `filled`.",57,null],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",58,null],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",59,null],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",60,null],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",null,null],[10,"drop","","Executes the destructor for this type.",61,null],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",62,null],[10,"call_once","","Performs the call operation.",62,null],[8,"Shr","","The right shift operator `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",63,null],[10,"shr","","Performs the `>>` operation.",63,null],[8,"InPlace","","Specialization of `Place` trait supporting `PLACE <- EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `PLACE <- EXPR`",64,null],[10,"finalize","","Converts self into the final value, shifting deallocation/cleanup responsibilities (if any remain), over to the returned instance of `Owner` and forgetting self.",64,null],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",65,null],[10,"sub","","Performs the `-` operation.",65,null],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",66,null],[12,"end","","The upper bound of the range (exclusive).",66,null],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",67,null],[10,"div","","Performs the `/` operation.",67,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",68,null],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",69,null],[10,"bitor","","Performs the `|` operation.",69,null],[8,"Placer","","Interface to implementations of  `PLACE <- EXPR`.",null,null],[16,"Place","","`Place` is the intermediate agent guarding the uninitialized state for `Data`.",70,null],[10,"make_place","","Creates a fresh place from `self`.",70,null],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",71,null],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",72,null],[10,"mul","","Performs the `*` operation.",72,null],[8,"Add","","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",73,null],[10,"add","","Performs the `+` operation.",73,null],[8,"Fn","","The version of the call operator that takes an immutable receiver.",null,null],[10,"call","","Performs the call operation.",74,null],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",75,null],[10,"bitand","","Performs the `&` operation.",75,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",76,null],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",null,null],[12,"start","","The lower bound of the range (inclusive).",77,null],[12,"end","","The upper bound of the range (inclusive).",77,null],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",78,null],[10,"bitxor","","Performs the `^` operation.",78,null],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",null,null],[10,"deref_mut","","Mutably dereferences the value.",79,null],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",80,null],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",81,null],[10,"neg","","Performs the unary `-` operation.",81,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",82,null],[0,"slice","serde::lib","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","serde::lib::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",83,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",83,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",83,null],[10,"connect","","",83,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[12,"inner","","",84,null],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[12,"v","","",85,null],[12,"chunk_size","","",85,null],[5,"from_ref_mut","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",null,null],[12,"v","","",86,null],[12,"pred","","",86,null],[12,"finished","","",86,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",null,null],[12,"v","","",87,null],[12,"chunk_size","","",87,null],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[12,"inner","","",88,null],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",89,null],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",89,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",89,null],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",89,null],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",89,null],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",89,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[12,"ptr","","",90,null],[12,"end","","",90,null],[12,"_marker","","",90,null],[3,"IterMut","","Mutable slice iterator.",null,null],[12,"ptr","","",91,null],[12,"end","","",91,null],[12,"_marker","","",91,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",null,null],[12,"v","","",92,null],[12,"pred","","",92,null],[12,"finished","","",92,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",null,null],[12,"inner","","",93,null],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last up to `chunk_size-1` elements will be omitted.",null,null],[12,"v","","",94,null],[12,"chunk_size","","",94,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",null,null],[12,"inner","","",95,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[12,"v","","",96,null],[12,"size","","",96,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",null,null],[12,"inner","","",97,null],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",null,null],[12,"inner","","",98,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",null,null],[12,"v","","",99,null],[12,"chunk_size","","",99,null],[0,"str","serde::lib","Unicode string slices.",null,null],[3,"EncodeUtf16","serde::lib::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[12,"encoder","","",100,null],[5,"from_boxed_utf8_unchecked","","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",null,{"inputs":[{"name":"box"}],"output":{"generics":["str"],"name":"box"}}],[3,"SplitN","","Created with the method [`splitn`].",null,null],[12,"0","","",101,null],[3,"Matches","","Created with the method [`matches`].",null,null],[12,"0","","",102,null],[3,"Split","","Created with the method [`split`].",null,null],[12,"0","","",103,null],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[12,"0","","",104,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",null,null],[12,"valid_up_to","","",105,null],[12,"error_len","","",105,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",null,null],[12,"inner","","",106,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[12,"0","","",107,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[12,"0","","",108,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",null,null],[12,"front_offset","","",109,null],[12,"iter","","",109,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",null,null],[16,"Err","","The associated error which can be returned from parsing.",110,null],[10,"from_str","","Parses a string `s` to return a value of this type.",110,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",null,null],[12,"_priv","","",111,null],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[12,"0","","",112,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","serde::lib::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",113,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",113,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",113,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",113,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",113,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",114,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",114,null],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",114,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",115,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",116,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",117,null],[12,"finger","","`finger` is the current byte index of the forward search. Imagine that it exists before the byte at its index, i.e. haystack[finger] is the first byte of the slice we must inspect during forward searching",117,null],[12,"finger_back","","`finger_back` is the current byte index of the reverse search. Imagine that it exists after the byte at its index, i.e. haystack[finger_back - 1] is the last byte of the slice we must inspect during forward searching (and thus the first byte to be inspected when calling next_back())",117,null],[12,"needle","","The character being searched for",117,null],[12,"utf8_size","","The number of bytes `needle` takes up when encoded in utf8",117,null],[12,"utf8_encoded","","A utf8 encoded copy of the `needle`",117,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[12,"0","","",118,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[12,"0","","",119,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[12,"haystack","","",120,null],[12,"needle","","",120,null],[12,"searcher","","",120,null],[3,"MatchIndices","serde::lib::str","Created with the method [`match_indices`].",null,null],[12,"0","","",121,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[12,"iter","","",122,null],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[12,"0","","",123,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[12,"0","","",124,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[12,"0","","",125,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[12,"0","","",126,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[12,"0","","",127,null],[0,"isize","serde::lib","The pointer-sized signed integer type.",null,null],[17,"MIN","serde::lib::isize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i16","serde::lib","The 16-bit signed integer type.",null,null],[17,"MIN","serde::lib::i16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i32","serde::lib","The 32-bit signed integer type.",null,null],[17,"MIN","serde::lib::i32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i64","serde::lib","The 64-bit signed integer type.",null,null],[17,"MIN","serde::lib::i64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"i8","serde::lib","The 8-bit signed integer type.",null,null],[17,"MIN","serde::lib::i8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"usize","serde::lib","The pointer-sized unsigned integer type.",null,null],[17,"MIN","serde::lib::usize","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u16","serde::lib","The 16-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u16","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u32","serde::lib","The 32-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u32","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u64","serde::lib","The 64-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u64","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"u8","serde::lib","The 8-bit unsigned integer type.",null,null],[17,"MIN","serde::lib::u8","The smallest value that can be represented by this integer type.",null,null],[17,"MAX","","The largest value that can be represented by this integer type.",null,null],[0,"f32","serde::lib","This module provides constants which are specific to the implementation of the `f32` floating point data type.",null,null],[17,"MAX_EXP","serde::lib::f32","Maximum possible power of 2 exponent.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","serde::lib::f32::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"MANTISSA_DIGITS","serde::lib::f32","Number of significant digits in base 2.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f32` value.",null,null],[17,"MIN","","Smallest finite `f32` value.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"RADIX","","The radix or base of the internal representation of `f32`.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"MAX","","Largest finite `f32` value.",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[0,"f64","serde::lib","This module provides constants which are specific to the implementation of the `f64` floating point data type.",null,null],[17,"MAX_EXP","serde::lib::f64","Maximum possible power of 2 exponent.",null,null],[17,"MIN_EXP","","One greater than the minimum possible normal power of 2 exponent.",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","serde::lib::f64::consts","Archimedes' constant (π)",null,null],[17,"FRAC_PI_2","","π/2",null,null],[17,"FRAC_PI_3","","π/3",null,null],[17,"FRAC_PI_4","","π/4",null,null],[17,"FRAC_PI_6","","π/6",null,null],[17,"FRAC_PI_8","","π/8",null,null],[17,"FRAC_1_PI","","1/π",null,null],[17,"FRAC_2_PI","","2/π",null,null],[17,"FRAC_2_SQRT_PI","","2/sqrt(π)",null,null],[17,"SQRT_2","","sqrt(2)",null,null],[17,"FRAC_1_SQRT_2","","1/sqrt(2)",null,null],[17,"E","","Euler's number (e)",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2)",null,null],[17,"LN_10","","ln(10)",null,null],[17,"MANTISSA_DIGITS","serde::lib::f64","Number of significant digits in base 2.",null,null],[17,"NAN","","Not a Number (NaN).",null,null],[17,"MIN_POSITIVE","","Smallest positive normal `f64` value.",null,null],[17,"MIN","","Smallest finite `f64` value.",null,null],[17,"EPSILON","","Difference between `1.0` and the next largest representable number.",null,null],[17,"RADIX","","The radix or base of the internal representation of `f64`.",null,null],[17,"MAX_10_EXP","","Maximum possible power of 10 exponent.",null,null],[17,"NEG_INFINITY","","Negative infinity (-∞).",null,null],[17,"MIN_10_EXP","","Minimum possible normal power of 10 exponent.",null,null],[17,"DIGITS","","Approximate number of significant digits in base 10.",null,null],[17,"MAX","","Largest finite `f64` value.",null,null],[17,"INFINITY","","Infinity (∞).",null,null],[3,"Cell","serde::lib","A mutable memory location.",null,null],[12,"value","","",128,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[12,"borrow","","",129,null],[12,"value","","",129,null],[0,"clone","","The `Clone` trait for types that cannot be 'implicitly copied'.",null,null],[8,"Clone","serde::lib::clone","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",130,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",130,null],[3,"AssertParamIsClone","","",null,null],[12,"_field","","",131,null],[3,"AssertParamIsCopy","","",null,null],[12,"_field","","",132,null],[8,"Clone","serde::lib","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",130,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",130,null],[0,"convert","","Traits for conversions between types.",null,null],[4,"Infallible","serde::lib::convert","A type used as the error type for implementations of fallible conversion traits in cases where conversions cannot actually fail.",null,null],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",null,null],[10,"as_ref","","Performs the conversion.",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",136,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",137,null],[10,"try_into","","Performs the conversion.",137,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",138,null],[10,"try_from","","Performs the conversion.",138,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"From","serde::lib","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",136,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"default","","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","serde::lib::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",139,{"inputs":[],"output":{"name":"self"}}],[8,"Default","serde::lib","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",139,{"inputs":[],"output":{"name":"self"}}],[0,"fmt","","Utilities for formatting and printing `String`s.",null,null],[5,"format","serde::lib::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",142,null],[12,"result","","",142,null],[12,"has_fields","","",142,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[12,"pieces","","",143,null],[12,"fmt","","",143,null],[12,"args","","",143,null],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",145,null],[12,"result","","",145,null],[12,"has_fields","","",145,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"rt","","",null,null],[0,"v1","serde::lib::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are emitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","serde::lib::fmt::rt::v1","",null,null],[12,"position","","",147,null],[12,"format","","",147,null],[3,"FormatSpec","","",null,null],[12,"fill","","",148,null],[12,"align","","",148,null],[12,"flags","","",148,null],[12,"precision","","",148,null],[12,"width","","",148,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",149,null],[13,"Right","","Indication that contents should be right-aligned.",149,null],[13,"Center","","Indication that contents should be center-aligned.",149,null],[13,"Unknown","","No alignment was requested.",149,null],[4,"Count","","",null,null],[13,"Is","","",150,null],[13,"Param","","",150,null],[13,"NextParam","","",150,null],[13,"Implied","","",150,null],[4,"Position","","",null,null],[13,"Next","","",151,null],[13,"At","","",151,null],[5,"write","serde::lib::fmt","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",152,null],[12,"formatter","","",152,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",153,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",155,null],[12,"result","","",155,null],[12,"fields","","",155,null],[12,"empty_name","","",155,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",156,null],[12,"fill","","",156,null],[12,"align","","",156,null],[12,"width","","",156,null],[12,"precision","","",156,null],[12,"buf","","",156,null],[12,"curarg","","",156,null],[12,"args","","",156,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",159,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",159,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",160,null],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","serde::lib","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"marker","","Primitive traits and types representing basic properties of types.",null,null],[8,"Send","serde::lib::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between threads.",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[3,"PhantomData","serde::lib","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[0,"option","","Optional values.",null,null],[4,"Option","serde::lib::option","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",163,null],[13,"Some","","Some value `T`",163,null],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[12,"inner","","",164,null],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[12,"inner","","",165,null],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",null,null],[12,"inner","","",166,null],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",null,null],[4,"Option","serde::lib","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",163,null],[13,"Some","","Some value `T`",163,null],[0,"result","","Error handling with the `Result` type.",null,null],[4,"Result","serde::lib::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",167,null],[13,"Err","","Contains the error value",167,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",null,null],[12,"inner","","",168,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",null,null],[12,"inner","","",169,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",null,null],[12,"inner","","",170,null],[4,"Result","serde::lib","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",167,null],[13,"Err","","Contains the error value",167,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",171,null],[13,"Owned","","Owned data.",171,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",172,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",172,null],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",172,null],[3,"String","","A UTF-8 encoded, growable string.",null,null],[12,"vec","","",173,null],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",null,null],[12,"buf","","",174,null],[12,"len","","",174,null],[3,"Box","","A pointer type for heap allocation.",null,null],[12,"0","","",175,null],[3,"Rc","","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'.",null,null],[12,"ptr","","",176,null],[12,"phantom","","",176,null],[3,"Arc","","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'.",null,null],[12,"ptr","","",177,null],[12,"phantom","","",177,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[12,"root","","",178,null],[12,"length","","",178,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[12,"map","","",179,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[12,"data","","",180,null],[3,"LinkedList","","A doubly-linked list with owned nodes.",null,null],[12,"head","","",181,null],[12,"tail","","",181,null],[12,"len","","",181,null],[12,"marker","","",181,null],[3,"VecDeque","","A double-ended queue implemented with a growable ring buffer.",null,null],[12,"tail","","",182,null],[12,"head","","",182,null],[12,"buf","","",182,null],[0,"error","","Traits for working with Errors.",null,null],[8,"Error","serde::lib::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",183,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",183,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"type_id","","Get the `TypeId` of `self`",183,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[0,"net","serde::lib","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","serde::lib::net","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",184,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",184,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",184,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[12,"0","","",185,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"generics":["lookuphost","error"],"name":"result"}}],[3,"TcpListener","","A TCP socket server, listening for connections.",null,null],[12,"0","","",186,null],[3,"SocketAddrV4","","An IPv4 socket address.",null,null],[12,"inner","","",187,null],[3,"TcpStream","","A TCP stream between a local and a remote socket.",null,null],[12,"0","","",188,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more [`SocketAddr`] values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond to.",189,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",189,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[3,"Incoming","","An iterator that infinitely [`accept`]s connections on a [`TcpListener`].",null,null],[12,"listener","","",190,null],[3,"UdpSocket","","A UDP socket.",null,null],[12,"0","","",191,null],[3,"AddrParseError","","An error which can be returned when parsing an IP address or a socket address.",null,null],[12,"0","","",192,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",193,null],[13,"LinkLocal","","",193,null],[13,"RealmLocal","","",193,null],[13,"AdminLocal","","",193,null],[13,"SiteLocal","","",193,null],[13,"OrganizationLocal","","",193,null],[13,"Global","","",193,null],[4,"SocketAddr","","An internet socket address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 socket address.",194,null],[13,"V6","","An IPv6 socket address.",194,null],[4,"IpAddr","","An IP address, either IPv4 or IPv6.",null,null],[13,"V4","","An IPv4 address.",195,null],[13,"V6","","An IPv6 address.",195,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[12,"inner","","",196,null],[3,"Ipv4Addr","","An IPv4 address.",null,null],[12,"inner","","",197,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[12,"inner","","",198,null],[3,"HashMap","serde::lib","A hash map implemented with linear probing and Robin Hood bucket stealing.",null,null],[12,"hash_builder","","",199,null],[12,"table","","",199,null],[12,"resize_policy","","",199,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",null,null],[12,"map","","",200,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[12,"inner","","",201,null],[3,"CString","","A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle.",null,null],[12,"inner","","",202,null],[3,"OsStr","","Borrowed reference to an OS string (see [`OsString`]).",null,null],[12,"inner","","",203,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.",null,null],[12,"inner","","",204,null],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",205,null],[10,"build_hasher","","Creates a new hasher.",205,null],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",206,null],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",206,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",207,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",207,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",207,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",207,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",207,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",208,null],[3,"Path","","A slice of a path (akin to [`str`]).",null,null],[12,"inner","","",209,null],[3,"PathBuf","","An owned, mutable path (akin to [`String`]).",null,null],[12,"inner","","",210,null],[3,"Duration","","A `Duration` type to represent a span of time, typically used for system timeouts.",null,null],[12,"secs","","",211,null],[12,"nanos","","",211,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to external entities like the file system or other processes.",null,null],[12,"0","","",212,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[12,"inner","","",213,null],[12,"poison","","",213,null],[12,"data","","",213,null],[3,"RwLock","","A reader-writer lock",null,null],[12,"inner","","",214,null],[12,"poison","","",214,null],[12,"data","","",214,null],[0,"core","","",null,null],[14,"select","serde::lib::core","A macro to select an event from a number of receivers.",null,null],[14,"try","","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors.",null,null],[14,"__thread_local_inner","","",null,null],[14,"eprintln","","Macro for printing to the standard error, with a newline.",null,null],[14,"println","","Macro for printing to the standard output, with a newline.",null,null],[14,"debug_assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"write","","Write formatted data into a buffer.",null,null],[14,"thread_local","","Declare a new thread local storage key of type [`std::thread::LocalKey`].",null,null],[14,"debug_assert_eq","","Asserts that two expressions are equal to each other.",null,null],[14,"assert","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"print","","Macro for printing to the standard output.",null,null],[14,"format","","Creates a `String` using interpolation of runtime expressions.",null,null],[14,"debug_assert_ne","","Asserts that two expressions are not equal to each other.",null,null],[14,"unimplemented","","A standardized placeholder for marking unfinished code.",null,null],[14,"unreachable","","A utility macro for indicating unreachable code.",null,null],[14,"assert_ne","","Asserts that two expressions are not equal to each other (using [`PartialEq`]).",null,null],[14,"panic","","The entry point for panic of Rust threads.",null,null],[14,"assert_eq","","Asserts that two expressions are equal to each other (using [`PartialEq`]).",null,null],[14,"eprint","","Macro for printing to the standard error.",null,null],[14,"writeln","","Write formatted data into a buffer, with a newline appended.",null,null],[14,"vec","","Creates a [`Vec`] containing the arguments.",null,null],[0,"macros","serde","",null,null],[0,"ser","","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[12,"void","","",215,null],[12,"ok","","",215,null],[12,"error","","",215,null],[5,"iterator_len_hint","","",null,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"option"}}],[0,"impls","","",null,null],[11,"serialize","serde::lib","",173,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",201,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",202,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",163,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",216,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",180,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",179,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",200,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",181,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",174,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",182,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib::ops","",66,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib","",178,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",199,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",175,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",176,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",177,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",171,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",128,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",129,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",213,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",214,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",167,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",211,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",212,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",197,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",196,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",194,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",187,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",198,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","serde::lib","",209,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",210,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",203,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",204,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",208,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"impossible","serde::ser","This module contains `Impossible` serializer and its implementations.",null,null],[3,"Impossible","serde::ser::impossible","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[12,"void","","",215,null],[12,"ok","","",215,null],[12,"error","","",215,null],[4,"Void","","",null,null],[11,"serialize_element","serde::ser","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",215,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",215,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",217,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",218,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",219,null],[16,"Error","","The error type when some error occurs during serialization.",219,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",219,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",219,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",219,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",219,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",219,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",219,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",219,null],[10,"serialize_bool","","Serialize a `bool` value.",219,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",219,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",219,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",219,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",219,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",219,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",219,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",219,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",219,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",219,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",219,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",219,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",219,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",219,null],[10,"serialize_none","","Serialize a [`None`] value.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",219,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",219,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",219,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",220,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",220,null],[10,"serialize_element","","Serialize a sequence element.",220,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",220,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",221,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",221,null],[10,"serialize_element","","Serialize a tuple element.",221,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",221,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",222,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",222,null],[10,"serialize_field","","Serialize a tuple struct field.",222,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",222,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",223,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",223,null],[10,"serialize_field","","Serialize a tuple variant field.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",224,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",224,null],[10,"serialize_key","","Serialize a map key.",224,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",224,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",224,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",224,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",225,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",225,null],[10,"serialize_field","","Serialize a struct field.",225,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",225,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",225,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",226,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",226,null],[10,"serialize_field","","Serialize a struct variant field.",226,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",226,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",226,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"LenHint","","",null,null],[10,"len_hint","","",227,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[3,"OneOf","","Used in error messages.",null,null],[12,"names","","",228,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",229,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",229,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",229,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",229,null],[13,"Char","","The input contained a `char` that was not expected.",229,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",229,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",229,null],[13,"Unit","","The input contained a unit `()` that was not expected.",229,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",229,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",229,null],[13,"Seq","","The input contained a sequence that was not expected.",229,null],[13,"Map","","The input contained a map that was not expected.",229,null],[13,"Enum","","The input contained an enum that was not expected.",229,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",229,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",229,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",229,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",229,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",229,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[12,"err","","",230,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[12,"marker","","",231,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[12,"value","","",232,null],[12,"marker","","",232,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[12,"value","","",233,null],[12,"marker","","",233,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[12,"value","","",234,null],[12,"marker","","",234,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[12,"value","","",235,null],[12,"marker","","",235,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[12,"value","","",236,null],[12,"marker","","",236,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[12,"value","","",237,null],[12,"marker","","",237,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[12,"value","","",238,null],[12,"marker","","",238,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[12,"value","","",239,null],[12,"marker","","",239,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[12,"value","","",240,null],[12,"marker","","",240,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[12,"value","","",241,null],[12,"marker","","",241,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[12,"value","","",242,null],[12,"marker","","",242,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[12,"value","","",243,null],[12,"marker","","",243,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[12,"value","","",244,null],[12,"marker","","",244,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[12,"value","","",245,null],[12,"marker","","",245,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[12,"value","","",246,null],[12,"marker","","",246,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[12,"value","","",247,null],[12,"marker","","",247,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[12,"value","","",248,null],[12,"marker","","",248,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[12,"value","","",249,null],[12,"marker","","",249,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[12,"value","","",250,null],[12,"marker","","",250,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[12,"iter","","",251,null],[12,"count","","",251,null],[12,"marker","","",251,null],[3,"ExpectedInSeq","","",null,null],[12,"0","","",252,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[12,"seq","","",253,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[12,"iter","","",254,null],[12,"value","","",254,null],[12,"count","","",254,null],[12,"lifetime","","",254,null],[12,"error","","",254,null],[3,"PairDeserializer","","",null,null],[12,"0","","",255,null],[12,"1","","",255,null],[12,"2","","",255,null],[3,"PairVisitor","","",null,null],[12,"0","","",256,null],[12,"1","","",256,null],[12,"2","","",256,null],[3,"ExpectedInMap","","",null,null],[12,"0","","",257,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[12,"map","","",258,null],[0,"private","","",null,null],[3,"UnitOnly","serde::de::value::private","",null,null],[12,"marker","","",259,null],[5,"unit_only","","",null,null],[6,"First","","",null,null],[6,"Second","","",null,null],[8,"Pair","","Avoid having to restate the generic types on `MapDeserializer`. The `Iterator::Item` contains enough information to figure out K and V.",null,null],[16,"First","","",260,null],[16,"Second","","",260,null],[10,"split","","",260,null],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"unitonly"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unit_variant","","",259,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",259,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",259,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",259,null],[6,"ErrorImpl","serde::de::value","",null,null],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",230,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",230,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",230,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",231,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",231,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",231,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",231,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",231,null],[11,"deserialize_enum","","",231,null],[11,"deserialize_identifier","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",231,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",232,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",232,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",232,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",232,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",232,null],[11,"deserialize_enum","","",232,null],[11,"deserialize_identifier","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",232,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",233,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",233,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",233,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",233,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",233,null],[11,"deserialize_enum","","",233,null],[11,"deserialize_identifier","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",233,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",234,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",234,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",234,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",234,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",234,null],[11,"deserialize_enum","","",234,null],[11,"deserialize_identifier","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",234,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",235,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",235,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",235,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",235,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",235,null],[11,"deserialize_enum","","",235,null],[11,"deserialize_identifier","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",235,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",236,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",236,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",236,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",236,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",236,null],[11,"deserialize_enum","","",236,null],[11,"deserialize_identifier","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",236,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",237,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",237,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",237,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",237,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",237,null],[11,"deserialize_enum","","",237,null],[11,"deserialize_identifier","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",237,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",238,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",238,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",238,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",238,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",238,null],[11,"deserialize_enum","","",238,null],[11,"deserialize_identifier","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",238,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",239,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",239,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",239,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",239,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",239,null],[11,"deserialize_enum","","",239,null],[11,"deserialize_identifier","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",239,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",240,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",240,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",240,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",240,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",240,null],[11,"deserialize_enum","","",240,null],[11,"deserialize_identifier","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",240,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",241,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",241,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",241,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",241,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",241,null],[11,"deserialize_enum","","",241,null],[11,"deserialize_identifier","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",241,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",242,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",242,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",242,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",242,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",242,null],[11,"deserialize_enum","","",242,null],[11,"deserialize_identifier","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",242,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",243,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",243,null],[11,"deserialize_enum","","",243,null],[11,"deserialize_identifier","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",243,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",244,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",244,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",244,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",244,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",244,null],[11,"deserialize_enum","","",244,null],[11,"deserialize_identifier","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",244,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",245,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",245,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",245,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",245,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",245,null],[11,"deserialize_identifier","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",245,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",245,null],[11,"variant_seed","","",245,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",246,null],[11,"deserialize_bool","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",246,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",246,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",246,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",246,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",246,null],[11,"deserialize_identifier","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",246,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",246,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",247,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",247,null],[11,"deserialize_bool","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",247,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",247,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",247,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",247,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",247,null],[11,"deserialize_identifier","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",247,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",247,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",173,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"deserialize_any","serde::de::value","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",248,null],[11,"deserialize_bool","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",248,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",248,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",248,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",248,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",248,null],[11,"deserialize_identifier","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",248,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",248,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",171,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"deserialize_any","serde::de::value","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",249,null],[11,"deserialize_bool","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",249,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",249,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",249,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",249,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",249,null],[11,"deserialize_identifier","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",249,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",249,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",250,null],[11,"deserialize_any","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",250,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",250,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",250,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",250,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",250,null],[11,"deserialize_identifier","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",250,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",250,null],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",251,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",251,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",251,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",251,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",251,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",251,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",251,null],[11,"deserialize_enum","","",251,null],[11,"deserialize_identifier","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",251,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",251,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",174,null],[11,"into_deserializer","","",179,null],[11,"into_deserializer","","",200,null],[11,"clone","serde::de::value","",253,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",253,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",253,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",253,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",253,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",253,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",253,null],[11,"deserialize_enum","","",253,null],[11,"deserialize_identifier","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",253,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",254,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",254,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_pair","","",254,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_any","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",254,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",254,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",254,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",254,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",254,null],[11,"deserialize_enum","","",254,null],[11,"deserialize_identifier","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",254,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",254,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",254,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",254,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",254,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",254,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",254,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",255,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",255,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",255,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",255,null],[11,"deserialize_enum","","",255,null],[11,"deserialize_identifier","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",255,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",255,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",256,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",256,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::lib","",178,null],[11,"into_deserializer","","",199,null],[11,"clone","serde::de::value","",258,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",258,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",258,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",258,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",258,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",258,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",258,null],[11,"deserialize_enum","","",258,null],[11,"deserialize_identifier","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",258,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[0,"from_primitive","serde::de","",null,null],[8,"FromPrimitive","serde::de::from_primitive","",null,null],[10,"from_isize","","",261,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[10,"from_i8","","",261,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[10,"from_i16","","",261,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[10,"from_i32","","",261,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","",261,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[10,"from_usize","","",261,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[10,"from_u8","","",261,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[10,"from_u16","","",261,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[10,"from_u32","","",261,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","",261,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[0,"ignored_any","serde::de","",null,null],[3,"IgnoredAny","serde::de::ignored_any","An efficient way of discarding data from a deserializer.",null,null],[11,"clone","serde::de","",262,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",262,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",262,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",262,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",262,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",262,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",262,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",262,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",262,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",262,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",262,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",262,null],[11,"deserialize","","",262,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[0,"impls","","",null,null],[3,"UnitVisitor","serde::de::impls","",null,null],[3,"BoolVisitor","","",null,null],[3,"CharVisitor","","",null,null],[3,"StringVisitor","","",null,null],[3,"StringInPlaceVisitor","","",null,null],[12,"0","","",263,null],[3,"StrVisitor","","",null,null],[3,"BytesVisitor","","",null,null],[3,"CStringVisitor","","",null,null],[3,"OptionVisitor","","",null,null],[12,"marker","","",264,null],[3,"PhantomDataVisitor","","",null,null],[12,"marker","","",265,null],[3,"ArrayVisitor","","",null,null],[12,"marker","","",266,null],[3,"ArrayInPlaceVisitor","","",null,null],[12,"0","","",267,null],[3,"PathVisitor","","",null,null],[3,"PathBufVisitor","","",null,null],[3,"OsStringVisitor","","",null,null],[4,"OsStringKind","","",null,null],[13,"Unix","","",268,null],[13,"Windows","","",268,null],[5,"nop_reserve","","",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":null}],[7,"OSSTR_VARIANTS","","",null,null],[11,"expecting","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",269,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"expecting","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",270,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["bool"],"name":"result"}}],[11,"expecting","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_char","","",271,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["char"],"name":"result"}}],[11,"visit_str","","",271,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["char"],"name":"result"}}],[11,"expecting","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"visit_string","","",272,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["string"],"name":"result"}}],[11,"visit_bytes","","",272,null],[11,"visit_byte_buf","","",272,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["string"],"name":"result"}}],[11,"expecting","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",263,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",263,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",263,null],[11,"visit_byte_buf","","",263,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",173,{"inputs":[{"name":"d"}],"output":{"generics":["string"],"name":"result"}}],[11,"deserialize_in_place","","",173,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"expecting","serde::de::impls","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",273,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_bytes","","",273,null],[11,"expecting","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_borrowed_bytes","","",274,null],[11,"visit_borrowed_str","","",274,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"expecting","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",275,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"visit_bytes","","",275,null],[11,"visit_byte_buf","","",275,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"visit_str","","",275,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"visit_string","","",275,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"deserialize","serde::lib","",202,{"inputs":[{"name":"d"}],"output":{"generics":["cstring"],"name":"result"}}],[11,"expecting","serde::de::impls","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",264,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"visit_none","","",264,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"visit_some","","",264,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["option"],"name":"result"}}],[11,"deserialize","serde::lib","",163,{"inputs":[{"name":"d"}],"output":{"generics":["option"],"name":"result"}}],[11,"expecting","serde::de::impls","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",265,{"inputs":[{"name":"self"}],"output":{"generics":["phantomdata"],"name":"result"}}],[11,"deserialize","serde::lib","",216,{"inputs":[{"name":"d"}],"output":{"generics":["phantomdata"],"name":"result"}}],[11,"deserialize","","",180,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",180,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",179,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",179,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",181,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",181,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",200,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",200,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",174,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",174,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",182,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","",182,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","",266,{"inputs":[],"output":{"name":"self"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",266,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"expecting","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",267,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",178,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",199,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib::net","",195,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",197,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",196,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",194,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",187,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",198,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","serde::de::impls","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",276,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_bytes","","",276,null],[11,"expecting","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",277,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"visit_string","","",277,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"deserialize","serde::lib","",210,{"inputs":[{"name":"d"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"deserialize","serde::de::impls","",268,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_enum","","",278,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["osstring"],"name":"result"}}],[11,"deserialize","serde::lib","",204,{"inputs":[{"name":"d"}],"output":{"generics":["osstring"],"name":"result"}}],[11,"deserialize","","",175,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",175,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",175,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",177,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",176,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",171,{"inputs":[{"name":"d"}],"output":{"generics":["cow"],"name":"result"}}],[11,"deserialize","","",128,{"inputs":[{"name":"d"}],"output":{"generics":["cell"],"name":"result"}}],[11,"deserialize","","",129,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",213,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",214,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",211,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",212,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib::ops","",66,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",167,{"inputs":[{"name":"d"}],"output":{"generics":["result"],"name":"result"}}],[11,"deserialize","","",208,{"inputs":[{"name":"d"}],"output":{"generics":["wrapping"],"name":"result"}}],[0,"utf8","serde::de","",null,null],[3,"Encode","serde::de::utf8","",null,null],[12,"buf","","",279,null],[12,"pos","","",279,null],[5,"encode","","",null,{"inputs":[{"name":"char"}],"output":{"name":"encode"}}],[17,"TAG_CONT","","",null,null],[17,"TAG_TWO_B","","",null,null],[17,"TAG_THREE_B","","",null,null],[17,"TAG_FOUR_B","","",null,null],[17,"MAX_ONE_B","","",null,null],[17,"MAX_TWO_B","","",null,null],[17,"MAX_THREE_B","","",null,null],[11,"as_str","","",279,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",280,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",280,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",280,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",280,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",280,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",280,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",280,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",280,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",282,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","Deserializes a value into `self` from the given Deserializer.",282,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",283,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",283,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",284,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",284,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",284,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",284,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",284,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",284,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",284,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",284,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",285,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",285,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",285,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",285,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",285,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",285,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",285,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",285,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",285,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",285,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",285,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",285,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",285,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",285,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",285,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",285,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",285,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",285,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",285,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",285,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",285,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",285,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",285,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",285,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",285,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",285,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",286,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",286,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",286,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",286,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",287,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",287,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",287,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",287,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",287,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",287,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",287,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",287,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",288,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",288,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",288,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",288,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",289,null],[10,"unit_variant","","Called when deserializing a variant with no values.",289,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",289,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",289,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",289,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",289,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",290,null],[10,"into_deserializer","","Convert this value into a deserializer.",290,null],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","serde::lib","",216,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","serde::de","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"export","serde","",null,null],[8,"Clone","serde::export","A common trait for the ability to explicitly duplicate an object.",null,null],[10,"clone","","Returns a copy of the value.",130,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",130,null],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",null,null],[10,"from","","Performs the conversion.",136,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",null,null],[10,"into","","Performs the conversion.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",139,{"inputs":[],"output":{"name":"self"}}],[0,"fmt","","Utilities for formatting and printing `String`s.",null,null],[5,"format","serde::export::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",142,null],[12,"result","","",142,null],[12,"has_fields","","",142,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[12,"pieces","","",143,null],[12,"fmt","","",143,null],[12,"args","","",143,null],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",145,null],[12,"result","","",145,null],[12,"has_fields","","",145,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"rt","","",null,null],[0,"v1","serde::export::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are emitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","serde::export::fmt::rt::v1","",null,null],[12,"position","","",147,null],[12,"format","","",147,null],[3,"FormatSpec","","",null,null],[12,"fill","","",148,null],[12,"align","","",148,null],[12,"flags","","",148,null],[12,"precision","","",148,null],[12,"width","","",148,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",149,null],[13,"Right","","Indication that contents should be right-aligned.",149,null],[13,"Center","","Indication that contents should be center-aligned.",149,null],[13,"Unknown","","No alignment was requested.",149,null],[4,"Count","","",null,null],[13,"Is","","",150,null],[13,"Param","","",150,null],[13,"NextParam","","",150,null],[13,"Implied","","",150,null],[4,"Position","","",null,null],[13,"Next","","",151,null],[13,"At","","",151,null],[5,"write","serde::export::fmt","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",152,null],[12,"formatter","","",152,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",153,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",155,null],[12,"result","","",155,null],[12,"fields","","",155,null],[12,"empty_name","","",155,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",156,null],[12,"fill","","",156,null],[12,"align","","",156,null],[12,"width","","",156,null],[12,"precision","","",156,null],[12,"buf","","",156,null],[12,"curarg","","",156,null],[12,"args","","",156,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",159,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",159,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",159,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",160,null],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","serde::export","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",156,null],[12,"fill","","",156,null],[12,"align","","",156,null],[12,"width","","",156,null],[12,"precision","","",156,null],[12,"buf","","",156,null],[12,"curarg","","",156,null],[12,"args","","",156,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they own a `T`.",null,null],[4,"Option","","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",163,null],[13,"Some","","Some value `T`",163,null],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",null,null],[13,"Ok","","Contains the success value",167,null],[13,"Err","","Contains the error value",167,null],[5,"from_utf8_lossy","","",null,null],[0,"string","","",null,null],[5,"from_utf8_lossy","serde::export::string","",null,null],[0,"private","serde","",null,null],[0,"macros","serde::private","",null,null],[0,"ser","","",null,null],[3,"TaggedSerializer","serde::private::ser","",null,null],[12,"type_ident","","",291,null],[12,"variant_ident","","",291,null],[12,"tag","","",291,null],[12,"variant_name","","",291,null],[12,"delegate","","",291,null],[3,"Error","","Used only by Serde doc tests. Not public API.",null,null],[4,"Unsupported","","",null,null],[13,"Boolean","","",292,null],[13,"Integer","","",292,null],[13,"Float","","",292,null],[13,"Char","","",292,null],[13,"String","","",292,null],[13,"ByteArray","","",292,null],[13,"Optional","","",292,null],[13,"Unit","","",292,null],[13,"Sequence","","",292,null],[13,"Tuple","","",292,null],[13,"TupleStruct","","",292,null],[5,"constrain","","Used to check that serde(getter) attributes return the expected type. Not public API.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"serialize_tagged_newtype","","Not public API.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[0,"content","","",null,null],[3,"SerializeTupleVariantAsMapValue","serde::private::ser::content","",null,null],[12,"map","","",293,null],[12,"name","","",293,null],[12,"fields","","",293,null],[3,"SerializeStructVariantAsMapValue","","",null,null],[12,"map","","",294,null],[12,"name","","",294,null],[12,"fields","","",294,null],[3,"ContentSerializer","","",null,null],[12,"error","","",295,null],[3,"SerializeSeq","","",null,null],[12,"elements","","",296,null],[12,"error","","",296,null],[3,"SerializeTuple","","",null,null],[12,"elements","","",297,null],[12,"error","","",297,null],[3,"SerializeTupleStruct","","",null,null],[12,"name","","",298,null],[12,"fields","","",298,null],[12,"error","","",298,null],[3,"SerializeTupleVariant","","",null,null],[12,"name","","",299,null],[12,"variant_index","","",299,null],[12,"variant","","",299,null],[12,"fields","","",299,null],[12,"error","","",299,null],[3,"SerializeMap","","",null,null],[12,"entries","","",300,null],[12,"key","","",300,null],[12,"error","","",300,null],[3,"SerializeStruct","","",null,null],[12,"name","","",301,null],[12,"fields","","",301,null],[12,"error","","",301,null],[3,"SerializeStructVariant","","",null,null],[12,"name","","",302,null],[12,"variant_index","","",302,null],[12,"variant","","",302,null],[12,"fields","","",302,null],[12,"error","","",302,null],[4,"Content","","",null,null],[13,"Bool","","",303,null],[13,"U8","","",303,null],[13,"U16","","",303,null],[13,"U32","","",303,null],[13,"U64","","",303,null],[13,"I8","","",303,null],[13,"I16","","",303,null],[13,"I32","","",303,null],[13,"I64","","",303,null],[13,"F32","","",303,null],[13,"F64","","",303,null],[13,"Char","","",303,null],[13,"String","","",303,null],[13,"Bytes","","",303,null],[13,"None","","",303,null],[13,"Some","","",303,null],[13,"Unit","","",303,null],[13,"UnitStruct","","",303,null],[13,"UnitVariant","","",303,null],[13,"NewtypeStruct","","",303,null],[13,"NewtypeVariant","","",303,null],[13,"Seq","","",303,null],[13,"Tuple","","",303,null],[13,"TupleStruct","","",303,null],[13,"TupleVariant","","",303,null],[13,"Map","","",303,null],[13,"Struct","","",303,null],[13,"StructVariant","","",303,null],[11,"new","","",293,{"inputs":[{"name":"m"},{"name":"str"},{"name":"usize"}],"output":{"name":"self"}}],[11,"serialize_field","","",293,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",293,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",294,{"inputs":[{"name":"m"},{"name":"str"},{"name":"usize"}],"output":{"name":"self"}}],[11,"serialize_field","","",294,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",294,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",303,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",295,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",295,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i8","","",295,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i16","","",295,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i32","","",295,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_i64","","",295,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u8","","",295,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u16","","",295,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u32","","",295,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_u64","","",295,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_f32","","",295,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_f64","","",295,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_char","","",295,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_str","","",295,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_bytes","","",295,null],[11,"serialize_none","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_some","","",295,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_unit","","",295,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_unit_struct","","",295,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_unit_variant","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_newtype_struct","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_newtype_variant","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_seq","","",295,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",295,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",295,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",295,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_element","","",296,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",296,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_element","","",297,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",297,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_field","","",298,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",298,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_field","","",299,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",299,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_key","","",300,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",300,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",300,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_entry","","",300,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_field","","",301,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",301,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"serialize_field","","",302,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",302,{"inputs":[{"name":"self"}],"output":{"generics":["content"],"name":"result"}}],[11,"fmt","serde::private::ser","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bad_type","","",291,null],[11,"serialize_bool","","",291,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i8","","",291,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",291,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",291,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",291,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u8","","",291,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",291,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",291,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",291,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",291,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",291,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",291,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",291,null],[11,"serialize_none","","",291,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",291,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_unit","","",291,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",291,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",291,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",291,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",291,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",304,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"description","","",304,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"de","serde::private","",null,null],[3,"ContentDeserializer","serde::private::de","Not public API",null,null],[12,"content","","",305,null],[12,"err","","",305,null],[3,"ContentRefDeserializer","","Not public API.",null,null],[12,"content","","",306,null],[12,"err","","",306,null],[3,"InternallyTaggedUnitVisitor","","Visitor for deserializing an internally tagged unit variant.",null,null],[12,"type_name","","",307,null],[12,"variant_name","","",307,null],[3,"TagContentOtherFieldVisitor","","Not public API.",null,null],[12,"tag","","",308,null],[12,"content","","",308,null],[3,"TagOrContentFieldVisitor","","Not public API.",null,null],[12,"tag","","",309,null],[12,"content","","",309,null],[3,"TaggedContentVisitor","","Not public API.",null,null],[12,"tag_name","","",310,null],[12,"value","","",310,null],[3,"UntaggedUnitVisitor","","Visitor for deserializing an untagged unit variant.",null,null],[12,"type_name","","",311,null],[12,"variant_name","","",311,null],[3,"StrDeserializer","","",null,null],[12,"value","","",312,null],[12,"marker","","",312,null],[3,"BytesDeserializer","","",null,null],[12,"value","","",313,null],[12,"marker","","",313,null],[3,"InPlaceSeed","","A DeserializeSeed helper for implementing deserialize_in_place Visitors.",null,null],[12,"0","","",314,null],[4,"Content","","Used from generated code to buffer the contents of the Deserializer when deserializing untagged enums and internally tagged enums.",null,null],[13,"Bool","","",315,null],[13,"U8","","",315,null],[13,"U16","","",315,null],[13,"U32","","",315,null],[13,"U64","","",315,null],[13,"I8","","",315,null],[13,"I16","","",315,null],[13,"I32","","",315,null],[13,"I64","","",315,null],[13,"F32","","",315,null],[13,"F64","","",315,null],[13,"Char","","",315,null],[13,"String","","",315,null],[13,"Str","","",315,null],[13,"ByteBuf","","",315,null],[13,"Bytes","","",315,null],[13,"None","","",315,null],[13,"Some","","",315,null],[13,"Unit","","",315,null],[13,"Newtype","","",315,null],[13,"Seq","","",315,null],[13,"Map","","",315,null],[4,"TagContentOtherField","","Used by generated code to deserialize an adjacently tagged enum when ignoring unrelated fields is allowed.",null,null],[13,"Tag","","",316,null],[13,"Content","","",316,null],[13,"Other","","",316,null],[4,"TagOrContentField","","Used by generated code to deserialize an adjacently tagged enum.",null,null],[13,"Tag","","",317,null],[13,"Content","","",317,null],[5,"missing_field","","If the missing field is of type `Option<T>` then treat is as `None`, otherwise it is an error.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"borrow_cow_str","","",null,{"inputs":[{"name":"d"}],"output":{"generics":["cow"],"name":"result"}}],[5,"borrow_cow_bytes","","",null,{"inputs":[{"name":"d"}],"output":{"generics":["cow"],"name":"result"}}],[0,"size_hint","","",null,null],[5,"from_bounds","serde::private::de::size_hint","",null,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"option"}}],[5,"cautious","","",null,{"inputs":[{"generics":["usize"],"name":"option"}],"output":{"name":"usize"}}],[5,"helper","","",null,null],[0,"content","serde::private::de","",null,null],[3,"ContentVisitor","serde::private::de::content","",null,null],[12,"value","","",318,null],[3,"TagOrContentVisitor","","",null,null],[12,"name","","",319,null],[12,"value","","",319,null],[3,"TaggedContent","","Used by generated code to deserialize an internally tagged enum.",null,null],[12,"tag","","",320,null],[12,"content","","",320,null],[3,"TaggedContentVisitor","","Not public API.",null,null],[12,"tag_name","","",310,null],[12,"value","","",310,null],[3,"TagOrContentFieldVisitor","","Not public API.",null,null],[12,"tag","","",309,null],[12,"content","","",309,null],[3,"TagContentOtherFieldVisitor","","Not public API.",null,null],[12,"tag","","",308,null],[12,"content","","",308,null],[3,"ContentDeserializer","","Not public API",null,null],[12,"content","","",305,null],[12,"err","","",305,null],[3,"EnumDeserializer","","",null,null],[12,"variant","","",321,null],[12,"value","","",321,null],[12,"err","","",321,null],[3,"VariantDeserializer","","",null,null],[12,"value","","",322,null],[12,"err","","",322,null],[3,"SeqDeserializer","","",null,null],[12,"iter","","",323,null],[12,"err","","",323,null],[3,"MapDeserializer","","",null,null],[12,"iter","","",324,null],[12,"value","","",324,null],[12,"err","","",324,null],[3,"ContentRefDeserializer","","Not public API.",null,null],[12,"content","","",306,null],[12,"err","","",306,null],[3,"EnumRefDeserializer","","",null,null],[12,"variant","","",325,null],[12,"value","","",325,null],[12,"err","","",325,null],[3,"VariantRefDeserializer","","",null,null],[12,"value","","",326,null],[12,"err","","",326,null],[3,"SeqRefDeserializer","","",null,null],[12,"iter","","",327,null],[12,"err","","",327,null],[3,"MapRefDeserializer","","",null,null],[12,"iter","","",328,null],[12,"value","","",328,null],[12,"err","","",328,null],[3,"InternallyTaggedUnitVisitor","","Visitor for deserializing an internally tagged unit variant.",null,null],[12,"type_name","","",307,null],[12,"variant_name","","",307,null],[3,"UntaggedUnitVisitor","","Visitor for deserializing an untagged unit variant.",null,null],[12,"type_name","","",311,null],[12,"variant_name","","",311,null],[4,"Content","","Used from generated code to buffer the contents of the Deserializer when deserializing untagged enums and internally tagged enums.",null,null],[13,"Bool","","",315,null],[13,"U8","","",315,null],[13,"U16","","",315,null],[13,"U32","","",315,null],[13,"U64","","",315,null],[13,"I8","","",315,null],[13,"I16","","",315,null],[13,"I32","","",315,null],[13,"I64","","",315,null],[13,"F32","","",315,null],[13,"F64","","",315,null],[13,"Char","","",315,null],[13,"String","","",315,null],[13,"Str","","",315,null],[13,"ByteBuf","","",315,null],[13,"Bytes","","",315,null],[13,"None","","",315,null],[13,"Some","","",315,null],[13,"Unit","","",315,null],[13,"Newtype","","",315,null],[13,"Seq","","",315,null],[13,"Map","","",315,null],[4,"TagOrContent","","This is the type of the map keys in an internally tagged enum.",null,null],[13,"Tag","","",329,null],[13,"Content","","",329,null],[4,"TagOrContentField","","Used by generated code to deserialize an adjacently tagged enum.",null,null],[13,"Tag","","",317,null],[13,"Content","","",317,null],[4,"TagContentOtherField","","Used by generated code to deserialize an adjacently tagged enum when ignoring unrelated fields is allowed.",null,null],[13,"Tag","","",316,null],[13,"Content","","",316,null],[13,"Other","","",316,null],[11,"fmt","serde::private::de","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unexpected","","",315,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"deserialize","","",315,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::private::de::content","",318,{"inputs":[],"output":{"name":"self"}}],[11,"expecting","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",318,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","",318,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",318,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",318,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",318,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","",318,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",318,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",318,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",318,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",318,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",318,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",318,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",318,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",318,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",318,null],[11,"visit_borrowed_bytes","","",318,null],[11,"visit_byte_buf","","",318,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_unit","","",318,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","",318,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",318,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",318,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","",318,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","",318,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",318,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","",319,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deserialize","","",319,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",319,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",319,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","",319,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",319,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",319,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",319,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","",319,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",319,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",319,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",319,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",319,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",319,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","",319,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","",319,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","",319,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",319,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",319,null],[11,"visit_borrowed_bytes","","",319,null],[11,"visit_byte_buf","","",319,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_unit","","",319,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","",319,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",319,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",319,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",319,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","serde::private::de","Visitor for the content of an internally tagged enum with the given tag name.",310,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"deserialize","","",310,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",310,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_map","","",310,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"deserialize","","",309,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",309,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",308,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"expecting","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_str","","",308,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize_any","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",305,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",305,null],[11,"deserialize_unit_struct","","",305,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",305,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",305,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",305,null],[11,"deserialize_identifier","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",305,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","private API, don't use",305,{"inputs":[{"name":"content"}],"output":{"name":"self"}}],[11,"variant_seed","serde::private::de::content","",321,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",322,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",322,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",322,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",322,null],[11,"new","","",323,{"inputs":[{"generics":["content"],"name":"vec"}],"output":{"name":"self"}}],[11,"deserialize_any","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",323,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",323,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",323,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",323,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",323,null],[11,"deserialize_enum","","",323,null],[11,"deserialize_identifier","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",323,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",323,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",323,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","",324,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"next_key_seed","","",324,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",324,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",324,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"deserialize_any","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",324,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",324,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",324,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",324,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",324,null],[11,"deserialize_enum","","",324,null],[11,"deserialize_identifier","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",324,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","serde::private::de","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",306,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",306,null],[11,"deserialize_bool","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",306,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",306,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",306,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",306,null],[11,"deserialize_identifier","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",306,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","private API, don't use",306,{"inputs":[{"name":"content"}],"output":{"name":"self"}}],[11,"variant_seed","serde::private::de::content","",325,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",326,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",326,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",326,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",326,null],[11,"new","","",327,null],[11,"deserialize_any","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",327,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",327,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",327,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",327,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",327,null],[11,"deserialize_enum","","",327,null],[11,"deserialize_identifier","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",327,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",327,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",327,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","",328,null],[11,"next_key_seed","","",328,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",328,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",328,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"deserialize_any","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",328,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",328,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",328,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",328,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",328,null],[11,"deserialize_enum","","",328,null],[11,"deserialize_identifier","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",328,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::private::de","",305,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_deserializer","","",306,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Not public API.",307,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"expecting","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_seq","","",307,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_map","","",307,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"new","","Not public API.",311,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"expecting","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_unit","","",311,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"IdentifierDeserializer","","",null,null],[16,"Deserializer","","",330,null],[10,"from","","",330,null],[11,"deserialize_any","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",312,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",312,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",312,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",312,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",312,null],[11,"deserialize_enum","","",312,null],[11,"deserialize_identifier","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",312,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",313,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",313,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",313,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",313,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",313,null],[11,"deserialize_enum","","",313,null],[11,"deserialize_identifier","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",313,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",314,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",218,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",219,null],[16,"Error","","The error type when some error occurs during serialization.",219,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",219,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",219,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",219,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",219,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",219,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",219,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",219,null],[10,"serialize_bool","","Serialize a `bool` value.",219,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",219,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",219,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",219,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",219,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",219,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",219,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",219,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",219,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",219,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",219,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",219,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",219,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",219,null],[10,"serialize_none","","Serialize a [`None`] value.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",219,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",219,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",219,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",219,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",219,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",282,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_in_place","","Deserializes a value into `self` from the given Deserializer.",282,{"inputs":[{"name":"d"},{"name":"self"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",284,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",284,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",284,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",284,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",284,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",284,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",284,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",284,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",284,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"forward_to_deserialize_any_method","","",null,null],[14,"forward_to_deserialize_any_helper","","",null,null],[14,"__private_serialize","","",null,null],[14,"__private_deserialize","","",null,null],[14,"__serialize_unimplemented","","Used only by Serde doc tests. Not public API.",null,null],[14,"__serialize_unimplemented_method","","",null,null],[14,"__serialize_unimplemented_helper","","",null,null],[11,"report","serde::export","",167,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"add","serde::lib","",212,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"add","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",209,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",184,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",192,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",203,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",198,{"inputs":[{"name":"self"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",203,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",196,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",210,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",210,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",197,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",193,{"inputs":[{"name":"self"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",209,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",194,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::net","",196,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",210,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"add_assign","","",211,null],[11,"add_assign","","",212,null],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",196,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",209,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",197,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",201,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",196,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",203,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",197,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",203,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib","",210,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",203,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from_raw_fd","serde::lib::net","",191,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"from_raw_fd","","",188,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",186,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"to_socket_addrs","","",194,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"to_socket_addrs","","",187,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"to_socket_addrs","serde::lib","",173,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"to_socket_addrs","serde::lib::net","",198,{"inputs":[{"name":"self"}],"output":{"generics":["intoiter","error"],"name":"result"}}],[11,"default","serde::lib","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",199,{"inputs":[],"output":{"name":"hashmap"}}],[11,"default","","Creates a `Mutex<T>`, with the `Default` value for T.",213,{"inputs":[],"output":{"name":"mutex"}}],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",200,{"inputs":[],"output":{"name":"hashset"}}],[11,"default","","",175,{"inputs":[],"output":{"generics":["osstr"],"name":"box"}}],[11,"default","","",175,{"inputs":[],"output":{"generics":["cstr"],"name":"box"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"default","","Creates an empty `CString`.",202,{"inputs":[],"output":{"name":"cstring"}}],[11,"default","","Constructs an empty `OsString`.",204,{"inputs":[],"output":{"name":"osstring"}}],[11,"default","","",211,{"inputs":[],"output":{"name":"duration"}}],[11,"default","","Creates a new `RwLock<T>`, with the `Default` value for T.",214,{"inputs":[],"output":{"name":"rwlock"}}],[11,"from_str","serde::lib::net","",194,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddr","addrparseerror"],"name":"result"}}],[11,"from_str","","",187,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv4","addrparseerror"],"name":"result"}}],[11,"from_str","","",195,{"inputs":[{"name":"str"}],"output":{"generics":["ipaddr","addrparseerror"],"name":"result"}}],[11,"from_str","","",197,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",196,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6addr","addrparseerror"],"name":"result"}}],[11,"from_str","","",198,{"inputs":[{"name":"str"}],"output":{"generics":["socketaddrv6","addrparseerror"],"name":"result"}}],[11,"description","serde::lib::convert","",331,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::export::fmt","",332,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::lib","",175,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","serde::lib::net","",192,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","serde::lib::str","",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"div","serde::lib","",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_ptr","","Wraps a raw C string with a safe C string wrapper.",201,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",201,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",201,null],[11,"as_ptr","","Returns the inner pointer to this C string.",201,null],[11,"to_bytes","","Converts this C string to a byte slice.",201,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",201,null],[11,"to_str","","Yields a [`&str`] slice if the `CStr` contains valid UTF-8.",201,{"inputs":[{"name":"self"}],"output":{"generics":["str","utf8error"],"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.",201,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"into_c_string","","Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.",201,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"deref","","",202,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"new","","Coerces into an `OsStr` slice.",203,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `OsStr` is valid Unicode.",203,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.",203,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned [`OsString`].",203,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",203,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of this `OsStr`.",203,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_os_string","","Converts a [`Box`]`<OsStr>` into an [`OsString`] without copying or allocating.",203,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"deref","","",204,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"new","","Directly wraps a string slice as a `Path` slice.",209,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying [`OsStr`] slice.",209,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a [`&str`] slice if the `Path` is valid unicode.",209,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a [`Cow<str>`].",209,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned [`PathBuf`].",209,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","Returns `true` if the `Path` is absolute, i.e. if it is independent of the current directory.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_relative","","Returns `true` if the `Path` is relative, i.e. not absolute.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_root","","Returns `true` if the `Path` has a root.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parent","","Returns the `Path` without its final component, if there is one.",209,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"file_name","","Returns the final component of the `Path`, if there is one.",209,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",209,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["path","stripprefixerror"],"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",209,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",209,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of [`self.file_name`].",209,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"extension","","Extracts the extension of [`self.file_name`], if possible.",209,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"join","","Creates an owned [`PathBuf`] with `path` adjoined to `self`.",209,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned [`PathBuf`] like `self` but with the given file name.",209,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned [`PathBuf`] like `self` but with the given extension.",209,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produces an iterator over the [`Component`]s of the path.",209,{"inputs":[{"name":"self"}],"output":{"name":"components"}}],[11,"iter","","Produces an iterator over the path's components viewed as [`OsStr`] slices.",209,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements [`Display`] for safely printing paths that may contain non-Unicode data.",209,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"metadata","","Queries the file system to get information about a file, directory, etc.",209,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"result"}}],[11,"symlink_metadata","","Queries the metadata about a file without following symlinks.",209,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components normalized and symbolic links resolved.",209,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",209,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",209,{"inputs":[{"name":"self"}],"output":{"generics":["readdir","error"],"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path exists on disk and is pointing at a regular file.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path exists on disk and is pointing at a directory.",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_path_buf","","Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or allocating.",209,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"deref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_raw_fd","serde::lib::net","",186,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",188,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",191,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"hash","serde::lib","",204,null],[11,"hash","serde::lib::net","",194,null],[11,"hash","serde::lib","",212,null],[11,"hash","","",209,null],[11,"hash","","",202,null],[11,"hash","serde::lib::net","",198,null],[11,"hash","","",195,null],[11,"hash","serde::lib","",201,null],[11,"hash","serde::lib::net","",196,null],[11,"hash","serde::lib","",203,null],[11,"hash","","",211,null],[11,"hash","serde::lib::net","",187,null],[11,"hash","","",197,null],[11,"hash","serde::lib","",210,null],[11,"hash","serde::lib::net","",193,null],[11,"drop","serde::lib","",213,null],[11,"drop","","",202,null],[11,"drop","","",214,null],[11,"read","serde::lib::net","",188,null],[11,"initializer","","",188,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read","serde::lib","",175,null],[11,"initializer","","",175,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","",175,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","",175,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","",175,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",199,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",200,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"sub_assign","","",211,null],[11,"sub_assign","","",212,null],[11,"mul_assign","","",211,null],[11,"fmt","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_bytes","serde::lib","",203,null],[11,"as_bytes","","",203,null],[11,"extend","","",199,null],[11,"extend","","",200,null],[11,"extend","","",199,null],[11,"extend","","",200,null],[11,"extend","","",210,null],[11,"from_vec","","",204,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"mul","","",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"index","","",199,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","","",202,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"index","","",204,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"fill_buf","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",175,null],[11,"read_until","","",175,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_line","","",175,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"next","serde::lib::net","",190,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",185,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"seek","serde::lib","",175,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"result"}}],[11,"sum","","",211,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sum","","",211,{"inputs":[{"name":"i"}],"output":{"name":"duration"}}],[11,"sub","","",212,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"assert_receiver_is_total_eq","","",212,null],[11,"assert_receiver_is_total_eq","serde::lib::net","",192,null],[11,"assert_receiver_is_total_eq","serde::lib","",202,null],[11,"assert_receiver_is_total_eq","serde::lib::net","",193,null],[11,"assert_receiver_is_total_eq","","",184,null],[11,"assert_receiver_is_total_eq","","",194,null],[11,"assert_receiver_is_total_eq","","",195,null],[11,"assert_receiver_is_total_eq","serde::lib","",211,null],[11,"write","","",174,null],[11,"write_all","","",174,null],[11,"flush","","",174,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","serde::lib::net","",188,null],[11,"flush","","",188,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","serde::lib","",175,null],[11,"flush","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","",175,null],[11,"write_fmt","","",175,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"borrow","","",204,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"borrow","","",202,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"borrow","","",210,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_raw_fd","serde::lib::net","",191,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",188,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",186,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cmp","serde::lib","",203,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::net","",196,{"inputs":[{"name":"self"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",204,{"inputs":[{"name":"self"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"cmp","","",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"cmp","","",202,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::net","",197,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"cmp","","",209,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"cmp","","",210,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::net","",195,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",201,{"inputs":[{"name":"self"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",209,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"clone_into","","",209,null],[11,"to_owned","","",203,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone_into","","",203,null],[11,"to_owned","","",201,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"from_iter","","",199,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"from_iter","","",200,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"from_iter","","",210,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"as_ref","","",201,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",202,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_ref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",204,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",204,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",203,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",209,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",209,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",203,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"as_ref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"clone","serde::lib::net","",198,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv6"}}],[11,"clone","serde::lib","",212,{"inputs":[{"name":"self"}],"output":{"name":"systemtime"}}],[11,"clone","serde::lib::net","",192,{"inputs":[{"name":"self"}],"output":{"name":"addrparseerror"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"ipv6multicastscope"}}],[11,"clone","serde::lib","",211,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"clone","serde::lib::net","",196,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"clone","serde::lib","",200,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"clone","serde::lib::net","",194,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"clone","serde::lib","",199,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"cstring"}}],[11,"div_assign","","",211,null],[11,"fmt","serde::lib::net","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::net","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","It performs the conversion in network order (big-endian).",197,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",195,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipaddr"}}],[11,"from","serde::lib","",175,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"arc"}}],[11,"from","","",175,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",210,{"inputs":[{"generics":["path"],"name":"box"}],"output":{"name":"pathbuf"}}],[11,"from","","",175,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",204,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"from","serde::lib::net","",194,null],[11,"from","serde::lib","",175,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"arc"}}],[11,"from","","",174,{"inputs":[{"name":"cstring"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",177,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"arc"}}],[11,"from","","",176,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"from","serde::lib::net","",195,null],[11,"from","serde::lib","Creates a new instance of an `RwLock<T>` which is unlocked. This is equivalent to [`RwLock::new`].",214,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"from","","",202,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","serde::lib::net","",195,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipaddr"}}],[11,"from","","",194,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddr"}}],[11,"from","serde::lib","",177,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"arc"}}],[11,"from","","",204,{"inputs":[{"generics":["osstr"],"name":"box"}],"output":{"name":"osstring"}}],[11,"from","","",176,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"from","","",171,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","","Creates a new mutex in an unlocked state ready for use. This is equivalent to [`Mutex::new`].",213,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"from","","",210,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from","serde::lib::net","",195,null],[11,"from","serde::lib","",176,{"inputs":[{"name":"cstring"}],"output":{"generics":["cstr"],"name":"rc"}}],[11,"from","","",204,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",175,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",175,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",175,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","serde::lib::net","",194,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddr"}}],[11,"from","serde::lib","",176,{"inputs":[{"name":"path"}],"output":{"generics":["path"],"name":"rc"}}],[11,"from","","",177,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"arc"}}],[11,"from","serde::lib::net","",195,null],[11,"from","serde::lib","",176,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"rc"}}],[11,"from","","",204,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",171,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"cow"}}],[11,"from","","",202,{"inputs":[{"generics":["cstr"],"name":"box"}],"output":{"name":"cstring"}}],[11,"from","","",177,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"arc"}}],[11,"from","","",175,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","serde::lib::net","",196,null],[11,"from","serde::lib","",204,{"inputs":[{"name":"defaultenvkey"}],"output":{"name":"osstring"}}],[11,"from","","",210,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",175,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["path"],"name":"box"}}],[11,"from","","",176,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"rc"}}],[11,"from","","",175,{"inputs":[{"name":"cstr"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"from","serde::lib::net","",196,null],[11,"from","","",197,null],[11,"from","serde::lib","",175,{"inputs":[{"name":"osstring"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",175,{"inputs":[{"name":"string"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",175,{"inputs":[{"name":"osstr"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"from","","",175,{"inputs":[{"name":"e"}],"output":{"generics":["error"],"name":"box"}}],[11,"from","","",210,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","serde::lib::net","",196,{"inputs":[{"name":"u128"}],"output":{"name":"ipv6addr"}}],[11,"deref_mut","serde::lib::mem","",39,null],[11,"haystack","serde::lib::str::pattern","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",118,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",119,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",120,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"haystack","","",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",117,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","serde::lib","",208,{"inputs":[{"name":"self"}],"output":{"name":"wrapping"}}],[11,"clone","serde::lib::iter","",8,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"takewhile"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cycle"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"scan"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"clone","serde::export::fmt","",332,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","serde::lib::result","",170,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","serde::lib::iter","",32,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"clone","serde::lib::str::pattern","",117,{"inputs":[{"name":"self"}],"output":{"name":"charsearcher"}}],[11,"clone","serde::lib::ops","",77,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"clone","serde::lib::mem","",39,{"inputs":[{"name":"self"}],"output":{"name":"manuallydrop"}}],[11,"clone_from","","",39,null],[11,"clone","serde::lib::iter","",12,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"clone","serde::lib::mem","",38,{"inputs":[{"name":"self"}],"output":{"name":"discriminant"}}],[11,"clone","serde::lib::iter","",14,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"clone","serde::lib::str","",108,{"inputs":[{"name":"self"}],"output":{"name":"rmatchindices"}}],[11,"clone","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"clone","serde::lib::option","",333,{"inputs":[{"name":"self"}],"output":{"name":"noneerror"}}],[11,"clone","serde::lib::slice","",90,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","serde::lib::str","",102,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"clone","serde::export","",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","serde::lib::ops","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangefrom"}}],[11,"clone","serde::lib::cmp","",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","serde::lib::iter","",15,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"clone","serde::lib::str","",125,{"inputs":[{"name":"self"}],"output":{"name":"rmatches"}}],[11,"clone","serde::lib::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","serde::lib","",129,{"inputs":[{"name":"self"}],"output":{"name":"refcell"}}],[11,"clone","serde::lib::slice","",96,{"inputs":[{"name":"self"}],"output":{"name":"windows"}}],[11,"clone","serde::lib::str::pattern","",114,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"clone","serde::lib::convert","",331,{"inputs":[{"name":"self"}],"output":{"name":"infallible"}}],[11,"clone","serde::lib::slice","",99,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"clone","serde::lib::iter","",20,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"clone","serde::export","",216,{"inputs":[{"name":"self"}],"output":{"name":"phantomdata"}}],[11,"clone","serde::lib::option","",164,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","serde::lib::ops","",66,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","serde::lib::iter","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"clone","serde::lib::ops","",68,{"inputs":[{"name":"self"}],"output":{"name":"rangetoinclusive"}}],[11,"clone","serde::lib::iter","",7,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"clone","serde::lib::result","",168,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","serde::lib::iter","",18,{"inputs":[{"name":"self"}],"output":{"name":"skipwhile"}}],[11,"clone","serde::lib::str","",122,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"clone","serde::lib::slice","",85,{"inputs":[{"name":"self"}],"output":{"name":"exactchunks"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","serde::lib::str","",104,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","serde::lib::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"clone","serde::lib::str","",123,{"inputs":[{"name":"self"}],"output":{"name":"linesany"}}],[11,"clone","serde::export::fmt","",143,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"clone","serde::lib::str","",107,{"inputs":[{"name":"self"}],"output":{"name":"rsplitterminator"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"clone","serde::lib::str::pattern","",118,{"inputs":[{"name":"self"}],"output":{"name":"charslicesearcher"}}],[11,"clone","serde::lib::ops","",334,{"inputs":[{"name":"self"}],"output":{"name":"rangefull"}}],[11,"clone","serde::lib::str::pattern","",120,{"inputs":[{"name":"self"}],"output":{"name":"strsearcher"}}],[11,"clone","serde::lib::ops","",76,{"inputs":[{"name":"self"}],"output":{"name":"rangeto"}}],[11,"clone","serde::lib::str","",105,{"inputs":[{"name":"self"}],"output":{"name":"utf8error"}}],[11,"clone","serde::export","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","serde::lib::str","",126,{"inputs":[{"name":"self"}],"output":{"name":"rsplit"}}],[11,"clone","serde::lib::ops","",48,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"clone","serde::lib::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"clone","serde::lib::iter","",10,{"inputs":[{"name":"self"}],"output":{"name":"stepby"}}],[11,"clone","serde::lib","",128,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"clone","serde::lib::iter","",29,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"clone","serde::lib::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"parseboolerror"}}],[11,"clone","serde::lib::iter","",17,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"clone","serde::lib::str","",127,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"clone","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","serde::lib::str","",124,{"inputs":[{"name":"self"}],"output":{"name":"rsplitn"}}],[11,"clone","serde::lib::str::pattern","",119,{"inputs":[{"name":"self"}],"output":{"name":"charpredicatesearcher"}}],[11,"clone","serde::lib::option","",166,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","serde::lib::str","",101,{"inputs":[{"name":"self"}],"output":{"name":"splitn"}}],[11,"partial_cmp","serde::lib::option","",333,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::convert","",331,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::export::fmt","",332,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::ops","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::export","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::export","",216,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","serde::lib","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"deref","serde::lib::mem","",39,null],[11,"cmp","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::option","",333,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export","",216,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::ops","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export::fmt","",332,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"ordering"}}],[11,"cmp","serde::export","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"cmp","serde::lib::convert","",331,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"ordering"}}],[11,"shl_assign","serde::lib","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"shl_assign","","",208,null],[11,"get","serde::lib::ops","",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",68,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",68,null],[11,"get_unchecked_mut","","",68,null],[11,"index","","",68,null],[11,"index_mut","","",68,null],[11,"get","","",66,null],[11,"get_mut","","",66,null],[11,"get_unchecked","","",66,null],[11,"get_unchecked_mut","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"get","","",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",76,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",76,null],[11,"get_unchecked_mut","","",76,null],[11,"index","","",76,null],[11,"index_mut","","",76,null],[11,"get","","",68,null],[11,"get_mut","","",68,null],[11,"get_unchecked","","",68,null],[11,"get_unchecked_mut","","",68,null],[11,"index","","",68,null],[11,"index_mut","","",68,null],[11,"get","","",76,null],[11,"get_mut","","",76,null],[11,"get_unchecked","","",76,null],[11,"get_unchecked_mut","","",76,null],[11,"index","","",76,null],[11,"index_mut","","",76,null],[11,"get","","",77,null],[11,"get_mut","","",77,null],[11,"get_unchecked","","",77,null],[11,"get_unchecked_mut","","",77,null],[11,"index","","",77,null],[11,"index_mut","","",77,null],[11,"get","","",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",77,null],[11,"get_unchecked_mut","","",77,null],[11,"index","","",77,null],[11,"index_mut","","",77,null],[11,"get","","",54,null],[11,"get_mut","","",54,null],[11,"get_unchecked","","",54,null],[11,"get_unchecked_mut","","",54,null],[11,"index","","",54,null],[11,"index_mut","","",54,null],[11,"get","","",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",54,null],[11,"get_unchecked_mut","","",54,null],[11,"index","","",54,null],[11,"index_mut","","",54,null],[11,"get","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",66,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",66,null],[11,"get_unchecked_mut","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"get","","",334,null],[11,"get_mut","","",334,null],[11,"get_unchecked","","",334,null],[11,"get_unchecked_mut","","",334,null],[11,"index","","",334,null],[11,"index_mut","","",334,null],[11,"get","","",334,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_mut","","",334,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_unchecked","","",334,null],[11,"get_unchecked_mut","","",334,null],[11,"index","","",334,null],[11,"index_mut","","",334,null],[11,"bitxor_assign","serde::lib","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"bitxor_assign","","",208,null],[11,"div","","",208,null],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"div","","",208,null],[11,"div","","",208,null],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"div","","",208,null],[11,"div","","",208,null],[11,"div","","",208,null],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"div","","",208,null],[11,"div","","",208,null],[11,"div","","",208,null],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"div","","",208,null],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"div","","",208,null],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"div","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitor_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"bitand_assign","","",208,null],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"product","serde::export","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",167,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"product","serde::lib","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"product","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"assert_receiver_is_total_eq","serde::lib::ops","",54,null],[11,"assert_receiver_is_total_eq","serde::lib::option","",333,null],[11,"assert_receiver_is_total_eq","serde::lib::str::pattern","",114,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",76,null],[11,"assert_receiver_is_total_eq","","",77,null],[11,"assert_receiver_is_total_eq","","",334,null],[11,"assert_receiver_is_total_eq","serde::lib::cmp","",4,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",66,null],[11,"assert_receiver_is_total_eq","serde::export","",163,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",48,null],[11,"assert_receiver_is_total_eq","serde::lib::str","",105,null],[11,"assert_receiver_is_total_eq","serde::export::fmt","",332,null],[11,"assert_receiver_is_total_eq","serde::lib::ops","",68,null],[11,"assert_receiver_is_total_eq","serde::lib::convert","",331,null],[11,"assert_receiver_is_total_eq","serde::lib::str","",111,null],[11,"assert_receiver_is_total_eq","serde::lib","",208,null],[11,"assert_receiver_is_total_eq","serde::export","",167,null],[11,"fmt","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",208,null],[11,"add","","",208,null],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"add","","",208,null],[11,"add","","",208,null],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"add","","",208,null],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"add","","",208,null],[11,"add","","",208,null],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"add","","",208,null],[11,"add","","",208,null],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"add","","",208,null],[11,"add","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"add","","",208,null],[11,"add","","",208,null],[11,"eq","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"manuallydrop"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",129,{"inputs":[{"name":"self"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",76,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::str","",105,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",54,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"eq","","",334,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::str","",111,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"eq","serde::export","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::mem","",38,{"inputs":[{"name":"self"},{"name":"discriminant"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"generatorstate"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::str::pattern","",114,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"eq","serde::export::fmt","",332,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","serde::export","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::option","",333,{"inputs":[{"name":"self"},{"name":"noneerror"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::convert","",331,{"inputs":[{"name":"self"},{"name":"infallible"}],"output":{"name":"bool"}}],[11,"eq","serde::export","",216,{"inputs":[{"name":"self"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"eq","serde::lib::ops","",66,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"eq","serde::lib","",128,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","serde::lib::iter","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::mem","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::cmp","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::mem","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::cmp","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::result","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::result","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::convert","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::ops","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::result","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str::pattern","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::slice","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::option","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::iter","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","serde::lib::option","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",90,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",90,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::option","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::slice","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",122,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::option","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"rfold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::str","",103,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",127,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::result","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",125,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::str","",104,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"rfind","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::slice","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next_back","serde::lib::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::iter","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::ops","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::result","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::slice","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",102,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::result","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::str","",107,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","serde::lib::iter","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",8,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",8,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::slice","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",91,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",91,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::iter","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"rfold","","",7,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"rfind","","",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"rfold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next_back","serde::lib::slice","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","serde::lib::ops","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_result","serde::export","",163,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",163,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",163,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"into_result","","",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ok","","",167,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_error","","",167,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"bitor","serde::lib","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"bitor","","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"bitor","","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"bitor","","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"bitor","","",208,null],[11,"bitor","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitor","","",208,null],[11,"from","serde::export","",163,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","serde::lib","",128,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"from","","",129,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"from_iter","serde::export","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",167,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",163,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"as_ref","serde::lib::slice","",90,null],[11,"rem_assign","serde::lib","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"rem_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"div_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"mul_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"sub_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"add_assign","","",208,null],[11,"write_str","serde::export","",156,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",156,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",156,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","serde::lib","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"neg","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"shr_assign","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sub","","",208,null],[11,"sub","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","serde::export","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",167,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"sum","serde::lib","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"sum","","",208,{"inputs":[{"name":"i"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","serde::lib::iter","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next","serde::lib::slice","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"count","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",85,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::result","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",170,null],[11,"next","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"next","serde::lib::str","",124,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::option","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next","serde::lib::iter","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"try_fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",23,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"try_fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","serde::lib::str","",112,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","serde::lib::ops","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"nth","","",77,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"try_fold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",25,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"try_fold","","",21,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","serde::lib::slice","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::str","",103,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::slice","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"count","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",96,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"try_fold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",20,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","serde::lib::ops","",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"nth","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","serde::lib::slice","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","serde::lib::str","",123,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",123,null],[11,"next","serde::lib::iter","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"try_fold","","",22,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"nth","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"find","","",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"last","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next","serde::lib::str","",101,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::iter","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next","serde::lib::str","",121,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::iter","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"try_fold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",15,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"try_fold","","",17,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",17,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",24,null],[11,"try_fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","","Overflow Behavior",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"nth","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::option","",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next","serde::lib::str","",102,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::slice","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",91,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",91,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",91,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",91,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"count","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::option","",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next","serde::lib::str","",122,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"count","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",122,null],[11,"last","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","serde::lib::slice","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_fold","","",90,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",90,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"position","","",90,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",90,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","serde::lib::iter","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"try_fold","","",8,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",8,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next","serde::lib::iter","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"try_fold","","",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[11,"fold","","",7,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"acc"}}],[11,"find","","",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","",7,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","serde::lib::slice","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","serde::lib::str","",104,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",104,null],[11,"count","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"all","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rposition","","",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","serde::lib::iter","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next","serde::lib::str","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",109,null],[11,"last","","",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next","serde::lib::ops","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"nth","","",66,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::str","",107,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","serde::lib::iter","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"try_fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"count","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_hint","","",24,null],[11,"try_fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",24,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"count","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nth","","",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::iter","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"try_fold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"r"}}],[11,"fold","","",13,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next","serde::lib::slice","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next","serde::lib::iter","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_fold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"r"}}],[11,"fold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"fold"}],"output":{"name":"acc"}}],[11,"next","serde::lib::str","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","serde::lib::result","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"shr","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shr","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"is_empty","serde::lib::slice","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","serde::lib::str","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","serde::lib::iter","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","serde::lib::slice","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","serde::lib::iter","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","serde::lib::slice","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitxor","","",208,null],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitxor","","",208,null],[11,"bitxor","","",208,null],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitxor","","",208,null],[11,"bitxor","","",208,null],[11,"bitxor","","",208,null],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitxor","","",208,null],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitxor","","",208,null],[11,"bitxor","","",208,null],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitxor","","",208,null],[11,"bitxor","","",208,null],[11,"bitxor","","",208,null],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitxor","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"not","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"next_back","serde::lib::str::pattern","",120,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",117,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_reject_back","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash","serde::export","",163,null],[11,"hash","serde::lib::mem","",38,null],[11,"hash","serde::export","",167,null],[11,"hash","serde::lib","",208,null],[11,"hash","serde::lib::convert","",331,null],[11,"hash","serde::export","",216,null],[11,"hash","serde::lib::ops","",54,null],[11,"hash","","",334,null],[11,"hash","","",48,null],[11,"hash","serde::lib::option","",333,null],[11,"hash","serde::lib::ops","",68,null],[11,"hash","serde::lib::mem","",39,null],[11,"hash","serde::lib::cmp","",3,null],[11,"hash","serde::export::fmt","",332,null],[11,"hash","serde::lib::ops","",66,null],[11,"hash","","",77,null],[11,"hash","","",76,null],[11,"rem","serde::lib","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,null],[11,"rem","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"rem","","",208,null],[11,"rem","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"shl","","",208,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"fmt","serde::export::fmt","",332,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::export::fmt","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::convert","",331,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand","serde::lib","",208,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"wrapping"}],"output":{"generics":["u32"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["i128"],"name":"wrapping"}],"output":{"generics":["i128"],"name":"wrapping"}}],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["i16"],"name":"wrapping"}],"output":{"generics":["i16"],"name":"wrapping"}}],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["isize"],"name":"wrapping"}],"output":{"generics":["isize"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"wrapping"}],"output":{"generics":["usize"],"name":"wrapping"}}],[11,"bitand","","",208,null],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"wrapping"}],"output":{"generics":["i32"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["i64"],"name":"wrapping"}],"output":{"generics":["i64"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"wrapping"}],"output":{"generics":["u8"],"name":"wrapping"}}],[11,"bitand","","",208,null],[11,"bitand","","",208,null],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["u128"],"name":"wrapping"}],"output":{"generics":["u128"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"wrapping"}],"output":{"generics":["u16"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"wrapping"}],"output":{"generics":["u64"],"name":"wrapping"}}],[11,"bitand","","",208,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"wrapping"}],"output":{"generics":["i8"],"name":"wrapping"}}],[11,"bitand","","",208,null],[11,"into_iter","serde::export","Returns a consuming iterator over the possibly contained value.",163,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",167,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","",216,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"default","serde::lib","Creates a `Cell<T>`, with the `Default` value for T.",128,{"inputs":[],"output":{"name":"cell"}}],[11,"default","","Creates a `RefCell<T>`, with the `Default` value for T.",129,{"inputs":[],"output":{"name":"refcell"}}],[11,"default","serde::export","Returns [`None`].",163,{"inputs":[],"output":{"name":"option"}}],[11,"default","serde::lib::iter","",32,{"inputs":[],"output":{"name":"empty"}}],[11,"default","serde::lib::mem","",39,{"inputs":[],"output":{"name":"manuallydrop"}}],[11,"default","serde::lib","",208,{"inputs":[],"output":{"name":"wrapping"}}],[11,"default","serde::export::fmt","",332,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","serde::lib","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",171,null],[11,"add","","",171,null],[11,"add","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","Equality for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","Equality for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"eq","","",182,null],[11,"write_str","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",173,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_assign","","",173,null],[11,"add_assign","","",171,null],[11,"add_assign","","",171,null],[11,"partial_cmp","","Partial comparison for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",181,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",182,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",174,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"finalize","","",175,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"to_string","","",173,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_string","","",171,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",174,null],[11,"default","","Creates an empty `String`.",173,{"inputs":[],"output":{"name":"string"}}],[11,"default","","Creates a new `Arc<T>`, with the `Default` value for `T`.",177,{"inputs":[],"output":{"name":"arc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",176,{"inputs":[],"output":{"name":"rc"}}],[11,"default","","Creates an owned Cow<'a, B> with the default value for the contained owned value.",171,{"inputs":[],"output":{"name":"cow"}}],[11,"default","","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",179,{"inputs":[],"output":{"name":"btreeset"}}],[11,"default","","",175,{"inputs":[],"output":{"generics":["str"],"name":"box"}}],[11,"default","","Creates an empty `LinkedList<T>`.",181,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"default","","Creates an empty `Vec<T>`.",174,{"inputs":[],"output":{"name":"vec"}}],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",175,{"inputs":[],"output":{"name":"box"}}],[11,"default","","Creates an empty `BinaryHeap<T>`.",180,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"default","","Creates an empty `BTreeMap<K, V>`.",178,{"inputs":[],"output":{"name":"btreemap"}}],[11,"default","","Creates an empty `VecDeque<T>`.",182,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"default","","",175,{"inputs":[],"output":{"name":"box"}}],[11,"from_str","","",173,{"inputs":[{"name":"str"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"len","","",175,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resume","","",175,{"inputs":[{"name":"self"}],"output":{"name":"generatorstate"}}],[11,"deref","","",176,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"deref","","",174,null],[11,"deref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",171,null],[11,"hash","","",182,null],[11,"hash","","",175,null],[11,"hash","","",174,null],[11,"hash","","",177,null],[11,"hash","","",176,null],[11,"hash","","",178,null],[11,"hash","","",181,null],[11,"hash","","",173,null],[11,"hash","","",179,null],[11,"drop","","",174,null],[11,"drop","","",182,null],[11,"drop","","",181,null],[11,"drop","","",175,null],[11,"drop","","",178,null],[11,"drop","","Drops the `Arc`.",177,null],[11,"drop","","Drops the `Rc`.",176,null],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",181,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","",178,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",180,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Gets an iterator for moving out the `BTreeSet`'s contents.",179,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",182,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",174,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"call_once","","",175,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",175,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"r"}}],[11,"as_mut","","",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",174,null],[11,"as_mut","","",174,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"extend","","",181,null],[11,"extend","","",174,null],[11,"extend","","",179,null],[11,"extend","","",182,null],[11,"extend","","",182,null],[11,"extend","","",179,null],[11,"extend","","",181,null],[11,"extend","","",173,null],[11,"extend","","",180,null],[11,"extend","","",178,null],[11,"extend","","",173,null],[11,"extend","","",180,null],[11,"extend","","",173,null],[11,"extend","","",178,null],[11,"extend","","",173,null],[11,"extend","","",173,null],[11,"extend","","",174,null],[11,"index","","",174,null],[11,"index","","",178,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index","","",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",174,null],[11,"index","","",173,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",174,null],[11,"index","","",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"start","serde::lib::ops","",334,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",334,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"start","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"end","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bound"}}],[11,"index_mut","serde::lib","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",174,null],[11,"index_mut","","",173,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",174,null],[11,"index_mut","","",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",173,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"next","serde::lib::str","",100,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",100,null],[11,"next","serde::lib","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",175,null],[11,"nth","","",175,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"assert_receiver_is_total_eq","","",173,null],[11,"assert_receiver_is_total_eq","","",179,null],[11,"borrow","","",171,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"borrow","","",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",174,null],[11,"borrow","","",177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",176,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",174,null],[11,"borrow_mut","","",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",173,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"cmp","","",175,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"cmp","","",181,{"inputs":[{"name":"self"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"cmp","","",174,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"cmp","","",171,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"cmp","","",182,{"inputs":[{"name":"self"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"cmp","","Comparison for two `Rc`s.",176,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"cmp","","Comparison for two `Arc`s.",177,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"cmp","","",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"cmp","","",178,{"inputs":[{"name":"self"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"finish","","",175,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",175,null],[11,"write_u8","","",175,null],[11,"write_u16","","",175,null],[11,"write_u32","","",175,null],[11,"write_u64","","",175,null],[11,"write_u128","","",175,null],[11,"write_usize","","",175,null],[11,"write_i8","","",175,null],[11,"write_i16","","",175,null],[11,"write_i32","","",175,null],[11,"write_i64","","",175,null],[11,"write_i128","","",175,null],[11,"write_isize","","",175,null],[11,"as_ref","","",174,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",176,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",174,null],[11,"as_ref","","",173,null],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from_iter","","",179,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"from_iter","","",173,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",182,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"from_iter","","",173,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",174,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"from_iter","","",173,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",178,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",181,{"inputs":[{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",173,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",180,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",171,{"inputs":[{"name":"i"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from_iter","","",173,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"linkedlist"}}],[11,"clone","","Makes a clone of the `Rc` pointer.",176,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"vecdeque"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",175,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",175,null],[11,"clone","serde::lib::str","",100,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"clone","serde::lib","",175,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"clone_from","","",171,null],[11,"clone","","Makes a clone of the `Arc` pointer.",177,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone_from","","",174,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone_from","","",173,null],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",180,null],[11,"next_back","","",175,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib::str","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","serde::lib","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",177,null],[11,"from","","",174,null],[11,"from","","",182,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","","",174,null],[11,"from","","",177,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","","",175,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",176,null],[11,"from","","",174,{"inputs":[{"name":"cow"}],"output":{"name":"vec"}}],[11,"from","","",173,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"string"}}],[11,"from","","",171,null],[11,"from","","",174,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"from","","",175,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"arc"}}],[11,"from","","",174,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",180,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","","",173,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"string"}}],[11,"from","","",176,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",171,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","","",175,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"from","","",176,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"from","","",177,{"inputs":[{"name":"vec"}],"output":{"name":"arc"}}],[11,"from","","",174,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from","","",174,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"from","","",173,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","","",176,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"from","","",176,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"rc"}}],[11,"from","","",174,{"inputs":[{"name":"string"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",175,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from","","",171,{"inputs":[{"name":"string"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","","",177,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"from","","",171,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[11,"from","","",177,{"inputs":[{"name":"box"}],"output":{"name":"arc"}}],[11,"from","","",175,null],[11,"from","","",175,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"box"}}],[11,"from","","",176,{"inputs":[{"name":"box"}],"output":{"name":"rc"}}],[11,"clone","serde::lib::str","",106,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"next_back","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"reverse","serde::lib::cmp","Reverses the `Ordering`.",3,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",3,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"peek","serde::lib::iter","Returns a reference to the next() value without advancing the iterator.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","serde::lib::mem","Wrap a value to be manually dropped.",39,{"inputs":[{"name":"t"}],"output":{"name":"manuallydrop"}}],[11,"into_inner","","Extract the value from the ManuallyDrop container.",39,{"inputs":[{"name":"manuallydrop"}],"output":{"name":"t"}}],[11,"drop","","Manually drops the contained value.",39,null],[11,"contains","serde::lib::ops","Returns `true` if `item` is contained in the range.",54,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",66,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",68,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",76,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if `item` is contained in the range.",77,{"inputs":[{"name":"self"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"as_slice","serde::lib::slice","View the underlying data as a subslice of the original data.",90,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",91,null],[11,"valid_up_to","serde::lib::str","Returns the index in the given string up to which valid UTF-8 was verified.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"error_len","","Provide more information about the failure:",105,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get","serde::lib","Returns a copy of the contained value.",128,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `Cell` containing the given value.",128,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",128,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",128,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",128,null],[11,"swap","","Swaps the values of two Cells. Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.",128,null],[11,"replace","","Replaces the contained value, and returns it.",128,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"into_inner","","Unwraps the value.",128,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take","","Takes the value of the cell, leaving `Default::default()` in its place.",128,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new `RefCell` containing `value`.",129,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",129,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"replace","","Replaces the wrapped value with a new one, returning the old value, without deinitializing either one.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Replaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.",129,null],[11,"borrow","","Immutably borrows the wrapped value.",129,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.",129,{"inputs":[{"name":"self"}],"output":{"generics":["ref","borrowerror"],"name":"result"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",129,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if the value is currently borrowed.",129,{"inputs":[{"name":"self"}],"output":{"generics":["refmut","borrowmuterror"],"name":"result"}}],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",129,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",129,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"entry","serde::export::fmt","Adds a new entry to the map output.",142,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",142,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the Arguments structure.",143,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters. The `pieces` array must be at least as long as `fmt` to construct a valid Arguments structure. Also, any `Count` within `fmt` that is `CountIsParam` or `CountIsNextParam` has to point to an argument created with `argumentusize`. However, failing to do so doesn't cause unsafety, but will ignore invalid .",143,null],[11,"estimated_capacity","","Estimates the length of the formatted text.",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"field","","Adds a new field to the generated struct output.",145,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",145,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",153,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",153,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",153,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",155,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",155,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad_integral","serde::export","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",156,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",156,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",156,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",156,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",156,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",156,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",156,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",156,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",156,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",156,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",156,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",156,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",156,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",156,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"entry","serde::export::fmt","Adds a new entry to the set output.",160,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",160,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",160,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_some","serde::export","Returns `true` if the option is a [`Some`] value.",163,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",163,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",163,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",163,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",163,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",163,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",163,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",163,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",163,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",163,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",163,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",163,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",163,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",163,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",163,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",163,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",163,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",163,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",163,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",163,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",163,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"is_ok","","Returns `true` if the result is [`Ok`].",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns `true` if the result is [`Err`].",167,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",167,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",167,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",167,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",167,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",167,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",167,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",167,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",167,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",167,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",167,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",167,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"e"}}],[11,"unwrap_or_default","","Returns the contained value or a default",167,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",167,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"to_mut","serde::lib","Acquires a mutable reference to the owned form of the data.",171,null],[11,"into_owned","","Extracts the owned data.",171,null],[11,"new","","Creates a new empty `String`.",173,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",173,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",173,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["string","fromutf8error"],"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",173,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",173,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",173,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",173,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",173,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",173,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",173,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",173,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",173,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",173,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",173,null],[11,"push","","Appends the given [`char`] to the end of this `String`.",173,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",173,null],[11,"truncate","","Shortens this `String` to the specified length.",173,null],[11,"pop","","Removes the last character from the string buffer and returns it.",173,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",173,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"retain","","Retains only the characters specified by the predicate.",173,null],[11,"insert","","Inserts a character into this `String` at a byte position.",173,null],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",173,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",173,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the string into two at the given index.",173,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[11,"clear","","Truncates this `String`, removing all contents.",173,null],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",173,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"splice","","Creates a splicing iterator that removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",173,null],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",173,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"box"}}],[11,"new","","Constructs a new, empty `Vec<T>`.",174,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",174,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",174,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",174,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",174,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",174,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",174,null],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",174,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",174,null],[11,"as_slice","","Extracts a slice containing the entire vector.",174,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",174,null],[11,"set_len","","Sets the length of a vector.",174,null],[11,"swap_remove","","Removes an element from the vector and returns it.",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",174,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",174,null],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",174,null],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",174,null],[11,"push","","Appends an element to the back of a collection.",174,null],[11,"place_back","","Returns a place for insertion at the back of the `Vec`.",174,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",174,null],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",174,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",174,null],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",174,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",174,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",174,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",174,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",174,null],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",174,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",174,null],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",174,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",174,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":{"name":"splice"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",174,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"new","","Allocates memory on the heap and then places `x` into it.",175,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",175,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",175,null],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",175,{"inputs":[{"name":"box"}],"output":{"name":"nonnull"}}],[11,"into_unique","","",175,{"inputs":[{"name":"box"}],"output":{"name":"unique"}}],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Here, the lifetime `'a` may be chosen to be `'static`.",175,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",175,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",175,{"inputs":[{"name":"self"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"new","","Constructs a new `Rc<T>`.",176,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Returns the contained value, if the `Rc` has exactly one strong reference.",176,{"inputs":[{"name":"rc"}],"output":{"generics":["rc"],"name":"result"}}],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",176,null],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",176,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",176,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",176,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this value.",176,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Rc` or [`Weak`][weak] pointers to the same value.",176,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"ptr_eq","","Returns true if the two `Rc`s point to the same value (not just values that compare as equal).",176,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",176,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downcast","","Attempt to downcast the `Rc<Any>` to a concrete type.",176,{"inputs":[{"name":"self"}],"output":{"generics":["rc","rc"],"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",177,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Returns the contained value, if the `Arc` has exactly one strong reference.",177,{"inputs":[{"name":"arc"}],"output":{"generics":["arc"],"name":"result"}}],[11,"into_raw","","Consumes the `Arc`, returning the wrapped pointer.",177,null],[11,"from_raw","","Constructs an `Arc` from a raw pointer.",177,null],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this value.",177,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this value.",177,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Gets the number of strong (`Arc`) pointers to this value.",177,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"ptr_eq","","Returns true if the two `Arc`s point to the same value (not just values that compare as equal).",177,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"make_mut","","Makes a mutable reference into the given `Arc`.",177,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value, if there are no other `Arc` or [`Weak`][weak] pointers to the same value.",177,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",178,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",178,null],[11,"get","","Returns a reference to the value corresponding to the key.",178,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",178,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",178,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",178,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",178,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",178,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",178,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",178,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",178,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",178,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreemap"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",178,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",178,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",178,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",178,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",178,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",178,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the map contains no elements.",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",179,{"inputs":[],"output":{"name":"btreeset"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",179,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"clear","","Clears the set, removing all values.",179,null],[11,"contains","","Returns `true` if the set contains a value.",179,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",179,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",179,{"inputs":[{"name":"self"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",179,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",179,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",179,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",179,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",179,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",179,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",179,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the number of elements in the set.",179,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no elements.",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",180,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",180,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",180,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",180,{"inputs":[{"name":"self"}],"output":{"generics":["peekmut"],"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",180,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",180,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",180,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",180,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",180,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",180,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",180,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",180,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",180,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",180,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",180,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",180,null],[11,"new","","Creates an empty `LinkedList`.",181,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",181,null],[11,"iter","","Provides a forward iterator.",181,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",181,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",181,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",181,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",181,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",181,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",181,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",181,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",181,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"drainfilter"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",181,{"inputs":[{"name":"self"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",181,{"inputs":[{"name":"self"}],"output":{"name":"backplace"}}],[11,"new","","Creates an empty `VecDeque`.",182,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",182,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",182,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",182,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",182,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",182,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",182,null],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",182,null],[11,"iter","","Returns a front-to-back iterator.",182,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",182,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",182,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",182,null],[11,"len","","Returns the number of elements in the `VecDeque`.",182,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",182,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the `VecDeque`, removing all values.",182,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",182,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push_front","","Prepends an element to the `VecDeque`.",182,null],[11,"push_back","","Appends an element to the back of the `VecDeque`.",182,null],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",182,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the `VecDeque` into two at the given index.",182,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",182,null],[11,"retain","","Retains only the elements specified by the predicate.",182,null],[11,"place_back","","Returns a place for insertion at the back of the `VecDeque`.",182,{"inputs":[{"name":"self"}],"output":{"name":"placeback"}}],[11,"place_front","","Returns a place for insertion at the front of the `VecDeque`.",182,{"inputs":[{"name":"self"}],"output":{"name":"placefront"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",182,null],[11,"is","serde::lib::error","Returns true if the boxed type is the same as `T`",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",183,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",183,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",183,{"inputs":[{"generics":["error"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",183,{"inputs":[{"generics":["error"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",183,{"inputs":[{"generics":["error"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"bind","serde::lib::net","Creates a new `TcpListener` which will be bound to the specified address.",186,{"inputs":[{"name":"a"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",186,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",186,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",186,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this listener.",186,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",186,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",186,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_only_v6","","",186,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"only_v6","","",186,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",186,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",186,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new socket address from an [IPv4 address] and a port number.",187,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",187,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",187,null],[11,"port","","Returns the port number associated with this socket address.",187,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",187,null],[11,"connect","","Opens a TCP connection to a remote host.",188,{"inputs":[{"name":"a"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"connect_timeout","","Opens a TCP connection to a remote host with a timeout.",188,{"inputs":[{"name":"socketaddr"},{"name":"duration"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",188,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",188,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",188,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"generics":["error"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",188,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",188,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",188,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",188,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",188,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",191,{"inputs":[{"name":"a"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"recv_from","","Receives a single datagram message on the socket. On success, returns the number of bytes read and the origin.",191,null],[11,"peek_from","","Receives a single datagram message on the socket, without removing it from the queue. On success, returns the number of bytes read and the origin.",191,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",191,null],[11,"local_addr","","Returns the socket address that this socket was created from.",191,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",191,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",191,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",191,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",191,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",191,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",191,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",191,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",191,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",191,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",191,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",191,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",191,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",191,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["error"],"name":"result"}}],[11,"send","","Sends data on the socket to the remote address to which it is connected.",191,null],[11,"recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",191,null],[11,"peek","","Receives single datagram on the socket from the remote address to which it is connected, without removing the message from input queue. On success, returns the number of bytes peeked.",191,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",191,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new socket address from an [IP address] and a port number.",194,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",194,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",194,null],[11,"port","","Returns the port number associated with this socket address.",194,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",194,null],[11,"is_ipv4","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv4 address], and [`false`] otherwise.",194,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if the [IP address] in this `SocketAddr` is an [IPv6 address], and [`false`] otherwise.",194,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",196,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",196,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",196,{"inputs":[],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",196,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",196,{"inputs":[{"name":"self"}],"output":{"generics":["ipv6multicastscope"],"name":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",196,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",196,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",197,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",197,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",197,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",197,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",197,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",197,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",197,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","Creates a new socket address from an [IPv6 address], a 16-bit port number, and the `flowinfo` and `scope_id` fields.",198,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",198,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Changes the IP address associated with this socket address.",198,null],[11,"port","","Returns the port number associated with this socket address.",198,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_port","","Changes the port number associated with this socket address.",198,null],[11,"flowinfo","","Returns the flow information associated with this address.",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Changes the flow information associated with this socket address.",198,null],[11,"scope_id","","Returns the scope ID associated with this address.",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",198,null],[11,"new","serde::lib","Creates an empty `HashMap`.",199,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",199,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashmap"}}],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",199,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",199,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",199,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",199,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",199,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",199,null],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",199,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",199,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",199,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",199,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",199,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",199,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",199,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",199,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",199,null],[11,"get","","Returns a reference to the value corresponding to the key.",199,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",199,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",199,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",199,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",199,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",199,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",199,null],[11,"new","","Creates an empty `HashSet`.",200,{"inputs":[],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",200,{"inputs":[{"name":"usize"}],"output":{"generics":["randomstate"],"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",200,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",200,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",200,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",200,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",200,null],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",200,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",200,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",200,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",200,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",200,null],[11,"contains","","Returns `true` if the set contains a value.",200,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",200,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",200,{"inputs":[{"name":"self"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",200,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",200,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",200,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",200,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"retain","","Retains only the elements specified by the predicate.",200,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",202,{"inputs":[{"name":"t"}],"output":{"generics":["cstring","nulerror"],"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string by consuming a byte vector, without checking for interior 0 bytes.",202,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C via [`into_raw`].",202,null],[11,"into_raw","","Consumes the `CString` and transfers ownership of the string to a C caller.",202,null],[11,"into_string","","Converts the `CString` into a [`String`] if it contains valid UTF-8 data.",202,{"inputs":[{"name":"self"}],"output":{"generics":["string","intostringerror"],"name":"result"}}],[11,"into_bytes","","Consumes the `CString` and returns the underlying byte buffer.",202,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the [`into_bytes`] function except that the returned vector includes the trailing nul terminator.",202,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",202,null],[11,"as_bytes_with_nul","","Equivalent to the [`as_bytes`] function except that the returned slice includes the trailing nul terminator.",202,null],[11,"as_c_str","","Extracts a [`CStr`] slice containing the entire string.",202,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"into_boxed_c_str","","Converts this `CString` into a boxed [`CStr`].",202,{"inputs":[{"name":"self"}],"output":{"generics":["cstr"],"name":"box"}}],[11,"new","","Constructs a new empty `OsString`.",204,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an [`OsStr`] slice.",204,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a [`String`] if it contains valid Unicode data.",204,{"inputs":[{"name":"self"}],"output":{"generics":["string","osstring"],"name":"result"}}],[11,"push","","Extends the string with the given [`&OsStr`] slice.",204,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",204,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",204,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",204,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted in the given `OsString`.",204,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the given `OsString`. Does nothing if the capacity is already sufficient.",204,null],[11,"shrink_to_fit","","Shrinks the capacity of the `OsString` to match its length.",204,null],[11,"into_boxed_os_str","","Converts this `OsString` into a boxed [`OsStr`].",204,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"box"}}],[11,"new","","Allocates an empty `PathBuf`.",210,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a [`Path`] slice.",210,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",210,null],[11,"pop","","Truncates `self` to [`self.parent`].",210,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates [`self.file_name`] to `file_name`.",210,null],[11,"set_extension","","Updates [`self.extension`] to `extension`.",210,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal [`OsString`] storage.",210,{"inputs":[{"name":"self"}],"output":{"name":"osstring"}}],[11,"into_boxed_path","","Converts this `PathBuf` into a [boxed][`Box`] [`Path`].",210,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"box"}}],[11,"new","","Creates a new `Duration` from the specified number of whole seconds and additional nanoseconds.",211,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of whole seconds.",211,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",211,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_micros","","Creates a new `Duration` from the specified number of microseconds.",211,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_nanos","","Creates a new `Duration` from the specified number of nanoseconds.",211,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds contained by this `Duration`.",211,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subsec_millis","","Returns the fractional part of this `Duration`, in milliseconds.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_micros","","Returns the fractional part of this `Duration`, in microseconds.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"subsec_nanos","","Returns the fractional part of this `Duration`, in nanoseconds.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add","","Checked `Duration` addition. Computes `self + other`, returning [`None`] if overflow occurred.",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Checked `Duration` subtraction. Computes `self - other`, returning [`None`] if the result would be negative or if overflow occurred.",211,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_mul","","Checked `Duration` multiplication. Computes `self * other`, returning [`None`] if overflow occurred.",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_div","","Checked `Duration` division. Computes `self / other`, returning [`None`] if `other == 0`.",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["duration"],"name":"option"}}],[11,"now","","Returns the system time corresponding to \"now\".",212,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",212,{"inputs":[{"name":"self"},{"name":"systemtime"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",212,{"inputs":[{"name":"self"}],"output":{"generics":["duration","systemtimeerror"],"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",213,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",213,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard","poisonerror"],"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",213,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard","trylockerror"],"name":"result"}}],[11,"is_poisoned","","Determines whether the mutex is poisoned.",213,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",213,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",213,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",214,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",214,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard","poisonerror"],"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",214,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard","trylockerror"],"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",214,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard","poisonerror"],"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",214,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard","trylockerror"],"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",214,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",214,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",214,{"inputs":[{"name":"self"}],"output":{"generics":["poisonerror"],"name":"result"}}]],"paths":[[8,"PartialEq"],[8,"Eq"],[3,"AssertParamIsEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"StepBy"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[8,"Extend"],[8,"DoubleEndedIterator"],[8,"Product"],[3,"Repeat"],[3,"Once"],[8,"Sum"],[3,"Empty"],[8,"Iterator"],[8,"IntoIterator"],[8,"ExactSizeIterator"],[8,"FromIterator"],[8,"Step"],[3,"Discriminant"],[19,"ManuallyDrop"],[8,"Generator"],[8,"DivAssign"],[8,"Try"],[8,"ShrAssign"],[8,"FnMut"],[8,"Index"],[8,"Place"],[8,"Deref"],[4,"GeneratorState"],[8,"BoxPlace"],[8,"Not"],[8,"SubAssign"],[8,"BitXorAssign"],[8,"Shl"],[3,"RangeFrom"],[8,"MulAssign"],[8,"Rem"],[8,"Boxed"],[8,"BitOrAssign"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"Drop"],[8,"FnOnce"],[8,"Shr"],[8,"InPlace"],[8,"Sub"],[3,"Range"],[8,"Div"],[3,"RangeToInclusive"],[8,"BitOr"],[8,"Placer"],[8,"IndexMut"],[8,"Mul"],[8,"Add"],[8,"Fn"],[8,"BitAnd"],[3,"RangeTo"],[3,"RangeInclusive"],[8,"BitXor"],[8,"DerefMut"],[8,"RemAssign"],[8,"Neg"],[8,"ShlAssign"],[8,"SliceConcatExt"],[3,"SplitN"],[3,"ExactChunks"],[3,"Split"],[3,"ChunksMut"],[3,"RSplitNMut"],[8,"SliceIndex"],[3,"Iter"],[3,"IterMut"],[3,"SplitMut"],[3,"SplitNMut"],[3,"ExactChunksMut"],[3,"RSplitMut"],[3,"Windows"],[3,"RSplitN"],[3,"RSplit"],[3,"Chunks"],[3,"EncodeUtf16"],[3,"SplitN"],[3,"Matches"],[3,"Split"],[3,"Bytes"],[3,"Utf8Error"],[3,"SplitWhitespace"],[3,"RSplitTerminator"],[3,"RMatchIndices"],[3,"CharIndices"],[8,"FromStr"],[3,"ParseBoolError"],[3,"SplitTerminator"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"MatchIndices"],[3,"Chars"],[3,"LinesAny"],[3,"RSplitN"],[3,"RMatches"],[3,"RSplit"],[3,"Lines"],[3,"Cell"],[3,"RefCell"],[8,"Clone"],[3,"AssertParamIsClone"],[3,"AssertParamIsCopy"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"LowerExp"],[8,"Debug"],[3,"DebugMap"],[3,"Arguments"],[8,"UpperExp"],[3,"DebugStruct"],[8,"Octal"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"ArgumentV1"],[3,"DebugList"],[8,"LowerHex"],[3,"DebugTuple"],[3,"Formatter"],[8,"Display"],[8,"Pointer"],[8,"Write"],[3,"DebugSet"],[8,"UpperHex"],[8,"Binary"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Cow"],[8,"ToOwned"],[3,"String"],[3,"Vec"],[3,"Box"],[3,"Rc"],[3,"Arc"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"BinaryHeap"],[3,"LinkedList"],[3,"VecDeque"],[8,"Error"],[4,"Shutdown"],[3,"LookupHost"],[3,"TcpListener"],[3,"SocketAddrV4"],[3,"TcpStream"],[8,"ToSocketAddrs"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[4,"IpAddr"],[3,"Ipv6Addr"],[3,"Ipv4Addr"],[3,"SocketAddrV6"],[3,"HashMap"],[3,"HashSet"],[3,"CStr"],[3,"CString"],[3,"OsStr"],[3,"OsString"],[8,"BuildHasher"],[8,"Hash"],[8,"Write"],[3,"Wrapping"],[3,"Path"],[3,"PathBuf"],[3,"Duration"],[3,"SystemTime"],[3,"Mutex"],[3,"RwLock"],[3,"Impossible"],[3,"PhantomData"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[8,"LenHint"],[3,"OneOf"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"ExpectedInSeq"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"PairDeserializer"],[3,"PairVisitor"],[3,"ExpectedInMap"],[3,"MapAccessDeserializer"],[3,"UnitOnly"],[8,"Pair"],[8,"FromPrimitive"],[3,"IgnoredAny"],[3,"StringInPlaceVisitor"],[3,"OptionVisitor"],[3,"PhantomDataVisitor"],[3,"ArrayVisitor"],[3,"ArrayInPlaceVisitor"],[4,"OsStringKind"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"CharVisitor"],[3,"StringVisitor"],[3,"StrVisitor"],[3,"BytesVisitor"],[3,"CStringVisitor"],[3,"PathVisitor"],[3,"PathBufVisitor"],[3,"OsStringVisitor"],[3,"Encode"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"TaggedSerializer"],[4,"Unsupported"],[3,"SerializeTupleVariantAsMapValue"],[3,"SerializeStructVariantAsMapValue"],[3,"ContentSerializer"],[3,"SerializeSeq"],[3,"SerializeTuple"],[3,"SerializeTupleStruct"],[3,"SerializeTupleVariant"],[3,"SerializeMap"],[3,"SerializeStruct"],[3,"SerializeStructVariant"],[4,"Content"],[3,"Error"],[3,"ContentDeserializer"],[3,"ContentRefDeserializer"],[3,"InternallyTaggedUnitVisitor"],[3,"TagContentOtherFieldVisitor"],[3,"TagOrContentFieldVisitor"],[3,"TaggedContentVisitor"],[3,"UntaggedUnitVisitor"],[3,"StrDeserializer"],[3,"BytesDeserializer"],[3,"InPlaceSeed"],[4,"Content"],[4,"TagContentOtherField"],[4,"TagOrContentField"],[3,"ContentVisitor"],[3,"TagOrContentVisitor"],[3,"TaggedContent"],[3,"EnumDeserializer"],[3,"VariantDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"EnumRefDeserializer"],[3,"VariantRefDeserializer"],[3,"SeqRefDeserializer"],[3,"MapRefDeserializer"],[4,"TagOrContent"],[8,"IdentifierDeserializer"],[4,"Infallible"],[3,"Error"],[3,"NoneError"],[3,"RangeFull"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[0,"bound","","",null,null],[5,"without_defaults","serde_derive::bound","",null,{"inputs":[{"name":"generics"}],"output":{"name":"generics"}}],[5,"with_where_predicates","","",null,null],[5,"with_where_predicates_from_fields","","",null,{"inputs":[{"name":"container"},{"name":"generics"},{"name":"f"}],"output":{"name":"generics"}}],[5,"with_bound","","",null,{"inputs":[{"name":"container"},{"name":"generics"},{"name":"f"},{"name":"path"}],"output":{"name":"generics"}}],[5,"with_self_bound","","",null,{"inputs":[{"name":"container"},{"name":"generics"},{"name":"path"}],"output":{"name":"generics"}}],[5,"with_lifetime_bound","","",null,{"inputs":[{"name":"generics"},{"name":"str"}],"output":{"name":"generics"}}],[5,"type_of_item","","",null,{"inputs":[{"name":"container"}],"output":{"name":"ty"}}],[0,"fragment","serde_derive","",null,null],[3,"Expr","serde_derive::fragment","Interpolate a fragment in place of an expression. This involves surrounding Block fragments in curly braces.",null,null],[12,"0","","",0,null],[3,"Stmts","","Interpolate a fragment as the statements of a block.",null,null],[12,"0","","",1,null],[3,"Match","","Interpolate a fragment as the value part of a `match` expression. This involves putting a comma after expressions and curly braces around blocks.",null,null],[12,"0","","",2,null],[4,"Fragment","","",null,null],[13,"Expr","","Tokens that can be used as an expression.",3,null],[13,"Block","","Tokens that can be used inside a block. The surrounding curly braces are not part of these tokens.",3,null],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[0,"ser","serde_derive","",null,null],[3,"Parameters","serde_derive::ser","",null,null],[12,"self_var","","Variable holding the value being serialized. Either `self` for local types or `__self` for remote types.",4,null],[12,"this","","Path to the type the impl is for. Either a single `Ident` for local types or `some::remote::Ident` for remote types. Does not include generic parameters.",4,null],[12,"generics","","Generics including any explicit and inferred bounds for the impl.",4,null],[12,"is_remote","","Type has a `serde(remote = \"...\")` attribute.",4,null],[4,"TupleVariant","","",null,null],[13,"ExternallyTagged","","",5,null],[12,"type_name","serde_derive::ser::TupleVariant","",5,null],[12,"variant_index","","",5,null],[12,"variant_name","","",5,null],[13,"Untagged","serde_derive::ser","",5,null],[4,"StructVariant","","",null,null],[13,"ExternallyTagged","","",6,null],[12,"variant_index","serde_derive::ser::StructVariant","",6,null],[12,"variant_name","","",6,null],[13,"InternallyTagged","serde_derive::ser","",6,null],[12,"tag","serde_derive::ser::StructVariant","",6,null],[12,"variant_name","","",6,null],[13,"Untagged","serde_derive::ser","",6,null],[5,"expand_derive_serialize","","",null,{"inputs":[{"name":"deriveinput"}],"output":{"generics":["tokens","string"],"name":"result"}}],[5,"precondition","","",null,{"inputs":[{"name":"ctxt"},{"name":"container"}],"output":null}],[5,"build_generics","","",null,{"inputs":[{"name":"container"}],"output":{"name":"generics"}}],[5,"needs_serialize_bound","","",null,{"inputs":[{"name":"field"},{"generics":["variant"],"name":"option"}],"output":{"name":"bool"}}],[5,"serialize_body","","",null,{"inputs":[{"name":"container"},{"name":"parameters"}],"output":{"name":"fragment"}}],[5,"serialize_into","","",null,{"inputs":[{"name":"parameters"},{"name":"ty"}],"output":{"name":"fragment"}}],[5,"serialize_unit_struct","","",null,{"inputs":[{"name":"container"}],"output":{"name":"fragment"}}],[5,"serialize_newtype_struct","","",null,{"inputs":[{"name":"parameters"},{"name":"field"},{"name":"container"}],"output":{"name":"fragment"}}],[5,"serialize_tuple_struct","","",null,null],[5,"serialize_struct","","",null,null],[5,"serialize_enum","","",null,null],[5,"serialize_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"u32"},{"name":"container"}],"output":{"name":"tokens"}}],[5,"serialize_externally_tagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"u32"},{"name":"container"}],"output":{"name":"fragment"}}],[5,"serialize_internally_tagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"container"},{"name":"str"}],"output":{"name":"fragment"}}],[5,"serialize_adjacently_tagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"container"},{"name":"str"},{"name":"str"}],"output":{"name":"fragment"}}],[5,"serialize_untagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"container"}],"output":{"name":"fragment"}}],[5,"serialize_tuple_variant","","",null,null],[5,"serialize_struct_variant","","",null,null],[5,"serialize_tuple_struct_visitor","","",null,null],[5,"serialize_struct_visitor","","",null,null],[5,"wrap_serialize_field_with","","",null,{"inputs":[{"name":"parameters"},{"name":"ty"},{"name":"path"},{"name":"tokens"}],"output":{"name":"tokens"}}],[5,"wrap_serialize_variant_with","","",null,{"inputs":[{"name":"parameters"},{"name":"path"},{"name":"variant"}],"output":{"name":"tokens"}}],[5,"wrap_serialize_with","","",null,null],[5,"mut_if","","",null,{"inputs":[{"name":"bool"}],"output":{"generics":["tokens"],"name":"option"}}],[5,"get_field","","",null,{"inputs":[{"name":"parameters"},{"name":"field"},{"name":"i"}],"output":{"name":"tokens"}}],[11,"new","","",4,{"inputs":[{"name":"container"}],"output":{"name":"self"}}],[11,"type_name","","Type name to use in error messages and `&'static str` arguments to various Serializer methods.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"de","serde_derive","",null,null],[3,"Parameters","serde_derive::de","",null,null],[12,"local","","Name of the type the `derive` is on.",7,null],[12,"this","","Path to the type the impl is for. Either a single `Ident` for local types or `some::remote::Ident` for remote types. Does not include generic parameters.",7,null],[12,"generics","","Generics including any explicit and inferred bounds for the impl.",7,null],[12,"borrowed","","Lifetimes borrowed from the deserializer. These will become bounds on the `'de` lifetime of the deserializer.",7,null],[12,"has_getter","","At least one field has a serde(getter) attribute, implying that the remote type has a private field.",7,null],[3,"DeImplGenerics","","",null,null],[12,"0","","",8,null],[3,"DeTyGenerics","","",null,null],[12,"0","","",9,null],[4,"BorrowedLifetimes","","",null,null],[13,"Borrowed","","",10,null],[13,"Static","","",10,null],[4,"Untagged","","",null,null],[13,"Yes","","",11,null],[13,"No","","",11,null],[5,"expand_derive_deserialize","","",null,{"inputs":[{"name":"deriveinput"}],"output":{"generics":["tokens","string"],"name":"result"}}],[5,"build_generics","","",null,{"inputs":[{"name":"container"},{"name":"borrowedlifetimes"}],"output":{"name":"generics"}}],[5,"needs_deserialize_bound","","",null,{"inputs":[{"name":"field"},{"generics":["variant"],"name":"option"}],"output":{"name":"bool"}}],[5,"requires_default","","",null,{"inputs":[{"name":"field"},{"generics":["variant"],"name":"option"}],"output":{"name":"bool"}}],[5,"borrowed_lifetimes","","",null,{"inputs":[{"name":"container"}],"output":{"name":"borrowedlifetimes"}}],[5,"deserialize_body","","",null,{"inputs":[{"name":"container"},{"name":"parameters"}],"output":{"name":"fragment"}}],[5,"deserialize_in_place_body","","",null,{"inputs":[{"name":"container"},{"name":"parameters"}],"output":{"generics":["stmts"],"name":"option"}}],[5,"deserialize_from","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"fragment"}}],[5,"deserialize_unit_struct","","",null,{"inputs":[{"name":"parameters"},{"name":"container"}],"output":{"name":"fragment"}}],[5,"deserialize_tuple","","",null,null],[5,"deserialize_seq","","",null,null],[5,"deserialize_newtype_struct","","",null,{"inputs":[{"name":"tokens"},{"name":"parameters"},{"name":"field"}],"output":{"name":"tokens"}}],[5,"deserialize_struct","","",null,null],[5,"deserialize_enum","","",null,null],[5,"deserialize_externally_tagged_enum","","",null,null],[5,"deserialize_internally_tagged_enum","","",null,null],[5,"deserialize_adjacently_tagged_enum","","",null,null],[5,"deserialize_untagged_enum","","",null,null],[5,"deserialize_externally_tagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"container"}],"output":{"name":"fragment"}}],[5,"deserialize_internally_tagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"container"},{"name":"tokens"}],"output":{"name":"fragment"}}],[5,"deserialize_untagged_variant","","",null,{"inputs":[{"name":"parameters"},{"name":"variant"},{"name":"container"},{"name":"tokens"}],"output":{"name":"fragment"}}],[5,"deserialize_externally_tagged_newtype_variant","","",null,{"inputs":[{"name":"ident"},{"name":"parameters"},{"name":"field"}],"output":{"name":"fragment"}}],[5,"deserialize_untagged_newtype_variant","","",null,{"inputs":[{"name":"ident"},{"name":"parameters"},{"name":"field"},{"name":"tokens"}],"output":{"name":"fragment"}}],[5,"deserialize_generated_identifier","","",null,{"inputs":[{"name":"vec"},{"name":"container"},{"name":"bool"}],"output":{"name":"fragment"}}],[5,"deserialize_custom_identifier","","",null,null],[5,"deserialize_identifier","","",null,null],[5,"deserialize_struct_visitor","","",null,null],[5,"deserialize_map","","",null,null],[5,"field_i","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"ident"}}],[5,"wrap_deserialize_with","","This function wraps the expression in `#[serde(deserialize_with = \"...\")]` in a trait to prevent it from accessing the internal `Deserialize` state.",null,null],[5,"wrap_deserialize_field_with","","",null,null],[5,"wrap_deserialize_variant_with","","",null,null],[5,"expr_is_missing","","",null,{"inputs":[{"name":"field"},{"name":"container"}],"output":{"name":"fragment"}}],[5,"split_with_de_lifetime","","",null,null],[11,"new","","",7,{"inputs":[{"name":"container"}],"output":{"name":"self"}}],[11,"type_name","","Type name to use in error messages and `&'static str` arguments to various Deserializer methods.",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"de_lifetime","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"de_lifetime_def","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["lifetimedef"],"name":"option"}}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}]],"paths":[[3,"Expr"],[3,"Stmts"],[3,"Match"],[4,"Fragment"],[3,"Parameters"],[4,"TupleVariant"],[4,"StructVariant"],[3,"Parameters"],[3,"DeImplGenerics"],[3,"DeTyGenerics"],[4,"BorrowedLifetimes"],[4,"Untagged"]]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[12,"errors","","",0,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"body","","",1,null],[12,"generics","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"style","","",2,null],[12,"fields","","",2,null],[3,"Field","","",null,null],[12,"ident","","",3,null],[12,"attrs","","",3,null],[12,"ty","","",3,null],[4,"Body","","",null,null],[13,"Enum","","",4,null],[13,"Struct","","",4,null],[4,"Style","","",null,null],[13,"Struct","","",5,null],[13,"Tuple","","",5,null],[13,"Newtype","","",5,null],[13,"Unit","","",5,null],[5,"enum_from_ast","","",null,null],[5,"struct_from_ast","","",null,null],[5,"fields_from_ast","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",1,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"has_getter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Attr","serde_derive_internals::attr","",null,null],[12,"cx","","",6,null],[12,"name","","",6,null],[12,"value","","",6,null],[3,"BoolAttr","","",null,null],[12,"0","","",7,null],[3,"Name","","",null,null],[12,"serialize","","",8,null],[12,"deserialize","","",8,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[12,"name","","",9,null],[12,"deny_unknown_fields","","",9,null],[12,"default","","",9,null],[12,"rename_all","","",9,null],[12,"ser_bound","","",9,null],[12,"de_bound","","",9,null],[12,"tag","","",9,null],[12,"from_type","","",9,null],[12,"into_type","","",9,null],[12,"remote","","",9,null],[12,"identifier","","",9,null],[3,"Variant","","Represents variant attribute information",null,null],[12,"name","","",10,null],[12,"ser_renamed","","",10,null],[12,"de_renamed","","",10,null],[12,"rename_all","","",10,null],[12,"skip_deserializing","","",10,null],[12,"skip_serializing","","",10,null],[12,"other","","",10,null],[12,"serialize_with","","",10,null],[12,"deserialize_with","","",10,null],[12,"borrow","","",10,null],[3,"Field","","Represents field attribute information",null,null],[12,"name","","",11,null],[12,"ser_renamed","","",11,null],[12,"de_renamed","","",11,null],[12,"skip_serializing","","",11,null],[12,"skip_deserializing","","",11,null],[12,"skip_serializing_if","","",11,null],[12,"default","","",11,null],[12,"serialize_with","","",11,null],[12,"deserialize_with","","",11,null],[12,"ser_bound","","",11,null],[12,"de_bound","","",11,null],[12,"borrowed_lifetimes","","",11,null],[12,"getter","","",11,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",12,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",12,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",12,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",12,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",12,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",12,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",12,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",12,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",12,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",13,null],[13,"Internal","","`#[serde(tag = \"type\")]`",13,null],[12,"tag","serde_derive_internals::attr::EnumTag","",13,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",13,null],[12,"tag","serde_derive_internals::attr::EnumTag","",13,null],[12,"content","","",13,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",13,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",14,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",14,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",14,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",15,null],[13,"Default","","The default is given by `std::default::Default::default()`.",15,null],[13,"Path","","The default is given by this function.",15,null],[5,"decide_tag","","",null,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"},{"name":"boolattr"},{"generics":["string"],"name":"attr"},{"generics":["string"],"name":"attr"}],"output":{"name":"enumtag"}}],[5,"decide_identifier","","",null,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"},{"name":"boolattr"},{"name":"boolattr"}],"output":{"name":"identifier"}}],[5,"get_ser_and_de","","",null,null],[5,"get_renames","","",null,null],[5,"get_where_predicates","","",null,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"generics":["vec"],"name":"option"}}],[5,"get_string_from_lit","","",null,{"inputs":[{"name":"ctxt"},{"name":"str"},{"name":"str"},{"name":"lit"}],"output":{"generics":["string"],"name":"result"}}],[5,"parse_lit_into_path","","",null,{"inputs":[{"name":"ctxt"},{"name":"str"},{"name":"lit"}],"output":{"generics":["path"],"name":"result"}}],[5,"parse_lit_into_where","","",null,{"inputs":[{"name":"ctxt"},{"name":"str"},{"name":"str"},{"name":"lit"}],"output":{"generics":["vec"],"name":"result"}}],[5,"parse_lit_into_ty","","",null,{"inputs":[{"name":"ctxt"},{"name":"str"},{"name":"lit"}],"output":{"generics":["ty"],"name":"result"}}],[5,"parse_lit_into_lifetimes","","",null,{"inputs":[{"name":"ctxt"},{"name":"str"},{"name":"lit"}],"output":{"generics":["btreeset"],"name":"result"}}],[5,"is_cow","","",null,{"inputs":[{"name":"ty"},{"name":"str"}],"output":{"name":"bool"}}],[5,"is_rptr","","",null,{"inputs":[{"name":"ty"},{"name":"str"}],"output":{"name":"bool"}}],[5,"borrowable_lifetimes","","",null,{"inputs":[{"name":"ctxt"},{"name":"str"},{"name":"ty"}],"output":{"generics":["btreeset"],"name":"result"}}],[5,"collect_lifetimes","","",null,{"inputs":[{"name":"ty"},{"name":"btreeset"}],"output":null}],[6,"SerAndDe","","",null,null],[11,"none","","",6,{"inputs":[{"name":"ctxt"},{"name":"str"}],"output":{"name":"self"}}],[11,"set","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"set_opt","","",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_if_none","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"get","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"none","","",7,{"inputs":[{"name":"ctxt"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_true","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",9,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",9,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",9,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"into_type","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"remote","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"identifier","","",9,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",10,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",10,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",11,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"generics":["variant"],"name":"option"},{"name":"default"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","","",11,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"ser_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",11,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[0,"ctxt","serde_derive_internals","",null,null],[3,"Ctxt","serde_derive_internals::ctxt","",null,null],[12,"errors","","",0,null],[11,"default","serde_derive_internals","",0,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[0,"case","","",null,null],[4,"RenameRule","serde_derive_internals::case","",null,null],[13,"None","","Don't apply a default rename rule.",12,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",12,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",12,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",12,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",12,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",12,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",12,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",12,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",12,null],[11,"fmt","serde_derive_internals::attr","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"check","serde_derive_internals","",null,null],[5,"check","serde_derive_internals::check","Cross-cutting checks that require looking at more than a single attrs object. Simpler checks should happen when parsing and building the attrs.",null,{"inputs":[{"name":"ctxt"},{"name":"container"}],"output":null}],[5,"check_getter","","Getters are only allowed inside structs (not enums) with the `remote` attribute.",null,{"inputs":[{"name":"ctxt"},{"name":"container"}],"output":null}],[5,"check_identifier","","The `other` attribute must be used at most once and it must be the last variant of an enum that has the `field_identifier` attribute.",null,{"inputs":[{"name":"ctxt"},{"name":"container"}],"output":null}],[5,"check_variant_skip_attrs","","Skip-(de)serializing attributes are not allowed on variants marked (de)serialize_with.",null,{"inputs":[{"name":"ctxt"},{"name":"container"}],"output":null}]],"paths":[[3,"Ctxt"],[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[3,"Attr"],[3,"BoolAttr"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[12,"read","","",0,null],[12,"str_buf","","",0,null],[12,"remaining_depth","","",0,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[12,"de","","",1,null],[12,"offset","","",1,null],[12,"output","","",1,null],[12,"lifetime","","",1,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[12,"err","","This `Box` allows us to keep the size of `Error` as small as possible. A larger `Error` type was substantially slower due to all the functions that pass around `Result<T, Error>`.",2,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[12,"writer","","",3,null],[12,"formatter","","",3,null],[3,"Map","","Represents a JSON key/value type.",null,null],[12,"map","","",4,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[12,"n","","",5,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",6,null],[13,"Bool","","Represents a JSON boolean.",6,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",6,null],[13,"String","","Represents a JSON string.",6,null],[13,"Array","","Represents a JSON array.",6,null],[13,"Object","","Represents a JSON object.",6,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[0,"macros","","",null,null],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[12,"iter","","",7,null],[12,"ch","","Temporary storage of peeked byte.",7,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[12,"slice","","",8,null],[12,"index","","Index of the next byte that will be returned by next() or peek().",8,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[12,"delegate","","",9,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[12,"read","","",0,null],[12,"str_buf","","",0,null],[12,"remaining_depth","","",0,null],[3,"SeqAccess","","",null,null],[12,"de","","",10,null],[12,"first","","",10,null],[3,"MapAccess","","",null,null],[12,"de","","",11,null],[12,"first","","",11,null],[3,"VariantAccess","","",null,null],[12,"de","","",12,null],[3,"UnitVariantAccess","","",null,null],[12,"de","","",13,null],[3,"MapKey","","Only deserialize from this after peeking a '\"' byte! Otherwise it may deserialize invalid JSON successfully.",null,null],[12,"de","","",14,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[12,"de","","",1,null],[12,"offset","","",1,null],[12,"output","","",1,null],[12,"lifetime","","",1,null],[4,"Number","","",null,null],[13,"F64","","",15,null],[13,"U64","","",15,null],[13,"I64","","",15,null],[5,"from_trait","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[7,"POW10","","",null,null],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[10,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"peek","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"discard","","Only valid after a call to peek(). Discards the peeked byte.",16,{"inputs":[{"name":"self"}],"output":null}],[10,"position","","Position of the most recent call to next().",16,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[10,"peek_position","","Position of the most recent call to peek().",16,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[10,"byte_offset","","Offset from the beginning of the input to the next byte that would be returned by next() or peek().",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"parse_str","","Assumes the previous byte was a quotation mark. Parses a JSON-escaped string until the next quotation mark using the given scratch space if necessary. The scratch space is initially empty.",16,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[10,"parse_str_raw","","Assumes the previous byte was a quotation mark. Parses a JSON-escaped string until the next quotation mark using the given scratch space if necessary. The scratch space is initially empty.",16,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[10,"ignore_str","","Assumes the previous byte was a quotation mark. Parses a JSON-escaped string until the next quotation mark but discards the data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",0,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",0,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",0,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"visit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"invalid_type","","",15,{"inputs":[{"name":"self"},{"name":"expected"}],"output":{"name":"error"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",0,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"peek","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek_or_null","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"eat_char","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"next_char","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_char_or_null","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"error","","Error caused by a byte from next_char().",0,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"error"}}],[11,"peek_error","","Error caused by a byte from peek().",0,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"error"}}],[11,"parse_whitespace","","Returns the first non-whitespace byte without consuming it, or `None` if EOF is encountered.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek_invalid_type","","",0,{"inputs":[{"name":"self"},{"name":"expected"}],"output":{"name":"error"}}],[11,"deserialize_number","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fix_position","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"error"}}],[11,"parse_ident","","",0,null],[11,"parse_integer","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["number"],"name":"result"}}],[11,"parse_long_integer","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"},{"name":"i32"}],"output":{"generics":["f64"],"name":"result"}}],[11,"parse_number","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"}],"output":{"generics":["number"],"name":"result"}}],[11,"parse_decimal","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"},{"name":"i32"}],"output":{"generics":["f64"],"name":"result"}}],[11,"parse_exponent","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"},{"name":"i32"}],"output":{"generics":["f64"],"name":"result"}}],[11,"parse_exponent_overflow","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"},{"name":"bool"}],"output":{"generics":["f64"],"name":"result"}}],[11,"f64_from_parts","","",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"},{"name":"i32"}],"output":{"generics":["f64"],"name":"result"}}],[11,"parse_object_colon","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end_seq","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end_map","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_value","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_integer","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_decimal","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_exponent","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_seq","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ignore_map","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"deserializer"}],"output":{"name":"self"}}],[11,"next_element_seed","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"deserializer"}],"output":{"name":"self"}}],[11,"next_key_seed","","",11,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[{"name":"deserializer"}],"output":{"name":"self"}}],[11,"variant_seed","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",12,null],[11,"new","","",13,{"inputs":[{"name":"deserializer"}],"output":{"name":"self"}}],[11,"variant_seed","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unit_variant","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"newtype_variant_seed","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_variant","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"struct_variant","","",13,null],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",14,null],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peek_end_of_value","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[12,"err","","This `Box` allows us to keep the size of `Error` as small as possible. A larger `Error` type was substantially slower due to all the functions that pass around `Result<T, Error>`.",2,null],[3,"ErrorImpl","","",null,null],[12,"code","","",17,null],[12,"line","","",17,null],[12,"column","","",17,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",18,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",18,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",18,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",18,null],[4,"ErrorCode","","",null,null],[13,"Message","","Catchall for syntax error messages",19,null],[13,"Io","","Some IO error occurred while serializing or deserializing.",19,null],[13,"EofWhileParsingList","","EOF while parsing a list.",19,null],[13,"EofWhileParsingObject","","EOF while parsing an object.",19,null],[13,"EofWhileParsingString","","EOF while parsing a string.",19,null],[13,"EofWhileParsingValue","","EOF while parsing a JSON value.",19,null],[13,"ExpectedColon","","Expected this character to be a `':'`.",19,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `']'`.",19,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `'}'`.",19,null],[13,"ExpectedObjectOrArray","","Expected this character to be either a `'{'` or a `'['`.",19,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",19,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",19,null],[13,"ExpectedSomeString","","Expected this character to start a JSON string.",19,null],[13,"InvalidEscape","","Invalid hex escape code.",19,null],[13,"InvalidNumber","","Invalid number.",19,null],[13,"NumberOutOfRange","","Number is bigger than the maximum value of its type.",19,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",19,null],[13,"KeyMustBeAString","","Object key is not a string.",19,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",19,null],[13,"TrailingComma","","JSON has a comma after the last value in an array or map.",19,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",19,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",19,null],[13,"RecursionLimitExceeded","","Encountered nesting of JSON maps and arrays more than 128 layers deep.",19,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"syntax","","",2,{"inputs":[{"name":"errorcode"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"io","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fix_position","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_type","","",2,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[12,"map","","",4,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[12,"vacant","","",20,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[12,"occupied","","",21,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[12,"iter","","",22,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[12,"iter","","",23,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[12,"iter","","",24,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[12,"iter","","",25,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[12,"iter","","",26,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",27,null],[13,"Occupied","","An occupied Entry.",27,null],[6,"MapImpl","","",null,null],[6,"VacantEntryImpl","","",null,null],[6,"OccupiedEntryImpl","","",null,null],[6,"IterImpl","","",null,null],[6,"IterMutImpl","","",null,null],[6,"IntoIterImpl","","",null,null],[6,"KeysImpl","","",null,null],[6,"ValuesImpl","","",null,null],[11,"new","","Makes a new empty Map.",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",4,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",4,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",4,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",4,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",4,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",27,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",20,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",21,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",21,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",21,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",21,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",21,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",4,null],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[12,"writer","","",3,null],[12,"formatter","","",3,null],[3,"Compound","","",null,null],[12,"ser","","",28,null],[12,"state","","",28,null],[3,"MapKeySerializer","","",null,null],[12,"ser","","",29,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[12,"current_indent","","",30,null],[12,"has_value","","",30,null],[12,"indent","","",30,null],[4,"State","","",null,null],[13,"Empty","","",31,null],[13,"First","","",31,null],[13,"Rest","","",31,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",32,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",32,null],[13,"Solidus","","An escaped solidus `/`",32,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",32,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",32,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",32,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",32,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",32,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",32,null],[5,"key_must_be_a_string","","",null,{"inputs":[],"output":{"name":"error"}}],[5,"format_escaped_str","","",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"format_escaped_str_contents","","",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"indent","","",null,null],[7,"ESCAPE","","",null,null],[17,"BB","","",null,null],[17,"TT","","",null,null],[17,"NN","","",null,null],[17,"FF","","",null,null],[17,"RR","","",null,null],[17,"QU","","",null,null],[17,"BS","","",null,null],[17,"U","","",null,null],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",33,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",3,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",3,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",3,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"assert_receiver_is_total_eq","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"serialize_element","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_str","","",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",29,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_bytes","","",29,null],[11,"serialize_unit","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_none","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",29,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","",29,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"from_escape_table","","",32,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"charescape"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",30,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",30,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",30,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[12,"n","","",5,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",6,null],[13,"Bool","","Represents a JSON boolean.",6,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",6,null],[13,"String","","Represents a JSON string.",6,null],[13,"Array","","Represents a JSON array.",6,null],[13,"Object","","Represents a JSON object.",6,null],[5,"parse_index","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[0,"index","","",null,null],[3,"Type","serde_json::value::index","Used in panic messages.",null,null],[12,"0","","",35,null],[0,"private","","",null,null],[8,"Sealed","serde_json::value::index::private","",null,null],[8,"Index","serde_json::value::index","A type that can be used to index into a `serde_json::Value`.",null,null],[10,"index_into","","Return None if the key is not already in the array or object.",36,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[10,"index_into_mut","","Return None if the key is not already in the array or object.",36,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[10,"index_or_insert","","Panic if array index out of bounds. If key is not already in the object, insert it with a value of null. Panic if Value is a type that cannot be indexed into, except if Value is null then it can be treated as an empty object.",36,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","serde_json::value","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[0,"partial_eq","","",null,null],[5,"eq_i64","serde_json::value::partial_eq","",null,{"inputs":[{"name":"value"},{"name":"i64"}],"output":{"name":"bool"}}],[5,"eq_u64","","",null,{"inputs":[{"name":"value"},{"name":"u64"}],"output":{"name":"bool"}}],[5,"eq_f64","","",null,{"inputs":[{"name":"value"},{"name":"f64"}],"output":{"name":"bool"}}],[5,"eq_bool","","",null,{"inputs":[{"name":"value"},{"name":"bool"}],"output":{"name":"bool"}}],[5,"eq_str","","",null,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","serde_json::value","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[0,"from","","",null,null],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",6,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",6,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",6,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",6,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",6,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",6,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",6,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",6,null],[11,"from_iter","","Convert an iteratable type to a `Value`",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[0,"ser","","",null,null],[3,"Serializer","serde_json::value::ser","",null,null],[3,"SerializeVec","","",null,null],[12,"vec","","",37,null],[3,"SerializeTupleVariant","","",null,null],[12,"name","","",38,null],[12,"vec","","",38,null],[3,"SerializeMap","","",null,null],[12,"map","","",39,null],[12,"next_key","","",39,null],[3,"SerializeStructVariant","","",null,null],[12,"name","","",40,null],[12,"map","","",40,null],[11,"serialize","serde_json::value","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize_bool","serde_json::value::ser","",41,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_i8","","",41,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_i16","","",41,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_i32","","",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_i64","","",41,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_u8","","",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_u16","","",41,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_u32","","",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_u64","","",41,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_f32","","",41,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_f64","","",41,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_char","","",41,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_str","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_bytes","","",41,null],[11,"serialize_unit","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_unit_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_unit_variant","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_newtype_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_newtype_variant","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_none","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_some","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_seq","","",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple","","",41,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map","","",41,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_element","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_field","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_field","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_key","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_value","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["value","error"],"name":"result"}}],[0,"de","serde_json::value","",null,null],[3,"WriterFormatter","serde_json::value::de","",null,null],[12,"inner","","",42,null],[3,"EnumDeserializer","","",null,null],[12,"variant","","",43,null],[12,"value","","",43,null],[3,"VariantDeserializer","","",null,null],[12,"value","","",44,null],[3,"SeqDeserializer","","",null,null],[12,"iter","","",45,null],[3,"MapDeserializer","","",null,null],[12,"iter","","",46,null],[12,"value","","",46,null],[3,"EnumRefDeserializer","","",null,null],[12,"variant","","",47,null],[12,"value","","",47,null],[3,"VariantRefDeserializer","","",null,null],[12,"value","","",48,null],[3,"SeqRefDeserializer","","",null,null],[12,"iter","","",49,null],[3,"MapRefDeserializer","","",null,null],[12,"iter","","",50,null],[12,"value","","",50,null],[3,"MapKeyDeserializer","","",null,null],[12,"key","","",51,null],[11,"deserialize","serde_json::value","",6,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"write","serde_json::value::de","",42,null],[11,"flush","","",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","serde_json::value","Display a JSON value as a string.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"deserialize_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",6,null],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_identifier","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","serde_json::value::de","",43,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"unit_variant","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"newtype_variant_seed","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"tuple_variant","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"struct_variant","","",44,null],[11,"new","","",45,{"inputs":[{"generics":["value"],"name":"vec"}],"output":{"name":"self"}}],[11,"deserialize_any","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",45,null],[11,"deserialize_enum","","",45,null],[11,"deserialize_identifier","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"size_hint","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","",46,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"self"}}],[11,"next_key_seed","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"next_value_seed","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"size_hint","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"deserialize_any","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",46,null],[11,"deserialize_enum","","",46,null],[11,"deserialize_identifier","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",47,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"unit_variant","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"newtype_variant_seed","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"tuple_variant","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"struct_variant","","",48,null],[11,"new","","",49,null],[11,"deserialize_any","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",49,null],[11,"deserialize_enum","","",49,null],[11,"deserialize_identifier","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"size_hint","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"new","","",50,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"next_key_seed","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"next_value_seed","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"size_hint","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"deserialize_any","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",50,null],[11,"deserialize_enum","","",50,null],[11,"deserialize_identifier","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_newtype_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",51,null],[11,"deserialize_bool","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",51,null],[11,"deserialize_identifier","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"unexpected","serde_json::value","",6,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[10,"index_into","","Return None if the key is not already in the array or object.",36,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[10,"index_into_mut","","Return None if the key is not already in the array or object.",36,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[10,"index_or_insert","","Panic if array index out of bounds. If key is not already in the object, insert it with a value of null. Panic if Value is a type that cannot be indexed into, except if Value is null then it can be treated as an empty object.",36,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"value"}}],[0,"iter","serde_json","",null,null],[3,"LineColIterator","serde_json::iter","",null,null],[12,"iter","","",52,null],[12,"line","","Index of the current line. Characters in the first line of the input (before the first newline character) are in line 1.",52,null],[12,"col","","Index of the current column. The first character in the input and any characters immediately following a newline character are in column 1. The column is 0 immediately after a newline character has been read.",52,null],[12,"start_of_line","","Byte offset of the start of the current line. This is the sum of lenghts of all previous lines. Keeping track of things this way allows efficient computation of the current line, column, and byte offset while only updating one of the counters in `next()` in the common case.",52,null],[11,"new","","",52,{"inputs":[{"name":"i"}],"output":{"name":"linecoliterator"}}],[11,"line","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"byte_offset","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"number","serde_json","",null,null],[3,"Number","serde_json::number","Represents a JSON number, whether integer or floating point.",null,null],[12,"n","","",5,null],[4,"N","","",null,null],[13,"PosInt","","",53,null],[13,"NegInt","","Always less than zero.",53,null],[13,"Float","","Always finite.",53,null],[11,"clone","serde_json","",5,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"clone","serde_json::number","",53,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"is_i64","serde_json","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",5,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",5,{"inputs":[{"name":"f64"}],"output":{"generics":["number"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unexpected","","",5,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[0,"read","","",null,null],[3,"Position","serde_json::read","",null,null],[12,"line","","",54,null],[12,"column","","",54,null],[3,"IoRead","","JSON input source that reads from a std::io input stream.",null,null],[12,"iter","","",7,null],[12,"ch","","Temporary storage of peeked byte.",7,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[12,"slice","","",8,null],[12,"index","","Index of the next byte that will be returned by next() or peek().",8,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[12,"delegate","","",9,null],[4,"Reference","","",null,null],[13,"Borrowed","","",55,null],[13,"Copied","","",55,null],[5,"next_or_eof","","",null,{"inputs":[{"name":"r"}],"output":{"generics":["u8"],"name":"result"}}],[5,"error","","",null,{"inputs":[{"name":"r"},{"name":"errorcode"}],"output":{"name":"result"}}],[5,"as_str","","",null,null],[5,"parse_escape","","Parses a JSON escape sequence and appends it into the scratch space. Assumes the previous byte read was a backslash.",null,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"result"}}],[5,"ignore_escape","","Parses a JSON escape sequence and discards the value. Assumes the previous byte read was a backslash.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"decode_hex_escape","","",null,{"inputs":[{"name":"r"}],"output":{"generics":["u16"],"name":"result"}}],[0,"private","","",null,null],[8,"Sealed","serde_json::read::private","",null,null],[7,"ESCAPE","serde_json::read","",null,null],[17,"CT","","",null,null],[17,"QU","","",null,null],[17,"BS","","",null,null],[17,"O","","",null,null],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[10,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"peek","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"discard","","Only valid after a call to peek(). Discards the peeked byte.",16,{"inputs":[{"name":"self"}],"output":null}],[10,"position","","Position of the most recent call to next().",16,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[10,"peek_position","","Position of the most recent call to peek().",16,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[10,"byte_offset","","Offset from the beginning of the input to the next byte that would be returned by next() or peek().",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"parse_str","","Assumes the previous byte was a quotation mark. Parses a JSON-escaped string until the next quotation mark using the given scratch space if necessary. The scratch space is initially empty.",16,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[10,"parse_str_raw","","Assumes the previous byte was a quotation mark. Parses a JSON-escaped string until the next quotation mark using the given scratch space if necessary. The scratch space is initially empty.",16,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[10,"ignore_str","","Assumes the previous byte was a quotation mark. Parses a JSON-escaped string until the next quotation mark but discards the data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",55,null],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",7,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"parse_str_bytes","","",7,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"bool"},{"name":"f"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",7,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",7,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",7,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",7,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",8,null],[11,"position_of_index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"position"}}],[11,"parse_str_bytes","","The big optimization here over IoRead is that if the string contains no backslash escape sequences, the returned &str is a slice of the raw JSON data so we avoid copying into the scratch space.",8,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"bool"},{"name":"f"}],"output":{"generics":["reference"],"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",8,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",8,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",8,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",8,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",9,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",9,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",9,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null],[14,"json_internal","","",null,null]],"paths":[[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[3,"Serializer"],[3,"Map"],[3,"Number"],[4,"Value"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"SeqAccess"],[3,"MapAccess"],[3,"VariantAccess"],[3,"UnitVariantAccess"],[3,"MapKey"],[4,"Number"],[8,"Read"],[3,"ErrorImpl"],[4,"Category"],[4,"ErrorCode"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"Entry"],[3,"Compound"],[3,"MapKeySerializer"],[3,"PrettyFormatter"],[4,"State"],[4,"CharEscape"],[8,"Formatter"],[3,"CompactFormatter"],[3,"Type"],[8,"Index"],[3,"SerializeVec"],[3,"SerializeTupleVariant"],[3,"SerializeMap"],[3,"SerializeStructVariant"],[3,"Serializer"],[3,"WriterFormatter"],[3,"EnumDeserializer"],[3,"VariantDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"EnumRefDeserializer"],[3,"VariantRefDeserializer"],[3,"SeqRefDeserializer"],[3,"MapRefDeserializer"],[3,"MapKeyDeserializer"],[3,"LineColIterator"],[4,"N"],[3,"Position"],[4,"Reference"]]};
searchIndex["serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"serialize","serialize","Support code for encoding and decoding types.",null,null],[8,"Encoder","serialize::serialize","",null,null],[16,"Error","","",0,null],[10,"emit_nil","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u128","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"emit_u64","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i128","","",0,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"emit_i64","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decoder","","",null,null],[16,"Error","","",1,null],[10,"read_nil","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u128","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"result"}}],[10,"read_u64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i128","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"result"}}],[10,"read_i64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"result"}}],[11,"read_enum","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",1,null],[11,"read_enum_variant_arg","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",1,null],[11,"read_enum_struct_variant_field","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",1,null],[8,"Encodable","","",null,null],[10,"encode","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"SpecializationError","","Implement this trait on your `{Encodable,Decodable}::Error` types to override the default panic behavior for missing specializations.",null,null],[10,"not_found","","Create an error for a missing method specialization. Defaults to panicking with type, trait & method names. `S` is the encoder/decoder state type, `T` is the type being encoded/decoded, and the arguments are the names of the trait and method that should've been overridden.",4,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[8,"SpecializedEncoder","","Implement this trait on encoders, with `T` being the type you want to encode (employing `UseSpecializedEncodable`), using a strategy specific to the encoder.",null,null],[10,"specialized_encode","","Encode the value in a manner specific to this encoder state.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SpecializedDecoder","","Implement this trait on decoders, with `T` being the type you want to decode (employing `UseSpecializedDecodable`), using a strategy specific to the decoder.",null,null],[10,"specialized_decode","","Decode a value in a manner specific to this decoder state.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UseSpecializedEncodable","","Implement this trait on your type to get an `Encodable` implementation which goes through `SpecializedEncoder`.",null,null],[11,"default_encode","","Defaults to returning an error (see `SpecializationError`).",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[8,"UseSpecializedDecodable","","Implement this trait on your type to get an `Decodable` implementation which goes through `SpecializedDecoder`.",null,null],[11,"default_decode","","Defaults to returning an error (see `SpecializationError`).",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"collection_impls","serialize","Implementations of serialization for structures found in liballoc",null,null],[0,"hex","","Hex binary-to-text encoding",null,null],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",9,null],[13,"InvalidHexLength","","The input had an invalid length",9,null],[17,"CHARS","","",null,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"json","serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","serialize::json","",null,null],[12,"inner","","",12,null],[3,"AsJson","","",null,null],[12,"inner","","",13,null],[3,"AsPrettyJson","","",null,null],[12,"inner","","",14,null],[12,"indent","","",14,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[12,"writer","","",15,null],[12,"is_emitting_map_key","","",15,null],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of compact data",null,null],[12,"writer","","",16,null],[12,"curr_indent","","",16,null],[12,"indent","","",16,null],[12,"is_emitting_map_key","","",16,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[12,"stack","","",17,null],[12,"str_buffer","","",17,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[12,"rdr","","",18,null],[12,"ch","","",18,null],[12,"line","","",18,null],[12,"col","","",18,null],[12,"stack","","",18,null],[12,"state","","",18,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[12,"parser","","",19,null],[12,"token","","",19,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[12,"stack","","",20,null],[3,"FormatShim","","",null,null],[12,"inner","","",21,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",22,null],[13,"U64","","",22,null],[13,"F64","","",22,null],[13,"String","","",22,null],[13,"Boolean","","",22,null],[13,"Array","","",22,null],[13,"Object","","",22,null],[13,"Null","","",22,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",23,null],[13,"InvalidNumber","","",23,null],[13,"EOFWhileParsingObject","","",23,null],[13,"EOFWhileParsingArray","","",23,null],[13,"EOFWhileParsingValue","","",23,null],[13,"EOFWhileParsingString","","",23,null],[13,"KeyMustBeAString","","",23,null],[13,"ExpectedColon","","",23,null],[13,"TrailingCharacters","","",23,null],[13,"TrailingComma","","",23,null],[13,"InvalidEscape","","",23,null],[13,"InvalidUnicodeCodePoint","","",23,null],[13,"LoneLeadingSurrogateInHexEscape","","",23,null],[13,"UnexpectedEndOfHexEscape","","",23,null],[13,"UnrecognizedHex","","",23,null],[13,"NotFourDigit","","",23,null],[13,"NotUtf8","","",23,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",24,null],[13,"IoError","","",24,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",25,null],[13,"ExpectedError","","",25,null],[13,"MissingFieldError","","",25,null],[13,"UnknownVariantError","","",25,null],[13,"ApplicationError","","",25,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",26,null],[13,"BadHashmapKey","","",26,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",27,null],[13,"ObjectEnd","","",27,null],[13,"ArrayStart","","",27,null],[13,"ArrayEnd","","",27,null],[13,"BooleanValue","","",27,null],[13,"I64Value","","",27,null],[13,"U64Value","","",27,null],[13,"F64Value","","",27,null],[13,"StringValue","","",27,null],[13,"NullValue","","",27,null],[13,"Error","","",27,null],[4,"ParserState","","",null,null],[13,"ParseArray","","",28,null],[13,"ParseArrayComma","","",28,null],[13,"ParseObject","","",28,null],[13,"ParseObjectComma","","",28,null],[13,"ParseStart","","",28,null],[13,"ParseBeforeFinish","","",28,null],[13,"ParseFinished","","",28,null],[4,"StackElement","","StackElements compose a Stack. For example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"), StackElement::Index(3) and StackElement::Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",29,null],[13,"Key","","",29,null],[4,"InternalStackElement","","",null,null],[13,"InternalIndex","","",30,null],[13,"InternalKey","","",30,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","encodererror"],"name":"result"}}],[5,"io_error_to_error","","",null,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[5,"escape_str","","",null,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"encoderesult"}}],[5,"escape_char","","",null,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"encoderesult"}}],[5,"spaces","","",null,{"inputs":[{"name":"write"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[5,"fmt_number_or_null","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"string"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[5,"from_reader","","Decodes a json value from an `&mut io::Read`",null,{"inputs":[{"name":"read"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[5,"from_str","","Decodes a json value from a string",null,{"inputs":[{"name":"str"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",31,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"parsererror"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"decodererror"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"encodererror"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",26,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new","","Creates a new JSON encoder whose output will be written to the writer specified.",15,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",15,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",15,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",15,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",15,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",15,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",15,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",15,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",15,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",15,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",15,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",15,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",15,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",15,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",15,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"new","","Creates a new encoder whose output will be written to the specified writer",16,{"inputs":[{"name":"write"}],"output":{"name":"prettyencoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"emit_nil","","",16,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",16,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",16,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",16,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",16,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",16,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",16,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",16,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",16,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",16,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",16,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",16,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",22,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",22,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"parserstate"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"internalstackelement"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"internalstackelement"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",17,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",17,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",17,null],[11,"top","","Returns the top-most element (if any).",17,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"push_key","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"push_index","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"last_is_index","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bump_index","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",18,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",18,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"eof","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ch_or_null","","",18,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"bump","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"next_char","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"ch_is","","",18,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"error","","",18,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"generics":["parsererror"],"name":"result"}}],[11,"parse_whitespace","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_number","","",18,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"parse_u64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64","parsererror"],"name":"result"}}],[11,"parse_decimal","","",18,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["f64","parsererror"],"name":"result"}}],[11,"parse_exponent","","",18,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["f64","parsererror"],"name":"result"}}],[11,"decode_hex_escape","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16","parsererror"],"name":"result"}}],[11,"parse_str","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["string","parsererror"],"name":"result"}}],[11,"parse","","",18,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"parse_start","","",18,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"parse_array","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"jsonevent"}}],[11,"parse_array_comma_or_end","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"parse_object","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"jsonevent"}}],[11,"parse_object_end","","",18,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"parse_value","","",18,{"inputs":[{"name":"self"}],"output":{"name":"jsonevent"}}],[11,"parse_ident","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"jsonevent"}],"output":{"name":"jsonevent"}}],[11,"error_event","","",18,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"jsonevent"}}],[11,"new","","Create a JSON Builder.",19,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"bump","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"build_value","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"build_array","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"build_object","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",20,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"pop","","",20,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"read_nil","","",20,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_u128","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"decoderesult"}}],[11,"read_isize","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_i128","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"decoderesult"}}],[11,"read_f32","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"decoderesult"}}],[11,"read_enum","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",20,null],[11,"read_enum_variant_arg","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",20,null],[11,"read_enum_struct_variant_field","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",20,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",22,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"write_str","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[0,"opaque","serialize","",null,null],[3,"Encoder","serialize::opaque","",null,null],[12,"cursor","","",32,null],[3,"Decoder","","",null,null],[12,"data","","",33,null],[12,"position","","",33,null],[6,"EncodeResult","","",null,null],[11,"new","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"encoder"}}],[11,"emit_raw_bytes","","",32,null],[11,"emit_nil","","",32,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u128","","",32,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",32,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i128","","",32,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",32,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",32,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"position","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",33,null],[11,"position","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_position","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"read_raw_bytes","","",33,null],[11,"read_nil","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u128","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"result"}}],[11,"read_u64","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_u32","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_u16","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_u8","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_usize","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_i128","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"result"}}],[11,"read_i64","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_i32","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_i16","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_i8","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_isize","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[11,"read_bool","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"read_f64","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_f32","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_char","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[11,"read_str","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"result"}}],[11,"error","","",33,null],[0,"leb128","serialize","",null,null],[5,"write_to_vec","serialize::leb128","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u8"}],"output":null}],[5,"write_unsigned_leb128_to","","encodes an integer using unsigned leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"u128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_unsigned_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u128"}],"output":{"name":"usize"}}],[5,"read_unsigned_leb128","","",null,null],[5,"write_signed_leb128_to","","encodes an integer using signed leb128 encoding and stores the result using a callback function.",null,{"inputs":[{"name":"i128"},{"name":"w"}],"output":{"name":"usize"}}],[5,"write_signed_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"i128"}],"output":{"name":"usize"}}],[5,"read_signed_leb128","","",null,null],[0,"rustc_serialize","serialize","",null,null],[8,"Decoder","","",null,null],[16,"Error","","",1,null],[10,"read_nil","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u128","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"result"}}],[10,"read_u64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i128","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"result"}}],[10,"read_i64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"result"}}],[11,"read_enum","serialize::serialize","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",1,null],[11,"read_enum_variant_arg","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",1,null],[11,"read_enum_struct_variant_field","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","serialize","",1,null],[8,"Encoder","","",null,null],[16,"Error","","",0,null],[10,"emit_nil","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u128","","",0,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"emit_u64","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i128","","",0,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"emit_i64","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","serialize::serialize","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","serialize","",null,null],[10,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"SpecializationError","","Implement this trait on your `{Encodable,Decodable}::Error` types to override the default panic behavior for missing specializations.",null,null],[10,"not_found","","Create an error for a missing method specialization. Defaults to panicking with type, trait & method names. `S` is the encoder/decoder state type, `T` is the type being encoded/decoded, and the arguments are the names of the trait and method that should've been overridden.",4,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[8,"SpecializedEncoder","","Implement this trait on encoders, with `T` being the type you want to encode (employing `UseSpecializedEncodable`), using a strategy specific to the encoder.",null,null],[10,"specialized_encode","","Encode the value in a manner specific to this encoder state.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SpecializedDecoder","","Implement this trait on decoders, with `T` being the type you want to decode (employing `UseSpecializedDecodable`), using a strategy specific to the decoder.",null,null],[10,"specialized_decode","","Decode a value in a manner specific to this decoder state.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UseSpecializedEncodable","","Implement this trait on your type to get an `Encodable` implementation which goes through `SpecializedEncoder`.",null,null],[11,"default_encode","serialize::serialize","Defaults to returning an error (see `SpecializationError`).",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[8,"UseSpecializedDecodable","serialize","Implement this trait on your type to get an `Decodable` implementation which goes through `SpecializedDecoder`.",null,null],[11,"default_decode","serialize::serialize","Defaults to returning an error (see `SpecializationError`).",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[8,"Encoder"],[8,"Decoder"],[8,"Encodable"],[8,"Decodable"],[8,"SpecializationError"],[8,"SpecializedEncoder"],[8,"SpecializedDecoder"],[8,"UseSpecializedEncodable"],[8,"UseSpecializedDecodable"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"FormatShim"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"ParserState"],[4,"StackElement"],[4,"InternalStackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Decoder"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[12,"hasher","","",0,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[12,"hasher","","",1,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[12,"0","","",2,null],[3,"Hasher","","",null,null],[12,"k0","","",3,null],[12,"k1","","",3,null],[12,"length","","",3,null],[12,"state","","",3,null],[12,"tail","","",3,null],[12,"ntail","","",3,null],[12,"_marker","","",3,null],[3,"State","","",null,null],[12,"v0","","",4,null],[12,"v2","","",4,null],[12,"v1","","",4,null],[12,"v3","","",4,null],[3,"Sip13Rounds","","",null,null],[3,"Sip24Rounds","","",null,null],[5,"u8to64_le","","Load an u64 using up to 7 bytes of a byte slice.",null,null],[8,"Sip","","",null,null],[10,"c_rounds","","",5,{"inputs":[{"name":"state"}],"output":null}],[10,"d_rounds","","",5,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"new_with_keys","","",3,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"hasher"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"short_write","","",3,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write_usize","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_u8","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write","","",3,null],[11,"finish","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","Creates a `Hasher<S>` with the two initial keys set to 0.",3,{"inputs":[],"output":{"name":"hasher"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sip13rounds"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"sip13rounds"}}],[11,"c_rounds","","",6,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",6,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sip24rounds"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"sip24rounds"}}],[11,"c_rounds","","",7,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",7,{"inputs":[{"name":"state"}],"output":null}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",8,null],[12,"h2","","",8,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[12,"hasher","","",9,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[12,"hasher","","",10,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[12,"0","","",11,null],[3,"Hasher","","",null,null],[12,"k0","","",12,null],[12,"k1","","",12,null],[12,"length","","",12,null],[12,"state","","",12,null],[12,"tail","","",12,null],[12,"ntail","","",12,null],[12,"_marker","","",12,null],[3,"State","","",null,null],[12,"v0","","",13,null],[12,"v2","","",13,null],[12,"v1","","",13,null],[12,"v3","","",13,null],[3,"Sip13Rounds","","",null,null],[3,"Sip24Rounds","","",null,null],[5,"u8to64_le","","Load an u64 using up to 7 bytes of a byte slice.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",14,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[8,"Sip","","",null,null],[10,"c_rounds","","",15,{"inputs":[{"name":"state"}],"output":null}],[10,"d_rounds","","",15,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",11,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",11,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",11,null],[11,"finish128","","Return a 128-bit hash",11,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",9,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",9,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",9,null],[11,"finish128","","Return a 128-bit hash",9,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",10,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",10,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",10,null],[11,"finish128","","Return a 128-bit hash",10,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new_with_keys","","",12,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"hasher"}}],[11,"reset","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"short_write","","",12,null],[11,"finish128","","",12,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",11,null],[11,"finish","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",9,null],[11,"finish","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",10,null],[11,"finish","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write_usize","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write_u8","","",12,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write","","",12,null],[11,"finish","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"default","","Creates a `Hasher<S>` with the two initial keys set to 0.",12,{"inputs":[],"output":{"name":"hasher"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sip13rounds"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"sip13rounds"}}],[11,"c_rounds","","",16,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",16,{"inputs":[{"name":"state"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sip24rounds"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"sip24rounds"}}],[11,"c_rounds","","",17,{"inputs":[{"name":"state"}],"output":null}],[11,"d_rounds","","",17,{"inputs":[{"name":"state"}],"output":null}],[11,"as_bytes","","Convert into a 16-bytes vector",8,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hasher"],[3,"State"],[8,"Sip"],[3,"Sip13Rounds"],[3,"Sip24Rounds"],[3,"Hash128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hasher"],[3,"State"],[8,"Hasher128"],[8,"Sip"],[3,"Sip13Rounds"],[3,"Sip24Rounds"]]};
searchIndex["slog"] = {"doc":"Slog -  Structured, extensible, composable logging for Rust","items":[[3,"Logger","slog","Logging handle used to execute logging statements",null,null],[12,"drain","","",0,null],[12,"list","","",0,null],[3,"Discard","","`Drain` discarding everything",null,null],[3,"Filter","","`Drain` filtering records",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"MapError","","`Drain` mapping error returned by another `Drain`",null,null],[12,"drain","","",3,null],[12,"map_fn","","",3,null],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",null,null],[12,"0","","",4,null],[12,"1","","",4,null],[3,"Fuse","","`Drain` panicking on error",null,null],[12,"0","","",5,null],[3,"IgnoreResult","","`Drain` ignoring result",null,null],[12,"drain","","",6,null],[3,"RecordLocation","","",null,null],[12,"file","","File",7,null],[12,"line","","Line",7,null],[12,"column","","Column (currently not implemented)",7,null],[12,"function","","Function (currently not implemented)",7,null],[12,"module","","Module",7,null],[3,"RecordStatic","","Information that can be static in the given record thus allowing to optimize record creation to be done mostly at compile-time.",null,null],[12,"location","","Code location",8,null],[12,"tag","","Tag",8,null],[12,"level","","Logging level",8,null],[3,"Record","","One logging record",null,null],[12,"rstatic","","",9,null],[12,"msg","","",9,null],[12,"kv","","",9,null],[3,"AsFmtSerializer","","Serializer to closure adapter.",null,null],[12,"0","","",10,null],[3,"FnValue","","Explicit lazy-closure `Value`",null,null],[12,"0","","",11,null],[3,"PushFnValueSerializer","","Handle passed to `PushFnValue` closure",null,null],[12,"record","","",12,null],[12,"key","","",12,null],[12,"serializer","","",12,null],[12,"done","","",12,null],[3,"PushFnValue","","Lazy `Value` that writes to Serializer",null,null],[12,"0","","",13,null],[3,"SingleKV","","Single pair `Key` and `Value`",null,null],[12,"0","","",14,null],[12,"1","","",14,null],[3,"OwnedKV","","Owned KV",null,null],[12,"0","","The exact details of that it are not considered public and stable API. `slog_o` or `o` macro should be used instead to create `OwnedKV` instances.",15,null],[3,"BorrowedKV","","Borrowed `KV`",null,null],[12,"0","","The exact details of it function are not considered public and stable API. `log` and other macros should be used instead to create `BorrowedKV` instances.",16,null],[3,"OwnedKVListNode","","",null,null],[12,"next_node","","",17,null],[12,"kv","","",17,null],[3,"MultiListNode","","",null,null],[12,"next_node","","",18,null],[12,"node","","",18,null],[3,"OwnedKVList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its ancestors",null,null],[12,"node","","",19,null],[4,"MutexDrainError","","Error returned by `Mutex<D : Drain>`",null,null],[13,"Mutex","","Error acquiring mutex",20,null],[13,"Drain","","Error returned by drain",20,null],[4,"Level","","Logging level associated with a logging `Record`",null,null],[13,"Critical","","Critical",21,null],[13,"Error","","Error",21,null],[13,"Warning","","Warning",21,null],[13,"Info","","Info",21,null],[13,"Debug","","Debug",21,null],[13,"Trace","","Trace",21,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",22,null],[13,"Critical","","Log critical level only",22,null],[13,"Error","","Log only error level and above",22,null],[13,"Warning","","Log only warning level and above",22,null],[13,"Info","","Log only info level and above",22,null],[13,"Debug","","Log only debug level and above",22,null],[13,"Trace","","Log everything",22,null],[4,"Error","","Serialization Error",null,null],[13,"Io","","`io::Error` (not available in ![no_std] mode)",23,null],[13,"Fmt","","`fmt::Error`",23,null],[13,"Other","","Other error",23,null],[5,"__slog_static_max_level","","Not an API",null,{"inputs":[],"output":{"name":"filterlevel"}}],[0,"key","","",null,null],[0,"static_","slog::key","",null,null],[6,"Key","slog::key::static_","Key type",null,null],[0,"private","slog","",null,null],[3,"NeverStruct","slog::private","",null,null],[12,"0","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","slog","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"Key","","Key type",null,null],[6,"PushFnSerializer","","Old name of `PushFnValueSerializer`",null,null],[6,"Result","","Serialization `Result`",null,null],[6,"Never","","This type is here just to abstract away lack of `!` type support in stable rust during time of the release. It will be switched to `!` at some point and `Never` should not be considered \"stable\" API.",null,null],[6,"Serialize","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"PushLazy","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"ValueSerializer","","Compatibility name to ease upgrading from `slog v1`",null,null],[6,"OwnedKeyValueList","","Compatibility name to ease upgrading from `slog v1`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[7,"ASCII_LOWERCASE_MAP","","",null,null],[7,"STATIC_TERMINATOR_UNIT","","This is not part of \"stable\" API",null,null],[8,"Drain","","Logging drain",null,null],[16,"Ok","","Type returned by this drain",25,null],[16,"Err","","Type of potential errors that can be returned by this `Drain`",25,null],[10,"log","","Handle one logging statement (`Record`)",25,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"map","","Pass `Drain` through a closure, eg. to wrap into another `Drain`.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"filter","","Filter logging records passed to `Drain`",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_level","","Filter logging records passed to `Drain` (by level)",25,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"levelfilter"}}],[11,"map_err","","Map logging errors returned by this drain",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperror"}}],[11,"ignore_res","","Ignore results returned by this drain",25,{"inputs":[{"name":"self"}],"output":{"name":"ignoreresult"}}],[11,"fuse","","Make `Self` panic when returning any errors",25,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[8,"SendSyncUnwindSafe","","`Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncUnwindSafeDrain","","`Drain + Send + Sync + UnwindSafe` bound",null,null],[8,"SendSyncRefUnwindSafeDrain","","`Drain + Send + Sync + RefUnwindSafe` bound",null,null],[8,"MapErrFn","","Function that can be used in `MapErr` drain",null,null],[8,"FilterFn","","Function that can be used in `Filter` drain",null,null],[8,"SendRefUnwindSafeDrain","","`Drain + Send + RefUnwindSafe` bound",null,null],[8,"Serializer","","Serializer",null,null],[11,"emit_usize","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_isize","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_bool","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_char","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_u8","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_i8","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_u16","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_i16","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_u32","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_i32","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_f32","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_u64","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_i64","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_f64","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_str","","Emit $t",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_unit","","Emit `()`",26,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"emit_none","","Emit `None`",26,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[10,"emit_arguments","","Emit `fmt::Arguments`",26,{"inputs":[{"name":"self"},{"name":"key"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Value","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",27,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"KV","","Key-value pair(s)",null,null],[10,"serialize","","Serialize self into `Serializer`",28,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"SendSyncRefUnwindSafeKV","","Thread-local safety bound for `KV`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"root","","Build a root `Logger`",0,{"inputs":[{"name":"d"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"root_typed","","Build a root `Logger` that retains `drain` type",0,{"inputs":[{"name":"d"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"new","","Build a child logger",0,{"inputs":[{"name":"self"},{"name":"ownedkv"}],"output":{"name":"logger"}}],[11,"log","","Log one logging `Record`",0,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"list","","Get list of key-value pairs assigned to this `Logger`",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedkvlist"}}],[11,"into_erased","","Convert to default, \"erased\" type: `Logger<Arc<SendSyncUnwindSafeDrain>>`",0,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"logger"}}],[11,"to_erased","","Create a copy with \"erased\" type",0,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"logger"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"discard"}}],[11,"log","","",29,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"new","","Create `Filter` wrapping given `drain`",1,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"levelfilter"}}],[11,"new","","Create `LevelFilter`",2,{"inputs":[{"name":"d"},{"name":"level"}],"output":{"name":"self"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","Create `Filter` wrapping given `drain`",3,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duplicate"}}],[11,"new","","Create `Duplicate`",4,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"log","","",4,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"new","","Create `Fuse` wrapping given `drain`",5,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",5,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ignoreresult"}}],[11,"new","","Create `IgnoreResult` wrapping `drain`",6,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",6,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"generics":["never"],"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mutexdrainerror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",20,{"inputs":[{"generics":["mutexguard"],"name":"poisonerror"}],"output":{"name":"mutexdrainerror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_usize","","Cast `Level` to ordering integer",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `Level` from an `usize`",21,{"inputs":[{"name":"usize"}],"output":{"generics":["level"],"name":"option"}}],[11,"as_usize","","Convert to `usize` value",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `FilterLevel` from an `usize`",22,{"inputs":[{"name":"usize"}],"output":{"generics":["filterlevel"],"name":"option"}}],[11,"max","","Maximum logging level (log everything)",22,{"inputs":[],"output":{"name":"self"}}],[11,"min","","Minimum logging level (log nothing)",22,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"generics":["level"],"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"generics":["filterlevel"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"recordlocation"}}],[11,"new","","Create a new `Record`",9,{"inputs":[{"name":"recordstatic"},{"name":"arguments"},{"name":"borrowedkv"}],"output":{"name":"self"}}],[11,"msg","","Get a log record message",9,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"level","","Get record logging level",9,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"line","","Get line number",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"location","","Get line number",9,{"inputs":[{"name":"self"}],"output":{"name":"recordlocation"}}],[11,"column","","Get error column",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"file","","Get file path",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"tag","","Get tag",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module","","Get module",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"function","","Get function (placeholder)",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kv","","Get key-value pairs",9,{"inputs":[{"name":"self"}],"output":{"name":"borrowedkv"}}],[11,"emit_arguments","","",10,{"inputs":[{"name":"self"},{"name":"key"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","Emit a value",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"emit","","Emit a value",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"record"},{"name":"key"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"from","","",14,null],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"ownedkvlist"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"record"},{"name":"serializer"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"root","","New `OwnedKVList` node without a parent (root)",19,{"inputs":[{"name":"ownedkv"}],"output":{"name":"self"}}],[11,"new","","New `OwnedKVList` node with an existing parent",19,{"inputs":[{"name":"ownedkv"},{"generics":["sendsyncrefunwindsafekv"],"name":"arc"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"ownedkv"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",23,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"o","","Macro for building group of key-value pairs: `OwnedKV`",null,null],[14,"slog_o","","Macro for building group of key-value pairs (alias)",null,null],[14,"b","","Macro for building group of key-value pairs in `BorrowedKV`",null,null],[14,"slog_b","","Alias of `b`",null,null],[14,"kv","","Macro for build `KV` implementing type",null,null],[14,"slog_kv","","Alias of `kv`",null,null],[14,"record_static","","Create `RecordStatic` at the given code location",null,null],[14,"slog_record_static","","Create `RecordStatic` at the given code location (alias)",null,null],[14,"record","","Create `Record` at the given code location",null,null],[14,"slog_record","","Create `Record` at the given code location (alias)",null,null],[14,"log","","Log message a logging record",null,null],[14,"slog_log","","Log message a logging record (alias)",null,null],[14,"crit","","Log critical level record",null,null],[14,"slog_crit","","Log critical level record (alias)",null,null],[14,"error","","Log error level record",null,null],[14,"slog_error","","Log error level record",null,null],[14,"warn","","Log warning level record",null,null],[14,"slog_warn","","Log warning level record (alias)",null,null],[14,"info","","Log info level record",null,null],[14,"slog_info","","Log info level record (alias)",null,null],[14,"debug","","Log debug level record",null,null],[14,"slog_debug","","Log debug level record (alias)",null,null],[14,"trace","","Log trace level record",null,null],[14,"slog_trace","","Log trace level record (alias)",null,null]],"paths":[[3,"Logger"],[3,"Filter"],[3,"LevelFilter"],[3,"MapError"],[3,"Duplicate"],[3,"Fuse"],[3,"IgnoreResult"],[3,"RecordLocation"],[3,"RecordStatic"],[3,"Record"],[3,"AsFmtSerializer"],[3,"FnValue"],[3,"PushFnValueSerializer"],[3,"PushFnValue"],[3,"SingleKV"],[3,"OwnedKV"],[3,"BorrowedKV"],[3,"OwnedKVListNode"],[3,"MultiListNode"],[3,"OwnedKVList"],[4,"MutexDrainError"],[4,"Level"],[4,"FilterLevel"],[4,"Error"],[3,"NeverStruct"],[8,"Drain"],[8,"Serializer"],[8,"Value"],[8,"KV"],[3,"Discard"]]};
searchIndex["slog_async"] = {"doc":"Async drain for slog-rs","items":[[3,"ToSendSerializer","slog_async","",null,null],[12,"kv","","",0,null],[3,"AsyncCoreBuilder","","`AsyncCore` builder",null,null],[12,"chan_size","","",1,null],[12,"drain","","",1,null],[3,"AsyncGuard","","Async guard",null,null],[12,"join","","",2,null],[12,"tx","","",2,null],[3,"AsyncCore","","Core of `Async` drain",null,null],[12,"ref_sender","","",3,null],[12,"tl_sender","","",3,null],[12,"join","","",3,null],[3,"AsyncRecord","","",null,null],[12,"msg","","",4,null],[12,"level","","",4,null],[12,"location","","",4,null],[12,"tag","","",4,null],[12,"logger_values","","",4,null],[12,"kv","","",4,null],[3,"AsyncBuilder","","`Async` builder",null,null],[12,"core","","",5,null],[3,"Async","","Async drain",null,null],[12,"core","","",6,null],[12,"dropped","","",6,null],[4,"AsyncError","","Errors reported by `Async`",null,null],[13,"Full","","Could not send record to worker thread due to full queue",7,null],[13,"Fatal","","Fatal problem - mutex or channel poisoning issue",7,null],[4,"AsyncMsg","","",null,null],[13,"Record","","",8,null],[13,"Finish","","",8,null],[6,"AsyncResult","","`AsyncResult` alias",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["kv"],"name":"box"}}],[11,"emit_bool","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_unit","","",0,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"emit_none","","",0,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"result"}}],[11,"emit_char","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_u8","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_i8","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_u16","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_i16","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_u32","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_i32","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_f32","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_u64","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_i64","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_f64","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_usize","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_isize","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_str","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_arguments","","",0,{"inputs":[{"name":"self"},{"name":"key"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"trysenderror"}],"output":{"name":"asyncerror"}}],[11,"from","","",7,{"inputs":[{"name":"trylockerror"}],"output":{"name":"asyncerror"}}],[11,"from","","",7,{"inputs":[{"name":"poisonerror"}],"output":{"name":"asyncerror"}}],[11,"new","","",1,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"chan_size","","Set channel size used to send logging records to worker thread. When buffer is full `AsyncCore` will start returning `AsyncError::Full`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"spawn_thread","","",1,null],[11,"build","","Build `AsyncCore`",1,{"inputs":[{"name":"self"}],"output":{"name":"asynccore"}}],[11,"build_no_guard","","Build `AsyncCore`",1,{"inputs":[{"name":"self"}],"output":{"name":"asynccore"}}],[11,"build_with_guard","","Build `AsyncCore` with `AsyncGuard`",1,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","New `AsyncCore` with default parameters",3,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"custom","","Build `AsyncCore` drain with custom parameters",3,{"inputs":[{"name":"d"}],"output":{"name":"asynccorebuilder"}}],[11,"get_sender","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["syncsender","poisonerror"],"name":"result"}}],[11,"send","","Send `AsyncRecord` to a worker thread.",3,{"inputs":[{"name":"self"},{"name":"asyncrecord"}],"output":{"name":"asyncresult"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"asyncresult"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",5,{"inputs":[{"name":"d"}],"output":{"name":"asyncbuilder"}}],[11,"chan_size","","Set channel size used to send logging records to worker thread. When buffer is full `AsyncCore` will start returning `AsyncError::Full`.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Complete building `Async`",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"build_no_guard","","Complete building `Async`",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"build_with_guard","","Complete building `Async` with `AsyncGuard`",5,null],[11,"default","","New `AsyncCore` with default parameters",6,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"new","","Build `Async` drain with custom parameters",6,{"inputs":[{"name":"d"}],"output":{"name":"asyncbuilder"}}],[11,"push_dropped","","",6,{"inputs":[{"name":"self"},{"name":"ownedkvlist"}],"output":{"name":"asyncresult"}}],[11,"log","","",6,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"asyncresult"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"ToSendSerializer"],[3,"AsyncCoreBuilder"],[3,"AsyncGuard"],[3,"AsyncCore"],[3,"AsyncRecord"],[3,"AsyncBuilder"],[3,"Async"],[4,"AsyncError"],[4,"AsyncMsg"]]};
searchIndex["slog_envlogger"] = {"doc":"A logger configured via an environment variable.","items":[[3,"EnvLogger","slog_envlogger","`EnvLogger` drain.",null,null],[12,"drain","","",0,null],[12,"directives","","",0,null],[12,"filter","","",0,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the EnvLogger. It can be used change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[12,"drain","","",1,null],[12,"directives","","",1,null],[12,"filter","","",1,null],[3,"LogDirective","","",null,null],[12,"name","","",2,null],[12,"level","","",2,null],[5,"new","","Create a `EnvLogger` using `RUST_LOG` environment variable",null,{"inputs":[{"name":"t"}],"output":{"name":"envlogger"}}],[5,"init","","Use a default `EnvLogger` as global logging drain",null,{"inputs":[],"output":{"generics":["globalloggerguard","setloggererror"],"name":"result"}}],[5,"parse_logging_spec","","Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=error/foo\") and return a vector with log directives.",null,null],[17,"TL_BUF","","",null,null],[11,"new","","Initializes the log builder with defaults",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"filter","","Adds filters to the logger",1,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"filterlevel"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Build an env logger.",1,{"inputs":[{"name":"self"}],"output":{"name":"envlogger"}}],[11,"new","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"filter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"enabled","","",0,{"inputs":[{"name":"self"},{"name":"level"},{"name":"str"}],"output":{"name":"bool"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}]],"paths":[[3,"EnvLogger"],[3,"LogBuilder"],[3,"LogDirective"]]};
searchIndex["slog_scope"] = {"doc":"Logging scopes for slog-rs","items":[[3,"GLOBAL_LOGGER","slog_scope","",null,null],[12,"__private_field","","",0,null],[3,"NoGlobalLoggerSet","","",null,null],[3,"GlobalLoggerGuard","","Guard resetting global logger",null,null],[12,"canceled","","",1,null],[3,"ScopeGuard","","",null,null],[5,"set_global_logger","","Set global `Logger` that is returned by calls like `logger()` outside of any logging scope.",null,{"inputs":[{"name":"logger"}],"output":{"name":"globalloggerguard"}}],[5,"logger","","Access the `Logger` for the current logging scope",null,{"inputs":[],"output":{"name":"logger"}}],[5,"with_logger","","Access the `Logger` for the current logging scope",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"scope","","Execute code in a logging scope",null,{"inputs":[{"name":"logger"},{"name":"sf"}],"output":{"name":"r"}}],[7,"GLOBAL_LOGGER","","",null,null],[17,"TL_SCOPES","","",null,null],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arccell"}}],[11,"initialize","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"cancel_reset","","Cancel resetting global logger",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",3,{"inputs":[{"name":"logger"}],"output":{"name":"self"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[14,"crit","","Log a critical level message using current scope logger",null,null],[14,"error","","Log a error level message using current scope logger",null,null],[14,"warn","","Log a warning level message using current scope logger",null,null],[14,"info","","Log a info level message using current scope logger",null,null],[14,"debug","","Log a debug level message using current scope logger",null,null],[14,"trace","","Log a trace level message using current scope logger",null,null]],"paths":[[3,"GLOBAL_LOGGER"],[3,"GlobalLoggerGuard"],[3,"NoGlobalLoggerSet"],[3,"ScopeGuard"]]};
searchIndex["slog_stdlog"] = {"doc":"`log` crate adapter for slog-rs","items":[[3,"Logger","slog_stdlog","",null,null],[3,"StdLog","","Drain logging `Record`s into `log` crate",null,null],[3,"LazyLogString","","",null,null],[12,"info","","",0,null],[12,"logger_values","","",0,null],[3,"KSV","","Key-Separator-Value serializer",null,null],[12,"io","","",1,null],[5,"log_to_slog_level","","",null,{"inputs":[{"name":"loglevel"}],"output":{"name":"level"}}],[5,"init","","Register `slog-stdlog` as `log` backend.",null,{"inputs":[],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"enabled","","",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"new","","",0,{"inputs":[{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"into_inner","","",1,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"emit_arguments","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"arguments"}],"output":{"name":"result"}}]],"paths":[[3,"LazyLogString"],[3,"KSV"],[3,"Logger"],[3,"StdLog"]]};
searchIndex["slog_term"] = {"doc":"`slog-rs`'s `Drain` for terminal output","items":[[3,"FullFormat","slog_term","Terminal-output formatting `Drain`",null,null],[12,"decorator","","",0,null],[12,"fn_timestamp","","",0,null],[12,"use_original_order","","",0,null],[3,"FullFormatBuilder","","Streamer builder",null,null],[12,"decorator","","",1,null],[12,"fn_timestamp","","",1,null],[12,"original_order","","",1,null],[3,"CompactFormat","","Compact terminal-output formatting `Drain`",null,null],[12,"decorator","","",2,null],[12,"history","","",2,null],[12,"fn_timestamp","","",2,null],[3,"CompactFormatBuilder","","Streamer builder",null,null],[12,"decorator","","",3,null],[12,"fn_timestamp","","",3,null],[3,"Serializer","","",null,null],[12,"comma_needed","","",4,null],[12,"decorator","","",4,null],[12,"reverse","","",4,null],[12,"stack","","",4,null],[3,"CompactFormatSerializer","","",null,null],[12,"decorator","","",5,null],[12,"history","","",5,null],[12,"buf","","",5,null],[3,"CountingWriter","","",null,null],[12,"wrapped","","",6,null],[12,"count","","",6,null],[3,"PlainDecorator","","Plain (no-op) `Decorator` implementation",null,null],[12,"0","","",7,null],[3,"PlainRecordDecorator","","Record decorator used by `PlainDecorator`",null,null],[12,"0","","",8,null],[3,"PlainSyncDecorator","","PlainSync `Decorator` implementation",null,null],[12,"0","","",9,null],[3,"PlainSyncRecordDecorator","","`RecordDecorator` used by `PlainSyncDecorator`",null,null],[12,"io","","",10,null],[12,"buf","","",10,null],[3,"TermDecoratorBuilder","","`TermDecorator` builder",null,null],[12,"use_stderr","","",11,null],[12,"color","","",11,null],[3,"TermDecorator","","`Decorator` implemented using `term` crate",null,null],[12,"term","","",12,null],[12,"use_color","","",12,null],[3,"TermRecordDecorator","","Record decorator used by `TermDecorator`",null,null],[12,"term","","",13,null],[12,"level","","",13,null],[12,"use_color","","",13,null],[3,"TestStdoutWriter","","Replacement for `std::io::stdout()` for when output capturing by rust's test harness is required.",null,null],[4,"AnyTerminal","","Any type of a terminal supported by `term` crate",null,null],[13,"Stdout","","Stdout terminal",14,null],[13,"Stderr","","Stderr terminal",14,null],[13,"FallbackStdout","","",14,null],[13,"FallbackStderr","","",14,null],[5,"print_msg_header","","Returns `true` if message was not empty",null,{"inputs":[{"name":"threadsafetimestampfn"},{"name":"recorddecorator"},{"name":"record"}],"output":{"generics":["bool"],"name":"result"}}],[5,"timestamp_local","","Default local timezone timestamp function",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"timestamp_utc","","Default UTC timestamp function",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"term_error_to_io_error","","",null,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[5,"term_compact","","Create a `CompactFormat` drain with default settings",null,{"inputs":[],"output":{"generics":["termdecorator"],"name":"compactformat"}}],[5,"term_full","","Create a `FullFormat` drain with default settings",null,{"inputs":[],"output":{"generics":["termdecorator"],"name":"fullformat"}}],[17,"TIMESTAMP_FORMAT","","",null,null],[8,"Decorator","","Output decorator",null,null],[10,"with_record","","Get a `RecordDecorator` for a given `record`",15,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"},{"name":"f"}],"output":{"name":"result"}}],[8,"RecordDecorator","","Per-record decorator",null,null],[10,"reset","","Reset formatting to defaults",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_whitespace","","Format normal text",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_msg","","Format `Record` message",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_timestamp","","Format timestamp",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_level","","Format `Record` level",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_comma","","Format a comma between key-value pairs",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_key","","Format key",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_value","","Format a value",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_separator","","Format value",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"ThreadSafeTimestampFn","","Threadsafe timestamp formatting function type",null,null],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"use_original_order","","Use the original ordering of key-value pairs",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","Build `FullFormat`",1,{"inputs":[{"name":"self"}],"output":{"name":"fullformat"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","New `TermBuilder`",0,{"inputs":[{"name":"d"}],"output":{"name":"fullformatbuilder"}}],[11,"format_full","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Build the streamer",3,{"inputs":[{"name":"self"}],"output":{"name":"compactformat"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","New `CompactFormatBuilder`",2,{"inputs":[{"name":"d"}],"output":{"name":"compactformatbuilder"}}],[11,"format_compact","","",2,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"recorddecorator"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"maybe_print_comma","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"emit_none","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_unit","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_bool","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_char","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_usize","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_isize","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_u8","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_i8","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_u16","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_i16","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_u32","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_i32","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_f32","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_u64","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_i64","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_f64","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_str","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_arguments","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"recorddecorator"},{"name":"vec"}],"output":{"name":"self"}}],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"emit_none","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_unit","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_bool","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_char","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_usize","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_isize","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_u8","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_i8","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_u16","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_i16","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_u32","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_i32","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_f32","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_u64","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_i64","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_f64","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_str","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_arguments","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"write"}],"output":{"name":"countingwriter"}}],[11,"count","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",6,null],[11,"new","","Create `PlainDecorator` instance",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_record","","",7,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"},{"name":"f"}],"output":{"name":"result"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create `PlainSyncDecorator` instance",9,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_record","","",9,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"},{"name":"f"}],"output":{"name":"result"}}],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"should_use_color","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"stderr","","Output to `stderr`",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"stdout","","Output to `stdout`",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"force_color","","Force colored output",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"force_plain","","Force colored output",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"try_build","","Try to build `TermDecorator`",11,{"inputs":[{"name":"self"}],"output":{"generics":["termdecorator"],"name":"option"}}],[11,"build","","Build `TermDecorator`",11,{"inputs":[{"name":"self"}],"output":{"name":"termdecorator"}}],[11,"new","","Start building `TermDecorator`",12,{"inputs":[],"output":{"name":"termdecoratorbuilder"}}],[11,"level_to_color","","`Level` color",12,{"inputs":[{"name":"level"}],"output":{"name":"u16"}}],[11,"with_record","","",12,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkvlist"},{"name":"f"}],"output":{"name":"result"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_level","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_key","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start_msg","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"FullFormat"],[3,"FullFormatBuilder"],[3,"CompactFormat"],[3,"CompactFormatBuilder"],[3,"Serializer"],[3,"CompactFormatSerializer"],[3,"CountingWriter"],[3,"PlainDecorator"],[3,"PlainRecordDecorator"],[3,"PlainSyncDecorator"],[3,"PlainSyncRecordDecorator"],[3,"TermDecoratorBuilder"],[3,"TermDecorator"],[3,"TermRecordDecorator"],[4,"AnyTerminal"],[8,"Decorator"],[8,"RecordDecorator"],[3,"TestStdoutWriter"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[12,"iter","","",0,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[12,"len","","",1,null],[12,"data","","",1,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[12,"data","","",2,null],[12,"current","","",2,null],[12,"end","","",2,null],[4,"SmallVecData","","",null,null],[13,"Inline","","",3,null],[12,"array","smallvec::SmallVecData","",3,null],[13,"Heap","smallvec","",3,null],[12,"ptr","smallvec::SmallVecData","",3,null],[12,"capacity","","",3,null],[5,"deallocate","smallvec","",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",5,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",6,null],[10,"size","","Returns the number of items the array can hold.",6,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",6,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",6,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"ptr_mut","","",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",1,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",1,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",1,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",1,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",1,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",1,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",1,null],[11,"clear","","Remove all elements from the vector.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",1,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",1,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive duplicate elements.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",1,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",1,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"borrow","","",1,null],[11,"borrow_mut","","",1,null],[11,"write","","",1,null],[11,"write_all","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from","","",1,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"extend_from_slice","","",1,null],[11,"push","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",1,null]],"paths":[[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"],[4,"SmallVecData"],[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"StringCache","string_cache::atom","",null,null],[12,"buckets","","",0,null],[3,"STRING_CACHE","","",null,null],[12,"__private_field","","",1,null],[3,"StringCacheEntry","","",null,null],[12,"next_in_bucket","","",2,null],[12,"hash","","",2,null],[12,"ref_count","","",2,null],[12,"string","","",2,null],[3,"PhfStrSet","","",null,null],[12,"key","","",3,null],[12,"disps","","",3,null],[12,"atoms","","",3,null],[12,"hashes","","",3,null],[3,"EmptyStaticAtomSet","","",null,null],[3,"Atom","","",null,null],[12,"unsafe_data","","This field is public so that the `atom!()` macros can use it. You should not otherwise access this field.",4,null],[12,"phantom","","",4,null],[4,"UnpackedAtom","","",null,null],[13,"Dynamic","","Pointer to a dynamic table entry.  Must be 16-byte aligned!",5,null],[13,"Inline","","Length + bytes of string.",5,null],[13,"Static","","Index in static interning table.",5,null],[5,"u64_hash_as_u32","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"inline_atom_slice","","",null,null],[5,"inline_atom_slice_mut","","",null,null],[5,"from_packed_dynamic","","Used for a fast path in Clone and Drop.",null,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[5,"inline_orig_bytes","","For as_slice on inline atoms, we need a pointer into the original string contents.",null,null],[6,"DefaultAtom","","Use this if you don’t care about static atoms.",null,null],[7,"STRING_CACHE","","",null,null],[17,"NB_BUCKETS","","",null,null],[17,"BUCKET_MASK","","",null,null],[8,"StaticAtomSet","","",null,null],[10,"get","","",6,{"inputs":[],"output":{"name":"phfstrset"}}],[10,"empty_string_index","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"mutex"}}],[11,"initialize","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",2,{"inputs":[{"generics":["box"],"name":"option"},{"name":"u64"},{"name":"string"}],"output":{"name":"stringcacheentry"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"stringcache"}}],[11,"add","","",0,null],[11,"remove","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get","","",7,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"precomputed_hash","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"unpack","","",4,{"inputs":[{"name":"self"}],"output":{"name":"unpackedatom"}}],[11,"get_hash","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_mutated_str","","",4,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"self"}}],[11,"to_ascii_uppercase","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_ascii_lowercase","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq_ignore_ascii_case","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_str_ignore_ascii_case","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"pack","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_packed","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"unpackedatom"}}],[0,"string_cache","string_cache","",null,null]],"paths":[[3,"StringCache"],[3,"STRING_CACHE"],[3,"StringCacheEntry"],[3,"PhfStrSet"],[3,"Atom"],[4,"UnpackedAtom"],[8,"StaticAtomSet"],[3,"EmptyStaticAtomSet"]]};
searchIndex["string_cache_shared"] = {"doc":"","items":[[5,"pack_static","string_cache_shared","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar).",null,null],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance_against_vec","","Calculates the optimal string alignment distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["swc"] = {"doc":"","items":[[5,"main","swc","",null,{"inputs":[],"output":null}],[5,"run","","",null,{"inputs":[],"output":{"generics":["box"],"name":"result"}}],[5,"logger","","",null,{"inputs":[],"output":{"name":"logger"}}]],"paths":[]};
searchIndex["swc_atoms"] = {"doc":"","items":[[3,"JsWordStaticSet","swc_atoms","",null,null],[6,"JsWord","","",null,null],[11,"get","","",0,{"inputs":[],"output":{"name":"phfstrset"}}],[11,"empty_string_index","","",0,{"inputs":[],"output":{"name":"u32"}}],[14,"js_word","","",null,null]],"paths":[[3,"JsWordStaticSet"]]};
searchIndex["swc_common"] = {"doc":"","items":[[0,"ast_node","swc_common","",null,null],[8,"AstNode","swc_common::ast_node","Currently just a marker trait.",null,null],[0,"errors","swc_common","Error reporting for the swc project.",null,null],[4,"DiagnosticId","swc_common::errors","",null,null],[13,"Error","","",0,null],[13,"Lint","","",0,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",1,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",2,null],[13,"Always","","",2,null],[13,"Never","","",2,null],[4,"Level","","",null,null],[13,"Bug","","",3,null],[13,"Fatal","","",3,null],[13,"PhaseFatal","","",3,null],[13,"Error","","",3,null],[13,"Warning","","",3,null],[13,"Note","","",3,null],[13,"Help","","",3,null],[13,"Cancelled","","",3,null],[3,"CodeMap","","",null,null],[12,"files","","",4,null],[12,"file_loader","","",4,null],[12,"path_mapping","","",4,null],[3,"FilePathMapping","","",null,null],[12,"mapping","","",5,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"Diagnostic","","",null,null],[12,"db","","",6,null],[3,"Handler","","A handler deals with errors.",null,null],[12,"inner","","",7,null],[0,"codemap","","",null,null],[3,"CodeMap","swc_common::errors::codemap","",null,null],[12,"files","","",4,null],[12,"file_loader","","",4,null],[12,"path_mapping","","",4,null],[3,"FilePathMapping","","",null,null],[12,"mapping","","",5,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"new","swc_common::errors","",4,{"inputs":[{"name":"filepathmapping"}],"output":{"name":"self"}}],[11,"with_file_loader","","",4,{"inputs":[{"generics":["fileloader"],"name":"box"},{"name":"filepathmapping"}],"output":{"name":"self"}}],[11,"path_mapping","","",4,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"file_exists","","",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["rc"],"name":"result"}}],[11,"load_file_and_lines","","",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["rc"],"name":"result"}}],[11,"files","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"ref"}}],[11,"next_start_pos","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",4,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"string"}],"output":{"generics":["filemap"],"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",4,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"string"}],"output":{"generics":["filemap"],"name":"rc"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_line","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["filemapandline","rc"],"name":"result"}}],[11,"lookup_char_pos_adj","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"merge_spans","","Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If there are gaps between lhs and rhs, the resulting union will cross these gaps. For this to work, the spans have to be:",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"span_to_string","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_unmapped_path","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"is_multiline","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_to_lines","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["string","spansnippeterror"],"name":"result"}}],[11,"span_until_char","","Given a `Span`, try to get a shorter span ending before the first occurrence of `c` `char`",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"char"}],"output":{"name":"span"}}],[11,"span_through_char","","Given a `Span`, try to get a shorter span ending just after the first occurrence of `char` `c`.",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"char"}],"output":{"name":"span"}}],[11,"def_span","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"get_filemap","","",4,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"generics":["rc"],"name":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"lookup_filemap_idx","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"ensure_filemap_source_present","","",4,{"inputs":[{"name":"self"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"bool"}}],[11,"count_lines","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filepathmapping"}}],[11,"empty","","",5,{"inputs":[],"output":{"name":"filepathmapping"}}],[11,"new","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"filepathmapping"}}],[11,"map_prefix","","Applies any path prefix substitution as defined by the mapping. The return value is the remapped path and a boolean indicating whether the path was affected by the mapping.",5,null],[11,"file_exists","","",9,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"abs_path","","",9,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"read_file","","",9,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[11,"lookup_char_pos","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"span_to_lines","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_string","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"merge_spans","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"call_span_if_macro","","",4,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"ensure_filemap_source_present","","",4,{"inputs":[{"name":"self"},{"generics":["filemap"],"name":"rc"}],"output":{"name":"bool"}}],[11,"doctest_offset_line","","No op.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"diagnostic","","",null,null],[4,"DiagnosticId","swc_common::errors::diagnostic","",null,null],[13,"Error","","",0,null],[13,"Lint","","",0,null],[3,"DiagnosticStyledString","","",null,null],[12,"0","","",1,null],[3,"Diagnostic","","",null,null],[12,"db","","",6,null],[11,"new","swc_common::errors","",6,{"inputs":[{"name":"handler"},{"name":"level"},{"name":"str"}],"output":{"name":"self"}}],[11,"new_with_code","","",6,{"inputs":[{"name":"handler"},{"name":"level"},{"generics":["diagnosticid"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"emit","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or canceled or it will panic when dropped).",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cancelled","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"t"}],"output":{"name":"self"}}],[11,"note_expected_found","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"}],"output":{"name":"self"}}],[11,"note_expected_found_extra","","",6,{"inputs":[{"name":"self"},{"name":"display"},{"name":"diagnosticstyledstring"},{"name":"diagnosticstyledstring"},{"name":"display"},{"name":"display"}],"output":{"name":"self"}}],[11,"note","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_note","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"warn","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_warn","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_help","","",6,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"self"}}],[11,"span_suggestion_short","","Prints out a message with a suggested edit of the code. If the suggestion is presented inline it will only show the text message and not the text.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"string"}],"output":{"name":"self"}}],[11,"span_suggestions","","Prints out a message with multiple suggested edits of the code.",6,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"span","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",6,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"builder"}],"output":{"name":"self"}}],[0,"handler","","",null,null],[3,"Handler","swc_common::errors::handler","A handler deals with errors.",null,null],[12,"inner","","",7,null],[11,"with_tty_emitter","swc_common::errors","",7,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"generics":["rc"],"name":"option"}],"output":{"name":"self"}}],[11,"with_tty_emitter_and_flags","","",7,{"inputs":[{"name":"colorconfig"},{"generics":["rc"],"name":"option"},{"name":"handlerflags"}],"output":{"name":"self"}}],[11,"note","","",7,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnostic"}}],[11,"warn","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnostic"}}],[11,"error","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnostic"}}],[11,"fatal","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnostic"}}],[11,"has_errors","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"track_diagnostics","","",7,null],[11,"from","","",7,{"inputs":[{"name":"rustchandler"}],"output":{"name":"self"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["pathbuf"],"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",8,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["string"],"name":"result"}}],[0,"fold","swc_common","",null,null],[8,"Folder","swc_common::fold","Folder based on a type system.",null,null],[10,"fold","","By default, this folds fields of `node` and reconstruct `node` with folded fields",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[8,"FoldWith","","Trait implemented for types which know how to fold itself.",null,null],[10,"fold_children","","This is used by default implementation of `Folder<Self>::fold`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","","Call `f.fold(self)`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"pos","swc_common","This module is almost copied from [rustc_errors][].",null,null],[3,"BytePos","swc_common::pos","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",12,null],[3,"Span","","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[12,"0","","",13,null],[3,"SpanData","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",14,null],[12,"hi","","",14,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",14,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",15,null],[12,"name_was_remapped","","True if the `name` field above has been modified by -Zremap-path-prefix",15,null],[12,"unmapped_path","","The unmapped path of the file that the source came from. Set to `None` if the FileMap was imported from an external crate.",15,null],[12,"crate_of_origin","","Indicates which crate this FileMap was imported from.",15,null],[12,"src","","The complete source code",15,null],[12,"src_hash","","The source code's hash",15,null],[12,"external_src","","The external source code (used for external crates, which will have a `None` value as `self.src`.",15,null],[12,"start_pos","","The start position of this source in the CodeMap",15,null],[12,"end_pos","","The end position of this source in the CodeMap",15,null],[12,"lines","","Locations of lines beginnings in the source code",15,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",15,null],[12,"non_narrow_chars","","Width of characters that are not narrow in the source code",15,null],[12,"name_hash","","A hash of the filename, used for speeding up the incr. comp. hashing.",15,null],[4,"FileName","","Differentiates between real files and common virtual files",null,null],[13,"Real","","",16,null],[13,"Macros","","e.g. \"std\" macros",16,null],[13,"QuoteExpansion","","call to `quote!`",16,null],[13,"Anon","","Command line",16,null],[13,"MacroExpansion","","Hack in src/libsyntax/parse.rs FIXME(jseyfried)",16,null],[13,"ProcMacroSourceCode","","",16,null],[13,"CfgSpec","","Strings provided as --cfg [cfgspec] stored in a crate_cfg",16,null],[13,"Custom","","Custom sources for explicit parser calls from plugins and drivers",16,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[12,"primary_spans","","",17,null],[12,"span_labels","","",17,null],[0,"span","","",null,null],[3,"BytePos","swc_common::pos::span","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",12,null],[3,"Span","","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[12,"0","","",13,null],[3,"SpanData","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",14,null],[12,"hi","","",14,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",14,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[8,"Spanned","","",null,null],[10,"from_unspanned","","Creates `Self` from `node` and `span.",18,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","No op as span does not have any child.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"span"}}],[8,"Spanned","swc_common::pos","",null,null],[10,"from_unspanned","","Creates `Self` from `node` and `span.",18,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"self"}}],[8,"AstNode","swc_common","Currently just a marker trait.",null,null],[8,"FoldWith","","Trait implemented for types which know how to fold itself.",null,null],[10,"fold_children","","This is used by default implementation of `Folder<Self>::fold`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fold_with","swc_common::fold","Call `f.fold(self)`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"Folder","swc_common","Folder based on a type system.",null,null],[10,"fold","","By default, this folds fields of `node` and reconstruct `node` with folded fields",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","swc_common::errors","",3,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"clone","swc_common::errors::diagnostic","",0,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticid"}}],[11,"clone","swc_common::errors","",2,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["level"],"name":"result"}}],[11,"decode","swc_common::errors::diagnostic","",0,{"inputs":[{"name":"__d"}],"output":{"generics":["diagnosticid"],"name":"result"}}],[11,"eq","swc_common::errors","",2,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"eq","swc_common::errors::diagnostic","",1,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"diagnosticstyledstring"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"diagnosticid"}],"output":{"name":"bool"}}],[11,"hash","swc_common::errors","",3,null],[11,"hash","swc_common::errors::diagnostic","",0,null],[11,"assert_receiver_is_total_eq","swc_common::errors","",2,null],[11,"assert_receiver_is_total_eq","swc_common::errors::diagnostic","",1,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","swc_common::errors","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","swc_common::errors::diagnostic","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","swc_common::errors","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_usize","swc_common::pos::span","",12,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decode","swc_common::pos","",16,{"inputs":[{"name":"__d"}],"output":{"generics":["filename"],"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"generics":["filemap"],"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"generics":["multispan"],"name":"result"}}],[11,"decode","swc_common::pos::span","",12,{"inputs":[{"name":"d"}],"output":{"generics":["bytepos"],"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"clone","swc_common::pos","",16,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"filemap"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"clone","swc_common::pos::span","",13,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","swc_common::pos","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"partial_cmp","swc_common::pos::span","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"default_encode","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","swc_common::pos","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","swc_common::pos::span","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"cmp","swc_common::pos","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"ordering"}}],[11,"add","swc_common::pos::span","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"eq","swc_common::pos","",17,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"eq","swc_common::pos::span","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"eq","swc_common::pos","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"hash","swc_common::pos::span","",13,null],[11,"hash","swc_common::pos","",16,null],[11,"hash","swc_common::pos::span","",14,null],[11,"hash","","",12,null],[11,"hash","swc_common::pos","",17,null],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","swc_common::pos::span","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","swc_common::pos","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","swc_common::pos::span","",14,null],[11,"assert_receiver_is_total_eq","","",13,null],[11,"assert_receiver_is_total_eq","","",12,null],[11,"assert_receiver_is_total_eq","swc_common::pos","",17,null],[11,"assert_receiver_is_total_eq","","",16,null],[11,"sub","swc_common::pos::span","",12,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"span"}}],[11,"from","swc_common::pos","",17,{"inputs":[{"generics":["span"],"name":"vec"}],"output":{"name":"multispan"}}],[11,"from","","",16,{"inputs":[{"name":"pathbuf"}],"output":{"name":"filename"}}],[11,"from","","",17,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","swc_common::pos::span","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","swc_common::pos","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default_decode","swc_common::pos::span","",13,{"inputs":[{"name":"d"}],"output":{"generics":["span"],"name":"result"}}],[11,"new","swc_common::errors::diagnostic","",1,{"inputs":[],"output":{"name":"diagnosticstyledstring"}}],[11,"push_normal","","",1,null],[11,"push_highlighted","","",1,null],[11,"normal","","",1,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"highlighted","","",1,{"inputs":[{"name":"s"}],"output":{"name":"diagnosticstyledstring"}}],[11,"content","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_str","swc_common::errors","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","swc_common::pos::span","",13,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"data","","",13,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"lo","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_lo","","",13,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"hi","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_hi","","",13,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"ctxt","","",13,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"with_ctxt","","",13,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",13,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"next_point","","Returns a new span representing the next character after the end-point of this span",13,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","Return true if `self` fully encloses `other`.",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",13,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",13,{"inputs":[{"name":"self"}],"output":{"generics":["nameandspan"],"name":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_desugaring","","Check if this span arises from a compiler desugaring of kind `kind`.",13,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"compiler_desugaring_kind","","Return the compiler desugaring that created this span, or None if this span is not from a desugaring.",13,{"inputs":[{"name":"self"}],"output":{"generics":["compilerdesugaringkind"],"name":"option"}}],[11,"allows_unsafe","","Check if a span is \"internal\" to a macro in which `unsafe` can be used without triggering the `unsafe_code` lint",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"macro_backtrace","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["macrobacktrace"],"name":"vec"}}],[11,"to","","Return a `Span` that would enclose both `self` and `end`.",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"between","","Return a `Span` between the end of `self` to the beginning of `end`.",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"until","","Return a `Span` between the beginning of `self` to the beginning of `end`.",13,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"with_lo","","",14,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"with_hi","","",14,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"with_ctxt","","",14,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"new","swc_common::pos","",15,{"inputs":[{"name":"filename"},{"name":"bool"},{"name":"filename"},{"name":"string"},{"name":"bytepos"}],"output":{"name":"filemap"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",15,null],[11,"add_external_src","","Add externally loaded source. If the hash of the input doesn't match or no input is supplied via None, it is interpreted as an error and the corresponding enum variant is set. The return value signifies whether some kind of source is present.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"get_line","","Get a line from the list of pre-computed line-beginnings. The line number here is 0-based.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cow"],"name":"option"}}],[11,"record_multibyte_char","","",15,null],[11,"record_width","","",15,null],[11,"is_real_file","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_length","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_lines","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",15,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["usize"],"name":"option"}}],[11,"line_bounds","","",15,null],[11,"contains","","",15,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"is_real","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_macros","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",17,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",17,{"inputs":[{"generics":["span"],"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",17,null],[11,"primary_span","","Selects the first primary span (if any)",17,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",17,null],[11,"replace","","Replaces all occurrences of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",17,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",17,{"inputs":[{"name":"self"}],"output":{"generics":["spanlabel"],"name":"vec"}}]],"paths":[[4,"DiagnosticId"],[3,"DiagnosticStyledString"],[4,"ColorConfig"],[4,"Level"],[3,"CodeMap"],[3,"FilePathMapping"],[3,"Diagnostic"],[3,"Handler"],[8,"FileLoader"],[3,"RealFileLoader"],[8,"Folder"],[8,"FoldWith"],[3,"BytePos"],[3,"Span"],[3,"SpanData"],[3,"FileMap"],[4,"FileName"],[3,"MultiSpan"],[8,"Spanned"]]};
searchIndex["swc_ecma_ast"] = {"doc":"","items":[[3,"Class","swc_ecma_ast","",null,null],[12,"span","","",0,null],[12,"super_class","","",0,null],[12,"body","","",0,null],[3,"ClassMethod","","",null,null],[12,"key","","",1,null],[12,"function","","",1,null],[12,"kind","","",1,null],[12,"is_static","","",1,null],[3,"FnDecl","","",null,null],[12,"ident","","",2,null],[12,"function","","",2,null],[3,"ClassDecl","","",null,null],[12,"ident","","",3,null],[12,"class","","",3,null],[3,"VarDecl","","",null,null],[12,"span","","",4,null],[12,"kind","","",4,null],[12,"decls","","",4,null],[3,"VarDeclarator","","",null,null],[12,"span","","",5,null],[12,"name","","",5,null],[12,"init","","Initialization expresion.",5,null],[3,"Expr","","",null,null],[12,"span","","",6,null],[12,"node","","",6,null],[3,"ArrayLit","","Array literal.",null,null],[12,"elems","","",7,null],[3,"ObjectLit","","Object literal.",null,null],[12,"props","","",8,null],[3,"UnaryExpr","","",null,null],[12,"op","","",9,null],[12,"arg","","",9,null],[3,"UpdateExpr","","",null,null],[12,"op","","",10,null],[12,"prefix","","",10,null],[12,"arg","","",10,null],[3,"BinExpr","","",null,null],[12,"op","","",11,null],[12,"left","","",11,null],[12,"right","","",11,null],[3,"FnExpr","","Function expression.",null,null],[12,"ident","","",12,null],[12,"function","","",12,null],[3,"ClassExpr","","Class expression.",null,null],[12,"ident","","",13,null],[12,"class","","",13,null],[3,"AssignExpr","","",null,null],[12,"op","","",14,null],[12,"left","","",14,null],[12,"right","","",14,null],[3,"MemberExpr","","",null,null],[12,"obj","","",15,null],[12,"prop","","",15,null],[12,"computed","","",15,null],[3,"CondExpr","","",null,null],[12,"test","","",16,null],[12,"cons","","",16,null],[12,"alt","","",16,null],[3,"CallExpr","","",null,null],[12,"callee","","",17,null],[12,"args","","",17,null],[3,"NewExpr","","",null,null],[12,"callee","","",18,null],[12,"args","","",18,null],[3,"SeqExpr","","",null,null],[12,"exprs","","",19,null],[3,"ArrowExpr","","",null,null],[12,"params","","",20,null],[12,"body","","",20,null],[12,"is_generator","","",20,null],[12,"is_async","","",20,null],[3,"YieldExpr","","",null,null],[12,"arg","","",21,null],[12,"delegate","","",21,null],[3,"MetaPropExpr","","",null,null],[12,"meta","","",22,null],[12,"prop","","",22,null],[3,"AwaitExpr","","",null,null],[12,"arg","","",23,null],[3,"TplLit","","",null,null],[12,"tag","","",24,null],[12,"exprs","","",24,null],[12,"quasis","","",24,null],[3,"TplElement","","",null,null],[12,"tail","","",25,null],[12,"cooked","","",25,null],[12,"raw","","",25,null],[3,"Function","","Common parts of function and method.",null,null],[12,"params","","",26,null],[12,"span","","",26,null],[12,"body","","",26,null],[12,"is_generator","","",26,null],[12,"is_async","","",26,null],[3,"Regex","","",null,null],[12,"exp","","",27,null],[12,"flags","","",27,null],[3,"Number","","",null,null],[12,"0","","",28,null],[3,"Module","","",null,null],[12,"body","","",29,null],[3,"ModuleDecl","","",null,null],[12,"span","","",30,null],[12,"node","","",30,null],[3,"ImportSpecifier","","",null,null],[12,"span","","",31,null],[12,"local","","",31,null],[12,"node","","",31,null],[3,"ExportSpecifier","","",null,null],[12,"orig","","`foo` in `export { foo as bar }`",32,null],[12,"exported","","`Some(bar)` in `export { foo as bar }`",32,null],[3,"Pat","","",null,null],[12,"span","","",33,null],[12,"node","","",33,null],[3,"Prop","","",null,null],[12,"span","","",34,null],[12,"node","","",34,null],[3,"Stmt","","",null,null],[12,"span","","",35,null],[12,"node","","",35,null],[3,"BlockStmt","","Use when only block statements are allowed.",null,null],[12,"span","","Span of brace.",36,null],[12,"stmts","","",36,null],[3,"WithStmt","","",null,null],[12,"obj","","",37,null],[12,"body","","",37,null],[3,"ReturnStmt","","",null,null],[12,"arg","","",38,null],[3,"LabeledStmt","","",null,null],[12,"label","","",39,null],[12,"body","","",39,null],[3,"BreakStmt","","",null,null],[12,"label","","",40,null],[3,"ContinueStmt","","",null,null],[12,"label","","",41,null],[3,"IfStmt","","",null,null],[12,"test","","",42,null],[12,"cons","","",42,null],[12,"alt","","",42,null],[3,"SwitchStmt","","",null,null],[12,"discriminant","","",43,null],[12,"cases","","",43,null],[3,"ThrowStmt","","",null,null],[12,"arg","","",44,null],[3,"TryStmt","","",null,null],[12,"block","","",45,null],[12,"handler","","",45,null],[12,"finalizer","","",45,null],[3,"WhileStmt","","",null,null],[12,"test","","",46,null],[12,"body","","",46,null],[3,"DoWhileStmt","","",null,null],[12,"test","","",47,null],[12,"body","","",47,null],[3,"ForStmt","","",null,null],[12,"init","","",48,null],[12,"test","","",48,null],[12,"update","","",48,null],[12,"body","","",48,null],[3,"ForInStmt","","",null,null],[12,"left","","",49,null],[12,"right","","",49,null],[12,"body","","",49,null],[3,"ForOfStmt","","",null,null],[12,"left","","",50,null],[12,"right","","",50,null],[12,"body","","",50,null],[3,"SwitchCase","","",null,null],[12,"test","","None for `default:`",51,null],[12,"cons","","",51,null],[3,"CatchClause","","",null,null],[12,"param","","",52,null],[12,"body","","",52,null],[3,"Ident","","Ident with span.",null,null],[12,"span","","",53,null],[12,"sym","","",53,null],[3,"DebugUsingDisplay","","",null,null],[12,"0","","",54,null],[4,"ClassMethodKind","","",null,null],[13,"Constructor","","",55,null],[13,"Method","","",55,null],[13,"Getter","","",55,null],[13,"Setter","","",55,null],[4,"Decl","","",null,null],[13,"Class","","",56,null],[13,"Fn","","",56,null],[13,"Var","","",56,null],[4,"VarDeclKind","","",null,null],[13,"Var","","",57,null],[13,"Let","","",57,null],[13,"Const","","",57,null],[4,"ExprKind","","",null,null],[13,"This","","",58,null],[13,"Array","","",58,null],[13,"Object","","",58,null],[13,"Fn","","",58,null],[13,"Unary","","",58,null],[13,"Update","","`++v`, `--v`, `v++`, `v--`",58,null],[13,"Bin","","",58,null],[13,"Assign","","",58,null],[13,"Member","","A member expression. If computed is true, the node corresponds to a computed (a[b]) member expression and property is an Expression. If computed is false, the node corresponds to a static (a.b) member expression and property is an Identifier.",58,null],[13,"Cond","","true ? 'a' : 'b'",58,null],[13,"Call","","",58,null],[13,"New","","`new Cat()`",58,null],[13,"Seq","","",58,null],[13,"Ident","","",58,null],[13,"Lit","","",58,null],[13,"Tpl","","",58,null],[13,"Arrow","","",58,null],[13,"Class","","",58,null],[13,"Yield","","",58,null],[13,"MetaProp","","",58,null],[13,"Await","","",58,null],[13,"Paren","","",58,null],[4,"ExprOrSuper","","",null,null],[13,"Super","","",59,null],[13,"Expr","","",59,null],[4,"ExprOrSpread","","",null,null],[13,"Expr","","",60,null],[13,"Spread","","",60,null],[4,"BlockStmtOrExpr","","",null,null],[13,"BlockStmt","","",61,null],[13,"Expr","","",61,null],[4,"PatOrExpr","","",null,null],[13,"Pat","","",62,null],[13,"Expr","","",62,null],[4,"Lit","","",null,null],[13,"Str","","",63,null],[13,"Bool","","",63,null],[13,"Null","","",63,null],[13,"Num","","",63,null],[13,"Regex","","",63,null],[4,"ModuleItem","","",null,null],[13,"Stmt","","",64,null],[13,"ModuleDecl","","",64,null],[4,"ModuleDeclKind","","",null,null],[13,"Import","","",65,null],[12,"specifiers","swc_ecma_ast::ModuleDeclKind","",65,null],[12,"src","","",65,null],[13,"ExportDecl","swc_ecma_ast","",65,null],[13,"ExportNamed","","`export { foo } from 'mod'` `export { foo as bar } from 'mod'`",65,null],[12,"specifiers","swc_ecma_ast::ModuleDeclKind","",65,null],[12,"src","","",65,null],[13,"ExportDefaultDecl","swc_ecma_ast","",65,null],[13,"ExportDefaultExpr","","",65,null],[13,"ExportAll","","`export * from 'mod'`",65,null],[12,"src","swc_ecma_ast::ModuleDeclKind","",65,null],[4,"ExportDefaultDecl","swc_ecma_ast","",null,null],[13,"Class","","",66,null],[12,"ident","swc_ecma_ast::ExportDefaultDecl","",66,null],[12,"class","","",66,null],[13,"Fn","swc_ecma_ast","",66,null],[12,"ident","swc_ecma_ast::ExportDefaultDecl","",66,null],[12,"function","","",66,null],[13,"Var","swc_ecma_ast","",66,null],[4,"ImportSpecifierKind","","",null,null],[13,"Specific","","e.g. local = foo, imported = None `import { foo } from 'mod.js'` e.g. local = bar, imported = Some(foo) for `import { foo as bar } from 'mod.js'`",67,null],[12,"imported","swc_ecma_ast::ImportSpecifierKind","",67,null],[13,"Default","swc_ecma_ast","e.g. `import foo from 'mod.js'`",67,null],[13,"Namespace","","e.g. `import * as foo from 'mod.js'`.",67,null],[4,"BinaryOp","","",null,null],[13,"EqEq","","`==`",68,null],[13,"NotEq","","`!=`",68,null],[13,"EqEqEq","","`===\"`",68,null],[13,"NotEqEq","","`!==`",68,null],[13,"Lt","","`<`",68,null],[13,"LtEq","","`<=`",68,null],[13,"Gt","","`>`",68,null],[13,"GtEq","","`>=`",68,null],[13,"LShift","","`<<`",68,null],[13,"RShift","","`>>`",68,null],[13,"ZeroFillRShift","","`>>>`",68,null],[13,"Add","","`+`",68,null],[13,"Sub","","`-`",68,null],[13,"Mul","","`*`",68,null],[13,"Div","","`/`",68,null],[13,"Mod","","`%`",68,null],[13,"BitOr","","`|`",68,null],[13,"BitXor","","`^`",68,null],[13,"BitAnd","","`&`",68,null],[13,"LogicalOr","","`||`",68,null],[13,"LogicalAnd","","`&&`",68,null],[13,"In","","`in`",68,null],[13,"InstanceOf","","`instanceof`",68,null],[13,"Exp","","`**`",68,null],[4,"AssignOp","","",null,null],[13,"Assign","","`=`",69,null],[13,"AddAssign","","`+=`",69,null],[13,"SubAssign","","`-=`",69,null],[13,"MulAssign","","`*=`",69,null],[13,"DivAssign","","`/=`",69,null],[13,"ModAssign","","`%=`",69,null],[13,"LShiftAssign","","`<<=`",69,null],[13,"RShiftAssign","","`>>=`",69,null],[13,"ZeroFillRShiftAssign","","`>>>=`",69,null],[13,"BitOrAssign","","`|=`",69,null],[13,"BitXorAssign","","`^=`",69,null],[13,"BitAndAssign","","`&=`",69,null],[13,"ExpAssign","","`**=`",69,null],[4,"UpdateOp","","",null,null],[13,"PlusPlus","","`++`",70,null],[13,"MinusMinus","","`--`",70,null],[4,"UnaryOp","","",null,null],[13,"Minus","","`-`",71,null],[13,"Plus","","`+`",71,null],[13,"Bang","","`!`",71,null],[13,"Tilde","","`~`",71,null],[13,"TypeOf","","`typeof`",71,null],[13,"Void","","`void`",71,null],[13,"Delete","","`delete`",71,null],[4,"PatKind","","",null,null],[13,"Ident","","",72,null],[13,"Array","","",72,null],[13,"Rest","","",72,null],[13,"Object","","",72,null],[13,"Assign","","",72,null],[12,"left","swc_ecma_ast::PatKind","",72,null],[12,"right","","",72,null],[13,"Expr","swc_ecma_ast","Only for for-in / for-of loops. This is syntatically valid.",72,null],[4,"ObjectPatProp","","",null,null],[13,"KeyValue","","`{key: value}`",73,null],[12,"key","swc_ecma_ast::ObjectPatProp","",73,null],[12,"value","","",73,null],[13,"Assign","swc_ecma_ast","`{key}` or `{key = value}`",73,null],[12,"key","swc_ecma_ast::ObjectPatProp","",73,null],[12,"value","","",73,null],[4,"PropKind","swc_ecma_ast","",null,null],[13,"Shorthand","","`a` in `{ a, }`",74,null],[13,"KeyValue","","`key: value` in `{ key: value, }`",74,null],[12,"key","swc_ecma_ast::PropKind","",74,null],[12,"value","","",74,null],[13,"Assign","swc_ecma_ast","This is invalid for object literal.",74,null],[12,"key","swc_ecma_ast::PropKind","",74,null],[12,"value","","",74,null],[13,"Getter","swc_ecma_ast","",74,null],[12,"key","swc_ecma_ast::PropKind","",74,null],[12,"body","","",74,null],[13,"Setter","swc_ecma_ast","",74,null],[12,"key","swc_ecma_ast::PropKind","",74,null],[12,"param","","",74,null],[12,"body","","",74,null],[13,"Method","swc_ecma_ast","",74,null],[12,"key","swc_ecma_ast::PropKind","",74,null],[12,"function","","",74,null],[4,"PropName","swc_ecma_ast","",null,null],[13,"Ident","","",75,null],[13,"Str","","String literal.",75,null],[13,"Num","","Numeric literal.",75,null],[13,"Computed","","",75,null],[4,"StmtKind","","",null,null],[13,"Expr","","",76,null],[13,"Block","","",76,null],[13,"Empty","","",76,null],[13,"Debugger","","",76,null],[13,"With","","",76,null],[13,"Return","","",76,null],[13,"Labeled","","",76,null],[13,"Break","","",76,null],[13,"Continue","","",76,null],[13,"If","","",76,null],[13,"Switch","","",76,null],[13,"Throw","","",76,null],[13,"Try","","A try statement. If handler is null then finalizer must be a BlockStmt.",76,null],[13,"While","","",76,null],[13,"DoWhile","","",76,null],[13,"For","","",76,null],[13,"ForIn","","",76,null],[13,"ForOf","","",76,null],[13,"Decl","","",76,null],[4,"VarDeclOrPat","","",null,null],[13,"VarDecl","","",77,null],[13,"Pat","","",77,null],[4,"VarDeclOrExpr","","",null,null],[13,"VarDecl","","",78,null],[13,"Expr","","",78,null],[0,"macros","","",null,null],[0,"class","","",null,null],[3,"Class","swc_ecma_ast::class","",null,null],[12,"span","","",0,null],[12,"super_class","","",0,null],[12,"body","","",0,null],[3,"ClassMethod","","",null,null],[12,"key","","",1,null],[12,"function","","",1,null],[12,"kind","","",1,null],[12,"is_static","","",1,null],[4,"ClassMethodKind","","",null,null],[13,"Constructor","","",55,null],[13,"Method","","",55,null],[13,"Getter","","",55,null],[13,"Setter","","",55,null],[11,"fold_children","swc_ecma_ast","",0,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"fold_children","","",1,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"classmethod"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"classmethod"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"classmethod"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"classmethodkind"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"classmethodkind"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",55,null],[11,"hash","","",55,null],[11,"fold_children","","",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"decl","","",null,null],[3,"FnDecl","swc_ecma_ast::decl","",null,null],[12,"ident","","",2,null],[12,"function","","",2,null],[3,"ClassDecl","","",null,null],[12,"ident","","",3,null],[12,"class","","",3,null],[3,"VarDecl","","",null,null],[12,"span","","",4,null],[12,"kind","","",4,null],[12,"decls","","",4,null],[3,"VarDeclarator","","",null,null],[12,"span","","",5,null],[12,"name","","",5,null],[12,"init","","Initialization expresion.",5,null],[4,"Decl","","",null,null],[13,"Class","","",56,null],[13,"Fn","","",56,null],[13,"Var","","",56,null],[4,"VarDeclKind","","",null,null],[13,"Var","","",57,null],[13,"Let","","",57,null],[13,"Const","","",57,null],[11,"fold_children","swc_ecma_ast","",56,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"decl"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"decl"}],"output":{"name":"bool"}}],[11,"span","","",56,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fold_children","","",2,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",3,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"classdecl"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"classdecl"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"classdecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",4,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vardecl"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"vardecl"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"vardecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",57,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vardeclkind"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"vardeclkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",5,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vardeclarator"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"vardeclarator"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"vardeclarator"}],"output":{"name":"bool"}}],[0,"expr","","",null,null],[3,"Expr","swc_ecma_ast::expr","",null,null],[12,"span","","",6,null],[12,"node","","",6,null],[3,"ArrayLit","","Array literal.",null,null],[12,"elems","","",7,null],[3,"ObjectLit","","Object literal.",null,null],[12,"props","","",8,null],[3,"UnaryExpr","","",null,null],[12,"op","","",9,null],[12,"arg","","",9,null],[3,"UpdateExpr","","",null,null],[12,"op","","",10,null],[12,"prefix","","",10,null],[12,"arg","","",10,null],[3,"BinExpr","","",null,null],[12,"op","","",11,null],[12,"left","","",11,null],[12,"right","","",11,null],[3,"FnExpr","","Function expression.",null,null],[12,"ident","","",12,null],[12,"function","","",12,null],[3,"ClassExpr","","Class expression.",null,null],[12,"ident","","",13,null],[12,"class","","",13,null],[3,"AssignExpr","","",null,null],[12,"op","","",14,null],[12,"left","","",14,null],[12,"right","","",14,null],[3,"MemberExpr","","",null,null],[12,"obj","","",15,null],[12,"prop","","",15,null],[12,"computed","","",15,null],[3,"CondExpr","","",null,null],[12,"test","","",16,null],[12,"cons","","",16,null],[12,"alt","","",16,null],[3,"CallExpr","","",null,null],[12,"callee","","",17,null],[12,"args","","",17,null],[3,"NewExpr","","",null,null],[12,"callee","","",18,null],[12,"args","","",18,null],[3,"SeqExpr","","",null,null],[12,"exprs","","",19,null],[3,"ArrowExpr","","",null,null],[12,"params","","",20,null],[12,"body","","",20,null],[12,"is_generator","","",20,null],[12,"is_async","","",20,null],[3,"YieldExpr","","",null,null],[12,"arg","","",21,null],[12,"delegate","","",21,null],[3,"MetaPropExpr","","",null,null],[12,"meta","","",22,null],[12,"prop","","",22,null],[3,"AwaitExpr","","",null,null],[12,"arg","","",23,null],[3,"TplLit","","",null,null],[12,"tag","","",24,null],[12,"exprs","","",24,null],[12,"quasis","","",24,null],[3,"TplElement","","",null,null],[12,"tail","","",25,null],[12,"cooked","","",25,null],[12,"raw","","",25,null],[4,"ExprKind","","",null,null],[13,"This","","",58,null],[13,"Array","","",58,null],[13,"Object","","",58,null],[13,"Fn","","",58,null],[13,"Unary","","",58,null],[13,"Update","","`++v`, `--v`, `v++`, `v--`",58,null],[13,"Bin","","",58,null],[13,"Assign","","",58,null],[13,"Member","","A member expression. If computed is true, the node corresponds to a computed (a[b]) member expression and property is an Expression. If computed is false, the node corresponds to a static (a.b) member expression and property is an Identifier.",58,null],[13,"Cond","","true ? 'a' : 'b'",58,null],[13,"Call","","",58,null],[13,"New","","`new Cat()`",58,null],[13,"Seq","","",58,null],[13,"Ident","","",58,null],[13,"Lit","","",58,null],[13,"Tpl","","",58,null],[13,"Arrow","","",58,null],[13,"Class","","",58,null],[13,"Yield","","",58,null],[13,"MetaProp","","",58,null],[13,"Await","","",58,null],[13,"Paren","","",58,null],[4,"ExprOrSuper","","",null,null],[13,"Super","","",59,null],[13,"Expr","","",59,null],[4,"ExprOrSpread","","",null,null],[13,"Expr","","",60,null],[13,"Spread","","",60,null],[4,"BlockStmtOrExpr","","",null,null],[13,"BlockStmt","","",61,null],[13,"Expr","","",61,null],[4,"PatOrExpr","","",null,null],[13,"Pat","","",62,null],[13,"Expr","","",62,null],[11,"fold_children","swc_ecma_ast","",6,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",6,{"inputs":[{"name":"exprkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",58,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",7,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"arraylit"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"arraylit"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"arraylit"}],"output":{"name":"bool"}}],[11,"fold_children","","",8,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"objectlit"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"objectlit"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"objectlit"}],"output":{"name":"bool"}}],[11,"fold_children","","",9,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unaryexpr"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"unaryexpr"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"unaryexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",10,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"updateexpr"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"updateexpr"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"updateexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",11,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"binexpr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"binexpr"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"binexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",12,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fnexpr"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"fnexpr"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"fnexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",13,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classexpr"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classexpr"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",14,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"assignexpr"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"assignexpr"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"assignexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",15,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"memberexpr"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"memberexpr"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"memberexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",16,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"condexpr"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"condexpr"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"condexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",17,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"callexpr"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"callexpr"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"callexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",18,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"newexpr"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"newexpr"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"newexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",19,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"seqexpr"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"seqexpr"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"seqexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",20,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"arrowexpr"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"arrowexpr"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"arrowexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",21,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"yieldexpr"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"yieldexpr"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"yieldexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",22,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"metapropexpr"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"metapropexpr"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"metapropexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",23,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"awaitexpr"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"awaitexpr"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"awaitexpr"}],"output":{"name":"bool"}}],[11,"fold_children","","",24,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tpllit"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"tpllit"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"tpllit"}],"output":{"name":"bool"}}],[11,"fold_children","","",25,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tplelement"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"tplelement"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"tplelement"}],"output":{"name":"bool"}}],[11,"fold_children","","",59,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"exprorsuper"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"exprorsuper"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"exprorsuper"}],"output":{"name":"bool"}}],[11,"span","","",59,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fold_children","","",60,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"exprorspread"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"exprorspread"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"exprorspread"}],"output":{"name":"bool"}}],[11,"fold_children","","",61,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"blockstmtorexpr"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"blockstmtorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"blockstmtorexpr"}],"output":{"name":"bool"}}],[11,"span","","",61,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fold_children","","",62,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"patorexpr"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"patorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"patorexpr"}],"output":{"name":"bool"}}],[0,"function","","",null,null],[3,"Function","swc_ecma_ast::function","Common parts of function and method.",null,null],[12,"params","","",26,null],[12,"span","","",26,null],[12,"body","","",26,null],[12,"is_generator","","",26,null],[12,"is_async","","",26,null],[11,"fold_children","swc_ecma_ast","",26,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[0,"lit","","",null,null],[3,"Regex","swc_ecma_ast::lit","",null,null],[12,"exp","","",27,null],[12,"flags","","",27,null],[3,"Number","","",null,null],[12,"0","","",28,null],[4,"Lit","","",null,null],[13,"Str","","",63,null],[13,"Bool","","",63,null],[13,"Null","","",63,null],[13,"Num","","",63,null],[13,"Regex","","",63,null],[6,"RegexFlags","","",null,null],[11,"fold_children","swc_ecma_ast","",63,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"fold_children","","",27,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"fold_children","","",28,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"module_decl","","",null,null],[3,"ModuleDecl","swc_ecma_ast::module_decl","",null,null],[12,"span","","",30,null],[12,"node","","",30,null],[3,"ImportSpecifier","","",null,null],[12,"span","","",31,null],[12,"local","","",31,null],[12,"node","","",31,null],[3,"ExportSpecifier","","",null,null],[12,"orig","","`foo` in `export { foo as bar }`",32,null],[12,"exported","","`Some(bar)` in `export { foo as bar }`",32,null],[4,"ModuleDeclKind","","",null,null],[13,"Import","","",65,null],[12,"specifiers","swc_ecma_ast::module_decl::ModuleDeclKind","",65,null],[12,"src","","",65,null],[13,"ExportDecl","swc_ecma_ast::module_decl","",65,null],[13,"ExportNamed","","`export { foo } from 'mod'` `export { foo as bar } from 'mod'`",65,null],[12,"specifiers","swc_ecma_ast::module_decl::ModuleDeclKind","",65,null],[12,"src","","",65,null],[13,"ExportDefaultDecl","swc_ecma_ast::module_decl","",65,null],[13,"ExportDefaultExpr","","",65,null],[13,"ExportAll","","`export * from 'mod'`",65,null],[12,"src","swc_ecma_ast::module_decl::ModuleDeclKind","",65,null],[4,"ExportDefaultDecl","swc_ecma_ast::module_decl","",null,null],[13,"Class","","",66,null],[12,"ident","swc_ecma_ast::module_decl::ExportDefaultDecl","",66,null],[12,"class","","",66,null],[13,"Fn","swc_ecma_ast::module_decl","",66,null],[12,"ident","swc_ecma_ast::module_decl::ExportDefaultDecl","",66,null],[12,"function","","",66,null],[13,"Var","swc_ecma_ast::module_decl","",66,null],[4,"ImportSpecifierKind","","",null,null],[13,"Specific","","e.g. local = foo, imported = None `import { foo } from 'mod.js'` e.g. local = bar, imported = Some(foo) for `import { foo as bar } from 'mod.js'`",67,null],[12,"imported","swc_ecma_ast::module_decl::ImportSpecifierKind","",67,null],[13,"Default","swc_ecma_ast::module_decl","e.g. `import foo from 'mod.js'`",67,null],[13,"Namespace","","e.g. `import * as foo from 'mod.js'`.",67,null],[11,"fold_children","swc_ecma_ast","",30,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"moduledecl"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"moduledecl"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"moduledecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",65,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"moduledeclkind"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"moduledeclkind"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"moduledeclkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",66,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"exportdefaultdecl"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"exportdefaultdecl"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"exportdefaultdecl"}],"output":{"name":"bool"}}],[11,"fold_children","","",31,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"importspecifier"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"importspecifier"}],"output":{"name":"bool"}}],[11,"fold_children","","",67,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"importspecifierkind"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"importspecifierkind"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"importspecifierkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",32,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"exportspecifier"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"exportspecifier"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"exportspecifier"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",30,{"inputs":[{"name":"moduledeclkind"},{"name":"span"}],"output":{"name":"self"}}],[0,"module","","",null,null],[3,"Module","swc_ecma_ast::module","",null,null],[12,"body","","",29,null],[4,"ModuleItem","","",null,null],[13,"Stmt","","",64,null],[13,"ModuleDecl","","",64,null],[11,"fold_children","swc_ecma_ast","",29,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"module"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"fold_children","","",64,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"moduleitem"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"moduleitem"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"moduleitem"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",64,{"inputs":[{"name":"stmtkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"from","","",64,{"inputs":[{"name":"stmt"}],"output":{"name":"self"}}],[0,"operators","","",null,null],[4,"BinaryOp","swc_ecma_ast::operators","",null,null],[13,"EqEq","","`==`",68,null],[13,"NotEq","","`!=`",68,null],[13,"EqEqEq","","`===\"`",68,null],[13,"NotEqEq","","`!==`",68,null],[13,"Lt","","`<`",68,null],[13,"LtEq","","`<=`",68,null],[13,"Gt","","`>`",68,null],[13,"GtEq","","`>=`",68,null],[13,"LShift","","`<<`",68,null],[13,"RShift","","`>>`",68,null],[13,"ZeroFillRShift","","`>>>`",68,null],[13,"Add","","`+`",68,null],[13,"Sub","","`-`",68,null],[13,"Mul","","`*`",68,null],[13,"Div","","`/`",68,null],[13,"Mod","","`%`",68,null],[13,"BitOr","","`|`",68,null],[13,"BitXor","","`^`",68,null],[13,"BitAnd","","`&`",68,null],[13,"LogicalOr","","`||`",68,null],[13,"LogicalAnd","","`&&`",68,null],[13,"In","","`in`",68,null],[13,"InstanceOf","","`instanceof`",68,null],[13,"Exp","","`**`",68,null],[4,"AssignOp","","",null,null],[13,"Assign","","`=`",69,null],[13,"AddAssign","","`+=`",69,null],[13,"SubAssign","","`-=`",69,null],[13,"MulAssign","","`*=`",69,null],[13,"DivAssign","","`/=`",69,null],[13,"ModAssign","","`%=`",69,null],[13,"LShiftAssign","","`<<=`",69,null],[13,"RShiftAssign","","`>>=`",69,null],[13,"ZeroFillRShiftAssign","","`>>>=`",69,null],[13,"BitOrAssign","","`|=`",69,null],[13,"BitXorAssign","","`^=`",69,null],[13,"BitAndAssign","","`&=`",69,null],[13,"ExpAssign","","`**=`",69,null],[4,"UpdateOp","","",null,null],[13,"PlusPlus","","`++`",70,null],[13,"MinusMinus","","`--`",70,null],[4,"UnaryOp","","",null,null],[13,"Minus","","`-`",71,null],[13,"Plus","","`+`",71,null],[13,"Bang","","`!`",71,null],[13,"Tilde","","`~`",71,null],[13,"TypeOf","","`typeof`",71,null],[13,"Void","","`void`",71,null],[13,"Delete","","`delete`",71,null],[11,"precedence","swc_ecma_ast","",68,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fold_children","","",68,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"binaryop"}}],[11,"assert_receiver_is_total_eq","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"binaryop"}],"output":{"name":"ordering"}}],[11,"hash","","",68,null],[11,"fold_children","","",69,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"assignop"}}],[11,"assert_receiver_is_total_eq","","",69,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"ordering"}}],[11,"hash","","",69,null],[11,"fold_children","","",70,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"updateop"}}],[11,"assert_receiver_is_total_eq","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"updateop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"updateop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"updateop"}],"output":{"name":"ordering"}}],[11,"hash","","",70,null],[11,"fold_children","","",71,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"unaryop"}}],[11,"assert_receiver_is_total_eq","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"unaryop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"unaryop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"unaryop"}],"output":{"name":"ordering"}}],[11,"hash","","",71,null],[0,"pat","","",null,null],[3,"Pat","swc_ecma_ast::pat","",null,null],[12,"span","","",33,null],[12,"node","","",33,null],[4,"PatKind","","",null,null],[13,"Ident","","",72,null],[13,"Array","","",72,null],[13,"Rest","","",72,null],[13,"Object","","",72,null],[13,"Assign","","",72,null],[12,"left","swc_ecma_ast::pat::PatKind","",72,null],[12,"right","","",72,null],[13,"Expr","swc_ecma_ast::pat","Only for for-in / for-of loops. This is syntatically valid.",72,null],[4,"ObjectPatProp","","",null,null],[13,"KeyValue","","`{key: value}`",73,null],[12,"key","swc_ecma_ast::pat::ObjectPatProp","",73,null],[12,"value","","",73,null],[13,"Assign","swc_ecma_ast::pat","`{key}` or `{key = value}`",73,null],[12,"key","swc_ecma_ast::pat::ObjectPatProp","",73,null],[12,"value","","",73,null],[11,"fold_children","swc_ecma_ast","",33,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",33,{"inputs":[{"name":"patkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",72,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",73,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"objectpatprop"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"objectpatprop"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"objectpatprop"}],"output":{"name":"bool"}}],[11,"from","","",33,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[0,"prop","","",null,null],[3,"Prop","swc_ecma_ast::prop","",null,null],[12,"span","","",34,null],[12,"node","","",34,null],[4,"PropKind","","",null,null],[13,"Shorthand","","`a` in `{ a, }`",74,null],[13,"KeyValue","","`key: value` in `{ key: value, }`",74,null],[12,"key","swc_ecma_ast::prop::PropKind","",74,null],[12,"value","","",74,null],[13,"Assign","swc_ecma_ast::prop","This is invalid for object literal.",74,null],[12,"key","swc_ecma_ast::prop::PropKind","",74,null],[12,"value","","",74,null],[13,"Getter","swc_ecma_ast::prop","",74,null],[12,"key","swc_ecma_ast::prop::PropKind","",74,null],[12,"body","","",74,null],[13,"Setter","swc_ecma_ast::prop","",74,null],[12,"key","swc_ecma_ast::prop::PropKind","",74,null],[12,"param","","",74,null],[12,"body","","",74,null],[13,"Method","swc_ecma_ast::prop","",74,null],[12,"key","swc_ecma_ast::prop::PropKind","",74,null],[12,"function","","",74,null],[4,"PropName","swc_ecma_ast::prop","",null,null],[13,"Ident","","",75,null],[13,"Str","","String literal.",75,null],[13,"Num","","Numeric literal.",75,null],[13,"Computed","","",75,null],[11,"fold_children","swc_ecma_ast","",34,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"prop"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"prop"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"prop"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",34,{"inputs":[{"name":"propkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",74,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"propkind"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"propkind"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"propkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",75,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"propname"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"propname"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"propname"}],"output":{"name":"bool"}}],[11,"from","","",75,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"new_shorthand","","",34,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[0,"stmt","","",null,null],[3,"Stmt","swc_ecma_ast::stmt","",null,null],[12,"span","","",35,null],[12,"node","","",35,null],[3,"BlockStmt","","Use when only block statements are allowed.",null,null],[12,"span","","Span of brace.",36,null],[12,"stmts","","",36,null],[3,"WithStmt","","",null,null],[12,"obj","","",37,null],[12,"body","","",37,null],[3,"ReturnStmt","","",null,null],[12,"arg","","",38,null],[3,"LabeledStmt","","",null,null],[12,"label","","",39,null],[12,"body","","",39,null],[3,"BreakStmt","","",null,null],[12,"label","","",40,null],[3,"ContinueStmt","","",null,null],[12,"label","","",41,null],[3,"IfStmt","","",null,null],[12,"test","","",42,null],[12,"cons","","",42,null],[12,"alt","","",42,null],[3,"SwitchStmt","","",null,null],[12,"discriminant","","",43,null],[12,"cases","","",43,null],[3,"ThrowStmt","","",null,null],[12,"arg","","",44,null],[3,"TryStmt","","",null,null],[12,"block","","",45,null],[12,"handler","","",45,null],[12,"finalizer","","",45,null],[3,"WhileStmt","","",null,null],[12,"test","","",46,null],[12,"body","","",46,null],[3,"DoWhileStmt","","",null,null],[12,"test","","",47,null],[12,"body","","",47,null],[3,"ForStmt","","",null,null],[12,"init","","",48,null],[12,"test","","",48,null],[12,"update","","",48,null],[12,"body","","",48,null],[3,"ForInStmt","","",null,null],[12,"left","","",49,null],[12,"right","","",49,null],[12,"body","","",49,null],[3,"ForOfStmt","","",null,null],[12,"left","","",50,null],[12,"right","","",50,null],[12,"body","","",50,null],[3,"SwitchCase","","",null,null],[12,"test","","None for `default:`",51,null],[12,"cons","","",51,null],[3,"CatchClause","","",null,null],[12,"param","","",52,null],[12,"body","","",52,null],[4,"StmtKind","","",null,null],[13,"Expr","","",76,null],[13,"Block","","",76,null],[13,"Empty","","",76,null],[13,"Debugger","","",76,null],[13,"With","","",76,null],[13,"Return","","",76,null],[13,"Labeled","","",76,null],[13,"Break","","",76,null],[13,"Continue","","",76,null],[13,"If","","",76,null],[13,"Switch","","",76,null],[13,"Throw","","",76,null],[13,"Try","","A try statement. If handler is null then finalizer must be a BlockStmt.",76,null],[13,"While","","",76,null],[13,"DoWhile","","",76,null],[13,"For","","",76,null],[13,"ForIn","","",76,null],[13,"ForOf","","",76,null],[13,"Decl","","",76,null],[4,"VarDeclOrPat","","",null,null],[13,"VarDecl","","",77,null],[13,"Pat","","",77,null],[4,"VarDeclOrExpr","","",null,null],[13,"VarDecl","","",78,null],[13,"Expr","","",78,null],[11,"fold_children","swc_ecma_ast","",35,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"from","","",35,{"inputs":[{"name":"decl"}],"output":{"name":"self"}}],[11,"from_unspanned","","",35,{"inputs":[{"name":"stmtkind"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",36,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockstmt"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"blockstmt"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"blockstmt"}],"output":{"name":"bool"}}],[11,"from_unspanned","","",36,{"inputs":[{"generics":["stmt"],"name":"vec"},{"name":"span"}],"output":{"name":"self"}}],[11,"fold_children","","",76,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"fold_children","","",37,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"withstmt"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"withstmt"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"withstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",38,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"returnstmt"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"returnstmt"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"returnstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",39,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"labeledstmt"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"labeledstmt"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"labeledstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",40,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"breakstmt"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"breakstmt"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"breakstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",41,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"continuestmt"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"continuestmt"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"continuestmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",42,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"ifstmt"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"ifstmt"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"ifstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",43,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"switchstmt"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"switchstmt"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"switchstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",44,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"throwstmt"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"throwstmt"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"throwstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",45,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"trystmt"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"trystmt"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"trystmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",46,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"whilestmt"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"whilestmt"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"whilestmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",47,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"dowhilestmt"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"dowhilestmt"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"dowhilestmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",48,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"forstmt"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"forstmt"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"forstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",49,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"forinstmt"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"forinstmt"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"forinstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",50,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"forofstmt"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"forofstmt"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"forofstmt"}],"output":{"name":"bool"}}],[11,"fold_children","","",51,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"switchcase"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"switchcase"}],"output":{"name":"bool"}}],[11,"fold_children","","",52,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"catchclause"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"catchclause"}],"output":{"name":"bool"}}],[11,"fold_children","","",77,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"vardeclorpat"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"vardeclorpat"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"vardeclorpat"}],"output":{"name":"bool"}}],[11,"fold_children","","",78,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"vardeclorexpr"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"vardeclorexpr"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"vardeclorexpr"}],"output":{"name":"bool"}}],[6,"RegexFlags","","",null,null],[11,"fold_children","","",53,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_unspanned","","",53,{"inputs":[{"name":"jsword"},{"name":"span"}],"output":{"name":"self"}}],[14,"op","","Creates a corresponding operator.",null,null]],"paths":[[3,"Class"],[3,"ClassMethod"],[3,"FnDecl"],[3,"ClassDecl"],[3,"VarDecl"],[3,"VarDeclarator"],[3,"Expr"],[3,"ArrayLit"],[3,"ObjectLit"],[3,"UnaryExpr"],[3,"UpdateExpr"],[3,"BinExpr"],[3,"FnExpr"],[3,"ClassExpr"],[3,"AssignExpr"],[3,"MemberExpr"],[3,"CondExpr"],[3,"CallExpr"],[3,"NewExpr"],[3,"SeqExpr"],[3,"ArrowExpr"],[3,"YieldExpr"],[3,"MetaPropExpr"],[3,"AwaitExpr"],[3,"TplLit"],[3,"TplElement"],[3,"Function"],[3,"Regex"],[3,"Number"],[3,"Module"],[3,"ModuleDecl"],[3,"ImportSpecifier"],[3,"ExportSpecifier"],[3,"Pat"],[3,"Prop"],[3,"Stmt"],[3,"BlockStmt"],[3,"WithStmt"],[3,"ReturnStmt"],[3,"LabeledStmt"],[3,"BreakStmt"],[3,"ContinueStmt"],[3,"IfStmt"],[3,"SwitchStmt"],[3,"ThrowStmt"],[3,"TryStmt"],[3,"WhileStmt"],[3,"DoWhileStmt"],[3,"ForStmt"],[3,"ForInStmt"],[3,"ForOfStmt"],[3,"SwitchCase"],[3,"CatchClause"],[3,"Ident"],[3,"DebugUsingDisplay"],[4,"ClassMethodKind"],[4,"Decl"],[4,"VarDeclKind"],[4,"ExprKind"],[4,"ExprOrSuper"],[4,"ExprOrSpread"],[4,"BlockStmtOrExpr"],[4,"PatOrExpr"],[4,"Lit"],[4,"ModuleItem"],[4,"ModuleDeclKind"],[4,"ExportDefaultDecl"],[4,"ImportSpecifierKind"],[4,"BinaryOp"],[4,"AssignOp"],[4,"UpdateOp"],[4,"UnaryOp"],[4,"PatKind"],[4,"ObjectPatProp"],[4,"PropKind"],[4,"PropName"],[4,"StmtKind"],[4,"VarDeclOrPat"],[4,"VarDeclOrExpr"]]};
searchIndex["swc_ecma_parser"] = {"doc":"","items":[[3,"FileMapInput","swc_ecma_parser","",null,null],[12,"fm","","",0,null],[12,"start_pos","","",0,null],[12,"iter","","",0,null],[3,"Parser","","EcmaScript parser.",null,null],[12,"session","","",1,null],[12,"ctx","","",1,null],[12,"state","","",1,null],[12,"input","","",1,null],[3,"Config","","",null,null],[12,"strict","","",2,null],[12,"num_sep","","Support numeric separator.",2,null],[12,"fn_bind","","Support function bind expression.",2,null],[12,"module","","Is in module code?",2,null],[3,"Session","","",null,null],[12,"cfg","","",3,null],[12,"logger","","",3,null],[12,"handler","","",3,null],[0,"input","","Note: this module requires `#![feature(nll)]`.",null,null],[0,"macros","","",null,null],[0,"error","","",null,null],[3,"Eof","swc_ecma_parser::error","",null,null],[12,"last","","",4,null],[12,"handler","","",4,null],[3,"Error","","",null,null],[12,"handler","","",5,null],[12,"span","","",5,null],[12,"error","","",5,null],[4,"SyntaxError","","",null,null],[13,"LegacyDecimal","","",6,null],[13,"LegacyOctal","","",6,null],[13,"InvalidIdentChar","","",6,null],[13,"UnterminatedStrLit","","",6,null],[13,"ExpectedUnicodeEscape","","",6,null],[13,"EscapeInReservedWord","","",6,null],[12,"word","swc_ecma_parser::error::SyntaxError","",6,null],[13,"UnterminatedRegxp","swc_ecma_parser::error","",6,null],[13,"IdentAfterNum","","",6,null],[13,"UnexpectedChar","","",6,null],[12,"c","swc_ecma_parser::error::SyntaxError","",6,null],[13,"InvalidStrEscape","swc_ecma_parser::error","",6,null],[13,"InvalidUnicodeEscape","","",6,null],[13,"InvalidCodePoint","","",6,null],[13,"InvalidIdentInStrict","","\"implements\", \"interface\", \"let\", \"package\",\\ \"private\", \"protected\",  \"public\", \"static\", or \"yield\"",6,null],[13,"EvalAndArgumentsInStrict","","'eval' and 'arguments' are invalid identfier in strict mode.",6,null],[13,"UnaryInExp","","",6,null],[12,"left","swc_ecma_parser::error::SyntaxError","",6,null],[12,"left_span","","",6,null],[13,"LineBreakInThrow","swc_ecma_parser::error","",6,null],[13,"Expected","","",6,null],[13,"AwaitStar","","\"await* has been removed from the async functions proposal. Use Promise.all() instead.\"",6,null],[13,"ReservedWordInObjShorthandOrPat","","\"cannot use a reserved word as a shorthand property\"",6,null],[13,"MultipleDefault","","",6,null],[13,"CommaAfterRestElement","","",6,null],[13,"NonLastRestParam","","",6,null],[13,"SpreadInParenExpr","","",6,null],[13,"EmptyParenExpr","","`()`",6,null],[13,"ExpectedIdent","","",6,null],[13,"ExpctedSemi","","",6,null],[13,"DuplicateLabel","","",6,null],[13,"AsyncGenerator","","",6,null],[13,"NonTopLevelImportExport","","",6,null],[13,"PatVarWithoutInit","","",6,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"eof"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"lexer","swc_ecma_parser","ECMAScript lexer.",null,null],[3,"Lexer","swc_ecma_parser::lexer","",null,null],[12,"session","","",7,null],[12,"input","","",7,null],[12,"state","","",7,null],[5,"pos_span","","",null,{"inputs":[{"name":"bytepos"}],"output":{"name":"span"}}],[0,"macros","","",null,null],[0,"input","","",null,null],[3,"LexerInput","swc_ecma_parser::lexer::input","Used inside lexer.",null,null],[12,"cur","","",8,null],[12,"last_pos","","",8,null],[12,"input","","",8,null],[3,"FileMapInput","","",null,null],[12,"fm","","",0,null],[12,"start_pos","","",0,null],[12,"iter","","",0,null],[8,"Input","","",null,null],[10,"peek","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peek_ahead","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"uncons_while","","Takes items from stream, testing each one with predicate. returns the range of items which passed predicate.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["str"],"name":"option"}}],[11,"new","","",8,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"bump","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"peek_ahead","","Get char at `cur + 2`.",8,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"current","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"cur_pos","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"last_pos","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"fmt","swc_ecma_parser","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"filemapinput"}}],[11,"from","","",0,{"inputs":[{"name":"filemap"}],"output":{"name":"self"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_ahead","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"uncons_while","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["str"],"name":"option"}}],[0,"number","swc_ecma_parser::lexer","Lexer methods related to reading numbers.",null,null],[11,"read_number","","Reads an integer, octal integer, or floating-point number",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["number","diagnostic"],"name":"result"}}],[11,"read_radix_number","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["number","diagnostic"],"name":"result"}}],[11,"read_number_no_dot","","This can read long integers like \"13612536612375123612312312312312312312312\".",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["f64","diagnostic"],"name":"result"}}],[11,"ensure_not_ident","","Ensure that ident cannot directly follow numbers.",7,{"inputs":[{"name":"self"}],"output":{"generics":["diagnostic"],"name":"result"}}],[11,"read_int","","Read an integer in the given radix. Return `None` if zero digits were read, the integer value otherwise. When `len` is not zero, this will return `None` unless the integer has exactly `len` digits.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"generics":["option","diagnostic"],"name":"result"}}],[11,"read_digits","","`op`- |total, radix, value| -> (total * radix + value, continue)",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"f"}],"output":{"generics":["diagnostic"],"name":"result"}}],[11,"make_legacy_octal","","",7,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f64"}],"output":{"generics":["number","diagnostic"],"name":"result"}}],[0,"state","","",null,null],[3,"State","swc_ecma_parser::lexer::state","State of lexer.",null,null],[12,"is_expr_allowed","","",10,null],[12,"octal_pos","","",10,null],[12,"had_line_break","","if line break exists between previous token and new token?",10,null],[12,"is_first","","TODO: Remove this field.",10,null],[12,"context","","",10,null],[12,"token_type","","",10,null],[3,"Context","","",null,null],[12,"0","","",11,null],[4,"Type","","The algorithm used to determine whether a regexp can appear at a given point in the program is loosely based on sweet.js' approach. See https://github.com/mozilla/sweet.js/wiki/design",null,null],[13,"BraceStmt","","",12,null],[13,"BraceExpr","","",12,null],[13,"TplQuasi","","",12,null],[13,"ParenStmt","","",12,null],[12,"is_for_loop","swc_ecma_parser::lexer::state::Type","Is this `for` loop?",12,null],[13,"ParenExpr","swc_ecma_parser::lexer::state","",12,null],[13,"Tpl","","",12,null],[13,"FnExpr","","",12,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","swc_ecma_parser::lexer","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","swc_ecma_parser::lexer::state","",10,{"inputs":[],"output":{"name":"self"}}],[11,"can_skip_space","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_in_template","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"last_was_tpl_element","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update","","",10,{"inputs":[{"name":"self"},{"name":"logger"},{"name":"token"}],"output":null}],[11,"is_expr_allowed_on_next","","`is_expr_allowed`: previous value.",10,{"inputs":[{"name":"logger"},{"name":"context"},{"generics":["token"],"name":"option"},{"name":"token"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"context"}}],[11,"is_brace_block","","Returns true if following `LBrace` token is `block statement` according to `ctx`, `prev`, `is_expr_allowed`.",11,{"inputs":[{"name":"self"},{"generics":["token"],"name":"option"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop","","",11,{"inputs":[{"name":"self"},{"name":"logger"}],"output":{"generics":["type"],"name":"option"}}],[11,"current","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"option"}}],[11,"push","","",11,{"inputs":[{"name":"self"},{"name":"logger"},{"name":"type"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"is_expr","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"preserve_space","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"util","swc_ecma_parser::lexer","Ported from [babylon/util/identifier.js][]",null,null],[8,"CharExt","swc_ecma_parser::lexer::util","Implemented for `char`.",null,null],[10,"to_char","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"is_ident_start","","Test whether a given character code starts an identifier.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ident_part","","Test whether a given character is part of an identifier.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_line_break","","See https://tc39.github.io/ecma262/#sec-line-terminators",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ws","","See https://tc39.github.io/ecma262/#sec-white-space",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_space","swc_ecma_parser::lexer","Skip comments or whitespaces.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"skip_line_comment","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"skip_block_comment","","Expects current char to be '/' and next char to be '*'.",7,{"inputs":[{"name":"self"}],"output":null}],[6,"LexResult","","",null,null],[11,"new","","",7,{"inputs":[{"name":"session"},{"name":"i"}],"output":{"name":"self"}}],[11,"read_token","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","diagnostic"],"name":"result"}}],[11,"read_escaped_char","","Read an escaped charater for string literal.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["option","diagnostic"],"name":"result"}}],[11,"read_slash","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","diagnostic"],"name":"result"}}],[11,"read_token_lt_gt","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","diagnostic"],"name":"result"}}],[11,"read_ident_or_keyword","","See https://tc39.github.io/ecma262/#sec-names-and-keywords",7,{"inputs":[{"name":"self"}],"output":{"generics":["token","diagnostic"],"name":"result"}}],[11,"may_read_word_as_str","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["option","diagnostic"],"name":"result"}}],[11,"read_word_as_str","","returns (word, has_escape)",7,{"inputs":[{"name":"self"}],"output":{"generics":["diagnostic"],"name":"result"}}],[11,"read_unicode_escape","","",7,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["char","diagnostic"],"name":"result"}}],[11,"read_hex_char","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["char","diagnostic"],"name":"result"}}],[11,"read_code_point","","Read `CodePoint`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["char","diagnostic"],"name":"result"}}],[11,"read_str_lit","","See https://tc39.github.io/ecma262/#sec-literals-string-literals",7,{"inputs":[{"name":"self"}],"output":{"generics":["token","diagnostic"],"name":"result"}}],[11,"read_regexp","","Expects current char to be '/'",7,{"inputs":[{"name":"self"}],"output":{"generics":["token","diagnostic"],"name":"result"}}],[11,"read_tmpl_token","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["token","diagnostic"],"name":"result"}}],[11,"had_line_break_before_last","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"token","swc_ecma_parser","Ported from [babel/bablyon][]",null,null],[4,"AssignOpToken","swc_ecma_parser::token","",null,null],[13,"Assign","","`=`",14,null],[13,"AddAssign","","`+=`",14,null],[13,"SubAssign","","`-=`",14,null],[13,"MulAssign","","`*=`",14,null],[13,"DivAssign","","`/=`",14,null],[13,"ModAssign","","`%=`",14,null],[13,"LShiftAssign","","`<<=`",14,null],[13,"RShiftAssign","","`>>=`",14,null],[13,"ZeroFillRShiftAssign","","`>>>=`",14,null],[13,"BitOrAssign","","`|=`",14,null],[13,"BitXorAssign","","`^=`",14,null],[13,"BitAndAssign","","`&=`",14,null],[13,"ExpAssign","","`**=`",14,null],[3,"Number","","",null,null],[12,"0","","",15,null],[3,"TokenAndSpan","","",null,null],[12,"token","","",16,null],[12,"had_line_break","","Had a line break before this token?",16,null],[12,"span","","",16,null],[4,"Token","","",null,null],[13,"Word","","Identifier, \"null\", \"true\", \"false\".",17,null],[13,"Arrow","","'=>'",17,null],[13,"At","","'@'",17,null],[13,"Dot","","'.'",17,null],[13,"DotDotDot","","'...'",17,null],[13,"Bang","","'!'",17,null],[13,"LParen","","'('",17,null],[13,"RParen","","')'",17,null],[13,"LBracket","","`[`",17,null],[13,"RBracket","","']'",17,null],[13,"LBrace","","'{'",17,null],[13,"RBrace","","'}'",17,null],[13,"Semi","","';'",17,null],[13,"Comma","","','",17,null],[13,"BackQuote","","'`'",17,null],[13,"Template","","",17,null],[13,"Colon","","':'",17,null],[13,"ColonColon","","'::'",17,null],[13,"BinOp","","",17,null],[13,"AssignOp","","",17,null],[13,"DollarLBrace","","'${'",17,null],[13,"QuestionMark","","'?'",17,null],[13,"PlusPlus","","`++`",17,null],[13,"MinusMinus","","`--`",17,null],[13,"Tilde","","`~`",17,null],[13,"Str","","String literal. bool field is true if it's enclosed by '\"' ( double quote).",17,null],[13,"Regex","","Regexp literal.",17,null],[13,"Num","","TODO: Make Num as enum and separate decimal, binary, ..etc",17,null],[13,"Error","","",17,null],[4,"BinOpToken","","",null,null],[13,"EqEq","","`==`",18,null],[13,"NotEq","","`!=`",18,null],[13,"EqEqEq","","`===`",18,null],[13,"NotEqEq","","`!==`",18,null],[13,"Lt","","`<`",18,null],[13,"LtEq","","`<=`",18,null],[13,"Gt","","`>`",18,null],[13,"GtEq","","`>=`",18,null],[13,"LShift","","`<<`",18,null],[13,"RShift","","`>>`",18,null],[13,"ZeroFillRShift","","`>>>`",18,null],[13,"Add","","`+`",18,null],[13,"Sub","","`-`",18,null],[13,"Mul","","`*`",18,null],[13,"Div","","`/`",18,null],[13,"Mod","","`%`",18,null],[13,"BitOr","","`|`",18,null],[13,"BitXor","","`^`",18,null],[13,"BitAnd","","`&`",18,null],[13,"Exp","","`**`",18,null],[13,"LogicalOr","","`||`",18,null],[13,"LogicalAnd","","`&&`",18,null],[4,"Word","","",null,null],[13,"Keyword","","",19,null],[13,"Null","","",19,null],[13,"True","","",19,null],[13,"False","","",19,null],[13,"Ident","","",19,null],[4,"Keyword","","Keywords",null,null],[13,"Await","","Spec says this might be identifier.",20,null],[13,"Break","","",20,null],[13,"Case","","",20,null],[13,"Catch","","",20,null],[13,"Continue","","",20,null],[13,"Debugger","","",20,null],[13,"Default_","","",20,null],[13,"Do","","",20,null],[13,"Else","","",20,null],[13,"Finally","","",20,null],[13,"For","","",20,null],[13,"Function","","",20,null],[13,"If","","",20,null],[13,"Return","","",20,null],[13,"Switch","","",20,null],[13,"Throw","","",20,null],[13,"Try","","",20,null],[13,"Var","","",20,null],[13,"Let","","",20,null],[13,"Const","","",20,null],[13,"While","","",20,null],[13,"With","","",20,null],[13,"New","","",20,null],[13,"This","","",20,null],[13,"Super","","",20,null],[13,"Class","","",20,null],[13,"Extends","","",20,null],[13,"Export","","",20,null],[13,"Import","","",20,null],[13,"Yield","","Spec says this might be identifier.",20,null],[13,"In","","",20,null],[13,"InstanceOf","","",20,null],[13,"TypeOf","","",20,null],[13,"Void","","",20,null],[13,"Delete","","",20,null],[11,"starts_expr","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"before_expr","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"starts_expr","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"assert_receiver_is_total_eq","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"before_expr","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"starts_expr","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"before_expr","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"word"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",19,null],[11,"hash","","",19,null],[11,"from","","",19,{"inputs":[{"name":"jsword"}],"output":{"name":"self"}}],[11,"from","","",19,{"inputs":[{"name":"keyword"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_reserved_word","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"before_expr","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"starts_expr","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"hash","","",20,null],[11,"follows_keyword_let","","Returns true if `self` can follow keyword let.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[0,"parser","swc_ecma_parser","",null,null],[3,"Parser","swc_ecma_parser::parser","EcmaScript parser.",null,null],[12,"session","","",1,null],[12,"ctx","","",1,null],[12,"state","","",1,null],[12,"input","","",1,null],[3,"Context","","",null,null],[12,"include_in_expr","","",21,null],[12,"in_async","","If true, await expression is parsed, and \"await\" is treated as a keyword.",21,null],[12,"in_generator","","If true, yield expression is parsed, and \"yield\" is treated as a keyword.",21,null],[3,"State","","",null,null],[12,"labels","","",22,null],[12,"potential_arrow_start","","Start position of an assignment expression.",22,null],[0,"macros","","",null,null],[0,"class_and_fn","","Parser for function expression and function declaration.",null,null],[8,"OutputType","swc_ecma_parser::parser::class_and_fn","",null,null],[16,"Ident","","",23,null],[10,"finish_fn","","",23,null],[10,"finish_class","","",23,null],[8,"FnBodyParser","","",null,null],[10,"parse_fn_body_inner","","",24,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_async_fn_expr","swc_ecma_parser","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_fn_expr","","Parse function expression",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_async_fn_decl","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["decl"],"name":"presult"}}],[11,"parse_fn_decl","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["decl"],"name":"presult"}}],[11,"parse_default_async_fn","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefaultdecl"],"name":"presult"}}],[11,"parse_default_fn","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefaultdecl"],"name":"presult"}}],[11,"parse_class_decl","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["decl"],"name":"presult"}}],[11,"parse_class_expr","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_default_class","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["exportdefaultdecl"],"name":"presult"}}],[11,"parse_class","","",1,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_class_body","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_class_element","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["classmethod"],"name":"presult"}}],[11,"parse_fn","","",1,{"inputs":[{"name":"self"},{"generics":["bytepos"],"name":"option"}],"output":{"name":"presult"}}],[11,"parse_fn_args_body","","`parse_args` closure should not eat '(' or ')'.",1,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["function"],"name":"presult"}}],[11,"parse_method_def","","",1,{"inputs":[{"name":"self"},{"generics":["bytepos"],"name":"option"}],"output":{"generics":["classmethod"],"name":"presult"}}],[11,"parse_fn_body","","",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_fn_body_inner","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["blockstmtorexpr"],"name":"presult"}}],[11,"parse_fn_body_inner","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["blockstmt"],"name":"presult"}}],[0,"object","swc_ecma_parser::parser","Parser for object literal.",null,null],[11,"parse_object","swc_ecma_parser","Parse a object literal or object pattern.",1,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_prop_name","","spec: 'PropertyName'",1,{"inputs":[{"name":"self"}],"output":{"generics":["propname"],"name":"presult"}}],[11,"make_object","","",1,{"inputs":[{"name":"span"},{"name":"vec"}],"output":{"generics":["expr"],"name":"box"}}],[11,"parse_object_prop","","spec: 'PropertyDefinition'",1,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"make_object","","",1,{"inputs":[{"name":"span"},{"name":"vec"}],"output":{"name":"pat"}}],[11,"parse_object_prop","","Production 'BindingProperty'",1,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"expr","swc_ecma_parser::parser","",null,null],[0,"ops","swc_ecma_parser::parser::expr","Parser for unary operations and binary operations.",null,null],[11,"parse_bin_expr","swc_ecma_parser","Name from spec: 'LogicalORExpression'",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_bin_op_recursively","","Parse binary operators with the operator precedence parsing algorithm. `left` is the left-hand side of the operator. `minPrec` provides context that allows the function to stop and defer further parser to one of its callers when it encounters an operator that has a lower precedence than the set it is parsing.",1,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"box"},{"name":"u8"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_unary_expr","","Parse unary expression and update expression.",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_await_expr","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_expr","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_assignment_expr","","Parse an assignment expression. This includes applications of operators like `+=`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_cond_expr","","Spec: 'ConditionalExpression'",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_primary_expr","","Parse a primary expression or arrow function",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_array_lit","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_member_expr","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_member_expr_or_new_expr","","`is_new_expr`: true iff we are parsing production 'NewExpression'.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_new_expr","","Parse `NewExpresion`. This includes `MemberExpression`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_args","","Parse `Arguments[Yield, Await]`",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_expr_or_spread","","AssignmentExpression[+In, ?Yield, ?Await] ...AssignmentExpression[+In, ?Yield, ?Await]",1,{"inputs":[{"name":"self"}],"output":{"generics":["exprorspread"],"name":"presult"}}],[11,"parse_paren_expr_or_arrow_fn","","Parse paren expression or arrow function expression.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_tpl_lit","","",1,{"inputs":[{"name":"self"},{"generics":["box"],"name":"option"}],"output":{"generics":["tpllit"],"name":"presult"}}],[11,"parse_tpl_element","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["tplelement"],"name":"presult"}}],[11,"parse_subscripts","","",1,{"inputs":[{"name":"self"},{"name":"exprorsuper"},{"name":"bool"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_subscript","","returned bool is true if this method should be called again.",1,{"inputs":[{"name":"self"},{"name":"exprorsuper"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_lhs_expr","","Parse call, dot, and `[]`-subscript expressions.",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_expr_or_pat","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_args_or_pats","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_yield_expr","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"presult"}}],[11,"parse_lit","","12.2.5 Array Initializer",1,{"inputs":[{"name":"self"}],"output":{"generics":["lit"],"name":"presult"}}],[0,"ident","swc_ecma_parser::parser","12.1 Identifiers",null,null],[8,"MaybeOptionalIdentParser","swc_ecma_parser::parser::ident","",null,null],[10,"parse_maybe_opt_binding_ident","","",25,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ident_ref","swc_ecma_parser","IdentifierReference",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_label_ident","","LabelIdentifier",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_ident_name","","Use this when spec says \"IdentiferName\". This allows idents like `catch`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_ident","","Identifier",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_maybe_opt_binding_ident","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_maybe_opt_binding_ident","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[0,"stmt","swc_ecma_parser::parser","",null,null],[4,"ForHead","swc_ecma_parser::parser::stmt","",null,null],[13,"For","","",26,null],[12,"init","swc_ecma_parser::parser::stmt::ForHead","",26,null],[12,"test","","",26,null],[12,"update","","",26,null],[13,"ForIn","swc_ecma_parser::parser::stmt","",26,null],[12,"left","swc_ecma_parser::parser::stmt::ForHead","",26,null],[12,"right","","",26,null],[13,"ForOf","swc_ecma_parser::parser::stmt","",26,null],[12,"left","swc_ecma_parser::parser::stmt::ForHead","",26,null],[12,"right","","",26,null],[0,"module_item","swc_ecma_parser::parser::stmt","",null,null],[11,"parse_import","swc_ecma_parser","",1,{"inputs":[{"name":"self"}],"output":{"generics":["moduledecl"],"name":"presult"}}],[11,"parse_import_specifier","","Parse `foo`, `foo2 as bar` in `import { foo, foo2 as bar }`",1,{"inputs":[{"name":"self"}],"output":{"generics":["importspecifier"],"name":"presult"}}],[11,"parse_imported_default_binding","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_imported_binding","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_export","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["moduledecl"],"name":"presult"}}],[11,"parse_export_specifier","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["exportspecifier"],"name":"presult"}}],[11,"parse_from_clause_and_semi","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"presult"}}],[11,"accept_import_export","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"handle_import_export","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["moduleitem"],"name":"presult"}}],[8,"StmtLikeParser","swc_ecma_parser::parser::stmt","",null,null],[10,"accept_import_export","","",27,{"inputs":[],"output":{"name":"bool"}}],[10,"handle_import_export","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_block_body","swc_ecma_parser","",1,{"inputs":[{"name":"self"},{"name":"bool"},{"generics":["token"],"name":"option"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_stmt","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_stmt_list_item","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_stmt_like","","Parse a statement, declaration or module item.",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_stmt_internal","","",1,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_if_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_return_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_switch_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_throw_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_try_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_catch_param","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_var_stmt","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["vardecl"],"name":"presult"}}],[11,"parse_var_declarator","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["vardeclarator"],"name":"presult"}}],[11,"parse_do_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_while_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_with_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_block","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["blockstmt"],"name":"presult"}}],[11,"parse_labelled_stmt","","",1,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_for_stmt","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["stmt"],"name":"presult"}}],[11,"parse_for_head","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["forhead"],"name":"presult"}}],[11,"parse_for_each_head","","",1,{"inputs":[{"name":"self"},{"name":"vardeclorpat"}],"output":{"generics":["forhead"],"name":"presult"}}],[11,"parse_normal_for_head","","",1,{"inputs":[{"name":"self"},{"generics":["vardeclorexpr"],"name":"option"}],"output":{"generics":["forhead"],"name":"presult"}}],[11,"fold_children","swc_ecma_parser::parser::stmt","",26,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"self"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"forhead"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"forhead"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"forhead"}],"output":{"name":"bool"}}],[11,"accept_import_export","swc_ecma_parser","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"handle_import_export","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["stmt"],"name":"presult"}}],[0,"pat","swc_ecma_parser::parser","13.3.3 Destructuring Binding Patterns",null,null],[11,"parse_opt_binding_ident","swc_ecma_parser","",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"presult"}}],[11,"parse_binding_ident","","babel: `parseBindingIdentifier`",1,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"presult"}}],[11,"parse_binding_pat_or_ident","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_binding_element","","babel: `parseBindingAtom`",1,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_array_binding_pat","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_formal_param","","spec: 'FormalParameter'",1,{"inputs":[{"name":"self"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_formal_params","","spec: 'FormalParameterList'",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_unique_formal_params","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"reparse_expr_as_pat","","This does not return 'rest' pattern because non-last parameter cannot be rest.",1,{"inputs":[{"name":"self"},{"generics":["expr"],"name":"box"}],"output":{"generics":["pat"],"name":"presult"}}],[11,"parse_exprs_as_params","","",1,{"inputs":[{"name":"self"},{"generics":["exprorspread"],"name":"vec"}],"output":{"generics":["vec"],"name":"presult"}}],[0,"input","swc_ecma_parser::parser","Note: this module requires `#![feature(nll)]`.",null,null],[3,"ParserInput","swc_ecma_parser::parser::input","This struct is responsible for managing current token and peeked token.",null,null],[12,"iter","","",28,null],[12,"last_span","","Span of the previous token.",28,null],[12,"cur","","",28,null],[12,"next","","Peeked token",28,null],[11,"new","","",28,{"inputs":[{"name":"lexer"}],"output":{"name":"self"}}],[11,"bump_inner","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"cur_debug","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"bump","","Returns current token.",28,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"knows_cur","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"had_line_break_before_cur","","This returns true on eof.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_linebreak_between_cur_and_peeked","","This returns true on eof.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cur","","Get current token. Returns `None` only on eof.",28,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"is","","",28,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"peeked_is","","",28,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","",28,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat_keyword","","",28,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"cur_pos","","Returns start of current token.",28,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"cur_span","","",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"last_pos","","Returns last byte position of previous token.",28,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"last_span","","Returns span of the previous token.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"util","swc_ecma_parser::parser","",null,null],[3,"WithCtx","swc_ecma_parser::parser::util","",null,null],[12,"inner","","",29,null],[12,"orig_ctx","","",29,null],[8,"ParseObject","","",null,null],[16,"Prop","","",30,null],[10,"make_object","","",30,{"inputs":[{"name":"span"},{"name":"vec"}],"output":{"name":"obj"}}],[10,"parse_object_prop","","",30,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"with_ctx","swc_ecma_parser","Original context is restored when returned guard is dropped.",1,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"withctx"}}],[11,"include_in_expr","","Original context is restored when returned guard is dropped.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"withctx"}}],[11,"parse_with","","Parse with given closure",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ret"}}],[11,"spanned","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"presult"}}],[11,"deref","swc_ecma_parser::parser::util","",29,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[6,"PResult","swc_ecma_parser::parser","",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"context"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"state"}}],[11,"new","swc_ecma_parser","",1,{"inputs":[{"name":"session"},{"name":"i"}],"output":{"name":"self"}}],[11,"parse_script","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse_module","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["module"],"name":"presult"}}],[6,"PResult","","",null,null],[8,"Input","","",null,null],[10,"peek","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peek_ahead","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"uncons_while","","Takes items from stream, testing each one with predicate. returns the range of items which passed predicate.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"config"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"session"}}],[11,"clone","swc_ecma_parser::token","",15,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"assignop"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"assignop"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"fold_children","","",15,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"number"}}],[11,"fold_children","","",14,{"inputs":[{"name":"self"},{"name":"__folder"}],"output":{"name":"assignop"}}],[11,"hash","","",14,null],[11,"assert_receiver_is_total_eq","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"FileMapInput"],[3,"Parser"],[3,"Config"],[3,"Session"],[3,"Eof"],[3,"Error"],[4,"SyntaxError"],[3,"Lexer"],[3,"LexerInput"],[8,"Input"],[3,"State"],[3,"Context"],[4,"Type"],[8,"CharExt"],[4,"AssignOpToken"],[3,"Number"],[3,"TokenAndSpan"],[4,"Token"],[4,"BinOpToken"],[4,"Word"],[4,"Keyword"],[3,"Context"],[3,"State"],[8,"OutputType"],[8,"FnBodyParser"],[8,"MaybeOptionalIdentParser"],[4,"ForHead"],[8,"StmtLikeParser"],[3,"ParserInput"],[3,"WithCtx"],[8,"ParseObject"]]};
searchIndex["swc_ecmascript"] = {"doc":"","items":[],"paths":[]};
searchIndex["swc_macros"] = {"doc":"Macros used by swc project.","items":[],"paths":[]};
searchIndex["swc_macros_common"] = {"doc":"","items":[[5,"call_site","swc_macros_common","",null,{"inputs":[],"output":{"name":"t"}}],[5,"print","","`attr` - tokens inside `#[]`. e.g. `derive(EqIgnoreSpan)`, ast_node",null,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"tokenstream"}}],[5,"is_attr_name","","",null,{"inputs":[{"name":"attribute"},{"name":"str"}],"output":{"name":"bool"}}],[0,"derive","","",null,null],[3,"Derive","swc_macros_common::derive","Generics of derived impl item.",null,null],[12,"input","","",0,null],[12,"out","","",0,null],[0,"generics","","",null,null],[11,"all_generic_fields","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"vec"}}],[11,"add_where_predicates","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"bound_self","","Add `Self: #trait_`.",0,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"derive"}}],[11,"new","","",0,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"defaultness","","Set `defaultness`",0,{"inputs":[{"name":"self"},{"generics":["default"],"name":"option"}],"output":null}],[11,"unsafety","","Set `unsafety`",0,{"inputs":[{"name":"self"},{"generics":["unsafe"],"name":"option"}],"output":null}],[11,"input","","",0,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"append_to","","",0,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[0,"prelude","swc_macros_common","",null,null],[4,"Delimiter","swc_macros_common::prelude","",null,null],[13,"Parenthesis","","",1,null],[13,"Brace","","",1,null],[13,"Bracket","","",1,null],[13,"None","","",1,null],[3,"Literal","","",null,null],[12,"0","","",2,null],[3,"Span","","",null,null],[12,"0","","",3,null],[4,"TokenNode","","",null,null],[13,"Group","","",4,null],[13,"Term","","",4,null],[13,"Op","","",4,null],[13,"Literal","","",4,null],[3,"TokenStream","","",null,null],[12,"0","","",5,null],[3,"TokenTree","","",null,null],[12,"span","","",6,null],[12,"kind","","",6,null],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",7,null],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",7,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[3,"Tokens","","Tokens produced by a [`quote!`] invocation.",null,null],[12,"tts","","",8,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",9,null],[13,"End","","",9,null],[3,"Punctuated","","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[12,"inner","","",10,null],[4,"Element","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",9,null],[13,"End","","",9,null],[8,"ItemImplExt","","Extension trait for `ItemImpl` (impl block).",null,null],[10,"with_generics","","Instead of",11,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[8,"PairExt","","",null,null],[11,"map_item","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"pair"}}],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"named","","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"tap","","Run a parser, binding the result to a name, and then evaluating an expression.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"tuple_parser","","",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"grouped","","",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[0,"syn_ext","swc_macros_common","",null,null],[8,"ItemImplExt","swc_macros_common::syn_ext","Extension trait for `ItemImpl` (impl block).",null,null],[10,"with_generics","","Instead of",11,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[8,"PairExt","","",null,null],[11,"map_item","swc_macros_common::prelude","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"pair"}}],[0,"binder","swc_macros_common","Example",null,null],[3,"Binder","swc_macros_common::binder","Used to bind whole struct or enum.",null,null],[12,"ident","","",13,null],[12,"body","","",13,null],[12,"attrs","","",13,null],[3,"VariantBinder","","Variant.",null,null],[12,"enum_name","","None for struct.",14,null],[12,"name","","Name of variant.",14,null],[12,"data","","",14,null],[12,"attrs","","",14,null],[3,"BindedField","","Binded field. Note that this struct acts like a binded variable for `quote!`.",null,null],[12,"binded_ident","","",15,null],[12,"idx","","",15,null],[12,"field","","",15,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"binder"}}],[11,"new","","`attrs`",13,null],[11,"new_from","","",13,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["variantbinder"],"name":"vec"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"variantbinder"}}],[11,"new","","",14,null],[11,"variant_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"data","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"attrs","","",14,null],[11,"qual_path","","`EnumName::VariantName` for enum, and `StructName` for struct.",14,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"bind","","`prefix`",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bindedfield"}}],[11,"idx","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","Name of field binding.",15,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"field","","",15,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"fail","swc_macros_common","fail! is a panic! with location reporting.",null,null],[14,"unimplemented","","",null,null],[14,"unreachable","","",null,null],[11,"from_span","swc_macros_common::prelude","",3,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"into_pm2_span","","",3,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"from","","",8,{"inputs":[{"name":"quote"}],"output":{"name":"tokens"}}],[11,"from","","",5,{"inputs":[{"name":"quote"}],"output":{"name":"tokenstream"}}],[11,"span_for","","",3,{"inputs":[{"name":"self"},{"name":"tokennode"}],"output":{"name":"span"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"into_iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"from","","",6,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"from","","",5,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",3,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"from","","",5,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"into_iter","","",8,null],[11,"hash","","",8,null],[11,"to_tokens","","",8,null],[11,"into_tokens","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"to_tokens","","",6,null],[11,"to_tokens","","",5,null],[11,"to_tokens","","",4,null],[11,"to_tokens","","",2,null],[11,"default","","",8,{"inputs":[],"output":{"name":"tokens"}}],[11,"from","","",5,{"inputs":[{"name":"tokens"}],"output":{"name":"tokenstream"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"extend","","",10,null],[11,"extend","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"into_iter","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_tokens","","",9,null],[11,"to_tokens","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"punctuated"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"punctuated"}}],[11,"assert_receiver_is_total_eq","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"punctuated"}}],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"integer","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",2,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",2,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",2,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",2,null],[11,"byte_char","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",2,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",2,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",2,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"call_site","","",3,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",3,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"unstable","","This method is only available when the `\"nightly\"` feature is enabled.",3,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_file","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sourcefile"}}],[11,"start","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linecolumn"}}],[11,"join","","",3,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"empty","","",5,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",8,{"inputs":[],"output":{"name":"tokens"}}],[11,"append","","For use by `ToTokens` implementations.",8,null],[11,"append_all","","For use by `ToTokens` implementations.",8,null],[11,"append_separated","","For use by `ToTokens` implementations.",8,null],[11,"append_terminated","","For use by `ToTokens` implementations.",8,null],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",9,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"pair"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",9,null],[11,"new","","Creates an empty punctuated sequence.",10,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",10,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",10,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",10,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",10,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",10,null],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",10,null],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",10,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",10,null],[11,"insert","","Inserts an element at position `index`.",10,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",10,{"inputs":[{"name":"cursor"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",10,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",10,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",10,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",10,null]],"paths":[[3,"Derive"],[4,"Delimiter"],[3,"Literal"],[3,"Span"],[4,"TokenNode"],[3,"TokenStream"],[3,"TokenTree"],[8,"ToTokens"],[3,"Tokens"],[4,"Element"],[3,"Punctuated"],[8,"ItemImplExt"],[8,"PairExt"],[3,"Binder"],[3,"VariantBinder"],[3,"BindedField"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Attribute","syn","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `pub(crate)`.",null,null],[12,"pub_token","","",7,null],[12,"paren_token","","",7,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprAddrOf","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",10,null],[12,"and_token","","",10,null],[12,"mutability","","",10,null],[12,"expr","","",10,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",11,null],[12,"bracket_token","","",11,null],[12,"elems","","",11,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",12,null],[12,"left","","",12,null],[12,"eq_token","","",12,null],[12,"right","","",12,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",13,null],[12,"left","","",13,null],[12,"op","","",13,null],[12,"right","","",13,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",14,null],[12,"left","","",14,null],[12,"op","","",14,null],[12,"right","","",14,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",15,null],[12,"block","","",15,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",16,null],[12,"box_token","","",16,null],[12,"expr","","",16,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",17,null],[12,"break_token","","",17,null],[12,"label","","",17,null],[12,"expr","","",17,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",18,null],[12,"func","","",18,null],[12,"paren_token","","",18,null],[12,"args","","",18,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",19,null],[12,"expr","","",19,null],[12,"as_token","","",19,null],[12,"ty","","",19,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",20,null],[12,"do_token","","",20,null],[12,"catch_token","","",20,null],[12,"block","","",20,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",21,null],[12,"capture","","",21,null],[12,"or1_token","","",21,null],[12,"inputs","","",21,null],[12,"or2_token","","",21,null],[12,"output","","",21,null],[12,"body","","",21,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",22,null],[12,"continue_token","","",22,null],[12,"label","","",22,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",23,null],[12,"base","","",23,null],[12,"dot_token","","",23,null],[12,"member","","",23,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",24,null],[12,"label","","",24,null],[12,"for_token","","",24,null],[12,"pat","","",24,null],[12,"in_token","","",24,null],[12,"expr","","",24,null],[12,"body","","",24,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",25,null],[12,"group_token","","",25,null],[12,"expr","","",25,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",26,null],[12,"if_token","","",26,null],[12,"cond","","",26,null],[12,"then_branch","","",26,null],[12,"else_branch","","",26,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",27,null],[12,"if_token","","",27,null],[12,"let_token","","",27,null],[12,"pat","","",27,null],[12,"eq_token","","",27,null],[12,"expr","","",27,null],[12,"then_branch","","",27,null],[12,"else_branch","","",27,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",28,null],[12,"place","","",28,null],[12,"arrow_token","","",28,null],[12,"value","","",28,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",29,null],[12,"expr","","",29,null],[12,"bracket_token","","",29,null],[12,"index","","",29,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",30,null],[12,"lit","","",30,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",31,null],[12,"label","","",31,null],[12,"loop_token","","",31,null],[12,"body","","",31,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",32,null],[12,"mac","","",32,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",33,null],[12,"match_token","","",33,null],[12,"expr","","",33,null],[12,"brace_token","","",33,null],[12,"arms","","",33,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",34,null],[12,"receiver","","",34,null],[12,"dot_token","","",34,null],[12,"method","","",34,null],[12,"turbofish","","",34,null],[12,"paren_token","","",34,null],[12,"args","","",34,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",35,null],[12,"paren_token","","",35,null],[12,"expr","","",35,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",36,null],[12,"qself","","",36,null],[12,"path","","",36,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",37,null],[12,"from","","",37,null],[12,"limits","","",37,null],[12,"to","","",37,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",38,null],[12,"bracket_token","","",38,null],[12,"expr","","",38,null],[12,"semi_token","","",38,null],[12,"len","","",38,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",39,null],[12,"return_token","","",39,null],[12,"expr","","",39,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",40,null],[12,"path","","",40,null],[12,"brace_token","","",40,null],[12,"fields","","",40,null],[12,"dot2_token","","",40,null],[12,"rest","","",40,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",41,null],[12,"expr","","",41,null],[12,"question_token","","",41,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",42,null],[12,"paren_token","","",42,null],[12,"elems","","",42,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",43,null],[12,"expr","","",43,null],[12,"colon_token","","",43,null],[12,"ty","","",43,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",44,null],[12,"op","","",44,null],[12,"expr","","",44,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",45,null],[12,"unsafe_token","","",45,null],[12,"block","","",45,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",46,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",47,null],[12,"label","","",47,null],[12,"while_token","","",47,null],[12,"cond","","",47,null],[12,"body","","",47,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",48,null],[12,"label","","",48,null],[12,"while_token","","",48,null],[12,"let_token","","",48,null],[12,"pat","","",48,null],[12,"eq_token","","",48,null],[12,"expr","","",48,null],[12,"body","","",48,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",49,null],[12,"yield_token","","",49,null],[12,"expr","","",49,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",50,null],[12,"span","","",50,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",51,null],[12,"pats","","",51,null],[12,"guard","","",51,null],[12,"rocket_token","","",51,null],[12,"body","","",51,null],[12,"comma","","",51,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",52,null],[12,"stmts","","Statements in a block",52,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",53,null],[12,"member","","",53,null],[12,"colon_token","","",53,null],[12,"pat","","",53,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",54,null],[12,"member","","Name or index of the field.",54,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,null],[12,"expr","","Value of the field.",54,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",55,null],[12,"colon_token","","",55,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",56,null],[12,"let_token","","",56,null],[12,"pat","","",56,null],[12,"ty","","",56,null],[12,"init","","",56,null],[12,"semi_token","","",56,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",58,null],[12,"pat","","",58,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",59,null],[12,"mutability","","",59,null],[12,"ident","","",59,null],[12,"subpat","","",59,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",60,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",61,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",62,null],[12,"path","","",62,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",63,null],[12,"limits","","",63,null],[12,"hi","","",63,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",64,null],[12,"mutability","","",64,null],[12,"pat","","",64,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",65,null],[12,"front","","",65,null],[12,"middle","","",65,null],[12,"dot2_token","","",65,null],[12,"comma_token","","",65,null],[12,"back","","",65,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",66,null],[12,"brace_token","","",66,null],[12,"fields","","",66,null],[12,"dot2_token","","",66,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",67,null],[12,"front","","",67,null],[12,"dot2_token","","",67,null],[12,"comma_token","","",67,null],[12,"back","","",67,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",68,null],[12,"pat","","",68,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",69,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",70,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",71,null],[12,"lt_token","","",71,null],[12,"lifetimes","","",71,null],[12,"gt_token","","",71,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"default","","",72,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",73,null],[12,"params","","",73,null],[12,"gt_token","","",73,null],[12,"where_clause","","",73,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",74,null],[12,"lifetime","","",74,null],[12,"colon_token","","",74,null],[12,"bounds","","",74,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",75,null],[12,"eq_token","","",75,null],[12,"rhs_ty","","",75,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",76,null],[12,"colon_token","","",76,null],[12,"bounds","","",76,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",77,null],[12,"bounded_ty","","The type being bounded",77,null],[12,"colon_token","","",77,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"modifier","","",78,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",79,null],[12,"ident","","",79,null],[12,"colon_token","","",79,null],[12,"bounds","","",79,null],[12,"eq_token","","",79,null],[12,"default","","",79,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",80,null],[12,"predicates","","",80,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",81,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[12,"0","","",82,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",83,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[12,"term","","",84,null],[12,"span","","",84,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",85,null],[12,"colon_token","","",85,null],[12,"ty","","",85,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",86,null],[12,"self_token","","",86,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",87,null],[12,"lifetime","","",87,null],[12,"mutability","","",87,null],[12,"self_token","","",87,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",88,null],[12,"generics","","",88,null],[12,"paren_token","","",88,null],[12,"inputs","","",88,null],[12,"variadic","","",88,null],[12,"output","","",88,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",89,null],[12,"vis","","",89,null],[12,"ident","","",89,null],[12,"decl","","",89,null],[12,"semi_token","","",89,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",90,null],[12,"vis","","",90,null],[12,"static_token","","",90,null],[12,"mutability","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"semi_token","","",90,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",91,null],[12,"vis","","",91,null],[12,"type_token","","",91,null],[12,"ident","","",91,null],[12,"semi_token","","",91,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",92,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",93,null],[12,"vis","","",93,null],[12,"defaultness","","",93,null],[12,"const_token","","",93,null],[12,"ident","","",93,null],[12,"colon_token","","",93,null],[12,"ty","","",93,null],[12,"eq_token","","",93,null],[12,"expr","","",93,null],[12,"semi_token","","",93,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",94,null],[12,"mac","","",94,null],[12,"semi_token","","",94,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",95,null],[12,"vis","","",95,null],[12,"defaultness","","",95,null],[12,"sig","","",95,null],[12,"block","","",95,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",96,null],[12,"vis","","",96,null],[12,"defaultness","","",96,null],[12,"type_token","","",96,null],[12,"ident","","",96,null],[12,"generics","","",96,null],[12,"eq_token","","",96,null],[12,"ty","","",96,null],[12,"semi_token","","",96,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",97,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",98,null],[12,"vis","","",98,null],[12,"const_token","","",98,null],[12,"ident","","",98,null],[12,"colon_token","","",98,null],[12,"ty","","",98,null],[12,"eq_token","","",98,null],[12,"expr","","",98,null],[12,"semi_token","","",98,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",99,null],[12,"vis","","",99,null],[12,"enum_token","","",99,null],[12,"ident","","",99,null],[12,"generics","","",99,null],[12,"brace_token","","",99,null],[12,"variants","","",99,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",100,null],[12,"vis","","",100,null],[12,"extern_token","","",100,null],[12,"crate_token","","",100,null],[12,"ident","","",100,null],[12,"rename","","",100,null],[12,"semi_token","","",100,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",101,null],[12,"vis","","",101,null],[12,"constness","","",101,null],[12,"unsafety","","",101,null],[12,"abi","","",101,null],[12,"ident","","",101,null],[12,"decl","","",101,null],[12,"block","","",101,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",102,null],[12,"abi","","",102,null],[12,"brace_token","","",102,null],[12,"items","","",102,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",103,null],[12,"defaultness","","",103,null],[12,"unsafety","","",103,null],[12,"impl_token","","",103,null],[12,"generics","","",103,null],[12,"trait_","","Trait this impl implements.",103,null],[12,"self_ty","","The Self type of the impl.",103,null],[12,"brace_token","","",103,null],[12,"items","","",103,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",104,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",104,null],[12,"mac","","",104,null],[12,"semi_token","","",104,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",105,null],[12,"vis","","",105,null],[12,"macro_token","","",105,null],[12,"ident","","",105,null],[12,"paren_token","","",105,null],[12,"args","","",105,null],[12,"brace_token","","",105,null],[12,"body","","",105,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",106,null],[12,"vis","","",106,null],[12,"mod_token","","",106,null],[12,"ident","","",106,null],[12,"content","","",106,null],[12,"semi","","",106,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",107,null],[12,"vis","","",107,null],[12,"static_token","","",107,null],[12,"mutability","","",107,null],[12,"ident","","",107,null],[12,"colon_token","","",107,null],[12,"ty","","",107,null],[12,"eq_token","","",107,null],[12,"expr","","",107,null],[12,"semi_token","","",107,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",108,null],[12,"vis","","",108,null],[12,"struct_token","","",108,null],[12,"ident","","",108,null],[12,"generics","","",108,null],[12,"fields","","",108,null],[12,"semi_token","","",108,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",109,null],[12,"vis","","",109,null],[12,"unsafety","","",109,null],[12,"auto_token","","",109,null],[12,"trait_token","","",109,null],[12,"ident","","",109,null],[12,"generics","","",109,null],[12,"colon_token","","",109,null],[12,"supertraits","","",109,null],[12,"brace_token","","",109,null],[12,"items","","",109,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",110,null],[12,"vis","","",110,null],[12,"type_token","","",110,null],[12,"ident","","",110,null],[12,"generics","","",110,null],[12,"eq_token","","",110,null],[12,"ty","","",110,null],[12,"semi_token","","",110,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",111,null],[12,"vis","","",111,null],[12,"union_token","","",111,null],[12,"ident","","",111,null],[12,"generics","","",111,null],[12,"fields","","",111,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",112,null],[12,"vis","","",112,null],[12,"use_token","","",112,null],[12,"leading_colon","","",112,null],[12,"prefix","","",112,null],[12,"tree","","",112,null],[12,"semi_token","","",112,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",113,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",114,null],[12,"unsafety","","",114,null],[12,"abi","","",114,null],[12,"ident","","",114,null],[12,"decl","","",114,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",115,null],[12,"const_token","","",115,null],[12,"ident","","",115,null],[12,"colon_token","","",115,null],[12,"ty","","",115,null],[12,"default","","",115,null],[12,"semi_token","","",115,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",116,null],[12,"mac","","",116,null],[12,"semi_token","","",116,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",117,null],[12,"sig","","",117,null],[12,"default","","",117,null],[12,"semi_token","","",117,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",118,null],[12,"type_token","","",118,null],[12,"ident","","",118,null],[12,"generics","","",118,null],[12,"colon_token","","",118,null],[12,"bounds","","",118,null],[12,"default","","",118,null],[12,"semi_token","","",118,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",119,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",120,null],[3,"UseList","","A braced list of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",121,null],[12,"items","","",121,null],[3,"UsePath","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",null,null],[12,"ident","","",122,null],[12,"rename","","",122,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",123,null],[12,"attrs","","",123,null],[12,"items","","",123,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"term","","",124,null],[12,"span","","",124,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",125,null],[12,"span","","",125,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[12,"token","","",126,null],[12,"span","","",126,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[12,"token","","",127,null],[12,"span","","",127,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[12,"token","","",128,null],[12,"span","","",128,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[12,"token","","",129,null],[12,"span","","",129,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[12,"token","","",130,null],[12,"span","","",130,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[12,"token","","",131,null],[12,"span","","",131,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",132,null],[12,"span","","",132,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",133,null],[12,"bang_token","","",133,null],[12,"delimiter","","",133,null],[12,"tts","","",133,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",134,null],[12,"brace_token","","",134,null],[12,"variants","","",134,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",135,null],[12,"fields","","",135,null],[12,"semi_token","","",135,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",136,null],[12,"fields","","",136,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",137,null],[12,"vis","","Visibility of the struct or enum.",137,null],[12,"ident","","Name of the struct or enum.",137,null],[12,"generics","","Generics required to complete the definition.",137,null],[12,"data","","Data within the struct or enum.",137,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",138,null],[12,"name","","",138,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",139,null],[12,"ty","","",139,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",140,null],[12,"elem","","",140,null],[12,"semi_token","","",140,null],[12,"len","","",140,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",141,null],[12,"abi","","",141,null],[12,"fn_token","","",141,null],[12,"lifetimes","","",141,null],[12,"paren_token","","",141,null],[12,"inputs","","",141,null],[12,"variadic","","",141,null],[12,"output","","",141,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",142,null],[12,"elem","","",142,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",143,null],[12,"bounds","","",143,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",144,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",145,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",146,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",147,null],[12,"elem","","",147,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",148,null],[12,"path","","",148,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",149,null],[12,"const_token","","",149,null],[12,"mutability","","",149,null],[12,"elem","","",149,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",150,null],[12,"lifetime","","",150,null],[12,"mutability","","",150,null],[12,"elem","","",150,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",151,null],[12,"elem","","",151,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",152,null],[12,"bounds","","",152,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",153,null],[12,"elems","","",153,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",154,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",155,null],[12,"lt_token","","",155,null],[12,"args","","",155,null],[12,"gt_token","","",155,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",156,null],[12,"eq_token","","",156,null],[12,"ty","","",156,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",157,null],[12,"inputs","","`(A, B)`",157,null],[12,"output","","`C`",157,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",158,null],[12,"segments","","",158,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",159,null],[12,"arguments","","",159,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",160,null],[12,"ty","","",160,null],[12,"position","","",160,null],[12,"as_token","","",160,null],[12,"gt_token","","",160,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",161,null],[12,"1","","",161,null],[3,"TokensOrDefault","","",null,null],[12,"0","","",162,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",163,null],[13,"Inner","","",163,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",164,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",164,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",164,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",165,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",165,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",166,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",166,null],[13,"Unit","","Unit struct or unit variant such as `None`.",166,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",167,null],[13,"Crate","","A crate-level visibility: `pub(crate)`.",167,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",167,null],[13,"Inherited","","An inherited visibility, which usually means private.",167,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",168,null],[13,"InPlace","","A placement expression: `place <- value`.",168,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",168,null],[13,"Call","","A function call expression: `invoke(a, b)`.",168,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",168,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",168,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",168,null],[13,"Unary","","A unary operation: `!x`, `*x`.",168,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",168,null],[13,"Cast","","A cast expression: `foo as f64`.",168,null],[13,"Type","","A type ascription expression: `foo: f64`.",168,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",168,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",168,null],[13,"While","","A while loop: `while expr { ... }`.",168,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",168,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",168,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",168,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",168,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",168,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",168,null],[13,"Block","","A blocked scope: `{ ... }`.",168,null],[13,"Assign","","An assignment expression: `a = compute()`.",168,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",168,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",168,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",168,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",168,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",168,null],[13,"AddrOf","","A referencing operation: `&a` or `&mut a`.",168,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",168,null],[13,"Continue","","A `continue`, with an optional label.",168,null],[13,"Return","","A `return`, with an optional value to be returned.",168,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",168,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",168,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",168,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",168,null],[13,"Group","","An expression contained within invisible delimiters.",168,null],[13,"Try","","A try-expression: `expr?`.",168,null],[13,"Catch","","A catch expression: `do catch { ... }`.",168,null],[13,"Yield","","A yield expression: `yield expr`.",168,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",168,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",169,null],[13,"Unnamed","","An unnamed field like `self.0`.",169,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",170,null],[13,"Const","","A const expression. Must be inside of a block.",170,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",171,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",171,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",171,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",171,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",171,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",171,null],[13,"Box","","A box pattern: `box v`.",171,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",171,null],[13,"Lit","","A literal pattern: `0`.",171,null],[13,"Range","","A range pattern: `1..=2`.",171,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",171,null],[13,"Macro","","A macro in expression position.",171,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",171,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",172,null],[13,"Closed","","Inclusive at the beginning and end.",172,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",173,null],[13,"Item","","An item definition.",173,null],[13,"Expr","","Expr without trailing semicolon.",173,null],[13,"Semi","","Expression with trailing semicolon.",173,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",174,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",174,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",174,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",175,null],[13,"Maybe","","",175,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",176,null],[13,"Lifetime","","",176,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",177,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",177,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",177,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",178,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",178,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",178,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",178,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",178,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",179,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",179,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",179,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",179,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",180,null],[13,"Method","","A method within an impl block.",180,null],[13,"Type","","An associated type within an impl block.",180,null],[13,"Macro","","A macro invocation within an impl block.",180,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",180,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",181,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",181,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",181,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",181,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",181,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",181,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",181,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",181,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",181,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",181,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",181,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",181,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",181,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",181,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",181,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",181,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",182,null],[13,"Method","","A trait method within the definition of a trait.",182,null],[13,"Type","","An associated type within the definition of a trait.",182,null],[13,"Macro","","A macro invocation within the definition of a trait.",182,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",182,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",183,null],[13,"Glob","","A glob import in a `use` item: `*`.",183,null],[13,"List","","A braced list of imports in a `use` item: `{A, B, C}`.",183,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",184,null],[13,"F64","","",184,null],[13,"None","","",184,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",185,null],[13,"I16","","",185,null],[13,"I32","","",185,null],[13,"I64","","",185,null],[13,"I128","","",185,null],[13,"Isize","","",185,null],[13,"U8","","",185,null],[13,"U16","","",185,null],[13,"U32","","",185,null],[13,"U64","","",185,null],[13,"U128","","",185,null],[13,"Usize","","",185,null],[13,"None","","",185,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",186,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",186,null],[13,"Byte","","A byte literal: `b'f'`.",186,null],[13,"Char","","A character literal: `'a'`.",186,null],[13,"Int","","An integer literal: `1` or `1u16`.",186,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",186,null],[13,"Bool","","A boolean literal: `true` or `false`.",186,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",186,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",187,null],[13,"Raw","","A raw string like `r##\"data\"##`.",187,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",188,null],[13,"Brace","","",188,null],[13,"Bracket","","",188,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",189,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",189,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",189,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",190,null],[13,"Sub","","The `-` operator (subtraction)",190,null],[13,"Mul","","The `*` operator (multiplication)",190,null],[13,"Div","","The `/` operator (division)",190,null],[13,"Rem","","The `%` operator (modulus)",190,null],[13,"And","","The `&&` operator (logical and)",190,null],[13,"Or","","The `||` operator (logical or)",190,null],[13,"BitXor","","The `^` operator (bitwise xor)",190,null],[13,"BitAnd","","The `&` operator (bitwise and)",190,null],[13,"BitOr","","The `|` operator (bitwise or)",190,null],[13,"Shl","","The `<<` operator (shift left)",190,null],[13,"Shr","","The `>>` operator (shift right)",190,null],[13,"Eq","","The `==` operator (equality)",190,null],[13,"Lt","","The `<` operator (less than)",190,null],[13,"Le","","The `<=` operator (less than or equal to)",190,null],[13,"Ne","","The `!=` operator (not equal to)",190,null],[13,"Ge","","The `>=` operator (greater than or equal to)",190,null],[13,"Gt","","The `>` operator (greater than)",190,null],[13,"AddEq","","The `+=` operator",190,null],[13,"SubEq","","The `-=` operator",190,null],[13,"MulEq","","The `*=` operator",190,null],[13,"DivEq","","The `/=` operator",190,null],[13,"RemEq","","The `%=` operator",190,null],[13,"BitXorEq","","The `^=` operator",190,null],[13,"BitAndEq","","The `&=` operator",190,null],[13,"BitOrEq","","The `|=` operator",190,null],[13,"ShlEq","","The `<<=` operator",190,null],[13,"ShrEq","","The `>>=` operator",190,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",191,null],[13,"Not","","The `!` operator for logical inversion",191,null],[13,"Neg","","The `-` operator for negation",191,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",192,null],[13,"Wild","","Argument not given a name, matched with `_`.",192,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",193,null],[13,"Type","","A particular type is returned.",193,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",194,null],[13,"Array","","A fixed size array type: `[T; n]`.",194,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",194,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",194,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",194,null],[13,"Never","","The never type: `!`.",194,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",194,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",194,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",194,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",194,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",194,null],[13,"Group","","A type contained within invisible delimiters.",194,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",194,null],[13,"Macro","","A macro in the type position.",194,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",194,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",195,null],[13,"Type","","A type argument.",195,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",195,null],[13,"Const","","A const expression. Must be inside of a block.",195,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",196,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",196,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",196,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_file","","Parse the content of a file of Rust code.",null,{"inputs":[{"name":"str"}],"output":{"generics":["file","parseerror"],"name":"result"}}],[0,"parsers","","",null,null],[5,"invoke","syn::parsers","",null,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"r"}}],[5,"many0","","",null,null],[5,"input_end","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"macros","syn","",null,null],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Add","syn::token","`+`",null,null],[12,"0","","",197,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",198,null],[3,"And","","`&`",null,null],[12,"0","","",199,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",200,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",201,null],[3,"At","","`@`",null,null],[12,"0","","",202,null],[3,"Bang","","`!`",null,null],[12,"0","","",203,null],[3,"Caret","","`^`",null,null],[12,"0","","",204,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",205,null],[3,"Colon","","`:`",null,null],[12,"0","","",206,null],[3,"Colon2","","`::`",null,null],[12,"0","","",207,null],[3,"Comma","","`,`",null,null],[12,"0","","",208,null],[3,"Div","","`/`",null,null],[12,"0","","",209,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",210,null],[3,"Dot","","`.`",null,null],[12,"0","","",211,null],[3,"Dot2","","`..`",null,null],[12,"0","","",212,null],[3,"Dot3","","`...`",null,null],[12,"0","","",213,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",214,null],[3,"Eq","","`=`",null,null],[12,"0","","",215,null],[3,"EqEq","","`==`",null,null],[12,"0","","",216,null],[3,"Ge","","`>=`",null,null],[12,"0","","",217,null],[3,"Gt","","`>`",null,null],[12,"0","","",218,null],[3,"Le","","`<=`",null,null],[12,"0","","",219,null],[3,"Lt","","`<`",null,null],[12,"0","","",220,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",221,null],[3,"Ne","","`!=`",null,null],[12,"0","","",222,null],[3,"Or","","`|`",null,null],[12,"0","","",223,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",224,null],[3,"OrOr","","`||`",null,null],[12,"0","","",225,null],[3,"Pound","","`#`",null,null],[12,"0","","",226,null],[3,"Question","","`?`",null,null],[12,"0","","",227,null],[3,"RArrow","","`->`",null,null],[12,"0","","",228,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",229,null],[3,"Rem","","`%`",null,null],[12,"0","","",230,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",231,null],[3,"Rocket","","`=>`",null,null],[12,"0","","",232,null],[3,"Semi","","`;`",null,null],[12,"0","","",233,null],[3,"Shl","","`<<`",null,null],[12,"0","","",234,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",235,null],[3,"Shr","","`>>`",null,null],[12,"0","","",236,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",237,null],[3,"Star","","`*`",null,null],[12,"0","","",238,null],[3,"Sub","","`-`",null,null],[12,"0","","",239,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",240,null],[3,"Underscore","","`_`",null,null],[12,"0","","",241,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",242,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",243,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",244,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",245,null],[3,"As","","`as`",null,null],[12,"0","","",246,null],[3,"Auto","","`auto`",null,null],[12,"0","","",247,null],[3,"Box","","`box`",null,null],[12,"0","","",248,null],[3,"Break","","`break`",null,null],[12,"0","","",249,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",250,null],[3,"Catch","","`catch`",null,null],[12,"0","","",251,null],[3,"Const","","`const`",null,null],[12,"0","","",252,null],[3,"Continue","","`continue`",null,null],[12,"0","","",253,null],[3,"Crate","","`crate`",null,null],[12,"0","","",254,null],[3,"Default","","`default`",null,null],[12,"0","","",255,null],[3,"Do","","`do`",null,null],[12,"0","","",256,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",257,null],[3,"Else","","`else`",null,null],[12,"0","","",258,null],[3,"Enum","","`enum`",null,null],[12,"0","","",259,null],[3,"Extern","","`extern`",null,null],[12,"0","","",260,null],[3,"Fn","","`fn`",null,null],[12,"0","","",261,null],[3,"For","","`for`",null,null],[12,"0","","",262,null],[3,"If","","`if`",null,null],[12,"0","","",263,null],[3,"Impl","","`impl`",null,null],[12,"0","","",264,null],[3,"In","","`in`",null,null],[12,"0","","",265,null],[3,"Let","","`let`",null,null],[12,"0","","",266,null],[3,"Loop","","`loop`",null,null],[12,"0","","",267,null],[3,"Macro","","`macro`",null,null],[12,"0","","",268,null],[3,"Match","","`match`",null,null],[12,"0","","",269,null],[3,"Mod","","`mod`",null,null],[12,"0","","",270,null],[3,"Move","","`move`",null,null],[12,"0","","",271,null],[3,"Mut","","`mut`",null,null],[12,"0","","",272,null],[3,"Pub","","`pub`",null,null],[12,"0","","",273,null],[3,"Ref","","`ref`",null,null],[12,"0","","",274,null],[3,"Return","","`return`",null,null],[12,"0","","",275,null],[3,"Self_","","`self`",null,null],[12,"0","","",276,null],[3,"Static","","`static`",null,null],[12,"0","","",277,null],[3,"Struct","","`struct`",null,null],[12,"0","","",278,null],[3,"Super","","`super`",null,null],[12,"0","","",279,null],[3,"Trait","","`trait`",null,null],[12,"0","","",280,null],[3,"Type","","`type`",null,null],[12,"0","","",281,null],[3,"Union","","`union`",null,null],[12,"0","","",282,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",283,null],[3,"Use","","`use`",null,null],[12,"0","","",284,null],[3,"Where","","`where`",null,null],[12,"0","","",285,null],[3,"While","","`while`",null,null],[12,"0","","",286,null],[3,"Yield","","`yield`",null,null],[12,"0","","",287,null],[0,"parsing","","",null,null],[5,"punct","syn::token::parsing","",null,null],[5,"keyword","","",null,null],[5,"delim","","",null,null],[8,"FromSpans","","",null,null],[10,"from_spans","","",288,null],[0,"printing","syn::token","",null,null],[5,"punct","syn::token::printing","",null,null],[5,"keyword","","",null,{"inputs":[{"name":"str"},{"name":"span"},{"name":"tokens"}],"output":null}],[5,"delim","","",null,{"inputs":[{"name":"str"},{"name":"span"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"clone","syn::token","",197,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",197,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",197,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"add"}],"output":{"name":"bool"}}],[11,"hash","","",197,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",197,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",197,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",197,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",197,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",198,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"addeq"}],"output":{"name":"bool"}}],[11,"hash","","",198,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",198,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",198,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",198,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",198,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",199,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",199,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"and"}],"output":{"name":"bool"}}],[11,"hash","","",199,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",199,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",199,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",199,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",199,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",200,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",200,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"andand"}],"output":{"name":"bool"}}],[11,"hash","","",200,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",200,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",200,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",200,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",200,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",201,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",201,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"andeq"}],"output":{"name":"bool"}}],[11,"hash","","",201,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",201,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",201,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",201,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",201,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",202,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",202,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"at"}],"output":{"name":"bool"}}],[11,"hash","","",202,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",202,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",202,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",202,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",202,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",203,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"bang"}],"output":{"name":"bool"}}],[11,"hash","","",203,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",203,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",203,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",203,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",203,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",204,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",204,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"caret"}],"output":{"name":"bool"}}],[11,"hash","","",204,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",204,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",204,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",204,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",204,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",205,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"careteq"}],"output":{"name":"bool"}}],[11,"hash","","",205,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",205,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",205,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",205,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",205,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",206,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",206,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"colon"}],"output":{"name":"bool"}}],[11,"hash","","",206,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",206,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",206,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",206,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",206,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",207,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"colon2"}],"output":{"name":"bool"}}],[11,"hash","","",207,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",207,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",207,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",207,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",207,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",208,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"comma"}],"output":{"name":"bool"}}],[11,"hash","","",208,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",208,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",208,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",208,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",208,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",209,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"div"}],"output":{"name":"bool"}}],[11,"hash","","",209,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",209,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",209,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",209,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",209,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",210,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"diveq"}],"output":{"name":"bool"}}],[11,"hash","","",210,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",210,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",210,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",210,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",210,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",211,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",211,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"dot"}],"output":{"name":"bool"}}],[11,"hash","","",211,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",211,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",211,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",211,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",212,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",212,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"dot2"}],"output":{"name":"bool"}}],[11,"hash","","",212,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",212,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",212,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",212,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",213,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",213,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"dot3"}],"output":{"name":"bool"}}],[11,"hash","","",213,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",213,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",213,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",213,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",214,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",214,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"dotdoteq"}],"output":{"name":"bool"}}],[11,"hash","","",214,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",214,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",215,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",215,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"eq"}],"output":{"name":"bool"}}],[11,"hash","","",215,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",215,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",216,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",216,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"eqeq"}],"output":{"name":"bool"}}],[11,"hash","","",216,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",216,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",217,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",217,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"ge"}],"output":{"name":"bool"}}],[11,"hash","","",217,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",217,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",218,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",218,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"gt"}],"output":{"name":"bool"}}],[11,"hash","","",218,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",218,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",218,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",218,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",218,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",219,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",219,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"le"}],"output":{"name":"bool"}}],[11,"hash","","",219,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",219,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",219,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",219,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",219,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",220,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",220,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"lt"}],"output":{"name":"bool"}}],[11,"hash","","",220,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",220,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",220,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",220,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",220,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",221,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",221,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"muleq"}],"output":{"name":"bool"}}],[11,"hash","","",221,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",221,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",221,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",221,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",221,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",222,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",222,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"ne"}],"output":{"name":"bool"}}],[11,"hash","","",222,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",222,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",222,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",222,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",223,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"or"}],"output":{"name":"bool"}}],[11,"hash","","",223,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",223,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",223,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",223,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",224,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",224,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"oreq"}],"output":{"name":"bool"}}],[11,"hash","","",224,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",224,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",224,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",224,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",224,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",225,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",225,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"oror"}],"output":{"name":"bool"}}],[11,"hash","","",225,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",225,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",225,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",225,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",225,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",226,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",226,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"pound"}],"output":{"name":"bool"}}],[11,"hash","","",226,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",226,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",226,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",226,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",226,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",227,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",227,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"question"}],"output":{"name":"bool"}}],[11,"hash","","",227,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",227,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",227,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",227,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",227,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",228,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"rarrow"}],"output":{"name":"bool"}}],[11,"hash","","",228,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",228,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",228,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",228,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",228,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",229,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",229,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"larrow"}],"output":{"name":"bool"}}],[11,"hash","","",229,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",229,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",229,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",229,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",229,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",230,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",230,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"rem"}],"output":{"name":"bool"}}],[11,"hash","","",230,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",230,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",230,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",230,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",230,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",231,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",231,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"remeq"}],"output":{"name":"bool"}}],[11,"hash","","",231,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",231,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",231,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",231,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",231,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"rocket"}}],[11,"new","","",232,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",232,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"rocket"}],"output":{"name":"bool"}}],[11,"hash","","",232,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",232,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",232,{"inputs":[{"name":"cursor"}],"output":{"generics":["rocket"],"name":"presult"}}],[11,"description","","",232,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",232,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",233,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",233,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"semi"}],"output":{"name":"bool"}}],[11,"hash","","",233,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",233,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",233,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",233,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",233,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",234,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",234,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",234,{"inputs":[{"name":"self"},{"name":"shl"}],"output":{"name":"bool"}}],[11,"hash","","",234,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",234,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",234,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",234,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",234,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",235,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",235,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"self"},{"name":"shleq"}],"output":{"name":"bool"}}],[11,"hash","","",235,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",235,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",235,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",235,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",235,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",236,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",236,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"shr"}],"output":{"name":"bool"}}],[11,"hash","","",236,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",236,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",236,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",236,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",236,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",237,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",237,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",237,{"inputs":[{"name":"self"},{"name":"shreq"}],"output":{"name":"bool"}}],[11,"hash","","",237,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",237,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",237,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",237,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",237,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",238,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",238,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",238,{"inputs":[{"name":"self"},{"name":"star"}],"output":{"name":"bool"}}],[11,"hash","","",238,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",238,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",238,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",238,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",238,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",239,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",239,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",239,{"inputs":[{"name":"self"},{"name":"sub"}],"output":{"name":"bool"}}],[11,"hash","","",239,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",239,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",239,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",239,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",239,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",240,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",240,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",240,{"inputs":[{"name":"self"},{"name":"subeq"}],"output":{"name":"bool"}}],[11,"hash","","",240,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",240,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",240,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",240,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",240,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",241,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",241,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"underscore"}],"output":{"name":"bool"}}],[11,"hash","","",241,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",241,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",241,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",241,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",241,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",242,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",242,{"inputs":[{"name":"self"},{"name":"brace"}],"output":{"name":"bool"}}],[11,"hash","","",242,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",242,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",242,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",242,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",243,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",243,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"self"},{"name":"bracket"}],"output":{"name":"bool"}}],[11,"hash","","",243,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",243,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",243,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",243,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",244,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"paren"}],"output":{"name":"bool"}}],[11,"hash","","",244,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",244,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",244,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",244,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",245,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",245,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"hash","","",245,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"surround","","",245,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",245,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",245,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",246,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",246,{"inputs":[{"name":"self"},{"name":"as"}],"output":{"name":"bool"}}],[11,"hash","","",246,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",246,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",246,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",246,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",246,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",247,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"auto"}],"output":{"name":"bool"}}],[11,"hash","","",247,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",247,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",247,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",247,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",247,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",248,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"bool"}}],[11,"hash","","",248,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",248,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",248,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",248,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",248,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",249,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"hash","","",249,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",249,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",249,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",249,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",249,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",250,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",250,{"inputs":[{"name":"self"},{"name":"capself"}],"output":{"name":"bool"}}],[11,"hash","","",250,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",250,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",250,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",250,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",250,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",251,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",251,{"inputs":[{"name":"self"},{"name":"catch"}],"output":{"name":"bool"}}],[11,"hash","","",251,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",251,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",251,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",251,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",251,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",252,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"hash","","",252,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",252,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",252,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",252,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",252,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",253,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"continue"}],"output":{"name":"bool"}}],[11,"hash","","",253,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",253,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",253,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",253,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",253,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",254,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",254,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",254,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",254,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",254,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",254,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",254,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",255,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"hash","","",255,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",255,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",255,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",255,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",255,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",256,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",256,{"inputs":[{"name":"self"},{"name":"do"}],"output":{"name":"bool"}}],[11,"hash","","",256,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",256,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",256,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",256,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",256,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",257,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",257,{"inputs":[{"name":"self"},{"name":"dyn"}],"output":{"name":"bool"}}],[11,"hash","","",257,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",257,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",257,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",257,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",257,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",258,{"inputs":[{"name":"self"},{"name":"else"}],"output":{"name":"bool"}}],[11,"hash","","",258,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",258,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",258,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",258,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",258,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",259,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",259,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"hash","","",259,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",259,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",259,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",259,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",259,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",260,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",260,{"inputs":[{"name":"self"},{"name":"extern"}],"output":{"name":"bool"}}],[11,"hash","","",260,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",260,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",260,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",260,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",260,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",261,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"fn"}],"output":{"name":"bool"}}],[11,"hash","","",261,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",261,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",261,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",261,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",261,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"for"}],"output":{"name":"bool"}}],[11,"hash","","",262,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",262,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",262,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",262,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",262,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",263,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"if"}],"output":{"name":"bool"}}],[11,"hash","","",263,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",263,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",263,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",263,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",263,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",264,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"name":"bool"}}],[11,"hash","","",264,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",264,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",264,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",264,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",264,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",265,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"in"}],"output":{"name":"bool"}}],[11,"hash","","",265,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",265,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",265,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",265,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",265,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"let"}],"output":{"name":"bool"}}],[11,"hash","","",266,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",266,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",266,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",266,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",266,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",267,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"loop"}],"output":{"name":"bool"}}],[11,"hash","","",267,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",267,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",267,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",267,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",267,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",268,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",268,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"bool"}}],[11,"hash","","",268,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",268,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",268,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",268,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",268,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",269,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",269,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"hash","","",269,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",269,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",269,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",269,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",269,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",270,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"hash","","",270,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",270,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",270,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",270,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",270,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",271,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"hash","","",271,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",271,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",271,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",271,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",271,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",272,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"mut"}],"output":{"name":"bool"}}],[11,"hash","","",272,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",272,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",272,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",272,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",272,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"pub"}],"output":{"name":"bool"}}],[11,"hash","","",273,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",273,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",273,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",273,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",273,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",274,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"ref"}],"output":{"name":"bool"}}],[11,"hash","","",274,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",274,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",274,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",274,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",274,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",275,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",275,{"inputs":[{"name":"self"},{"name":"return"}],"output":{"name":"bool"}}],[11,"hash","","",275,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",275,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",275,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",275,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",275,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",276,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"self_"}],"output":{"name":"bool"}}],[11,"hash","","",276,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",276,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",276,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",276,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",276,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",277,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",277,{"inputs":[{"name":"self"},{"name":"static"}],"output":{"name":"bool"}}],[11,"hash","","",277,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",277,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",277,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",277,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",277,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",278,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",278,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"hash","","",278,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",278,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",278,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",278,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",278,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",279,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",279,{"inputs":[{"name":"self"},{"name":"super"}],"output":{"name":"bool"}}],[11,"hash","","",279,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",279,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",279,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",279,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",279,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",280,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",280,{"inputs":[{"name":"self"},{"name":"trait"}],"output":{"name":"bool"}}],[11,"hash","","",280,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",280,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",280,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",280,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",280,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",281,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",281,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",281,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"hash","","",281,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",281,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",281,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",281,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",281,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",282,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"union"}],"output":{"name":"bool"}}],[11,"hash","","",282,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",282,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",282,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",282,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",282,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",283,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",283,{"inputs":[{"name":"self"},{"name":"unsafe"}],"output":{"name":"bool"}}],[11,"hash","","",283,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",283,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",283,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",283,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",283,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",284,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",284,{"inputs":[{"name":"self"},{"name":"use"}],"output":{"name":"bool"}}],[11,"hash","","",284,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",284,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",284,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",284,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",284,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",285,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",285,{"inputs":[{"name":"self"},{"name":"where"}],"output":{"name":"bool"}}],[11,"hash","","",285,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",285,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",285,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",285,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",285,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",286,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",286,{"inputs":[{"name":"self"},{"name":"while"}],"output":{"name":"bool"}}],[11,"hash","","",286,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",286,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",286,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",286,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",286,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",287,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",287,{"inputs":[{"name":"self"},{"name":"yield"}],"output":{"name":"bool"}}],[11,"hash","","",287,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"to_tokens","","",287,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",287,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",287,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",287,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[0,"attr","syn","",null,null],[3,"Attribute","syn::attr","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",163,null],[13,"Inner","","",163,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",164,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",164,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",164,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",165,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",165,null],[5,"nested_meta_item_from_tokens","","",null,null],[5,"list_of_nested_meta_items_from_tokens","","",null,null],[0,"parsing","","",null,null],[4,"Comment","syn::attr::parsing","",null,null],[13,"Inner","","",289,null],[13,"Outer","","",289,null],[5,"eq","","",null,{"inputs":[{"name":"span"}],"output":{"name":"tokentree"}}],[5,"lit_doc_comment","","",null,{"inputs":[{"name":"cursor"},{"name":"comment"}],"output":{"generics":["tokentree"],"name":"presult"}}],[11,"parse_inner","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"printing","syn::attr","",null,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"FilterAttrs","syn::attr","",null,null],[16,"Ret","","",290,null],[10,"outer","","",290,null],[10,"inner","","",290,null],[11,"fmt","syn","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",163,null],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",163,null],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",164,null],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"hash","","",164,null],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",164,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",164,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",164,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",164,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",165,null],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"bool"}}],[11,"hash","","",165,null],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",165,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",165,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"data","","",null,null],[3,"Variant","syn::data","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisCrate","","A crate-level visibility: `pub(crate)`.",null,null],[12,"pub_token","","",7,null],[12,"paren_token","","",7,null],[12,"crate_token","","",7,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",166,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",166,null],[13,"Unit","","Unit struct or unit variant such as `None`.",166,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",167,null],[13,"Crate","","A crate-level visibility: `pub(crate)`.",167,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",167,null],[13,"Inherited","","An inherited visibility, which usually means private.",167,null],[0,"parsing","","",null,null],[11,"parse","syn","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::data","",null,null],[11,"to_tokens","syn","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",166,null],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"hash","","",166,null],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",166,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",166,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",166,{"inputs":[{"name":"self"}],"output":{"generics":["field","comma"],"name":"iter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",167,null],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",167,null],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",167,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",167,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",167,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"expr","","",null,null],[3,"ExprBox","syn::expr","A box expression: `box f`.",null,null],[12,"attrs","","",16,null],[12,"box_token","","",16,null],[12,"expr","","",16,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[12,"attrs","","",28,null],[12,"place","","",28,null],[12,"arrow_token","","",28,null],[12,"value","","",28,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",11,null],[12,"bracket_token","","",11,null],[12,"elems","","",11,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",18,null],[12,"func","","",18,null],[12,"paren_token","","",18,null],[12,"args","","",18,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",34,null],[12,"receiver","","",34,null],[12,"dot_token","","",34,null],[12,"method","","",34,null],[12,"turbofish","","",34,null],[12,"paren_token","","",34,null],[12,"args","","",34,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",42,null],[12,"paren_token","","",42,null],[12,"elems","","",42,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",14,null],[12,"left","","",14,null],[12,"op","","",14,null],[12,"right","","",14,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",44,null],[12,"op","","",44,null],[12,"expr","","",44,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",30,null],[12,"lit","","",30,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",19,null],[12,"expr","","",19,null],[12,"as_token","","",19,null],[12,"ty","","",19,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",43,null],[12,"expr","","",43,null],[12,"colon_token","","",43,null],[12,"ty","","",43,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[12,"attrs","","",26,null],[12,"if_token","","",26,null],[12,"cond","","",26,null],[12,"then_branch","","",26,null],[12,"else_branch","","",26,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[12,"attrs","","",27,null],[12,"if_token","","",27,null],[12,"let_token","","",27,null],[12,"pat","","",27,null],[12,"eq_token","","",27,null],[12,"expr","","",27,null],[12,"then_branch","","",27,null],[12,"else_branch","","",27,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",47,null],[12,"label","","",47,null],[12,"while_token","","",47,null],[12,"cond","","",47,null],[12,"body","","",47,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[12,"attrs","","",48,null],[12,"label","","",48,null],[12,"while_token","","",48,null],[12,"let_token","","",48,null],[12,"pat","","",48,null],[12,"eq_token","","",48,null],[12,"expr","","",48,null],[12,"body","","",48,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",24,null],[12,"label","","",24,null],[12,"for_token","","",24,null],[12,"pat","","",24,null],[12,"in_token","","",24,null],[12,"expr","","",24,null],[12,"body","","",24,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",31,null],[12,"label","","",31,null],[12,"loop_token","","",31,null],[12,"body","","",31,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[12,"attrs","","",33,null],[12,"match_token","","",33,null],[12,"expr","","",33,null],[12,"brace_token","","",33,null],[12,"arms","","",33,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",21,null],[12,"capture","","",21,null],[12,"or1_token","","",21,null],[12,"inputs","","",21,null],[12,"or2_token","","",21,null],[12,"output","","",21,null],[12,"body","","",21,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",45,null],[12,"unsafe_token","","",45,null],[12,"block","","",45,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",15,null],[12,"block","","",15,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",12,null],[12,"left","","",12,null],[12,"eq_token","","",12,null],[12,"right","","",12,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",13,null],[12,"left","","",13,null],[12,"op","","",13,null],[12,"right","","",13,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",23,null],[12,"base","","",23,null],[12,"dot_token","","",23,null],[12,"member","","",23,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",29,null],[12,"expr","","",29,null],[12,"bracket_token","","",29,null],[12,"index","","",29,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",37,null],[12,"from","","",37,null],[12,"limits","","",37,null],[12,"to","","",37,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",36,null],[12,"qself","","",36,null],[12,"path","","",36,null],[3,"ExprAddrOf","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",10,null],[12,"and_token","","",10,null],[12,"mutability","","",10,null],[12,"expr","","",10,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[12,"attrs","","",17,null],[12,"break_token","","",17,null],[12,"label","","",17,null],[12,"expr","","",17,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",22,null],[12,"continue_token","","",22,null],[12,"label","","",22,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",39,null],[12,"return_token","","",39,null],[12,"expr","","",39,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",32,null],[12,"mac","","",32,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",40,null],[12,"path","","",40,null],[12,"brace_token","","",40,null],[12,"fields","","",40,null],[12,"dot2_token","","",40,null],[12,"rest","","",40,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[12,"attrs","","",38,null],[12,"bracket_token","","",38,null],[12,"expr","","",38,null],[12,"semi_token","","",38,null],[12,"len","","",38,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",35,null],[12,"paren_token","","",35,null],[12,"expr","","",35,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",25,null],[12,"group_token","","",25,null],[12,"expr","","",25,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",41,null],[12,"expr","","",41,null],[12,"question_token","","",41,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[12,"attrs","","",20,null],[12,"do_token","","",20,null],[12,"catch_token","","",20,null],[12,"block","","",20,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",49,null],[12,"yield_token","","",49,null],[12,"expr","","",49,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",46,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",50,null],[12,"span","","",50,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",54,null],[12,"member","","Name or index of the field.",54,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,null],[12,"expr","","Value of the field.",54,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",55,null],[12,"colon_token","","",55,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",52,null],[12,"stmts","","Statements in a block",52,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",56,null],[12,"let_token","","",56,null],[12,"pat","","",56,null],[12,"ty","","",56,null],[12,"init","","",56,null],[12,"semi_token","","",56,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"underscore_token","","",70,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",null,null],[12,"by_ref","","",59,null],[12,"mutability","","",59,null],[12,"ident","","",59,null],[12,"subpat","","",59,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"path","","",66,null],[12,"brace_token","","",66,null],[12,"fields","","",66,null],[12,"dot2_token","","",66,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",null,null],[12,"path","","",68,null],[12,"pat","","",68,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",null,null],[12,"qself","","",62,null],[12,"path","","",62,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"paren_token","","",67,null],[12,"front","","",67,null],[12,"dot2_token","","",67,null],[12,"comma_token","","",67,null],[12,"back","","",67,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"box_token","","",58,null],[12,"pat","","",58,null],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",null,null],[12,"and_token","","",64,null],[12,"mutability","","",64,null],[12,"pat","","",64,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"expr","","",60,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"lo","","",63,null],[12,"limits","","",63,null],[12,"hi","","",63,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",null,null],[12,"bracket_token","","",65,null],[12,"front","","",65,null],[12,"middle","","",65,null],[12,"dot2_token","","",65,null],[12,"comma_token","","",65,null],[12,"back","","",65,null],[3,"PatMacro","","A macro in expression position.",null,null],[12,"mac","","",61,null],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",null,null],[12,"tts","","",69,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",null,null],[12,"attrs","","",51,null],[12,"pats","","",51,null],[12,"guard","","",51,null],[12,"rocket_token","","",51,null],[12,"body","","",51,null],[12,"comma","","",51,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",53,null],[12,"member","","",53,null],[12,"colon_token","","",53,null],[12,"pat","","",53,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",168,null],[13,"InPlace","","A placement expression: `place <- value`.",168,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",168,null],[13,"Call","","A function call expression: `invoke(a, b)`.",168,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",168,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",168,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",168,null],[13,"Unary","","A unary operation: `!x`, `*x`.",168,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",168,null],[13,"Cast","","A cast expression: `foo as f64`.",168,null],[13,"Type","","A type ascription expression: `foo: f64`.",168,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",168,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",168,null],[13,"While","","A while loop: `while expr { ... }`.",168,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",168,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",168,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",168,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",168,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",168,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",168,null],[13,"Block","","A blocked scope: `{ ... }`.",168,null],[13,"Assign","","An assignment expression: `a = compute()`.",168,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",168,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",168,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",168,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",168,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",168,null],[13,"AddrOf","","A referencing operation: `&a` or `&mut a`.",168,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",168,null],[13,"Continue","","A `continue`, with an optional label.",168,null],[13,"Return","","A `return`, with an optional value to be returned.",168,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",168,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",168,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",168,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",168,null],[13,"Group","","An expression contained within invisible delimiters.",168,null],[13,"Try","","A try-expression: `expr?`.",168,null],[13,"Catch","","A catch expression: `do catch { ... }`.",168,null],[13,"Yield","","A yield expression: `yield expr`.",168,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",168,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",169,null],[13,"Unnamed","","An unnamed field like `self.0`.",169,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",170,null],[13,"Const","","A const expression. Must be inside of a block.",170,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",173,null],[13,"Item","","An item definition.",173,null],[13,"Expr","","Expr without trailing semicolon.",173,null],[13,"Semi","","Expression with trailing semicolon.",173,null],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",null,null],[13,"Wild","","A pattern that matches any value: `_`.",171,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",171,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",171,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",171,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",171,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",171,null],[13,"Box","","A box pattern: `box v`.",171,null],[13,"Ref","","A reference pattern: `&mut (first, second)`.",171,null],[13,"Lit","","A literal pattern: `0`.",171,null],[13,"Range","","A range pattern: `1..=2`.",171,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",171,null],[13,"Macro","","A macro in expression position.",171,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",171,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",172,null],[13,"Closed","","Inclusive at the beginning and end.",172,null],[5,"arm_expr_requires_comma","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[0,"parsing","","",null,null],[5,"expr_no_struct","syn::expr::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"ambiguous_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"assign_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"placement_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"range_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"or_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"and_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"compare_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"bitor_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"bitxor_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"bitand_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"shift_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"arith_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"term_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"cast_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"unary_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"trailer_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"atom_expr","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"expr_nosemi","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"and_call","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"and_method_call","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["exprmethodcall"],"name":"presult"}}],[5,"else_block","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"expr_closure","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"fn_arg","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["fnarg"],"name":"presult"}}],[5,"expr_break","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"expr_ret","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"expr_range","","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["expr"],"name":"presult"}}],[5,"and_field","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"and_index","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"stmt_mac","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_local","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_item","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_blockexpr","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"stmt_expr","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["stmt"],"name":"presult"}}],[5,"pat_lit_expr","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["expr"],"name":"presult"}}],[11,"parse","syn","",168,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",32,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",25,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",25,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",35,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",35,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",11,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",11,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",27,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",27,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",26,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",26,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",24,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",24,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",33,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",33,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",55,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",55,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",54,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",54,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",36,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",36,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_within","","",52,{"inputs":[{"name":"cursor"}],"output":{"generics":["vec"],"name":"presult"}}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",68,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",68,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",62,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",62,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",67,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",67,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",64,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",64,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",63,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",63,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",65,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",65,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",61,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",61,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::expr","",null,null],[5,"wrap_bare_struct","syn::expr::printing","",null,{"inputs":[{"name":"tokens"},{"name":"expr"}],"output":null}],[5,"attrs_to_tokens","","",null,null],[5,"maybe_wrap_else","","",null,{"inputs":[{"name":"tokens"},{"name":"option"}],"output":null}],[11,"to_tokens","syn","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",62,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",168,null],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",168,null],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",168,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",168,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",168,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",168,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",168,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",168,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",168,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",168,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",168,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",168,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",168,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",168,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",168,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",47,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",168,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",168,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",168,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",168,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",168,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",168,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",168,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",168,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",168,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",168,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",168,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",168,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",168,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",168,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"expraddrof"}}],[11,"from","","",168,{"inputs":[{"name":"expraddrof"}],"output":{"name":"expr"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",168,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",168,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",168,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",168,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",40,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",168,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",168,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",168,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",168,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",168,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",168,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",168,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",168,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"replace_attrs","","",168,{"inputs":[{"name":"self"},{"generics":["attribute"],"name":"vec"}],"output":{"generics":["attribute"],"name":"vec"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",169,null],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"bool"}}],[11,"hash","","",169,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",50,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"methodturbofish"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",170,null],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"bool"}}],[11,"hash","","",170,null],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"genericmethodargument"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"label"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",173,null],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",173,null],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",171,null],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",171,null],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"patwild"}}],[11,"from","","",171,{"inputs":[{"name":"patwild"}],"output":{"name":"pat"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"patident"}}],[11,"from","","",171,{"inputs":[{"name":"patident"}],"output":{"name":"pat"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"patstruct"}}],[11,"from","","",171,{"inputs":[{"name":"patstruct"}],"output":{"name":"pat"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pattuplestruct"}}],[11,"from","","",171,{"inputs":[{"name":"pattuplestruct"}],"output":{"name":"pat"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"patpath"}}],[11,"from","","",171,{"inputs":[{"name":"patpath"}],"output":{"name":"pat"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pattuple"}}],[11,"from","","",171,{"inputs":[{"name":"pattuple"}],"output":{"name":"pat"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"patbox"}}],[11,"from","","",171,{"inputs":[{"name":"patbox"}],"output":{"name":"pat"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"patref"}}],[11,"from","","",171,{"inputs":[{"name":"patref"}],"output":{"name":"pat"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"patlit"}}],[11,"from","","",171,{"inputs":[{"name":"patlit"}],"output":{"name":"pat"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"patrange"}}],[11,"from","","",171,{"inputs":[{"name":"patrange"}],"output":{"name":"pat"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"patslice"}}],[11,"from","","",171,{"inputs":[{"name":"patslice"}],"output":{"name":"pat"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"patmacro"}}],[11,"from","","",171,{"inputs":[{"name":"patmacro"}],"output":{"name":"pat"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"patverbatim"}}],[11,"from","","",171,{"inputs":[{"name":"patverbatim"}],"output":{"name":"pat"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",69,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",172,null],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",172,null],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[0,"generics","","",null,null],[3,"Generics","syn::generics","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",73,null],[12,"params","","",73,null],[12,"gt_token","","",73,null],[12,"where_clause","","",73,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",79,null],[12,"ident","","",79,null],[12,"colon_token","","",79,null],[12,"bounds","","",79,null],[12,"eq_token","","",79,null],[12,"default","","",79,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",74,null],[12,"lifetime","","",74,null],[12,"colon_token","","",74,null],[12,"bounds","","",74,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"default","","",72,null],[3,"TypeParams","","",null,null],[12,"0","","",291,null],[3,"TypeParamsMut","","",null,null],[12,"0","","",292,null],[3,"Lifetimes","","",null,null],[12,"0","","",293,null],[3,"LifetimesMut","","",null,null],[12,"0","","",294,null],[3,"ConstParams","","",null,null],[12,"0","","",295,null],[3,"ConstParamsMut","","",null,null],[12,"0","","",296,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",81,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[12,"0","","",83,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[12,"0","","",82,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",71,null],[12,"lt_token","","",71,null],[12,"lifetimes","","",71,null],[12,"gt_token","","",71,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"modifier","","",78,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",80,null],[12,"predicates","","",80,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",77,null],[12,"bounded_ty","","The type being bounded",77,null],[12,"colon_token","","",77,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",76,null],[12,"colon_token","","",76,null],[12,"bounds","","",76,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",75,null],[12,"eq_token","","",75,null],[12,"rhs_ty","","",75,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",174,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",174,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",174,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",176,null],[13,"Lifetime","","",176,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",175,null],[13,"Maybe","","",175,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",177,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",177,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",177,null],[0,"parsing","","",null,null],[11,"parse","syn","",73,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",73,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",74,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",74,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",79,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",78,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",78,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",72,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",72,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",80,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",177,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",177,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::generics","",null,null],[11,"to_tokens","syn","",73,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",76,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"default","","",73,{"inputs":[],"output":{"name":"generics"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",174,null],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"bool"}}],[11,"hash","","",174,null],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",174,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",174,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",174,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"next","syn::generics","",291,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",292,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",293,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",294,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",295,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",296,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","syn","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"implgenerics"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"implgenerics"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"typegenerics"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"typegenerics"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"turbofish"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"turbofish"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",83,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",74,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",79,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",176,null],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"bool"}}],[11,"hash","","",176,null],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",176,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",176,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",175,null],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",175,null],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",177,null],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",177,null],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",177,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",177,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",75,null],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",177,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",177,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"ident","","",null,null],[3,"Ident","syn::ident","A word of Rust code, which may be a keyword or legal variable name.",null,null],[12,"term","","",84,null],[12,"span","","",84,null],[0,"parsing","","",null,null],[11,"parse","syn","",84,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",84,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::ident","",null,null],[11,"to_tokens","syn","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an ident with the given string representation.",84,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"self_"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"capself"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"crate"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",84,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",84,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"item","","",null,null],[3,"ItemExternCrate","syn::item","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",100,null],[12,"vis","","",100,null],[12,"extern_token","","",100,null],[12,"crate_token","","",100,null],[12,"ident","","",100,null],[12,"rename","","",100,null],[12,"semi_token","","",100,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",112,null],[12,"vis","","",112,null],[12,"use_token","","",112,null],[12,"leading_colon","","",112,null],[12,"prefix","","",112,null],[12,"tree","","",112,null],[12,"semi_token","","",112,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",107,null],[12,"vis","","",107,null],[12,"static_token","","",107,null],[12,"mutability","","",107,null],[12,"ident","","",107,null],[12,"colon_token","","",107,null],[12,"ty","","",107,null],[12,"eq_token","","",107,null],[12,"expr","","",107,null],[12,"semi_token","","",107,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",98,null],[12,"vis","","",98,null],[12,"const_token","","",98,null],[12,"ident","","",98,null],[12,"colon_token","","",98,null],[12,"ty","","",98,null],[12,"eq_token","","",98,null],[12,"expr","","",98,null],[12,"semi_token","","",98,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",null,null],[12,"attrs","","",101,null],[12,"vis","","",101,null],[12,"constness","","",101,null],[12,"unsafety","","",101,null],[12,"abi","","",101,null],[12,"ident","","",101,null],[12,"decl","","",101,null],[12,"block","","",101,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",106,null],[12,"vis","","",106,null],[12,"mod_token","","",106,null],[12,"ident","","",106,null],[12,"content","","",106,null],[12,"semi","","",106,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",102,null],[12,"abi","","",102,null],[12,"brace_token","","",102,null],[12,"items","","",102,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",null,null],[12,"attrs","","",110,null],[12,"vis","","",110,null],[12,"type_token","","",110,null],[12,"ident","","",110,null],[12,"generics","","",110,null],[12,"eq_token","","",110,null],[12,"ty","","",110,null],[12,"semi_token","","",110,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",108,null],[12,"vis","","",108,null],[12,"struct_token","","",108,null],[12,"ident","","",108,null],[12,"generics","","",108,null],[12,"fields","","",108,null],[12,"semi_token","","",108,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",null,null],[12,"attrs","","",99,null],[12,"vis","","",99,null],[12,"enum_token","","",99,null],[12,"ident","","",99,null],[12,"generics","","",99,null],[12,"brace_token","","",99,null],[12,"variants","","",99,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",111,null],[12,"vis","","",111,null],[12,"union_token","","",111,null],[12,"ident","","",111,null],[12,"generics","","",111,null],[12,"fields","","",111,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",109,null],[12,"vis","","",109,null],[12,"unsafety","","",109,null],[12,"auto_token","","",109,null],[12,"trait_token","","",109,null],[12,"ident","","",109,null],[12,"generics","","",109,null],[12,"colon_token","","",109,null],[12,"supertraits","","",109,null],[12,"brace_token","","",109,null],[12,"items","","",109,null],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",null,null],[12,"attrs","","",103,null],[12,"defaultness","","",103,null],[12,"unsafety","","",103,null],[12,"impl_token","","",103,null],[12,"generics","","",103,null],[12,"trait_","","Trait this impl implements.",103,null],[12,"self_ty","","The Self type of the impl.",103,null],[12,"brace_token","","",103,null],[12,"items","","",103,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",null,null],[12,"attrs","","",104,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",104,null],[12,"mac","","",104,null],[12,"semi_token","","",104,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",null,null],[12,"attrs","","",105,null],[12,"vis","","",105,null],[12,"macro_token","","",105,null],[12,"ident","","",105,null],[12,"paren_token","","",105,null],[12,"args","","",105,null],[12,"brace_token","","",105,null],[12,"body","","",105,null],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",null,null],[12,"tts","","",113,null],[3,"UsePath","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",null,null],[12,"ident","","",122,null],[12,"rename","","",122,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",120,null],[3,"UseList","","A braced list of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",121,null],[12,"items","","",121,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",89,null],[12,"vis","","",89,null],[12,"ident","","",89,null],[12,"decl","","",89,null],[12,"semi_token","","",89,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",null,null],[12,"attrs","","",90,null],[12,"vis","","",90,null],[12,"static_token","","",90,null],[12,"mutability","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"semi_token","","",90,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",91,null],[12,"vis","","",91,null],[12,"type_token","","",91,null],[12,"ident","","",91,null],[12,"semi_token","","",91,null],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",null,null],[12,"tts","","",92,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",115,null],[12,"const_token","","",115,null],[12,"ident","","",115,null],[12,"colon_token","","",115,null],[12,"ty","","",115,null],[12,"default","","",115,null],[12,"semi_token","","",115,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",117,null],[12,"sig","","",117,null],[12,"default","","",117,null],[12,"semi_token","","",117,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",118,null],[12,"type_token","","",118,null],[12,"ident","","",118,null],[12,"generics","","",118,null],[12,"colon_token","","",118,null],[12,"bounds","","",118,null],[12,"default","","",118,null],[12,"semi_token","","",118,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",116,null],[12,"mac","","",116,null],[12,"semi_token","","",116,null],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",null,null],[12,"tts","","",119,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",93,null],[12,"vis","","",93,null],[12,"defaultness","","",93,null],[12,"const_token","","",93,null],[12,"ident","","",93,null],[12,"colon_token","","",93,null],[12,"ty","","",93,null],[12,"eq_token","","",93,null],[12,"expr","","",93,null],[12,"semi_token","","",93,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",95,null],[12,"vis","","",95,null],[12,"defaultness","","",95,null],[12,"sig","","",95,null],[12,"block","","",95,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",96,null],[12,"vis","","",96,null],[12,"defaultness","","",96,null],[12,"type_token","","",96,null],[12,"ident","","",96,null],[12,"generics","","",96,null],[12,"eq_token","","",96,null],[12,"ty","","",96,null],[12,"semi_token","","",96,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",94,null],[12,"mac","","",94,null],[12,"semi_token","","",94,null],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",null,null],[12,"tts","","",97,null],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",null,null],[12,"constness","","",114,null],[12,"unsafety","","",114,null],[12,"abi","","",114,null],[12,"ident","","",114,null],[12,"decl","","",114,null],[3,"FnDecl","","Header of a function declaration, without including the body.",null,null],[12,"fn_token","","",88,null],[12,"generics","","",88,null],[12,"paren_token","","",88,null],[12,"inputs","","",88,null],[12,"variadic","","",88,null],[12,"output","","",88,null],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",null,null],[12,"and_token","","",87,null],[12,"lifetime","","",87,null],[12,"mutability","","",87,null],[12,"self_token","","",87,null],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",null,null],[12,"mutability","","",86,null],[12,"self_token","","",86,null],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",null,null],[12,"pat","","",85,null],[12,"colon_token","","",85,null],[12,"ty","","",85,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",181,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",181,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",181,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",181,null],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",181,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",181,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",181,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",181,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",181,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",181,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",181,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",181,null],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",181,null],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",181,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",181,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",181,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",null,null],[13,"Path","","An identifier imported by a `use` item: `Type` or `Type as Renamed`.",183,null],[13,"Glob","","A glob import in a `use` item: `*`.",183,null],[13,"List","","A braced list of imports in a `use` item: `{A, B, C}`.",183,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",179,null],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",179,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",179,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",179,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",182,null],[13,"Method","","A trait method within the definition of a trait.",182,null],[13,"Type","","An associated type within the definition of a trait.",182,null],[13,"Macro","","A macro invocation within the definition of a trait.",182,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",182,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",180,null],[13,"Method","","A method within an impl block.",180,null],[13,"Type","","An associated type within an impl block.",180,null],[13,"Macro","","A macro invocation within an impl block.",180,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",180,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",null,null],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",178,null],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",178,null],[13,"Captured","","An explicitly typed pattern captured by a function signature.",178,null],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",178,null],[13,"Ignored","","A type not bound to any pattern in a function signature.",178,null],[0,"parsing","","",null,null],[5,"use_prefix","syn::item::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["ident"],"name":"presult"}}],[5,"is_brace","","",null,{"inputs":[{"name":"macrodelimiter"}],"output":{"name":"bool"}}],[11,"parse","syn","",181,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",181,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",183,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",183,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",178,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",178,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",179,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",179,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",182,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",182,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",180,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",180,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::item","",null,null],[3,"NamedDecl","syn::item::printing","",null,null],[12,"0","","",297,null],[12,"1","","",297,null],[11,"to_tokens","syn","",100,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","syn::item::printing","",297,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","syn","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",181,null],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",181,null],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"bool"}}],[11,"hash","","",100,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"itemexterncrate"}}],[11,"from","","",181,{"inputs":[{"name":"itemexterncrate"}],"output":{"name":"item"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"bool"}}],[11,"hash","","",112,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"itemuse"}}],[11,"from","","",181,{"inputs":[{"name":"itemuse"}],"output":{"name":"item"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",107,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"bool"}}],[11,"hash","","",107,null],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"itemstatic"}}],[11,"from","","",181,{"inputs":[{"name":"itemstatic"}],"output":{"name":"item"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"bool"}}],[11,"hash","","",98,null],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"itemconst"}}],[11,"from","","",181,{"inputs":[{"name":"itemconst"}],"output":{"name":"item"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"itemfn"}}],[11,"from","","",181,{"inputs":[{"name":"itemfn"}],"output":{"name":"item"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"itemmod"}}],[11,"from","","",181,{"inputs":[{"name":"itemmod"}],"output":{"name":"item"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"itemforeignmod"}}],[11,"from","","",181,{"inputs":[{"name":"itemforeignmod"}],"output":{"name":"item"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"itemtype"}}],[11,"from","","",181,{"inputs":[{"name":"itemtype"}],"output":{"name":"item"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"itemstruct"}}],[11,"from","","",181,{"inputs":[{"name":"itemstruct"}],"output":{"name":"item"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"itemenum"}}],[11,"from","","",181,{"inputs":[{"name":"itemenum"}],"output":{"name":"item"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"itemunion"}}],[11,"from","","",181,{"inputs":[{"name":"itemunion"}],"output":{"name":"item"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"itemtrait"}}],[11,"from","","",181,{"inputs":[{"name":"itemtrait"}],"output":{"name":"item"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"itemimpl"}}],[11,"from","","",181,{"inputs":[{"name":"itemimpl"}],"output":{"name":"item"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"itemmacro"}}],[11,"from","","",181,{"inputs":[{"name":"itemmacro"}],"output":{"name":"item"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"itemmacro2"}}],[11,"from","","",181,{"inputs":[{"name":"itemmacro2"}],"output":{"name":"item"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"itemverbatim"}}],[11,"from","","",181,{"inputs":[{"name":"itemverbatim"}],"output":{"name":"item"}}],[11,"to_tokens","","",181,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",105,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",113,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",181,{"inputs":[{"name":"deriveinput"}],"output":{"name":"item"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",183,null],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"bool"}}],[11,"hash","","",183,null],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"usetree"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",122,null],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"bool"}}],[11,"hash","","",122,null],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usepath"}}],[11,"from","","",183,{"inputs":[{"name":"usepath"}],"output":{"name":"usetree"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"bool"}}],[11,"hash","","",120,null],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"useglob"}}],[11,"from","","",183,{"inputs":[{"name":"useglob"}],"output":{"name":"usetree"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"bool"}}],[11,"hash","","",121,null],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"uselist"}}],[11,"from","","",183,{"inputs":[{"name":"uselist"}],"output":{"name":"usetree"}}],[11,"to_tokens","","",183,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",179,null],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",179,null],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemfn"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemfn"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemstatic"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemstatic"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemtype"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemtype"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemverbatim"}}],[11,"from","","",179,{"inputs":[{"name":"foreignitemverbatim"}],"output":{"name":"foreignitem"}}],[11,"to_tokens","","",179,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",92,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",182,null],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",182,null],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"bool"}}],[11,"hash","","",115,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"traititemconst"}}],[11,"from","","",182,{"inputs":[{"name":"traititemconst"}],"output":{"name":"traititem"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"bool"}}],[11,"hash","","",117,null],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"traititemmethod"}}],[11,"from","","",182,{"inputs":[{"name":"traititemmethod"}],"output":{"name":"traititem"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"bool"}}],[11,"hash","","",118,null],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"traititemtype"}}],[11,"from","","",182,{"inputs":[{"name":"traititemtype"}],"output":{"name":"traititem"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"bool"}}],[11,"hash","","",116,null],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"traititemmacro"}}],[11,"from","","",182,{"inputs":[{"name":"traititemmacro"}],"output":{"name":"traititem"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"traititemverbatim"}}],[11,"from","","",182,{"inputs":[{"name":"traititemverbatim"}],"output":{"name":"traititem"}}],[11,"to_tokens","","",182,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",119,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",180,null],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",180,null],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"implitemconst"}}],[11,"from","","",180,{"inputs":[{"name":"implitemconst"}],"output":{"name":"implitem"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"implitemmethod"}}],[11,"from","","",180,{"inputs":[{"name":"implitemmethod"}],"output":{"name":"implitem"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"implitemtype"}}],[11,"from","","",180,{"inputs":[{"name":"implitemtype"}],"output":{"name":"implitem"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"implitemmacro"}}],[11,"from","","",180,{"inputs":[{"name":"implitemmacro"}],"output":{"name":"implitem"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"implitemverbatim"}}],[11,"from","","",180,{"inputs":[{"name":"implitemverbatim"}],"output":{"name":"implitem"}}],[11,"to_tokens","","",180,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",97,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",114,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",178,null],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"hash","","",178,null],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"argselfref"}}],[11,"from","","",178,{"inputs":[{"name":"argselfref"}],"output":{"name":"fnarg"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"argself"}}],[11,"from","","",178,{"inputs":[{"name":"argself"}],"output":{"name":"fnarg"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"argcaptured"}}],[11,"from","","",178,{"inputs":[{"name":"argcaptured"}],"output":{"name":"fnarg"}}],[11,"from","","",178,{"inputs":[{"name":"pat"}],"output":{"name":"fnarg"}}],[11,"from","","",178,{"inputs":[{"name":"type"}],"output":{"name":"fnarg"}}],[11,"to_tokens","","",178,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"file","","",null,null],[3,"File","syn::file","A complete file of Rust source code.",null,null],[12,"shebang","","",123,null],[12,"attrs","","",123,null],[12,"items","","",123,null],[0,"parsing","","",null,null],[11,"parse","syn","",123,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::file","",null,null],[11,"to_tokens","syn","",123,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"bool"}}],[11,"hash","","",123,null],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[0,"lifetime","","",null,null],[3,"Lifetime","syn::lifetime","A Rust lifetime: `'a`.",null,null],[12,"term","","",124,null],[12,"span","","",124,null],[0,"parsing","","",null,null],[11,"parse","syn","",124,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::lifetime","",null,null],[11,"to_tokens","syn","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",124,{"inputs":[{"name":"term"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",124,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",124,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"lit","","",null,null],[3,"LitStr","syn::lit","A UTF-8 string literal: `\"foo\"`.",null,null],[12,"token","","",131,null],[12,"span","","",131,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[12,"token","","",127,null],[12,"span","","",127,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[12,"token","","",126,null],[12,"span","","",126,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[12,"token","","",128,null],[12,"span","","",128,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[12,"token","","",130,null],[12,"span","","",130,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[12,"token","","",129,null],[12,"span","","",129,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",125,null],[12,"span","","",125,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",132,null],[12,"span","","",132,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",186,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",186,null],[13,"Byte","","A byte literal: `b'f'`.",186,null],[13,"Char","","A character literal: `'a'`.",186,null],[13,"Int","","An integer literal: `1` or `1u16`.",186,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",186,null],[13,"Bool","","A boolean literal: `true` or `false`.",186,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",186,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",187,null],[13,"Raw","","A raw string like `r##\"data\"##`.",187,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",185,null],[13,"I16","","",185,null],[13,"I32","","",185,null],[13,"I64","","",185,null],[13,"I128","","",185,null],[13,"Isize","","",185,null],[13,"U8","","",185,null],[13,"U16","","",185,null],[13,"U32","","",185,null],[13,"U64","","",185,null],[13,"U128","","",185,null],[13,"Usize","","",185,null],[13,"None","","",185,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",184,null],[13,"F64","","",184,null],[13,"None","","",184,null],[0,"parsing","","",null,null],[11,"parse","syn","",186,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",186,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::lit","",null,null],[11,"to_tokens","syn","",131,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[0,"value","syn::lit","",null,null],[5,"number_is_int","syn::lit::value","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"number_is_float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"byte","","Get the byte at offset idx, or a default of `b'\\0'` if we're looking past the end of the input buffer.",null,{"inputs":[{"name":"s"},{"name":"usize"}],"output":{"name":"u8"}}],[5,"next_chr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"char"}}],[5,"parse_lit_str","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"parse_lit_str_cooked","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"parse_lit_str_raw","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"parse_lit_byte_str","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"parse_lit_byte_str_cooked","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"parse_lit_byte_str_raw","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"parse_lit_byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u8"}}],[5,"parse_lit_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"char"}}],[5,"backslash_x","","",null,null],[5,"backslash_u","","",null,null],[5,"parse_lit_int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u64"],"name":"option"}}],[5,"parse_lit_float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"f64"}}],[5,"to_literal","","",null,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"new","syn","Interpret a Syn literal from a proc-macro2 literal.",186,{"inputs":[{"name":"literal"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",186,null],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",186,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",186,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",186,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",186,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",186,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",186,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",186,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",186,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",186,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","",131,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",131,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"new","","",127,null],[11,"value","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"new","","",126,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","",128,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",128,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"new","","",130,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",130,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"new","","",129,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",129,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",129,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",131,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",127,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",126,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",128,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",130,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",129,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",125,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",132,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",187,null],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",187,null],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",185,null],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"intsuffix"}],"output":{"name":"bool"}}],[11,"hash","","",185,null],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",184,null],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"floatsuffix"}],"output":{"name":"bool"}}],[11,"hash","","",184,null],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[0,"mac","","",null,null],[3,"Macro","syn::mac","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",133,null],[12,"bang_token","","",133,null],[12,"delimiter","","",133,null],[12,"tts","","",133,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",188,null],[13,"Brace","","",188,null],[13,"Bracket","","",188,null],[0,"parsing","","",null,null],[11,"parse","syn","",133,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",133,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::mac","",null,null],[11,"to_tokens","syn","",133,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",188,null],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",133,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"derive","","",null,null],[3,"DeriveInput","syn::derive","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",137,null],[12,"vis","","Visibility of the struct or enum.",137,null],[12,"ident","","Name of the struct or enum.",137,null],[12,"generics","","Generics required to complete the definition.",137,null],[12,"data","","Data within the struct or enum.",137,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",135,null],[12,"fields","","",135,null],[12,"semi_token","","",135,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",134,null],[12,"brace_token","","",134,null],[12,"variants","","",134,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",136,null],[12,"fields","","",136,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",189,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",189,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",189,null],[0,"parsing","","",null,null],[5,"data_struct","syn::derive::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"data_enum","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","syn","",137,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::derive","",null,null],[11,"to_tokens","syn","",137,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",137,null],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"bool"}}],[11,"hash","","",189,null],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",189,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",189,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",189,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[0,"op","","",null,null],[4,"BinOp","syn::op","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",190,null],[13,"Sub","","The `-` operator (subtraction)",190,null],[13,"Mul","","The `*` operator (multiplication)",190,null],[13,"Div","","The `/` operator (division)",190,null],[13,"Rem","","The `%` operator (modulus)",190,null],[13,"And","","The `&&` operator (logical and)",190,null],[13,"Or","","The `||` operator (logical or)",190,null],[13,"BitXor","","The `^` operator (bitwise xor)",190,null],[13,"BitAnd","","The `&` operator (bitwise and)",190,null],[13,"BitOr","","The `|` operator (bitwise or)",190,null],[13,"Shl","","The `<<` operator (shift left)",190,null],[13,"Shr","","The `>>` operator (shift right)",190,null],[13,"Eq","","The `==` operator (equality)",190,null],[13,"Lt","","The `<` operator (less than)",190,null],[13,"Le","","The `<=` operator (less than or equal to)",190,null],[13,"Ne","","The `!=` operator (not equal to)",190,null],[13,"Ge","","The `>=` operator (greater than or equal to)",190,null],[13,"Gt","","The `>` operator (greater than)",190,null],[13,"AddEq","","The `+=` operator",190,null],[13,"SubEq","","The `-=` operator",190,null],[13,"MulEq","","The `*=` operator",190,null],[13,"DivEq","","The `/=` operator",190,null],[13,"RemEq","","The `%=` operator",190,null],[13,"BitXorEq","","The `^=` operator",190,null],[13,"BitAndEq","","The `&=` operator",190,null],[13,"BitOrEq","","The `|=` operator",190,null],[13,"ShlEq","","The `<<=` operator",190,null],[13,"ShrEq","","The `>>=` operator",190,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",191,null],[13,"Not","","The `!` operator for logical inversion",191,null],[13,"Neg","","The `-` operator for negation",191,null],[0,"parsing","","",null,null],[11,"parse_binop","syn","",190,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_assign_op","","",190,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",191,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",191,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::op","",null,null],[11,"to_tokens","syn","",190,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",191,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",190,null],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",190,null],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",191,null],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",191,null],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[0,"ty","","",null,null],[3,"TypeSlice","syn::ty","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",151,null],[12,"elem","","",151,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",140,null],[12,"elem","","",140,null],[12,"semi_token","","",140,null],[12,"len","","",140,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",149,null],[12,"const_token","","",149,null],[12,"mutability","","",149,null],[12,"elem","","",149,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",150,null],[12,"lifetime","","",150,null],[12,"mutability","","",150,null],[12,"elem","","",150,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",141,null],[12,"abi","","",141,null],[12,"fn_token","","",141,null],[12,"lifetimes","","",141,null],[12,"paren_token","","",141,null],[12,"inputs","","",141,null],[12,"variadic","","",141,null],[12,"output","","",141,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",146,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",153,null],[12,"elems","","",153,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",148,null],[12,"path","","",148,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",152,null],[12,"bounds","","",152,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",143,null],[12,"bounds","","",143,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",147,null],[12,"elem","","",147,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",142,null],[12,"elem","","",142,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",144,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",145,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",154,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",138,null],[12,"name","","",138,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",139,null],[12,"ty","","",139,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",194,null],[13,"Array","","A fixed size array type: `[T; n]`.",194,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",194,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",194,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",194,null],[13,"Never","","The never type: `!`.",194,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",194,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",194,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",194,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",194,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",194,null],[13,"Group","","A type contained within invisible delimiters.",194,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",194,null],[13,"Macro","","A macro in the type position.",194,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",194,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",192,null],[13,"Wild","","Argument not given a name, matched with `_`.",192,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",193,null],[13,"Type","","A particular type is returned.",193,null],[0,"parsing","","",null,null],[5,"ambig_ty","syn::ty::parsing","",null,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"generics":["type"],"name":"presult"}}],[5,"at_least_one_type","","",null,{"inputs":[{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"parse","syn","",194,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",194,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",194,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",148,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse","","",193,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",193,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",152,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",152,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",147,{"inputs":[{"name":"cursor"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",192,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",192,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"printing","syn::ty","",null,null],[11,"to_tokens","syn","",151,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",193,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",192,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",194,null],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"hash","","",194,null],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",151,null],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",194,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",140,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"bool"}}],[11,"hash","","",140,null],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",194,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",149,null],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",194,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",150,null],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",194,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",141,null],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"bool"}}],[11,"hash","","",141,null],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",194,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",146,null],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"bool"}}],[11,"hash","","",146,null],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",194,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",153,null],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",194,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",148,null],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"bool"}}],[11,"hash","","",148,null],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",194,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",152,null],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"bool"}}],[11,"hash","","",152,null],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",194,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",194,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",147,null],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"bool"}}],[11,"hash","","",147,null],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",194,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"bool"}}],[11,"hash","","",142,null],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",194,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"bool"}}],[11,"hash","","",144,null],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",194,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",145,null],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"bool"}}],[11,"hash","","",145,null],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",194,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",194,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",194,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",154,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",138,null],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",138,null],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",139,null],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",192,null],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"bool"}}],[11,"hash","","",192,null],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",193,null],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"bool"}}],[11,"hash","","",193,null],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[0,"path","","",null,null],[3,"Path","syn::path","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",158,null],[12,"segments","","",158,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",161,null],[12,"1","","",161,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",159,null],[12,"arguments","","",159,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",155,null],[12,"lt_token","","",155,null],[12,"args","","",155,null],[12,"gt_token","","",155,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",156,null],[12,"eq_token","","",156,null],[12,"ty","","",156,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",157,null],[12,"inputs","","`(A, B)`",157,null],[12,"output","","`C`",157,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",160,null],[12,"ty","","",160,null],[12,"position","","",160,null],[12,"as_token","","",160,null],[12,"gt_token","","",160,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",196,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",196,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",196,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",195,null],[13,"Type","","A type argument.",195,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",195,null],[13,"Const","","A const expression. Must be inside of a block.",195,null],[0,"parsing","","",null,null],[5,"mod_style_path_segment","syn::path::parsing","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["pathsegment"],"name":"presult"}}],[5,"qpath","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"ty_no_eq_after","","",null,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"parse","syn","",158,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",195,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",195,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",158,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[0,"printing","syn::path","",null,null],[11,"to_tokens","syn","",158,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",196,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",195,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",158,null],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",161,null],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"pathtokens"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"pathtokens"}],"output":{"name":"bool"}}],[11,"hash","","",161,null],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",158,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",159,null],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",159,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",196,null],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"bool"}}],[11,"hash","","",196,null],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",196,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",196,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",195,null],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"bool"}}],[11,"hash","","",195,null],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",155,null],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",156,null],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",157,null],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",160,null],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[12,"data","","",298,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[12,"ptr","","The current entry which the `Cursor` is pointing at.",299,null],[12,"scope","","This is the only `Entry::End(..)` object which this cursor is allowed to point at. All other `End` objects are skipped over in `Cursor::create`.",299,null],[12,"marker","","This uses the &'a reference which guarantees that these pointers are still valid.",299,null],[4,"Entry","","Internal type which is used instead of `TokenTree` to represent a token tree within a `TokenBuffer`.",null,null],[13,"Group","","",300,null],[13,"Term","","",300,null],[13,"Op","","",300,null],[13,"Literal","","",300,null],[13,"End","","",300,null],[11,"inner_new","","",298,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",298,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",298,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",298,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"assert_receiver_is_total_eq","","",299,null],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",299,{"inputs":[],"output":{"name":"self"}}],[11,"create","","This create method intelligently exits non-explicitly-entered `None`-delimited scopes when the cursor reaches the end of them, allowing for them to be treated transparently.",299,null],[11,"entry","","Get the current entry.",299,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"bump","","Bump the cursor to point at the next token after the current one. This is undefined behavior if the cursor is currently looking at an `Entry::End`.",299,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"ignore_none","","If the cursor is looking at a `None`-delimited group, move it to look at the first token inside instead. If the group is empty, this will move the cursor past the `None`-delimited group.",299,{"inputs":[{"name":"self"}],"output":null}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",299,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"term","","If the cursor is pointing at a `Term`, returns it along with a cursor pointing at the next `TokenTree`.",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"op","","If the cursor is pointing at an `Op`, returns it along with a cursor pointing at the next `TokenTree`.",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",299,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",299,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",299,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[12,"0","","",301,null],[6,"PResult","","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",302,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",302,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",303,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",303,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",303,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",303,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[12,"inner","","",304,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[12,"inner","","",305,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[12,"inner","","",306,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[12,"inner","","",307,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[12,"inner","","",308,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[12,"inner","","",309,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[12,"inner","","",310,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",311,null],[13,"End","","",311,null],[0,"printing","","",null,null],[11,"to_tokens","","",304,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",311,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"assert_receiver_is_total_eq","","",304,null],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"self"},{"name":"punctuated"}],"output":{"name":"bool"}}],[11,"hash","","",304,null],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",304,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",304,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",304,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",304,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",304,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",304,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",304,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",304,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",304,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",304,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",304,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",304,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",304,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",304,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",304,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",304,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",304,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",304,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",304,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",304,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",304,null],[11,"default","","",304,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",305,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",306,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",307,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",308,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"private_empty","","",309,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",309,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",310,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",311,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",311,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",311,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",311,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",311,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",311,null],[11,"index","","",304,null],[11,"index_mut","","",304,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",304,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",304,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",304,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",304,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",304,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",304,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",304,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",304,null],[11,"parse","","",304,null],[0,"tt","syn","",null,null],[3,"TokenTreeHelper","syn::tt","",null,null],[12,"0","","",312,null],[3,"TokenStreamHelper","","",null,null],[12,"0","","",313,null],[5,"delimited","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"braced","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[5,"parenthesized","","",null,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"eq","","",312,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",312,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",313,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"parse_quote","syn","",null,null],[5,"parse","syn::parse_quote","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"t"}}],[8,"ParseQuote","","",null,null],[10,"parse","","",314,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[10,"description","","",314,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","syn::punctuated","",304,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",304,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",0,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",315,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"gen","syn","",null,null],[0,"visit","syn::gen","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::gen::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":null}],[5,"visit_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":null}],[5,"visit_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":null}],[5,"visit_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":null}],[5,"visit_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":null}],[5,"visit_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":null}],[5,"visit_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":null}],[5,"visit_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":null}],[5,"visit_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":null}],[5,"visit_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":null}],[5,"visit_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":null}],[5,"visit_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":null}],[5,"visit_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":null}],[5,"visit_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":null}],[5,"visit_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":null}],[5,"visit_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":null}],[5,"visit_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":null}],[5,"visit_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":null}],[5,"visit_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":null}],[5,"visit_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":null}],[5,"visit_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":null}],[5,"visit_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":null}],[5,"visit_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":null}],[5,"visit_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":null}],[5,"visit_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":null}],[5,"visit_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":null}],[5,"visit_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":null}],[5,"visit_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":null}],[5,"visit_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":null}],[5,"visit_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":null}],[5,"visit_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"visit_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"visit_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":null}],[5,"visit_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":null}],[5,"visit_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":null}],[5,"visit_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"visit_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":null}],[5,"visit_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":null}],[5,"visit_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":null}],[5,"visit_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":null}],[5,"visit_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"visit_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":null}],[5,"visit_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":null}],[5,"visit_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":null}],[5,"visit_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":null}],[5,"visit_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":null}],[5,"visit_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":null}],[5,"visit_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":null}],[5,"visit_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":null}],[5,"visit_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":null}],[5,"visit_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":null}],[5,"visit_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":null}],[5,"visit_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":null}],[5,"visit_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":null}],[5,"visit_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":null}],[5,"visit_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":null}],[5,"visit_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":null}],[5,"visit_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"visit_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"visit_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":null}],[5,"visit_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":null}],[5,"visit_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":null}],[5,"visit_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":null}],[5,"visit_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":null}],[5,"visit_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":null}],[5,"visit_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":null}],[5,"visit_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":null}],[5,"visit_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":null}],[5,"visit_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":null}],[5,"visit_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":null}],[5,"visit_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":null}],[5,"visit_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"visit_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":null}],[5,"visit_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":null}],[5,"visit_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":null}],[5,"visit_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":null}],[5,"visit_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":null}],[5,"visit_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":null}],[5,"visit_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":null}],[5,"visit_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",316,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",316,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_arg_captured","","",316,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":null}],[11,"visit_arg_self","","",316,{"inputs":[{"name":"self"},{"name":"argself"}],"output":null}],[11,"visit_arg_self_ref","","",316,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":null}],[11,"visit_arm","","",316,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_attr_style","","",316,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",316,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",316,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",316,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",316,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",316,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_block","","",316,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_bound_lifetimes","","",316,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",316,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",316,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",316,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",316,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",316,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",316,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",316,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_addr_of","","",316,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":null}],[11,"visit_expr_array","","",316,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":null}],[11,"visit_expr_assign","","",316,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":null}],[11,"visit_expr_assign_op","","",316,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":null}],[11,"visit_expr_binary","","",316,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_block","","",316,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":null}],[11,"visit_expr_box","","",316,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":null}],[11,"visit_expr_break","","",316,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":null}],[11,"visit_expr_call","","",316,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",316,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_catch","","",316,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":null}],[11,"visit_expr_closure","","",316,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":null}],[11,"visit_expr_continue","","",316,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":null}],[11,"visit_expr_field","","",316,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_for_loop","","",316,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":null}],[11,"visit_expr_group","","",316,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":null}],[11,"visit_expr_if","","",316,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":null}],[11,"visit_expr_if_let","","",316,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":null}],[11,"visit_expr_in_place","","",316,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":null}],[11,"visit_expr_index","","",316,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",316,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_loop","","",316,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":null}],[11,"visit_expr_macro","","",316,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":null}],[11,"visit_expr_match","","",316,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":null}],[11,"visit_expr_method_call","","",316,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":null}],[11,"visit_expr_paren","","",316,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",316,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_range","","",316,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":null}],[11,"visit_expr_repeat","","",316,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":null}],[11,"visit_expr_return","","",316,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":null}],[11,"visit_expr_struct","","",316,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":null}],[11,"visit_expr_try","","",316,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":null}],[11,"visit_expr_tuple","","",316,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":null}],[11,"visit_expr_type","","",316,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":null}],[11,"visit_expr_unary","","",316,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_unsafe","","",316,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":null}],[11,"visit_expr_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_expr_while","","",316,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":null}],[11,"visit_expr_while_let","","",316,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":null}],[11,"visit_expr_yield","","",316,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":null}],[11,"visit_field","","",316,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_field_pat","","",316,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":null}],[11,"visit_field_value","","",316,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":null}],[11,"visit_fields","","",316,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",316,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",316,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_file","","",316,{"inputs":[{"name":"self"},{"name":"file"}],"output":null}],[11,"visit_fn_arg","","",316,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":null}],[11,"visit_fn_decl","","",316,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_foreign_item","","",316,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_foreign_item_fn","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":null}],[11,"visit_foreign_item_static","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":null}],[11,"visit_foreign_item_type","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":null}],[11,"visit_foreign_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":null}],[11,"visit_generic_argument","","",316,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_method_argument","","",316,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":null}],[11,"visit_generic_param","","",316,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",316,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",316,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_impl_item","","",316,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_const","","",316,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":null}],[11,"visit_impl_item_macro","","",316,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":null}],[11,"visit_impl_item_method","","",316,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":null}],[11,"visit_impl_item_type","","",316,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":null}],[11,"visit_impl_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":null}],[11,"visit_index","","",316,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_item","","",316,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_item_const","","",316,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":null}],[11,"visit_item_enum","","",316,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":null}],[11,"visit_item_extern_crate","","",316,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":null}],[11,"visit_item_fn","","",316,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":null}],[11,"visit_item_foreign_mod","","",316,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":null}],[11,"visit_item_impl","","",316,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":null}],[11,"visit_item_macro","","",316,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":null}],[11,"visit_item_macro2","","",316,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":null}],[11,"visit_item_mod","","",316,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":null}],[11,"visit_item_static","","",316,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":null}],[11,"visit_item_struct","","",316,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":null}],[11,"visit_item_trait","","",316,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":null}],[11,"visit_item_type","","",316,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":null}],[11,"visit_item_union","","",316,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":null}],[11,"visit_item_use","","",316,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":null}],[11,"visit_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":null}],[11,"visit_label","","",316,{"inputs":[{"name":"self"},{"name":"label"}],"output":null}],[11,"visit_lifetime","","",316,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",316,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",316,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",316,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",316,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",316,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",316,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",316,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",316,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",316,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_local","","",316,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_macro","","",316,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",316,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",316,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",316,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",316,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",316,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_method_sig","","",316,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_method_turbofish","","",316,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":null}],[11,"visit_nested_meta","","",316,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",316,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_pat","","",316,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_pat_box","","",316,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":null}],[11,"visit_pat_ident","","",316,{"inputs":[{"name":"self"},{"name":"patident"}],"output":null}],[11,"visit_pat_lit","","",316,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":null}],[11,"visit_pat_macro","","",316,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":null}],[11,"visit_pat_path","","",316,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":null}],[11,"visit_pat_range","","",316,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":null}],[11,"visit_pat_ref","","",316,{"inputs":[{"name":"self"},{"name":"patref"}],"output":null}],[11,"visit_pat_slice","","",316,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":null}],[11,"visit_pat_struct","","",316,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":null}],[11,"visit_pat_tuple","","",316,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":null}],[11,"visit_pat_tuple_struct","","",316,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":null}],[11,"visit_pat_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":null}],[11,"visit_pat_wild","","",316,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":null}],[11,"visit_path","","",316,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",316,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",316,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",316,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",316,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",316,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",316,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_range_limits","","",316,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":null}],[11,"visit_return_type","","",316,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",316,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_stmt","","",316,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_trait_bound","","",316,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",316,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_trait_item","","",316,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_const","","",316,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":null}],[11,"visit_trait_item_macro","","",316,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":null}],[11,"visit_trait_item_method","","",316,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":null}],[11,"visit_trait_item_type","","",316,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":null}],[11,"visit_trait_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":null}],[11,"visit_type","","",316,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",316,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",316,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",316,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",316,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",316,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",316,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",316,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",316,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",316,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",316,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",316,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",316,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",316,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",316,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",316,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",316,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",316,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_use_glob","","",316,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":null}],[11,"visit_use_list","","",316,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":null}],[11,"visit_use_path","","",316,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":null}],[11,"visit_use_tree","","",316,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":null}],[11,"visit_variant","","",316,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",316,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",316,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",316,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",316,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",316,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",316,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[0,"fold","syn::gen","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[5,"fold_ident","syn::gen::fold","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":{"name":"ident"}}],[5,"fold_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[5,"fold_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[5,"fold_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[5,"fold_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":{"name":"litchar"}}],[5,"fold_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[5,"fold_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":{"name":"litint"}}],[5,"fold_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":{"name":"litstr"}}],[5,"fold_abi","","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":{"name":"abi"}}],[5,"fold_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[5,"fold_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[5,"fold_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":{"name":"argself"}}],[5,"fold_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[5,"fold_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":{"name":"arm"}}],[5,"fold_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[5,"fold_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":{"name":"attribute"}}],[5,"fold_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[5,"fold_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[5,"fold_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":{"name":"binop"}}],[5,"fold_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":{"name":"binding"}}],[5,"fold_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":{"name":"block"}}],[5,"fold_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[5,"fold_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":{"name":"constparam"}}],[5,"fold_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":{"name":"data"}}],[5,"fold_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[5,"fold_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[5,"fold_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[5,"fold_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[5,"fold_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":{"name":"expr"}}],[5,"fold_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[5,"fold_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[5,"fold_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[5,"fold_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[5,"fold_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[5,"fold_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[5,"fold_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[5,"fold_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[5,"fold_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[5,"fold_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[5,"fold_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[5,"fold_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[5,"fold_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[5,"fold_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[5,"fold_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[5,"fold_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[5,"fold_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":{"name":"exprif"}}],[5,"fold_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[5,"fold_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[5,"fold_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[5,"fold_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[5,"fold_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[5,"fold_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[5,"fold_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[5,"fold_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[5,"fold_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[5,"fold_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[5,"fold_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[5,"fold_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[5,"fold_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[5,"fold_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[5,"fold_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[5,"fold_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[5,"fold_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[5,"fold_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[5,"fold_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[5,"fold_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[5,"fold_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[5,"fold_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[5,"fold_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":{"name":"expryield"}}],[5,"fold_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":{"name":"field"}}],[5,"fold_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[5,"fold_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[5,"fold_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":{"name":"fields"}}],[5,"fold_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[5,"fold_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[5,"fold_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":{"name":"file"}}],[5,"fold_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[5,"fold_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[5,"fold_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[5,"fold_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[5,"fold_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[5,"fold_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[5,"fold_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[5,"fold_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[5,"fold_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[5,"fold_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[5,"fold_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":{"name":"generics"}}],[5,"fold_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":{"name":"implitem"}}],[5,"fold_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[5,"fold_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[5,"fold_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[5,"fold_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[5,"fold_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[5,"fold_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":{"name":"index"}}],[5,"fold_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":{"name":"item"}}],[5,"fold_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[5,"fold_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[5,"fold_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[5,"fold_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[5,"fold_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[5,"fold_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[5,"fold_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[5,"fold_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[5,"fold_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[5,"fold_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[5,"fold_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[5,"fold_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[5,"fold_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[5,"fold_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[5,"fold_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[5,"fold_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[5,"fold_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":{"name":"label"}}],[5,"fold_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[5,"fold_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":{"name":"lit"}}],[5,"fold_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":{"name":"litbool"}}],[5,"fold_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[5,"fold_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":{"name":"local"}}],[5,"fold_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":{"name":"macro"}}],[5,"fold_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[5,"fold_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":{"name":"member"}}],[5,"fold_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":{"name":"meta"}}],[5,"fold_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":{"name":"metalist"}}],[5,"fold_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[5,"fold_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[5,"fold_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[5,"fold_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[5,"fold_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[5,"fold_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":{"name":"pat"}}],[5,"fold_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":{"name":"patbox"}}],[5,"fold_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":{"name":"patident"}}],[5,"fold_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":{"name":"patlit"}}],[5,"fold_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[5,"fold_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":{"name":"patpath"}}],[5,"fold_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":{"name":"patrange"}}],[5,"fold_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":{"name":"patref"}}],[5,"fold_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":{"name":"patslice"}}],[5,"fold_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[5,"fold_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[5,"fold_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[5,"fold_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[5,"fold_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":{"name":"patwild"}}],[5,"fold_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":{"name":"path"}}],[5,"fold_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[5,"fold_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[5,"fold_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[5,"fold_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[5,"fold_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[5,"fold_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":{"name":"qself"}}],[5,"fold_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[5,"fold_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":{"name":"returntype"}}],[5,"fold_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":{"name":"span"}}],[5,"fold_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":{"name":"stmt"}}],[5,"fold_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[5,"fold_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[5,"fold_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":{"name":"traititem"}}],[5,"fold_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[5,"fold_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[5,"fold_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[5,"fold_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[5,"fold_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[5,"fold_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":{"name":"type"}}],[5,"fold_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":{"name":"typearray"}}],[5,"fold_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[5,"fold_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[5,"fold_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[5,"fold_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[5,"fold_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[5,"fold_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":{"name":"typenever"}}],[5,"fold_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[5,"fold_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[5,"fold_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[5,"fold_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":{"name":"typepath"}}],[5,"fold_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[5,"fold_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":{"name":"typereference"}}],[5,"fold_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[5,"fold_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[5,"fold_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[5,"fold_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[5,"fold_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":{"name":"unop"}}],[5,"fold_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":{"name":"useglob"}}],[5,"fold_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":{"name":"uselist"}}],[5,"fold_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":{"name":"usepath"}}],[5,"fold_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":{"name":"usetree"}}],[5,"fold_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":{"name":"variant"}}],[5,"fold_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[5,"fold_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[5,"fold_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[5,"fold_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":{"name":"visibility"}}],[5,"fold_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[5,"fold_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[8,"Fold","","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[11,"fold_abi","","",317,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",317,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",317,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[11,"fold_arg_self","","",317,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"argself"}}],[11,"fold_arg_self_ref","","",317,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[11,"fold_arm","","",317,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_attr_style","","",317,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fold_attribute","","",317,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fold_bare_fn_arg","","",317,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",317,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[11,"fold_bin_op","","",317,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"binop"}}],[11,"fold_binding","","",317,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"binding"}}],[11,"fold_block","","",317,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"block"}}],[11,"fold_bound_lifetimes","","",317,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[11,"fold_const_param","","",317,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"constparam"}}],[11,"fold_data","","",317,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"data"}}],[11,"fold_data_enum","","",317,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[11,"fold_data_struct","","",317,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[11,"fold_data_union","","",317,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[11,"fold_derive_input","","",317,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[11,"fold_expr","","",317,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"fold_expr_addr_of","","",317,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[11,"fold_expr_array","","",317,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[11,"fold_expr_assign","","",317,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[11,"fold_expr_assign_op","","",317,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[11,"fold_expr_binary","","",317,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[11,"fold_expr_block","","",317,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[11,"fold_expr_box","","",317,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[11,"fold_expr_break","","",317,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[11,"fold_expr_call","","",317,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[11,"fold_expr_cast","","",317,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[11,"fold_expr_catch","","",317,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[11,"fold_expr_closure","","",317,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[11,"fold_expr_continue","","",317,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[11,"fold_expr_field","","",317,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[11,"fold_expr_for_loop","","",317,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[11,"fold_expr_group","","",317,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[11,"fold_expr_if","","",317,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"exprif"}}],[11,"fold_expr_if_let","","",317,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[11,"fold_expr_in_place","","",317,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[11,"fold_expr_index","","",317,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[11,"fold_expr_lit","","",317,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[11,"fold_expr_loop","","",317,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[11,"fold_expr_macro","","",317,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[11,"fold_expr_match","","",317,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[11,"fold_expr_method_call","","",317,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[11,"fold_expr_paren","","",317,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[11,"fold_expr_path","","",317,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[11,"fold_expr_range","","",317,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[11,"fold_expr_repeat","","",317,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[11,"fold_expr_return","","",317,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[11,"fold_expr_struct","","",317,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[11,"fold_expr_try","","",317,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[11,"fold_expr_tuple","","",317,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[11,"fold_expr_type","","",317,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[11,"fold_expr_unary","","",317,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[11,"fold_expr_unsafe","","",317,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[11,"fold_expr_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[11,"fold_expr_while","","",317,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[11,"fold_expr_while_let","","",317,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[11,"fold_expr_yield","","",317,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"expryield"}}],[11,"fold_field","","",317,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_field_pat","","",317,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fold_field_value","","",317,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[11,"fold_fields","","",317,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"fields"}}],[11,"fold_fields_named","","",317,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",317,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[11,"fold_file","","",317,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"file"}}],[11,"fold_fn_arg","","",317,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[11,"fold_fn_decl","","",317,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fold_foreign_item","","",317,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_foreign_item_fn","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",317,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[11,"fold_generic_method_argument","","",317,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[11,"fold_generic_param","","",317,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[11,"fold_generics","","",317,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_ident","","",317,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_impl_item","","",317,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fold_impl_item_const","","",317,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[11,"fold_impl_item_macro","","",317,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[11,"fold_impl_item_method","","",317,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[11,"fold_impl_item_type","","",317,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[11,"fold_index","","",317,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"index"}}],[11,"fold_item","","",317,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_item_const","","",317,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[11,"fold_item_enum","","",317,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[11,"fold_item_extern_crate","","",317,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[11,"fold_item_fn","","",317,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[11,"fold_item_foreign_mod","","",317,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[11,"fold_item_impl","","",317,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[11,"fold_item_macro","","",317,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[11,"fold_item_macro2","","",317,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[11,"fold_item_mod","","",317,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[11,"fold_item_static","","",317,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[11,"fold_item_struct","","",317,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[11,"fold_item_trait","","",317,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[11,"fold_item_type","","",317,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[11,"fold_item_union","","",317,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[11,"fold_item_use","","",317,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[11,"fold_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[11,"fold_label","","",317,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"label"}}],[11,"fold_lifetime","","",317,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",317,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_lit","","",317,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"lit"}}],[11,"fold_lit_bool","","",317,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":{"name":"litbool"}}],[11,"fold_lit_byte","","",317,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[11,"fold_lit_byte_str","","",317,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[11,"fold_lit_char","","",317,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":{"name":"litchar"}}],[11,"fold_lit_float","","",317,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[11,"fold_lit_int","","",317,{"inputs":[{"name":"self"},{"name":"litint"}],"output":{"name":"litint"}}],[11,"fold_lit_str","","",317,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":{"name":"litstr"}}],[11,"fold_lit_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[11,"fold_local","","",317,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"local"}}],[11,"fold_macro","","",317,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"macro"}}],[11,"fold_macro_delimiter","","",317,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[11,"fold_member","","",317,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"member"}}],[11,"fold_meta","","",317,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"meta"}}],[11,"fold_meta_list","","",317,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"metalist"}}],[11,"fold_meta_name_value","","",317,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[11,"fold_method_sig","","",317,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fold_method_turbofish","","",317,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[11,"fold_nested_meta","","",317,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",317,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",317,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pat"}}],[11,"fold_pat_box","","",317,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"patbox"}}],[11,"fold_pat_ident","","",317,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"patident"}}],[11,"fold_pat_lit","","",317,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"patlit"}}],[11,"fold_pat_macro","","",317,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[11,"fold_pat_path","","",317,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"patpath"}}],[11,"fold_pat_range","","",317,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"patrange"}}],[11,"fold_pat_ref","","",317,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"patref"}}],[11,"fold_pat_slice","","",317,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"patslice"}}],[11,"fold_pat_struct","","",317,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[11,"fold_pat_tuple","","",317,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[11,"fold_pat_tuple_struct","","",317,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[11,"fold_pat_wild","","",317,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"patwild"}}],[11,"fold_path","","",317,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_arguments","","",317,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[11,"fold_path_segment","","",317,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fold_predicate_eq","","",317,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[11,"fold_predicate_lifetime","","",317,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[11,"fold_predicate_type","","",317,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[11,"fold_qself","","",317,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"qself"}}],[11,"fold_range_limits","","",317,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[11,"fold_return_type","","",317,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"returntype"}}],[11,"fold_span","","",317,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_stmt","","",317,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"stmt"}}],[11,"fold_trait_bound","","",317,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[11,"fold_trait_bound_modifier","","",317,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fold_trait_item","","",317,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fold_trait_item_const","","",317,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[11,"fold_trait_item_macro","","",317,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[11,"fold_trait_item_method","","",317,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[11,"fold_trait_item_type","","",317,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[11,"fold_type","","",317,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"fold_type_array","","",317,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"typearray"}}],[11,"fold_type_bare_fn","","",317,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[11,"fold_type_group","","",317,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[11,"fold_type_impl_trait","","",317,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[11,"fold_type_infer","","",317,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[11,"fold_type_macro","","",317,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[11,"fold_type_never","","",317,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"typenever"}}],[11,"fold_type_param","","",317,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[11,"fold_type_param_bound","","",317,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[11,"fold_type_paren","","",317,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[11,"fold_type_path","","",317,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"typepath"}}],[11,"fold_type_ptr","","",317,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[11,"fold_type_reference","","",317,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"typereference"}}],[11,"fold_type_slice","","",317,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[11,"fold_type_trait_object","","",317,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[11,"fold_type_tuple","","",317,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[11,"fold_type_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[11,"fold_un_op","","",317,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"unop"}}],[11,"fold_use_glob","","",317,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"useglob"}}],[11,"fold_use_list","","",317,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"uselist"}}],[11,"fold_use_path","","",317,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"usepath"}}],[11,"fold_use_tree","","",317,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"usetree"}}],[11,"fold_variant","","",317,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_vis_crate","","",317,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[11,"fold_vis_public","","",317,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[11,"fold_vis_restricted","","",317,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[11,"fold_visibility","","",317,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fold_where_clause","","",317,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",317,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[0,"helper","syn::gen","",null,null],[0,"fold","syn::gen::helper","",null,null],[5,"tokens_helper","syn::gen::helper::fold","",null,{"inputs":[{"name":"f"},{"name":"s"}],"output":{"name":"s"}}],[8,"FoldHelper","","",null,null],[16,"Item","","",318,null],[10,"lift","","",318,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[8,"Spans","","",null,null],[10,"fold","","",319,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"lift","syn::punctuated","",304,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"visit","syn::gen::helper","",null,null],[5,"tokens_helper","syn::gen::helper::visit","",null,{"inputs":[{"name":"v"},{"name":"s"}],"output":null}],[8,"Spans","","",null,null],[10,"visit","","",320,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":null}],[5,"visit_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":null}],[5,"visit_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":null}],[5,"visit_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":null}],[5,"visit_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":null}],[5,"visit_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":null}],[5,"visit_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":null}],[5,"visit_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":null}],[5,"visit_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":null}],[5,"visit_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":null}],[5,"visit_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":null}],[5,"visit_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":null}],[5,"visit_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":null}],[5,"visit_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":null}],[5,"visit_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":null}],[5,"visit_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":null}],[5,"visit_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":null}],[5,"visit_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":null}],[5,"visit_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":null}],[5,"visit_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":null}],[5,"visit_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":null}],[5,"visit_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":null}],[5,"visit_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":null}],[5,"visit_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":null}],[5,"visit_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":null}],[5,"visit_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":null}],[5,"visit_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":null}],[5,"visit_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":null}],[5,"visit_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":null}],[5,"visit_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":null}],[5,"visit_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"visit_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"visit_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":null}],[5,"visit_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":null}],[5,"visit_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":null}],[5,"visit_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"visit_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":null}],[5,"visit_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":null}],[5,"visit_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":null}],[5,"visit_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":null}],[5,"visit_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"visit_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":null}],[5,"visit_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":null}],[5,"visit_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":null}],[5,"visit_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":null}],[5,"visit_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":null}],[5,"visit_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":null}],[5,"visit_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":null}],[5,"visit_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":null}],[5,"visit_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":null}],[5,"visit_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":null}],[5,"visit_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":null}],[5,"visit_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":null}],[5,"visit_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":null}],[5,"visit_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":null}],[5,"visit_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":null}],[5,"visit_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":null}],[5,"visit_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"visit_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"visit_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":null}],[5,"visit_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":null}],[5,"visit_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":null}],[5,"visit_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":null}],[5,"visit_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":null}],[5,"visit_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":null}],[5,"visit_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":null}],[5,"visit_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":null}],[5,"visit_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":null}],[5,"visit_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":null}],[5,"visit_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":null}],[5,"visit_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":null}],[5,"visit_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"visit_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":null}],[5,"visit_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":null}],[5,"visit_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":null}],[5,"visit_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":null}],[5,"visit_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":null}],[5,"visit_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":null}],[5,"visit_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":null}],[5,"visit_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","syn::gen::visit","",316,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",316,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_arg_captured","","",316,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":null}],[11,"visit_arg_self","","",316,{"inputs":[{"name":"self"},{"name":"argself"}],"output":null}],[11,"visit_arg_self_ref","","",316,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":null}],[11,"visit_arm","","",316,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_attr_style","","",316,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",316,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",316,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",316,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",316,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",316,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_block","","",316,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_bound_lifetimes","","",316,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",316,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",316,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",316,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",316,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",316,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",316,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",316,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_addr_of","","",316,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":null}],[11,"visit_expr_array","","",316,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":null}],[11,"visit_expr_assign","","",316,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":null}],[11,"visit_expr_assign_op","","",316,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":null}],[11,"visit_expr_binary","","",316,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_block","","",316,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":null}],[11,"visit_expr_box","","",316,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":null}],[11,"visit_expr_break","","",316,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":null}],[11,"visit_expr_call","","",316,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",316,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_catch","","",316,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":null}],[11,"visit_expr_closure","","",316,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":null}],[11,"visit_expr_continue","","",316,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":null}],[11,"visit_expr_field","","",316,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_for_loop","","",316,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":null}],[11,"visit_expr_group","","",316,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":null}],[11,"visit_expr_if","","",316,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":null}],[11,"visit_expr_if_let","","",316,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":null}],[11,"visit_expr_in_place","","",316,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":null}],[11,"visit_expr_index","","",316,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",316,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_loop","","",316,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":null}],[11,"visit_expr_macro","","",316,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":null}],[11,"visit_expr_match","","",316,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":null}],[11,"visit_expr_method_call","","",316,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":null}],[11,"visit_expr_paren","","",316,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",316,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_range","","",316,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":null}],[11,"visit_expr_repeat","","",316,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":null}],[11,"visit_expr_return","","",316,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":null}],[11,"visit_expr_struct","","",316,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":null}],[11,"visit_expr_try","","",316,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":null}],[11,"visit_expr_tuple","","",316,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":null}],[11,"visit_expr_type","","",316,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":null}],[11,"visit_expr_unary","","",316,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_unsafe","","",316,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":null}],[11,"visit_expr_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_expr_while","","",316,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":null}],[11,"visit_expr_while_let","","",316,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":null}],[11,"visit_expr_yield","","",316,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":null}],[11,"visit_field","","",316,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_field_pat","","",316,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":null}],[11,"visit_field_value","","",316,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":null}],[11,"visit_fields","","",316,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",316,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",316,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_file","","",316,{"inputs":[{"name":"self"},{"name":"file"}],"output":null}],[11,"visit_fn_arg","","",316,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":null}],[11,"visit_fn_decl","","",316,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_foreign_item","","",316,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_foreign_item_fn","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":null}],[11,"visit_foreign_item_static","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":null}],[11,"visit_foreign_item_type","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":null}],[11,"visit_foreign_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":null}],[11,"visit_generic_argument","","",316,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_method_argument","","",316,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":null}],[11,"visit_generic_param","","",316,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",316,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",316,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_impl_item","","",316,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_impl_item_const","","",316,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":null}],[11,"visit_impl_item_macro","","",316,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":null}],[11,"visit_impl_item_method","","",316,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":null}],[11,"visit_impl_item_type","","",316,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":null}],[11,"visit_impl_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":null}],[11,"visit_index","","",316,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_item","","",316,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_item_const","","",316,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":null}],[11,"visit_item_enum","","",316,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":null}],[11,"visit_item_extern_crate","","",316,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":null}],[11,"visit_item_fn","","",316,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":null}],[11,"visit_item_foreign_mod","","",316,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":null}],[11,"visit_item_impl","","",316,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":null}],[11,"visit_item_macro","","",316,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":null}],[11,"visit_item_macro2","","",316,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":null}],[11,"visit_item_mod","","",316,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":null}],[11,"visit_item_static","","",316,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":null}],[11,"visit_item_struct","","",316,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":null}],[11,"visit_item_trait","","",316,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":null}],[11,"visit_item_type","","",316,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":null}],[11,"visit_item_union","","",316,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":null}],[11,"visit_item_use","","",316,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":null}],[11,"visit_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":null}],[11,"visit_label","","",316,{"inputs":[{"name":"self"},{"name":"label"}],"output":null}],[11,"visit_lifetime","","",316,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",316,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",316,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",316,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",316,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",316,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",316,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",316,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",316,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",316,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_local","","",316,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_macro","","",316,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",316,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",316,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",316,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",316,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",316,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_method_sig","","",316,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_method_turbofish","","",316,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":null}],[11,"visit_nested_meta","","",316,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",316,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_pat","","",316,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_pat_box","","",316,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":null}],[11,"visit_pat_ident","","",316,{"inputs":[{"name":"self"},{"name":"patident"}],"output":null}],[11,"visit_pat_lit","","",316,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":null}],[11,"visit_pat_macro","","",316,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":null}],[11,"visit_pat_path","","",316,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":null}],[11,"visit_pat_range","","",316,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":null}],[11,"visit_pat_ref","","",316,{"inputs":[{"name":"self"},{"name":"patref"}],"output":null}],[11,"visit_pat_slice","","",316,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":null}],[11,"visit_pat_struct","","",316,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":null}],[11,"visit_pat_tuple","","",316,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":null}],[11,"visit_pat_tuple_struct","","",316,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":null}],[11,"visit_pat_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":null}],[11,"visit_pat_wild","","",316,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":null}],[11,"visit_path","","",316,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",316,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",316,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",316,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",316,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",316,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",316,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_range_limits","","",316,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":null}],[11,"visit_return_type","","",316,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",316,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_stmt","","",316,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_trait_bound","","",316,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",316,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_trait_item","","",316,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_trait_item_const","","",316,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":null}],[11,"visit_trait_item_macro","","",316,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":null}],[11,"visit_trait_item_method","","",316,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":null}],[11,"visit_trait_item_type","","",316,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":null}],[11,"visit_trait_item_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":null}],[11,"visit_type","","",316,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",316,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",316,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",316,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",316,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",316,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",316,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",316,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",316,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",316,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",316,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",316,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",316,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",316,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",316,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",316,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",316,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",316,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",316,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_use_glob","","",316,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":null}],[11,"visit_use_list","","",316,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":null}],[11,"visit_use_path","","",316,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":null}],[11,"visit_use_tree","","",316,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":null}],[11,"visit_variant","","",316,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",316,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",316,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",316,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",316,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",316,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",316,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[0,"fold","syn","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[5,"fold_ident","syn::fold","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":{"name":"ident"}}],[5,"fold_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[5,"fold_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[5,"fold_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[5,"fold_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":{"name":"litchar"}}],[5,"fold_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[5,"fold_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":{"name":"litint"}}],[5,"fold_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":{"name":"litstr"}}],[5,"fold_abi","","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":{"name":"abi"}}],[5,"fold_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[5,"fold_arg_captured","","",null,{"inputs":[{"name":"v"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[5,"fold_arg_self","","",null,{"inputs":[{"name":"v"},{"name":"argself"}],"output":{"name":"argself"}}],[5,"fold_arg_self_ref","","",null,{"inputs":[{"name":"v"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[5,"fold_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":{"name":"arm"}}],[5,"fold_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[5,"fold_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":{"name":"attribute"}}],[5,"fold_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[5,"fold_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[5,"fold_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":{"name":"binop"}}],[5,"fold_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":{"name":"binding"}}],[5,"fold_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":{"name":"block"}}],[5,"fold_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[5,"fold_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":{"name":"constparam"}}],[5,"fold_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":{"name":"data"}}],[5,"fold_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[5,"fold_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[5,"fold_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[5,"fold_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[5,"fold_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":{"name":"expr"}}],[5,"fold_expr_addr_of","","",null,{"inputs":[{"name":"v"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[5,"fold_expr_array","","",null,{"inputs":[{"name":"v"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[5,"fold_expr_assign","","",null,{"inputs":[{"name":"v"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[5,"fold_expr_assign_op","","",null,{"inputs":[{"name":"v"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[5,"fold_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[5,"fold_expr_block","","",null,{"inputs":[{"name":"v"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[5,"fold_expr_box","","",null,{"inputs":[{"name":"v"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[5,"fold_expr_break","","",null,{"inputs":[{"name":"v"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[5,"fold_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[5,"fold_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[5,"fold_expr_catch","","",null,{"inputs":[{"name":"v"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[5,"fold_expr_closure","","",null,{"inputs":[{"name":"v"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[5,"fold_expr_continue","","",null,{"inputs":[{"name":"v"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[5,"fold_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[5,"fold_expr_for_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[5,"fold_expr_group","","",null,{"inputs":[{"name":"v"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[5,"fold_expr_if","","",null,{"inputs":[{"name":"v"},{"name":"exprif"}],"output":{"name":"exprif"}}],[5,"fold_expr_if_let","","",null,{"inputs":[{"name":"v"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[5,"fold_expr_in_place","","",null,{"inputs":[{"name":"v"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[5,"fold_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[5,"fold_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[5,"fold_expr_loop","","",null,{"inputs":[{"name":"v"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[5,"fold_expr_macro","","",null,{"inputs":[{"name":"v"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[5,"fold_expr_match","","",null,{"inputs":[{"name":"v"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[5,"fold_expr_method_call","","",null,{"inputs":[{"name":"v"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[5,"fold_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[5,"fold_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[5,"fold_expr_range","","",null,{"inputs":[{"name":"v"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[5,"fold_expr_repeat","","",null,{"inputs":[{"name":"v"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[5,"fold_expr_return","","",null,{"inputs":[{"name":"v"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[5,"fold_expr_struct","","",null,{"inputs":[{"name":"v"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[5,"fold_expr_try","","",null,{"inputs":[{"name":"v"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[5,"fold_expr_tuple","","",null,{"inputs":[{"name":"v"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[5,"fold_expr_type","","",null,{"inputs":[{"name":"v"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[5,"fold_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[5,"fold_expr_unsafe","","",null,{"inputs":[{"name":"v"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[5,"fold_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[5,"fold_expr_while","","",null,{"inputs":[{"name":"v"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[5,"fold_expr_while_let","","",null,{"inputs":[{"name":"v"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[5,"fold_expr_yield","","",null,{"inputs":[{"name":"v"},{"name":"expryield"}],"output":{"name":"expryield"}}],[5,"fold_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":{"name":"field"}}],[5,"fold_field_pat","","",null,{"inputs":[{"name":"v"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[5,"fold_field_value","","",null,{"inputs":[{"name":"v"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[5,"fold_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":{"name":"fields"}}],[5,"fold_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[5,"fold_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[5,"fold_file","","",null,{"inputs":[{"name":"v"},{"name":"file"}],"output":{"name":"file"}}],[5,"fold_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[5,"fold_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[5,"fold_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[5,"fold_foreign_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[5,"fold_foreign_item_static","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[5,"fold_foreign_item_type","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[5,"fold_foreign_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[5,"fold_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[5,"fold_generic_method_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[5,"fold_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[5,"fold_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":{"name":"generics"}}],[5,"fold_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":{"name":"implitem"}}],[5,"fold_impl_item_const","","",null,{"inputs":[{"name":"v"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[5,"fold_impl_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[5,"fold_impl_item_method","","",null,{"inputs":[{"name":"v"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[5,"fold_impl_item_type","","",null,{"inputs":[{"name":"v"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[5,"fold_impl_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[5,"fold_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":{"name":"index"}}],[5,"fold_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":{"name":"item"}}],[5,"fold_item_const","","",null,{"inputs":[{"name":"v"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[5,"fold_item_enum","","",null,{"inputs":[{"name":"v"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[5,"fold_item_extern_crate","","",null,{"inputs":[{"name":"v"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[5,"fold_item_fn","","",null,{"inputs":[{"name":"v"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[5,"fold_item_foreign_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[5,"fold_item_impl","","",null,{"inputs":[{"name":"v"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[5,"fold_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[5,"fold_item_macro2","","",null,{"inputs":[{"name":"v"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[5,"fold_item_mod","","",null,{"inputs":[{"name":"v"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[5,"fold_item_static","","",null,{"inputs":[{"name":"v"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[5,"fold_item_struct","","",null,{"inputs":[{"name":"v"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[5,"fold_item_trait","","",null,{"inputs":[{"name":"v"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[5,"fold_item_type","","",null,{"inputs":[{"name":"v"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[5,"fold_item_union","","",null,{"inputs":[{"name":"v"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[5,"fold_item_use","","",null,{"inputs":[{"name":"v"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[5,"fold_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[5,"fold_label","","",null,{"inputs":[{"name":"v"},{"name":"label"}],"output":{"name":"label"}}],[5,"fold_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[5,"fold_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":{"name":"lit"}}],[5,"fold_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":{"name":"litbool"}}],[5,"fold_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[5,"fold_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":{"name":"local"}}],[5,"fold_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":{"name":"macro"}}],[5,"fold_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[5,"fold_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":{"name":"member"}}],[5,"fold_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":{"name":"meta"}}],[5,"fold_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":{"name":"metalist"}}],[5,"fold_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[5,"fold_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[5,"fold_method_turbofish","","",null,{"inputs":[{"name":"v"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[5,"fold_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[5,"fold_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[5,"fold_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":{"name":"pat"}}],[5,"fold_pat_box","","",null,{"inputs":[{"name":"v"},{"name":"patbox"}],"output":{"name":"patbox"}}],[5,"fold_pat_ident","","",null,{"inputs":[{"name":"v"},{"name":"patident"}],"output":{"name":"patident"}}],[5,"fold_pat_lit","","",null,{"inputs":[{"name":"v"},{"name":"patlit"}],"output":{"name":"patlit"}}],[5,"fold_pat_macro","","",null,{"inputs":[{"name":"v"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[5,"fold_pat_path","","",null,{"inputs":[{"name":"v"},{"name":"patpath"}],"output":{"name":"patpath"}}],[5,"fold_pat_range","","",null,{"inputs":[{"name":"v"},{"name":"patrange"}],"output":{"name":"patrange"}}],[5,"fold_pat_ref","","",null,{"inputs":[{"name":"v"},{"name":"patref"}],"output":{"name":"patref"}}],[5,"fold_pat_slice","","",null,{"inputs":[{"name":"v"},{"name":"patslice"}],"output":{"name":"patslice"}}],[5,"fold_pat_struct","","",null,{"inputs":[{"name":"v"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[5,"fold_pat_tuple","","",null,{"inputs":[{"name":"v"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[5,"fold_pat_tuple_struct","","",null,{"inputs":[{"name":"v"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[5,"fold_pat_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[5,"fold_pat_wild","","",null,{"inputs":[{"name":"v"},{"name":"patwild"}],"output":{"name":"patwild"}}],[5,"fold_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":{"name":"path"}}],[5,"fold_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[5,"fold_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[5,"fold_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[5,"fold_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[5,"fold_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[5,"fold_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":{"name":"qself"}}],[5,"fold_range_limits","","",null,{"inputs":[{"name":"v"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[5,"fold_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":{"name":"returntype"}}],[5,"fold_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":{"name":"span"}}],[5,"fold_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":{"name":"stmt"}}],[5,"fold_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[5,"fold_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[5,"fold_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":{"name":"traititem"}}],[5,"fold_trait_item_const","","",null,{"inputs":[{"name":"v"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[5,"fold_trait_item_macro","","",null,{"inputs":[{"name":"v"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[5,"fold_trait_item_method","","",null,{"inputs":[{"name":"v"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[5,"fold_trait_item_type","","",null,{"inputs":[{"name":"v"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[5,"fold_trait_item_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[5,"fold_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":{"name":"type"}}],[5,"fold_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":{"name":"typearray"}}],[5,"fold_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[5,"fold_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[5,"fold_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[5,"fold_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[5,"fold_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[5,"fold_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":{"name":"typenever"}}],[5,"fold_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[5,"fold_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[5,"fold_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[5,"fold_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":{"name":"typepath"}}],[5,"fold_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[5,"fold_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":{"name":"typereference"}}],[5,"fold_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[5,"fold_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[5,"fold_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[5,"fold_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[5,"fold_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":{"name":"unop"}}],[5,"fold_use_glob","","",null,{"inputs":[{"name":"v"},{"name":"useglob"}],"output":{"name":"useglob"}}],[5,"fold_use_list","","",null,{"inputs":[{"name":"v"},{"name":"uselist"}],"output":{"name":"uselist"}}],[5,"fold_use_path","","",null,{"inputs":[{"name":"v"},{"name":"usepath"}],"output":{"name":"usepath"}}],[5,"fold_use_tree","","",null,{"inputs":[{"name":"v"},{"name":"usetree"}],"output":{"name":"usetree"}}],[5,"fold_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":{"name":"variant"}}],[5,"fold_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[5,"fold_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[5,"fold_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[5,"fold_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":{"name":"visibility"}}],[5,"fold_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[5,"fold_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[8,"Fold","","Syntax tree traversal to transform the nodes of an owned syntax tree.",null,null],[11,"fold_abi","syn::gen::fold","",317,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"abi"}}],[11,"fold_angle_bracketed_generic_arguments","","",317,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"fold_arg_captured","","",317,{"inputs":[{"name":"self"},{"name":"argcaptured"}],"output":{"name":"argcaptured"}}],[11,"fold_arg_self","","",317,{"inputs":[{"name":"self"},{"name":"argself"}],"output":{"name":"argself"}}],[11,"fold_arg_self_ref","","",317,{"inputs":[{"name":"self"},{"name":"argselfref"}],"output":{"name":"argselfref"}}],[11,"fold_arm","","",317,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_attr_style","","",317,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fold_attribute","","",317,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fold_bare_fn_arg","","",317,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"barefnarg"}}],[11,"fold_bare_fn_arg_name","","",317,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":{"name":"barefnargname"}}],[11,"fold_bin_op","","",317,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"binop"}}],[11,"fold_binding","","",317,{"inputs":[{"name":"self"},{"name":"binding"}],"output":{"name":"binding"}}],[11,"fold_block","","",317,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"block"}}],[11,"fold_bound_lifetimes","","",317,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":{"name":"boundlifetimes"}}],[11,"fold_const_param","","",317,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":{"name":"constparam"}}],[11,"fold_data","","",317,{"inputs":[{"name":"self"},{"name":"data"}],"output":{"name":"data"}}],[11,"fold_data_enum","","",317,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":{"name":"dataenum"}}],[11,"fold_data_struct","","",317,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":{"name":"datastruct"}}],[11,"fold_data_union","","",317,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":{"name":"dataunion"}}],[11,"fold_derive_input","","",317,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"deriveinput"}}],[11,"fold_expr","","",317,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"expr"}}],[11,"fold_expr_addr_of","","",317,{"inputs":[{"name":"self"},{"name":"expraddrof"}],"output":{"name":"expraddrof"}}],[11,"fold_expr_array","","",317,{"inputs":[{"name":"self"},{"name":"exprarray"}],"output":{"name":"exprarray"}}],[11,"fold_expr_assign","","",317,{"inputs":[{"name":"self"},{"name":"exprassign"}],"output":{"name":"exprassign"}}],[11,"fold_expr_assign_op","","",317,{"inputs":[{"name":"self"},{"name":"exprassignop"}],"output":{"name":"exprassignop"}}],[11,"fold_expr_binary","","",317,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":{"name":"exprbinary"}}],[11,"fold_expr_block","","",317,{"inputs":[{"name":"self"},{"name":"exprblock"}],"output":{"name":"exprblock"}}],[11,"fold_expr_box","","",317,{"inputs":[{"name":"self"},{"name":"exprbox"}],"output":{"name":"exprbox"}}],[11,"fold_expr_break","","",317,{"inputs":[{"name":"self"},{"name":"exprbreak"}],"output":{"name":"exprbreak"}}],[11,"fold_expr_call","","",317,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":{"name":"exprcall"}}],[11,"fold_expr_cast","","",317,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":{"name":"exprcast"}}],[11,"fold_expr_catch","","",317,{"inputs":[{"name":"self"},{"name":"exprcatch"}],"output":{"name":"exprcatch"}}],[11,"fold_expr_closure","","",317,{"inputs":[{"name":"self"},{"name":"exprclosure"}],"output":{"name":"exprclosure"}}],[11,"fold_expr_continue","","",317,{"inputs":[{"name":"self"},{"name":"exprcontinue"}],"output":{"name":"exprcontinue"}}],[11,"fold_expr_field","","",317,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":{"name":"exprfield"}}],[11,"fold_expr_for_loop","","",317,{"inputs":[{"name":"self"},{"name":"exprforloop"}],"output":{"name":"exprforloop"}}],[11,"fold_expr_group","","",317,{"inputs":[{"name":"self"},{"name":"exprgroup"}],"output":{"name":"exprgroup"}}],[11,"fold_expr_if","","",317,{"inputs":[{"name":"self"},{"name":"exprif"}],"output":{"name":"exprif"}}],[11,"fold_expr_if_let","","",317,{"inputs":[{"name":"self"},{"name":"expriflet"}],"output":{"name":"expriflet"}}],[11,"fold_expr_in_place","","",317,{"inputs":[{"name":"self"},{"name":"exprinplace"}],"output":{"name":"exprinplace"}}],[11,"fold_expr_index","","",317,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":{"name":"exprindex"}}],[11,"fold_expr_lit","","",317,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":{"name":"exprlit"}}],[11,"fold_expr_loop","","",317,{"inputs":[{"name":"self"},{"name":"exprloop"}],"output":{"name":"exprloop"}}],[11,"fold_expr_macro","","",317,{"inputs":[{"name":"self"},{"name":"exprmacro"}],"output":{"name":"exprmacro"}}],[11,"fold_expr_match","","",317,{"inputs":[{"name":"self"},{"name":"exprmatch"}],"output":{"name":"exprmatch"}}],[11,"fold_expr_method_call","","",317,{"inputs":[{"name":"self"},{"name":"exprmethodcall"}],"output":{"name":"exprmethodcall"}}],[11,"fold_expr_paren","","",317,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":{"name":"exprparen"}}],[11,"fold_expr_path","","",317,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":{"name":"exprpath"}}],[11,"fold_expr_range","","",317,{"inputs":[{"name":"self"},{"name":"exprrange"}],"output":{"name":"exprrange"}}],[11,"fold_expr_repeat","","",317,{"inputs":[{"name":"self"},{"name":"exprrepeat"}],"output":{"name":"exprrepeat"}}],[11,"fold_expr_return","","",317,{"inputs":[{"name":"self"},{"name":"exprreturn"}],"output":{"name":"exprreturn"}}],[11,"fold_expr_struct","","",317,{"inputs":[{"name":"self"},{"name":"exprstruct"}],"output":{"name":"exprstruct"}}],[11,"fold_expr_try","","",317,{"inputs":[{"name":"self"},{"name":"exprtry"}],"output":{"name":"exprtry"}}],[11,"fold_expr_tuple","","",317,{"inputs":[{"name":"self"},{"name":"exprtuple"}],"output":{"name":"exprtuple"}}],[11,"fold_expr_type","","",317,{"inputs":[{"name":"self"},{"name":"exprtype"}],"output":{"name":"exprtype"}}],[11,"fold_expr_unary","","",317,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":{"name":"exprunary"}}],[11,"fold_expr_unsafe","","",317,{"inputs":[{"name":"self"},{"name":"exprunsafe"}],"output":{"name":"exprunsafe"}}],[11,"fold_expr_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":{"name":"exprverbatim"}}],[11,"fold_expr_while","","",317,{"inputs":[{"name":"self"},{"name":"exprwhile"}],"output":{"name":"exprwhile"}}],[11,"fold_expr_while_let","","",317,{"inputs":[{"name":"self"},{"name":"exprwhilelet"}],"output":{"name":"exprwhilelet"}}],[11,"fold_expr_yield","","",317,{"inputs":[{"name":"self"},{"name":"expryield"}],"output":{"name":"expryield"}}],[11,"fold_field","","",317,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_field_pat","","",317,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fold_field_value","","",317,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"fieldvalue"}}],[11,"fold_fields","","",317,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"fields"}}],[11,"fold_fields_named","","",317,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":{"name":"fieldsnamed"}}],[11,"fold_fields_unnamed","","",317,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":{"name":"fieldsunnamed"}}],[11,"fold_file","","",317,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"name":"file"}}],[11,"fold_fn_arg","","",317,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"fnarg"}}],[11,"fold_fn_decl","","",317,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fold_foreign_item","","",317,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_foreign_item_fn","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemfn"}],"output":{"name":"foreignitemfn"}}],[11,"fold_foreign_item_static","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemstatic"}],"output":{"name":"foreignitemstatic"}}],[11,"fold_foreign_item_type","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemtype"}],"output":{"name":"foreignitemtype"}}],[11,"fold_foreign_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"foreignitemverbatim"}],"output":{"name":"foreignitemverbatim"}}],[11,"fold_generic_argument","","",317,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":{"name":"genericargument"}}],[11,"fold_generic_method_argument","","",317,{"inputs":[{"name":"self"},{"name":"genericmethodargument"}],"output":{"name":"genericmethodargument"}}],[11,"fold_generic_param","","",317,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":{"name":"genericparam"}}],[11,"fold_generics","","",317,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_ident","","",317,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_impl_item","","",317,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fold_impl_item_const","","",317,{"inputs":[{"name":"self"},{"name":"implitemconst"}],"output":{"name":"implitemconst"}}],[11,"fold_impl_item_macro","","",317,{"inputs":[{"name":"self"},{"name":"implitemmacro"}],"output":{"name":"implitemmacro"}}],[11,"fold_impl_item_method","","",317,{"inputs":[{"name":"self"},{"name":"implitemmethod"}],"output":{"name":"implitemmethod"}}],[11,"fold_impl_item_type","","",317,{"inputs":[{"name":"self"},{"name":"implitemtype"}],"output":{"name":"implitemtype"}}],[11,"fold_impl_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"implitemverbatim"}],"output":{"name":"implitemverbatim"}}],[11,"fold_index","","",317,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"index"}}],[11,"fold_item","","",317,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_item_const","","",317,{"inputs":[{"name":"self"},{"name":"itemconst"}],"output":{"name":"itemconst"}}],[11,"fold_item_enum","","",317,{"inputs":[{"name":"self"},{"name":"itemenum"}],"output":{"name":"itemenum"}}],[11,"fold_item_extern_crate","","",317,{"inputs":[{"name":"self"},{"name":"itemexterncrate"}],"output":{"name":"itemexterncrate"}}],[11,"fold_item_fn","","",317,{"inputs":[{"name":"self"},{"name":"itemfn"}],"output":{"name":"itemfn"}}],[11,"fold_item_foreign_mod","","",317,{"inputs":[{"name":"self"},{"name":"itemforeignmod"}],"output":{"name":"itemforeignmod"}}],[11,"fold_item_impl","","",317,{"inputs":[{"name":"self"},{"name":"itemimpl"}],"output":{"name":"itemimpl"}}],[11,"fold_item_macro","","",317,{"inputs":[{"name":"self"},{"name":"itemmacro"}],"output":{"name":"itemmacro"}}],[11,"fold_item_macro2","","",317,{"inputs":[{"name":"self"},{"name":"itemmacro2"}],"output":{"name":"itemmacro2"}}],[11,"fold_item_mod","","",317,{"inputs":[{"name":"self"},{"name":"itemmod"}],"output":{"name":"itemmod"}}],[11,"fold_item_static","","",317,{"inputs":[{"name":"self"},{"name":"itemstatic"}],"output":{"name":"itemstatic"}}],[11,"fold_item_struct","","",317,{"inputs":[{"name":"self"},{"name":"itemstruct"}],"output":{"name":"itemstruct"}}],[11,"fold_item_trait","","",317,{"inputs":[{"name":"self"},{"name":"itemtrait"}],"output":{"name":"itemtrait"}}],[11,"fold_item_type","","",317,{"inputs":[{"name":"self"},{"name":"itemtype"}],"output":{"name":"itemtype"}}],[11,"fold_item_union","","",317,{"inputs":[{"name":"self"},{"name":"itemunion"}],"output":{"name":"itemunion"}}],[11,"fold_item_use","","",317,{"inputs":[{"name":"self"},{"name":"itemuse"}],"output":{"name":"itemuse"}}],[11,"fold_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"itemverbatim"}],"output":{"name":"itemverbatim"}}],[11,"fold_label","","",317,{"inputs":[{"name":"self"},{"name":"label"}],"output":{"name":"label"}}],[11,"fold_lifetime","","",317,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",317,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_lit","","",317,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"lit"}}],[11,"fold_lit_bool","","",317,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":{"name":"litbool"}}],[11,"fold_lit_byte","","",317,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":{"name":"litbyte"}}],[11,"fold_lit_byte_str","","",317,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":{"name":"litbytestr"}}],[11,"fold_lit_char","","",317,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":{"name":"litchar"}}],[11,"fold_lit_float","","",317,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":{"name":"litfloat"}}],[11,"fold_lit_int","","",317,{"inputs":[{"name":"self"},{"name":"litint"}],"output":{"name":"litint"}}],[11,"fold_lit_str","","",317,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":{"name":"litstr"}}],[11,"fold_lit_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":{"name":"litverbatim"}}],[11,"fold_local","","",317,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"local"}}],[11,"fold_macro","","",317,{"inputs":[{"name":"self"},{"name":"macro"}],"output":{"name":"macro"}}],[11,"fold_macro_delimiter","","",317,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":{"name":"macrodelimiter"}}],[11,"fold_member","","",317,{"inputs":[{"name":"self"},{"name":"member"}],"output":{"name":"member"}}],[11,"fold_meta","","",317,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"meta"}}],[11,"fold_meta_list","","",317,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":{"name":"metalist"}}],[11,"fold_meta_name_value","","",317,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":{"name":"metanamevalue"}}],[11,"fold_method_sig","","",317,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fold_method_turbofish","","",317,{"inputs":[{"name":"self"},{"name":"methodturbofish"}],"output":{"name":"methodturbofish"}}],[11,"fold_nested_meta","","",317,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":{"name":"nestedmeta"}}],[11,"fold_parenthesized_generic_arguments","","",317,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"fold_pat","","",317,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"pat"}}],[11,"fold_pat_box","","",317,{"inputs":[{"name":"self"},{"name":"patbox"}],"output":{"name":"patbox"}}],[11,"fold_pat_ident","","",317,{"inputs":[{"name":"self"},{"name":"patident"}],"output":{"name":"patident"}}],[11,"fold_pat_lit","","",317,{"inputs":[{"name":"self"},{"name":"patlit"}],"output":{"name":"patlit"}}],[11,"fold_pat_macro","","",317,{"inputs":[{"name":"self"},{"name":"patmacro"}],"output":{"name":"patmacro"}}],[11,"fold_pat_path","","",317,{"inputs":[{"name":"self"},{"name":"patpath"}],"output":{"name":"patpath"}}],[11,"fold_pat_range","","",317,{"inputs":[{"name":"self"},{"name":"patrange"}],"output":{"name":"patrange"}}],[11,"fold_pat_ref","","",317,{"inputs":[{"name":"self"},{"name":"patref"}],"output":{"name":"patref"}}],[11,"fold_pat_slice","","",317,{"inputs":[{"name":"self"},{"name":"patslice"}],"output":{"name":"patslice"}}],[11,"fold_pat_struct","","",317,{"inputs":[{"name":"self"},{"name":"patstruct"}],"output":{"name":"patstruct"}}],[11,"fold_pat_tuple","","",317,{"inputs":[{"name":"self"},{"name":"pattuple"}],"output":{"name":"pattuple"}}],[11,"fold_pat_tuple_struct","","",317,{"inputs":[{"name":"self"},{"name":"pattuplestruct"}],"output":{"name":"pattuplestruct"}}],[11,"fold_pat_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"patverbatim"}],"output":{"name":"patverbatim"}}],[11,"fold_pat_wild","","",317,{"inputs":[{"name":"self"},{"name":"patwild"}],"output":{"name":"patwild"}}],[11,"fold_path","","",317,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_arguments","","",317,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":{"name":"patharguments"}}],[11,"fold_path_segment","","",317,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fold_predicate_eq","","",317,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":{"name":"predicateeq"}}],[11,"fold_predicate_lifetime","","",317,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":{"name":"predicatelifetime"}}],[11,"fold_predicate_type","","",317,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":{"name":"predicatetype"}}],[11,"fold_qself","","",317,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"qself"}}],[11,"fold_range_limits","","",317,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"rangelimits"}}],[11,"fold_return_type","","",317,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":{"name":"returntype"}}],[11,"fold_span","","",317,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"fold_stmt","","",317,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"stmt"}}],[11,"fold_trait_bound","","",317,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":{"name":"traitbound"}}],[11,"fold_trait_bound_modifier","","",317,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fold_trait_item","","",317,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fold_trait_item_const","","",317,{"inputs":[{"name":"self"},{"name":"traititemconst"}],"output":{"name":"traititemconst"}}],[11,"fold_trait_item_macro","","",317,{"inputs":[{"name":"self"},{"name":"traititemmacro"}],"output":{"name":"traititemmacro"}}],[11,"fold_trait_item_method","","",317,{"inputs":[{"name":"self"},{"name":"traititemmethod"}],"output":{"name":"traititemmethod"}}],[11,"fold_trait_item_type","","",317,{"inputs":[{"name":"self"},{"name":"traititemtype"}],"output":{"name":"traititemtype"}}],[11,"fold_trait_item_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"traititemverbatim"}],"output":{"name":"traititemverbatim"}}],[11,"fold_type","","",317,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"type"}}],[11,"fold_type_array","","",317,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":{"name":"typearray"}}],[11,"fold_type_bare_fn","","",317,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":{"name":"typebarefn"}}],[11,"fold_type_group","","",317,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":{"name":"typegroup"}}],[11,"fold_type_impl_trait","","",317,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":{"name":"typeimpltrait"}}],[11,"fold_type_infer","","",317,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":{"name":"typeinfer"}}],[11,"fold_type_macro","","",317,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":{"name":"typemacro"}}],[11,"fold_type_never","","",317,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":{"name":"typenever"}}],[11,"fold_type_param","","",317,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":{"name":"typeparam"}}],[11,"fold_type_param_bound","","",317,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":{"name":"typeparambound"}}],[11,"fold_type_paren","","",317,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":{"name":"typeparen"}}],[11,"fold_type_path","","",317,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":{"name":"typepath"}}],[11,"fold_type_ptr","","",317,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":{"name":"typeptr"}}],[11,"fold_type_reference","","",317,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":{"name":"typereference"}}],[11,"fold_type_slice","","",317,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":{"name":"typeslice"}}],[11,"fold_type_trait_object","","",317,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":{"name":"typetraitobject"}}],[11,"fold_type_tuple","","",317,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":{"name":"typetuple"}}],[11,"fold_type_verbatim","","",317,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":{"name":"typeverbatim"}}],[11,"fold_un_op","","",317,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"unop"}}],[11,"fold_use_glob","","",317,{"inputs":[{"name":"self"},{"name":"useglob"}],"output":{"name":"useglob"}}],[11,"fold_use_list","","",317,{"inputs":[{"name":"self"},{"name":"uselist"}],"output":{"name":"uselist"}}],[11,"fold_use_path","","",317,{"inputs":[{"name":"self"},{"name":"usepath"}],"output":{"name":"usepath"}}],[11,"fold_use_tree","","",317,{"inputs":[{"name":"self"},{"name":"usetree"}],"output":{"name":"usetree"}}],[11,"fold_variant","","",317,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_vis_crate","","",317,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":{"name":"viscrate"}}],[11,"fold_vis_public","","",317,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":{"name":"vispublic"}}],[11,"fold_vis_restricted","","",317,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":{"name":"visrestricted"}}],[11,"fold_visibility","","",317,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fold_where_clause","","",317,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",317,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[0,"error","syn","",null,null],[3,"ParseError","syn::error","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[12,"0","","",301,null],[5,"parse_error","","An error with a default error message.",null,{"inputs":[],"output":{"name":"presult"}}],[6,"PResult","","The result of a `Synom` parser.",null,null],[11,"fmt","syn::synom","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",301,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",301,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_tokens","syn","",162,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"named","","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"tuple_parser","","",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"tap","","Run a parser, binding the result to a name, and then evaluating an expression.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"grouped","","",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprAddrOf"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"TypeGenerics"],[3,"Ident"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseList"],[3,"UsePath"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitByte"],[3,"LitByteStr"],[3,"LitChar"],[3,"LitFloat"],[3,"LitInt"],[3,"LitStr"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[3,"PathTokens"],[3,"TokensOrDefault"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"Rocket"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Underscore"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[8,"FromSpans"],[4,"Comment"],[8,"FilterAttrs"],[3,"TypeParams"],[3,"TypeParamsMut"],[3,"Lifetimes"],[3,"LifetimesMut"],[3,"ConstParams"],[3,"ConstParamsMut"],[3,"NamedDecl"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Entry"],[3,"ParseError"],[8,"Synom"],[8,"Parser"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Pair"],[3,"TokenTreeHelper"],[3,"TokenStreamHelper"],[8,"ParseQuote"],[8,"Spanned"],[8,"Visit"],[8,"Fold"],[8,"FoldHelper"],[8,"Spans"],[8,"Spans"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[5,"many0","","",null,null],[0,"space","","",null,null],[5,"whitespace","synom::space","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"iresult"}}],[5,"block_comment","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"word_break","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"iresult"}}],[5,"skip_whitespace","","",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"is_whitespace","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"helper","synom","",null,null],[5,"punct","synom::helper","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"keyword","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["str","str"],"name":"iresult"}}],[5,"separated_list","","",null,null],[11,"fmt","synom","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"tap","","Run a parser, binding the result to a name, and then evaluating an expression.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"tuple_parser","","Internal parser, do not use directly.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["syntax_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntax_pos","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[12,"0","","",0,null],[3,"SpanData","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",1,null],[12,"hi","","",1,null],[12,"ctxt","","Information about where the macro came from, if this piece of code was created by a macro expansion.",1,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[12,"primary_spans","","",2,null],[12,"span_labels","","",2,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",3,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",3,null],[12,"label","","What label should we attach to this span (if any)?",3,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",4,null],[12,"bytes","","The number of bytes, >=2",4,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",5,null],[12,"name_was_remapped","","True if the `name` field above has been modified by -Zremap-path-prefix",5,null],[12,"unmapped_path","","The unmapped path of the file that the source came from. Set to `None` if the FileMap was imported from an external crate.",5,null],[12,"crate_of_origin","","Indicates which crate this FileMap was imported from.",5,null],[12,"src","","The complete source code",5,null],[12,"src_hash","","The source code's hash",5,null],[12,"external_src","","The external source code (used for external crates, which will have a `None` value as `self.src`.",5,null],[12,"start_pos","","The start position of this source in the CodeMap",5,null],[12,"end_pos","","The end position of this source in the CodeMap",5,null],[12,"lines","","Locations of lines beginnings in the source code",5,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",5,null],[12,"non_narrow_chars","","Width of characters that are not narrow in the source code",5,null],[12,"name_hash","","A hash of the filename, used for speeding up the incr. comp. hashing.",5,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",6,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",7,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",8,null],[12,"line","","The (1-based) line number",8,null],[12,"col","","The (0-based) column offset",8,null],[12,"col_display","","The (0-based) column offset when displayed",8,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",9,null],[12,"line","","",9,null],[12,"col","","",9,null],[12,"file","","",9,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",10,null],[12,"line","","",10,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",11,null],[12,"pos","","",11,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",12,null],[12,"start_col","","Column in line where span begins, starting from 0.",12,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",12,null],[3,"FileLines","","",null,null],[12,"file","","",13,null],[12,"lines","","",13,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",14,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",14,null],[12,"def_site_span","","span where macro was defined (if known)",14,null],[3,"DistinctSources","","",null,null],[12,"begin","","",15,null],[12,"end","","",15,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",16,null],[12,"source_len","","",16,null],[12,"begin_pos","","",16,null],[12,"end_pos","","",16,null],[4,"FileName","","Differentiates between real files and common virtual files",null,null],[13,"Real","","",17,null],[13,"Macros","","e.g. \"std\" macros",17,null],[13,"QuoteExpansion","","call to `quote!`",17,null],[13,"Anon","","Command line",17,null],[13,"MacroExpansion","","Hack in src/libsyntax/parse.rs FIXME(jseyfried)",17,null],[13,"ProcMacroSourceCode","","",17,null],[13,"CfgSpec","","Strings provided as --cfg [cfgspec] stored in a crate_cfg",17,null],[13,"Custom","","Custom sources for explicit parser calls from plugins and drivers",17,null],[4,"NonNarrowChar","","Identifies an offset of a non-narrow character in a FileMap",null,null],[13,"ZeroWidth","","Represents a zero-width character",18,null],[13,"Wide","","Represents a wide (fullwidth) character",18,null],[13,"Tab","","Represents a tab character, represented visually with a width of 4 characters",18,null],[4,"ExternalSource","","The state of the lazy external source loading mechanism of a FileMap.",null,null],[13,"Present","","The external source has been loaded already.",19,null],[13,"AbsentOk","","No attempt has been made to load the external source.",19,null],[13,"AbsentErr","","A failed attempt has been made to load the external source.",19,null],[13,"Unneeded","","No external source has to be loaded, since the FileMap represents a local crate.",19,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",20,null],[13,"DistinctSources","","",20,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",21,null],[13,"DistinctSources","","",21,null],[13,"MalformedForCodemap","","",21,null],[13,"SourceNotAvailable","","",21,null],[12,"filename","syntax_pos::SpanSnippetError","",21,null],[5,"default_span_debug","syntax_pos","",null,{"inputs":[{"name":"span"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"remove_bom","","Remove utf-8 BOM if any.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"lookup_line","","",null,null],[0,"hygiene","","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntax_pos::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[12,"0","","",22,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",23,null],[12,"prev_ctxt","","",23,null],[12,"modern","","",23,null],[3,"Mark","","A mark is a unique id associated with a macro expansion.",null,null],[12,"0","","",24,null],[3,"MarkData","","",null,null],[12,"parent","","",25,null],[12,"kind","","",25,null],[12,"expn_info","","",25,null],[3,"HygieneData","","",null,null],[12,"marks","","",26,null],[12,"syntax_contexts","","",26,null],[12,"markings","","",26,null],[12,"gensym_to_ctxt","","",26,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",27,null],[12,"callee","","Information about the expansion.",27,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",28,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",28,null],[12,"allow_internal_unsafe","","Whether the macro is allowed to use `unsafe` internally even if the user crate has `#![forbid(unsafe_code)]`.",28,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",28,null],[4,"MarkKind","","",null,null],[13,"Modern","","",29,null],[13,"Builtin","","",29,null],[13,"Legacy","","",29,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",30,null],[13,"MacroBang","","e.g. `format!()`",30,null],[13,"CompilerDesugaring","","Desugaring done by the compiler during HIR lowering.",30,null],[4,"CompilerDesugaringKind","","The kind of compiler desugaring.",null,null],[13,"BackArrow","","",31,null],[13,"DotFill","","",31,null],[13,"QuestionMark","","",31,null],[5,"clear_markings","","",null,{"inputs":[],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",24,null],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"generics":["mark"],"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"markkind"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"markkind"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",29,null],[11,"fresh","","",24,{"inputs":[{"name":"mark"}],"output":{"name":"self"}}],[11,"root","","The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.",24,{"inputs":[],"output":{"name":"self"}}],[11,"as_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_u32","","",24,{"inputs":[{"name":"u32"}],"output":{"name":"mark"}}],[11,"expn_info","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["expninfo"],"name":"option"}}],[11,"set_expn_info","","",24,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":null}],[11,"modern","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"kind","","",24,{"inputs":[{"name":"self"}],"output":{"name":"markkind"}}],[11,"set_kind","","",24,{"inputs":[{"name":"self"},{"name":"markkind"}],"output":null}],[11,"is_descendant_of","","",24,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"with","","",26,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[11,"empty","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"allocate_directly","","",22,{"inputs":[{"name":"expninfo"}],"output":{"name":"self"}}],[11,"apply_mark","","Extend a syntax context with a given mark",22,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"apply_mark_internal","","",22,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"remove_mark","","",22,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"marks","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["mark"],"name":"vec"}}],[11,"adjust","","Adjust this context for resolution in a scope created by the given expansion. For example, consider the following three resolutions of `f`:",22,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"generics":["mark"],"name":"option"}}],[11,"glob_adjust","","Adjust this context for resolution in a scope created by the given expansion via a glob import with the given `SyntaxContext`. For example:",22,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"generics":["option"],"name":"option"}}],[11,"reverse_glob_adjust","","Undo `glob_adjust` if possible:",22,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"syntaxcontext"}],"output":{"generics":["option"],"name":"option"}}],[11,"modern","","",22,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"outer","","",22,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"expninfo"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"generics":["expninfo"],"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"generics":["nameandspan"],"name":"result"}}],[11,"name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",30,null],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"generics":["expnformat"],"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"compilerdesugaringkind"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",31,null],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"generics":["compilerdesugaringkind"],"name":"result"}}],[11,"as_symbol","","",31,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"d"}],"output":{"generics":["syntaxcontext"],"name":"result"}}],[0,"span_encoding","syntax_pos","",null,null],[3,"Span","syntax_pos::span_encoding","A compressed span. Contains either fields of `SpanData` inline if they are small, or index into span interner. The primary goal of `Span` is to be as small as possible and fit into other structures (that's why it uses `packed` as well). Decoding speed is the second priority. See `SpanData` for the info on span fields in decoded representation.",null,null],[12,"0","","",0,null],[3,"SpanInterner","","",null,null],[12,"spans","","",32,null],[12,"span_data","","",32,null],[5,"encode","","",null,{"inputs":[{"name":"spandata"}],"output":{"name":"span"}}],[5,"decode","","",null,{"inputs":[{"name":"span"}],"output":{"name":"spandata"}}],[5,"with_span_interner","","",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[17,"TAG_INLINE","","",null,null],[17,"TAG_INTERNED","","",null,null],[17,"TAG_MASK","","",null,null],[17,"BASE_INDEX","","",null,null],[17,"LEN_INDEX","","",null,null],[17,"CTXT_INDEX","","",null,null],[17,"INLINE_SIZES","","",null,null],[17,"INLINE_OFFSETS","","",null,null],[17,"INTERNED_INDEX_SIZE","","",null,null],[17,"INTERNED_INDEX_OFFSET","","",null,null],[11,"clone","syntax_pos","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"syntaxcontext"}],"output":{"name":"self"}}],[11,"data","","",0,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"default","syntax_pos::span_encoding","",32,{"inputs":[],"output":{"name":"spaninterner"}}],[11,"intern","","",32,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"u32"}}],[11,"get","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"spandata"}}],[0,"symbol","syntax_pos","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Ident","syntax_pos::symbol","",null,null],[12,"name","","",33,null],[12,"ctxt","","",33,null],[3,"Symbol","","A symbol is an interned or gensymed string.",null,null],[12,"0","","",34,null],[3,"Interner","","",null,null],[12,"names","","",35,null],[12,"strings","","",35,null],[12,"gensyms","","",35,null],[3,"InternedString","","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[12,"string","","",36,null],[5,"with_interner","","",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[0,"keywords","","",null,null],[3,"Keyword","syntax_pos::symbol::keywords","",null,null],[12,"ident","","",37,null],[17,"Invalid","","",null,null],[17,"CrateRoot","","",null,null],[17,"DollarCrate","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Auto","","",null,null],[17,"Catch","","",null,null],[17,"Default","","",null,null],[17,"Dyn","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",37,null],[11,"ident","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",37,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"clone","syntax_pos::symbol","",33,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",33,null],[11,"hash","","",33,null],[11,"with_empty_ctxt","","",33,{"inputs":[{"name":"symbol"}],"output":{"name":"ident"}}],[11,"from_str","","Maps a string to an identifier with an empty syntax context.",33,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[11,"without_first_quote","","",33,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"modern","","",33,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"d"}],"output":{"generics":["ident"],"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",34,null],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"ordering"}}],[11,"hash","","",34,null],[11,"intern","","Maps a string to its interned representation.",34,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"interned","","",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"gensym","","gensym's a new usize, using the current interner.",34,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"gensymed","","",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_str","","",34,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"as_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",34,{"inputs":[{"name":"str"}],"output":{"name":"symbol"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"d"}],"output":{"generics":["symbol"],"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"prefill","","",35,null],[11,"intern","","",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"interned","","",35,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"symbol"}}],[11,"gensym","","",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"symbol"}}],[11,"gensymed","","",35,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"symbol"}}],[11,"is_gensymed","","",35,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"bool"}}],[11,"get","","",35,{"inputs":[{"name":"self"},{"name":"symbol"}],"output":{"name":"str"}}],[11,"fresh","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"hash","","",36,null],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",36,null],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"d"}],"output":{"generics":["internedstring"],"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[6,"FileLinesResult","syntax_pos","",null,null],[17,"DUMMY_SP","","Dummy span, both position and length are zero, syntax context is zero as well. This span is kept inline and encoded with format 0.",null,null],[17,"NO_EXPANSION","","",null,null],[17,"SPAN_DEBUG","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",38,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"filename"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"filename"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"generics":["filename"],"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"pathbuf"}],"output":{"name":"self"}}],[11,"is_real","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_macros","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spandata"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"spandata"}],"output":{"name":"bool"}}],[11,"with_lo","","",1,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"with_hi","","",1,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"with_ctxt","","",1,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"multispan"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["multispan"],"name":"result"}}],[11,"lo","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_lo","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"hi","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"with_hi","","",0,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"ctxt","","",0,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"with_ctxt","","",0,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"span"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"next_point","","Returns a new span representing the next character after the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","Return true if `self` fully encloses `other`.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["span"],"name":"option"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",0,{"inputs":[{"name":"self"}],"output":{"generics":["nameandspan"],"name":"option"}}],[11,"allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_compiler_desugaring","","Check if this span arises from a compiler desugaring of kind `kind`.",0,{"inputs":[{"name":"self"},{"name":"compilerdesugaringkind"}],"output":{"name":"bool"}}],[11,"compiler_desugaring_kind","","Return the compiler desugaring that created this span, or None if this span is not from a desugaring.",0,{"inputs":[{"name":"self"}],"output":{"generics":["compilerdesugaringkind"],"name":"option"}}],[11,"allows_unsafe","","Check if a span is \"internal\" to a macro in which `unsafe` can be used without triggering the `unsafe_code` lint",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"macro_backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["macrobacktrace"],"name":"vec"}}],[11,"to","","Return a `Span` that would enclose both `self` and `end`.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"between","","Return a `Span` between the end of `self` to the beginning of `end`.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"until","","Return a `Span` between the beginning of `self` to the beginning of `end`.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"spanlabel"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"default_encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default_decode","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["span"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",2,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",2,{"inputs":[{"generics":["span"],"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"string"}],"output":null}],[11,"primary_span","","Selects the first primary span (if any)",2,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",2,null],[11,"replace","","Replaces all occurrences of one Span with another. Used to move Spans in areas that don't display well (like std macros). Returns true if replacements occurred.",2,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",2,{"inputs":[{"name":"self"}],"output":{"generics":["spanlabel"],"name":"vec"}}],[11,"from","","",2,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from","","",2,{"inputs":[{"generics":["span"],"name":"vec"}],"output":{"name":"multispan"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"multibytechar"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"generics":["multibytechar"],"name":"result"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"nonnarrowchar"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["nonnarrowchar"],"name":"result"}}],[11,"assert_receiver_is_total_eq","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"nonnarrowchar"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"nonnarrowchar"}],"output":{"name":"bool"}}],[11,"new","","",18,{"inputs":[{"name":"bytepos"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pos","","Returns the absolute offset of the character in the CodeMap",18,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"width","","Returns the width of the character, 0 (zero-width) or 2 (wide)",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"self"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"self"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"externalsource"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"externalsource"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"externalsource"}}],[11,"is_absent","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_source","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filemap"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"generics":["filemap"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"filename"},{"name":"bool"},{"name":"filename"},{"name":"string"},{"name":"bytepos"}],"output":{"name":"filemap"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"add_external_src","","Add externally loaded source. If the hash of the input doesn't match or no input is supplied via None, it is interpreted as an error and the corresponding enum variant is set. The return value signifies whether some kind of source is present.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"get_line","","Get a line from the list of pre-computed line-beginnings. The line number here is 0-based.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cow"],"name":"option"}}],[11,"record_multibyte_char","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"record_width","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"char"}],"output":null}],[11,"is_real_file","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_length","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_lines","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"lookup_line","","Find the line containing the given position. The return value is the index into the `lines` array of this FileMap, not the 1-based line number. If the filemap is empty or the position is located before the first line, None is returned.",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["usize"],"name":"option"}}],[11,"line_bounds","","",5,null],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charpos"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"hash","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"ordering"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"generics":["bytepos"],"name":"result"}}],[11,"from_usize","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"spanlineserror"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"spansnippeterror"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"distinctsources"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"malformedcodemappositions"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","syntax_pos::symbol","",34,{"inputs":[{"name":"ident"}],"output":{"name":"symbol"}}],[11,"to_ident","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}]],"paths":[[3,"Span"],[3,"SpanData"],[3,"MultiSpan"],[3,"SpanLabel"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"FileName"],[4,"NonNarrowChar"],[4,"ExternalSource"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"SyntaxContext"],[3,"SyntaxContextData"],[3,"Mark"],[3,"MarkData"],[3,"HygieneData"],[3,"ExpnInfo"],[3,"NameAndSpan"],[4,"MarkKind"],[4,"ExpnFormat"],[4,"CompilerDesugaringKind"],[3,"SpanInterner"],[3,"Ident"],[3,"Symbol"],[3,"Interner"],[3,"InternedString"],[3,"Keyword"],[8,"Pos"]]};
searchIndex["syntect"] = {"doc":"Welcome to the syntect docs. These are still a work in progress but a lot of the important things have been documented already.","items":[[4,"LoadingError","syntect","Common error type used by syntax and theme loading",null,null],[13,"WalkDir","","error finding all the files in a directory",0,null],[13,"Io","","error reading a file",0,null],[13,"ParseTheme","","a theme file was invalid in some way",0,null],[13,"ReadSettings","","a theme's Plist syntax was invalid in some way",0,null],[13,"BadPath","","A path given to a method was invalid. Possibly because it didn't reference a file or wasn't UTF-8.",0,null],[0,"highlighting","","Everything having to do with turning parsed text into styled text. You might want to check out `Theme` for its handy text-editor related settings like selection colour, `ThemeSet` for loading themes, as well as things starting with `Highlight` for how to highlight text.",null,null],[3,"ScopeSelector","syntect::highlighting","A single selector consisting of a stack to match and a possible stack to exclude from being matched. You probably want `ScopeSelectors` which is this but with union support.",null,null],[12,"path","","",1,null],[12,"excludes","","",1,null],[3,"ScopeSelectors","","A selector set that matches anything matched by any of its component selectors. See The TextMate Docs for how these work.",null,null],[12,"selectors","","the selectors, if any of them match, this matches",2,null],[3,"Style","","The foreground, background and font style",null,null],[12,"foreground","","Foreground color.",3,null],[12,"background","","Background color.",3,null],[12,"font_style","","Style of the font.",3,null],[3,"StyleModifier","","A change to a `Style` applied incrementally by a theme rule.",null,null],[12,"foreground","","Foreground color.",4,null],[12,"background","","Background color.",4,null],[12,"font_style","","Style of the font.",4,null],[3,"Color","","RGBA colour, these numbers come directly from the theme so for now you might have to do your own colour space conversion if you are outputting a different colour space from the theme. This can be a problem because some Sublime themes use sRGB and some don't. This is specified in an attribute syntect doesn't parse yet.",null,null],[12,"r","","Red component",5,null],[12,"g","","Green component",5,null],[12,"b","","Blue component",5,null],[12,"a","","Alpha component",5,null],[3,"FontStyle","","This can be a combination of `BOLD`, `UNDERLINE` and `ITALIC`",null,null],[12,"bits","","",6,null],[3,"Theme","","A theme parsed from a `.tmTheme` file. Contains fields useful for a theme list as well as `settings` for styling your editor.",null,null],[12,"name","","",7,null],[12,"author","","",7,null],[12,"settings","","",7,null],[12,"scopes","","",7,null],[3,"ThemeSettings","","Various properties meant to be used to style a text editor. Basically all the styles that aren't directly applied to text like selection colour. Use this to make your editor UI match the highlighted text.",null,null],[12,"foreground","","The default color for text.",8,null],[12,"background","","The default backgound color of the view.",8,null],[12,"caret","","Color of the caret.",8,null],[12,"line_highlight","","Color of the line the caret is in. Only used when the `higlight_line` setting is set to `true`.",8,null],[12,"misspelling","","The color to use for the squiggly underline drawn under misspelled words.",8,null],[12,"minimap_border","","The color of the border drawn around the viewport area of the minimap. Only used when the `draw_minimap_border` setting is enabled.",8,null],[12,"accent","","A color made available for use by the theme.",8,null],[12,"popup_css","","CSS passed to popups.",8,null],[12,"phantom_css","","CSS passed to phantoms.",8,null],[12,"bracket_contents_foreground","","Color of bracketed sections of text when the caret is in a bracketed section. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"bracket_contents_options","","Controls certain options when the caret is in a bracket section. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"brackets_foreground","","Foreground color of the brackets when the caret is next to a bracket. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"brackets_background","","Background color of the brackets when the caret is next to a bracket. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"brackets_options","","Controls certain options when the caret is next to a bracket. Only applied when the match_brackets setting is set to `true`.",8,null],[12,"tags_foreground","","Color of tags when the caret is next to a tag. Only used when the `match_tags` setting is set to `true`.",8,null],[12,"tags_options","","Controls certain options when the caret is next to a tag. Only applied when the match_tags setting is set to `true`.",8,null],[12,"highlight","","The border color for \"other\" matches.",8,null],[12,"find_highlight","","Background color of regions matching the current search.",8,null],[12,"find_highlight_foreground","","Text color of regions matching the current search.",8,null],[12,"gutter","","Background color of the gutter.",8,null],[12,"gutter_foreground","","Foreground color of the gutter.",8,null],[12,"selection","","The background color of selected text.",8,null],[12,"selection_foreground","","A color that will override the scope-based text color of the selection.",8,null],[12,"selection_background","","Deprecated!",8,null],[12,"selection_border","","Color of the selection regions border.",8,null],[12,"inactive_selection","","The background color of a selection in a view that is not currently focused.",8,null],[12,"inactive_selection_foreground","","A color that will override the scope-based text color of the selection in a view that is not currently focused.",8,null],[12,"guide","","Color of the guides displayed to indicate nesting levels.",8,null],[12,"active_guide","","Color of the guide lined up with the caret. Only applied if the `indent_guide_options` setting is set to `draw_active`.",8,null],[12,"stack_guide","","Color of the current guide’s parent guide level. Only used if the `indent_guide_options` setting is set to `draw_active`.",8,null],[12,"highlight_foreground","","Foreground color for regions added via `sublime.add_regions()` with the `sublime.DRAW_OUTLINED` flag added.",8,null],[12,"shadow","","The color of the shadow used when a text area can be horizontally scrolled.",8,null],[3,"ThemeItem","","A component of a theme meant to highlight a specific thing (e.g string literals) in a certain way.",null,null],[12,"scope","","Target scope name.",9,null],[12,"style","","",9,null],[3,"Highlighter","","Basically a wrapper around a `Theme` preparing it to be used for highlighting. This is part of the API to preserve the possibility of caching matches of the selectors of the theme on various scope paths or setting up some kind of accelerator structure.",null,null],[12,"theme","","",10,null],[12,"single_selectors","","Cache of the selectors in the theme that are only one scope In most themes this is the majority, hence the usefullness",10,null],[12,"multi_selectors","","",10,null],[3,"HighlightState","","Keeps a stack of scopes and styles as state between highlighting different lines. If you are highlighting an entire file you create one of these at the start and use it all the way to the end.",null,null],[12,"styles","","",11,null],[12,"path","","",11,null],[3,"HighlightIterator","","Highlights a line of parsed code given a `HighlightState` and line of changes from the parser.",null,null],[12,"index","","",12,null],[12,"pos","","",12,null],[12,"changes","","",12,null],[12,"text","","",12,null],[12,"highlighter","","",12,null],[12,"state","","",12,null],[3,"ThemeSet","","",null,null],[12,"themes","","",13,null],[4,"SettingsError","","An error parsing a settings file",null,null],[13,"Plist","","Incorrect Plist syntax",14,null],[4,"UnderlineOption","","",null,null],[13,"None","","",15,null],[13,"Underline","","",15,null],[13,"StippledUnderline","","",15,null],[13,"SquigglyUnderline","","",15,null],[4,"ParseThemeError","","",null,null],[13,"IncorrectUnderlineOption","","",16,null],[13,"IncorrectFontStyle","","",16,null],[13,"IncorrectColor","","",16,null],[13,"IncorrectSyntax","","",16,null],[13,"IncorrectSettings","","",16,null],[13,"UndefinedSettings","","",16,null],[13,"UndefinedScopeSettings","","",16,null],[13,"ColorShemeScopeIsNotObject","","",16,null],[13,"ColorShemeSettingsIsNotObject","","",16,null],[13,"ScopeSelectorIsNotString","","",16,null],[13,"DuplicateSettings","","",16,null],[13,"ScopeParse","","",16,null],[0,"selector","","",null,null],[3,"ScopeSelector","syntect::highlighting::selector","A single selector consisting of a stack to match and a possible stack to exclude from being matched. You probably want `ScopeSelectors` which is this but with union support.",null,null],[12,"path","","",1,null],[12,"excludes","","",1,null],[3,"ScopeSelectors","","A selector set that matches anything matched by any of its component selectors. See The TextMate Docs for how these work.",null,null],[12,"selectors","","the selectors, if any of them match, this matches",2,null],[17,"_IMPL_SERIALIZE_FOR_ScopeSelector","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ScopeSelector","","",null,null],[17,"_IMPL_SERIALIZE_FOR_ScopeSelectors","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ScopeSelectors","","",null,null],[11,"fmt","syntect::highlighting","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"scopeselector"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"scopeselector"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"scopeselector"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"scopeselector"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"scopeselectors"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"scopeselectors"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"scopeselectors"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"scopeselectors"}}],[11,"does_match","","Checks if this selector matches a given scope stack. See `ScopeSelectors#does_match` for more info.",1,null],[11,"extract_single_scope","","If this selector is really just a single scope, return it",1,{"inputs":[{"name":"self"}],"output":{"generics":["scope"],"name":"option"}}],[11,"from_str","","Parses a scope stack followed optionally by (one or more) \" -\" and then a scope stack to exclude",1,{"inputs":[{"name":"str"}],"output":{"generics":["scopeselector","parsescopeerror"],"name":"result"}}],[11,"does_match","","checks if any of these selectors match the given scope stack if so it returns a match score, higher match scores are stronger matches. Scores are ordered according to the rules found at https://manual.macromates.com/en/scope_selectors",2,null],[11,"from_str","","Parses a series of selectors separated by commas or pipes",2,{"inputs":[{"name":"str"}],"output":{"generics":["scopeselectors","parsescopeerror"],"name":"result"}}],[0,"settings","","",null,null],[4,"Settings","syntect::highlighting::settings","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",17,null],[13,"Bool","","Represents a JSON boolean.",17,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",17,null],[13,"String","","Represents a JSON string.",17,null],[13,"Array","","Represents a JSON array.",17,null],[13,"Object","","Represents a JSON object.",17,null],[4,"SettingsError","","An error parsing a settings file",null,null],[13,"Plist","","Incorrect Plist syntax",14,null],[5,"read_plist","","",null,{"inputs":[{"name":"r"}],"output":{"generics":["settings","settingserror"],"name":"result"}}],[5,"to_json","","",null,{"inputs":[{"name":"plist"}],"output":{"name":"settings"}}],[8,"FromSettings","","",null,null],[10,"from_settings","","",18,{"inputs":[{"name":"settings"}],"output":{"name":"self"}}],[8,"ParseSettings","","",null,null],[16,"Error","","",19,null],[10,"parse_settings","","",19,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"fmt","syntect::highlighting","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"plisterror"}],"output":{"name":"settingserror"}}],[0,"style","","",null,null],[3,"Style","syntect::highlighting::style","The foreground, background and font style",null,null],[12,"foreground","","Foreground color.",3,null],[12,"background","","Background color.",3,null],[12,"font_style","","Style of the font.",3,null],[3,"StyleModifier","","A change to a `Style` applied incrementally by a theme rule.",null,null],[12,"foreground","","Foreground color.",4,null],[12,"background","","Background color.",4,null],[12,"font_style","","Style of the font.",4,null],[3,"Color","","RGBA colour, these numbers come directly from the theme so for now you might have to do your own colour space conversion if you are outputting a different colour space from the theme. This can be a problem because some Sublime themes use sRGB and some don't. This is specified in an attribute syntect doesn't parse yet.",null,null],[12,"r","","Red component",5,null],[12,"g","","Green component",5,null],[12,"b","","Blue component",5,null],[12,"a","","Alpha component",5,null],[3,"FontStyle","","This can be a combination of `BOLD`, `UNDERLINE` and `ITALIC`",null,null],[12,"bits","","",6,null],[17,"_IMPL_SERIALIZE_FOR_Style","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Style","","",null,null],[17,"_IMPL_SERIALIZE_FOR_StyleModifier","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_StyleModifier","","",null,null],[17,"_IMPL_SERIALIZE_FOR_Color","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Color","","",null,null],[17,"_IMPL_SERIALIZE_FOR_FontStyle","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_FontStyle","","",null,null],[11,"fmt","syntect::highlighting","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"stylemodifier"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stylemodifier"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"stylemodifier"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"stylemodifier"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fontstyle"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"BOLD","","Bold font style",6,null],[18,"UNDERLINE","","Underline font style",6,null],[18,"ITALIC","","Italic font style",6,null],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"fontstyle"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"fontstyle"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"u8"}],"output":{"generics":["fontstyle"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"inputs":[{"name":"u8"}],"output":{"name":"fontstyle"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"fontstyle"}}],[11,"bitor_assign","","Adds the set of flags.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"fontstyle"}}],[11,"bitxor_assign","","Toggles the set of flags.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"fontstyle"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":{"name":"fontstyle"}}],[11,"sub_assign","","Disables all flags enabled in the set.",6,{"inputs":[{"name":"self"},{"name":"fontstyle"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"self"}],"output":{"name":"fontstyle"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"fontstyle"}}],[18,"BLACK","","Black color (`#000000`)",5,null],[18,"WHITE","","White color (`#FFFFFF`)",5,null],[11,"apply","","Applies a change to this style, yielding a new changed style",3,{"inputs":[{"name":"self"},{"name":"stylemodifier"}],"output":{"name":"style"}}],[11,"apply","","Applies the other modifier to this one, creating a new modifier. Values in `other` are preferred.",4,{"inputs":[{"name":"self"},{"name":"stylemodifier"}],"output":{"name":"stylemodifier"}}],[0,"theme","","",null,null],[3,"Theme","syntect::highlighting::theme","A theme parsed from a `.tmTheme` file. Contains fields useful for a theme list as well as `settings` for styling your editor.",null,null],[12,"name","","",7,null],[12,"author","","",7,null],[12,"settings","","",7,null],[12,"scopes","","",7,null],[3,"ThemeSettings","","Various properties meant to be used to style a text editor. Basically all the styles that aren't directly applied to text like selection colour. Use this to make your editor UI match the highlighted text.",null,null],[12,"foreground","","The default color for text.",8,null],[12,"background","","The default backgound color of the view.",8,null],[12,"caret","","Color of the caret.",8,null],[12,"line_highlight","","Color of the line the caret is in. Only used when the `higlight_line` setting is set to `true`.",8,null],[12,"misspelling","","The color to use for the squiggly underline drawn under misspelled words.",8,null],[12,"minimap_border","","The color of the border drawn around the viewport area of the minimap. Only used when the `draw_minimap_border` setting is enabled.",8,null],[12,"accent","","A color made available for use by the theme.",8,null],[12,"popup_css","","CSS passed to popups.",8,null],[12,"phantom_css","","CSS passed to phantoms.",8,null],[12,"bracket_contents_foreground","","Color of bracketed sections of text when the caret is in a bracketed section. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"bracket_contents_options","","Controls certain options when the caret is in a bracket section. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"brackets_foreground","","Foreground color of the brackets when the caret is next to a bracket. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"brackets_background","","Background color of the brackets when the caret is next to a bracket. Only applied when the `match_brackets` setting is set to `true`.",8,null],[12,"brackets_options","","Controls certain options when the caret is next to a bracket. Only applied when the match_brackets setting is set to `true`.",8,null],[12,"tags_foreground","","Color of tags when the caret is next to a tag. Only used when the `match_tags` setting is set to `true`.",8,null],[12,"tags_options","","Controls certain options when the caret is next to a tag. Only applied when the match_tags setting is set to `true`.",8,null],[12,"highlight","","The border color for \"other\" matches.",8,null],[12,"find_highlight","","Background color of regions matching the current search.",8,null],[12,"find_highlight_foreground","","Text color of regions matching the current search.",8,null],[12,"gutter","","Background color of the gutter.",8,null],[12,"gutter_foreground","","Foreground color of the gutter.",8,null],[12,"selection","","The background color of selected text.",8,null],[12,"selection_foreground","","A color that will override the scope-based text color of the selection.",8,null],[12,"selection_background","","Deprecated!",8,null],[12,"selection_border","","Color of the selection regions border.",8,null],[12,"inactive_selection","","The background color of a selection in a view that is not currently focused.",8,null],[12,"inactive_selection_foreground","","A color that will override the scope-based text color of the selection in a view that is not currently focused.",8,null],[12,"guide","","Color of the guides displayed to indicate nesting levels.",8,null],[12,"active_guide","","Color of the guide lined up with the caret. Only applied if the `indent_guide_options` setting is set to `draw_active`.",8,null],[12,"stack_guide","","Color of the current guide’s parent guide level. Only used if the `indent_guide_options` setting is set to `draw_active`.",8,null],[12,"highlight_foreground","","Foreground color for regions added via `sublime.add_regions()` with the `sublime.DRAW_OUTLINED` flag added.",8,null],[12,"shadow","","The color of the shadow used when a text area can be horizontally scrolled.",8,null],[3,"ThemeItem","","A component of a theme meant to highlight a specific thing (e.g string literals) in a certain way.",null,null],[12,"scope","","Target scope name.",9,null],[12,"style","","",9,null],[4,"UnderlineOption","","",null,null],[13,"None","","",15,null],[13,"Underline","","",15,null],[13,"StippledUnderline","","",15,null],[13,"SquigglyUnderline","","",15,null],[4,"ParseThemeError","","",null,null],[13,"IncorrectUnderlineOption","","",16,null],[13,"IncorrectFontStyle","","",16,null],[13,"IncorrectColor","","",16,null],[13,"IncorrectSyntax","","",16,null],[13,"IncorrectSettings","","",16,null],[13,"UndefinedSettings","","",16,null],[13,"UndefinedScopeSettings","","",16,null],[13,"ColorShemeScopeIsNotObject","","",16,null],[13,"ColorShemeSettingsIsNotObject","","",16,null],[13,"ScopeSelectorIsNotString","","",16,null],[13,"DuplicateSettings","","",16,null],[13,"ScopeParse","","",16,null],[17,"_IMPL_SERIALIZE_FOR_Theme","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Theme","","",null,null],[17,"_IMPL_SERIALIZE_FOR_ThemeSettings","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ThemeSettings","","",null,null],[17,"_IMPL_SERIALIZE_FOR_ThemeItem","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ThemeItem","","",null,null],[17,"_IMPL_SERIALIZE_FOR_UnderlineOption","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_UnderlineOption","","",null,null],[11,"clone","syntect::highlighting","",7,{"inputs":[{"name":"self"}],"output":{"name":"theme"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"theme"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"themesettings"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"themesettings"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"themeitem"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"themeitem"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"underlineoption"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"parsescopeerror"}],"output":{"name":"parsethemeerror"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"underlineoption"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"fontstyle"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"generics":["underlineoption"],"name":"result"}}],[11,"parse_settings","","",15,{"inputs":[{"name":"settings"}],"output":{"generics":["underlineoption"],"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["fontstyle"],"name":"result"}}],[11,"parse_settings","","",6,{"inputs":[{"name":"settings"}],"output":{"generics":["fontstyle"],"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["color"],"name":"result"}}],[11,"parse_settings","","",5,{"inputs":[{"name":"settings"}],"output":{"generics":["color"],"name":"result"}}],[11,"parse_settings","","",4,{"inputs":[{"name":"settings"}],"output":{"generics":["stylemodifier"],"name":"result"}}],[11,"parse_settings","","",9,{"inputs":[{"name":"settings"}],"output":{"generics":["themeitem"],"name":"result"}}],[11,"parse_settings","","",8,{"inputs":[{"name":"settings"}],"output":{"generics":["themesettings"],"name":"result"}}],[11,"parse_settings","","",7,{"inputs":[{"name":"settings"}],"output":{"generics":["theme"],"name":"result"}}],[0,"highlighter","","Iterators and data structures for transforming parsing information into styled text.",null,null],[3,"Highlighter","syntect::highlighting::highlighter","Basically a wrapper around a `Theme` preparing it to be used for highlighting. This is part of the API to preserve the possibility of caching matches of the selectors of the theme on various scope paths or setting up some kind of accelerator structure.",null,null],[12,"theme","","",10,null],[12,"single_selectors","","Cache of the selectors in the theme that are only one scope In most themes this is the majority, hence the usefullness",10,null],[12,"multi_selectors","","",10,null],[3,"HighlightState","","Keeps a stack of scopes and styles as state between highlighting different lines. If you are highlighting an entire file you create one of these at the start and use it all the way to the end.",null,null],[12,"styles","","",11,null],[12,"path","","",11,null],[3,"HighlightIterator","","Highlights a line of parsed code given a `HighlightState` and line of changes from the parser.",null,null],[12,"index","","",12,null],[12,"pos","","",12,null],[12,"changes","","",12,null],[12,"text","","",12,null],[12,"highlighter","","",12,null],[12,"state","","",12,null],[11,"fmt","syntect::highlighting","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"highlightstate"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"highlightstate"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"highlightstate"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Note that the `Highlighter` is not stored, it is used to construct the initial stack of styles. Most of the time you'll want to pass an empty stack as `initial_stack` but see the docs for `HighlightState` for discussion of advanced caching use cases.",11,{"inputs":[{"name":"highlighter"},{"name":"scopestack"}],"output":{"name":"highlightstate"}}],[11,"new","","",12,null],[11,"next","","Yields the next token of text and the associated `Style` to render that text with. the concatenation of the strings in each token will make the original string.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",10,{"inputs":[{"name":"theme"}],"output":{"name":"highlighter"}}],[11,"get_default","","The default style in the absence of any matched rules. Basically what plain text gets highlighted as.",10,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"get_style","","Figures out which scope selector in the theme best matches this scope stack. It only returns any changes to the style that should be applied when the top element is pushed on to the stack. These actually aren't guaranteed to be different than the current style. Basically what this means is that you have to gradually apply styles starting with the default and working your way up the stack in order to get the correct style.",10,null],[11,"get_new_style","","Like get_style but only guarantees returning any new style if the last element of `path` was just pushed on to the stack. Panics if `path` is empty.",10,null],[11,"style_for_stack","","Returns the fully resolved style for the given stack.",10,null],[11,"style_mod_for_stack","","Returns a `StyleModifier` which, if applied to the default style, would generate the fully resolved style for this stack.",10,null],[0,"theme_set","","",null,null],[3,"ThemeSet","syntect::highlighting::theme_set","",null,null],[12,"themes","","",13,null],[17,"_IMPL_SERIALIZE_FOR_ThemeSet","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ThemeSet","","",null,null],[11,"fmt","syntect::highlighting","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"discover_theme_paths","","Returns all the themes found in a folder, good for enumerating before loading one with get_theme",13,{"inputs":[{"name":"p"}],"output":{"generics":["vec","loadingerror"],"name":"result"}}],[11,"get_theme","","Loads a theme given a path to a .tmTheme file",13,{"inputs":[{"name":"p"}],"output":{"generics":["theme","loadingerror"],"name":"result"}}],[11,"load_from_reader","","Loads a theme given a readable stream",13,{"inputs":[{"name":"r"}],"output":{"generics":["theme","loadingerror"],"name":"result"}}],[11,"load_from_folder","","Loads all the themes in a folder",13,{"inputs":[{"name":"p"}],"output":{"generics":["themeset","loadingerror"],"name":"result"}}],[0,"parsing","syntect","Everything about parsing text into text annotated with scopes. The most important struct here is `SyntaxSet`, check out the docs for that.",null,null],[3,"SCOPE_REPO","syntect::parsing","The global scope repo, exposed in case you want to minimize locking and unlocking. Shouldn't be necessary for you to use. See the `ScopeRepository` docs.",null,null],[12,"__private_field","","",20,null],[3,"Scope","","A hierarchy of atoms with semi-standardized names used to accord semantic information to a specific piece of text. Generally written with the atoms separated by dots. By convention atoms are all lowercase alphanumeric.",null,null],[12,"a","","",21,null],[12,"b","","",21,null],[3,"ScopeRepository","","The structure used to keep track of the mapping between scope atom numbers and their string names. It is only exposed in case you want to lock `SCOPE_REPO` and then allocate a whole bunch of scopes at once without thrashing the lock. It is recommended you just use `Scope::new()`",null,null],[12,"atoms","","",22,null],[12,"atom_index_map","","",22,null],[3,"ScopeStack","","A stack/sequence of scopes. This is used both to represent hierarchies for a given token of text, as well as in `ScopeSelectors`. Press `ctrl+shift+p` in Sublime Text to see the scope stack at a given point. Also see the TextMate docs.",null,null],[12,"clear_stack","","",23,null],[12,"scopes","","",23,null],[3,"MatchPower","","Wrapper to get around the fact Rust f64 doesn't implement Ord and there is no non-NaN float type",null,null],[12,"0","","",24,null],[4,"ParseScopeError","","Not all strings are valid scopes",null,null],[13,"TooLong","","Due to a limitation of the current optimized internal representation scopes can be at most 8 atoms long",25,null],[13,"TooManyAtoms","","The internal representation uses 16 bits per atom, so if all scopes ever used by the program have more than 2^16-2 atoms, things break",25,null],[4,"ClearAmount","","",null,null],[13,"TopN","","",26,null],[13,"All","","",26,null],[4,"ScopeStackOp","","A change to a scope stack. Generally `Noop` is only used internally and you don't have to worry about ever getting one back from a public function. Use `ScopeStack#apply` to apply this change.",null,null],[13,"Push","","",27,null],[13,"Pop","","",27,null],[13,"Clear","","used for the clear_scopes feature",27,null],[13,"Restore","","restores cleared scopes",27,null],[13,"Noop","","",27,null],[4,"BasicScopeStackOp","","Used for `ScopeStack::apply_with_hook`",null,null],[13,"Push","","",28,null],[13,"Pop","","",28,null],[0,"scope","","",null,null],[3,"SCOPE_REPO","syntect::parsing::scope","The global scope repo, exposed in case you want to minimize locking and unlocking. Shouldn't be necessary for you to use. See the `ScopeRepository` docs.",null,null],[12,"__private_field","","",20,null],[3,"Scope","","A hierarchy of atoms with semi-standardized names used to accord semantic information to a specific piece of text. Generally written with the atoms separated by dots. By convention atoms are all lowercase alphanumeric.",null,null],[12,"a","","",21,null],[12,"b","","",21,null],[3,"ScopeRepository","","The structure used to keep track of the mapping between scope atom numbers and their string names. It is only exposed in case you want to lock `SCOPE_REPO` and then allocate a whole bunch of scopes at once without thrashing the lock. It is recommended you just use `Scope::new()`",null,null],[12,"atoms","","",22,null],[12,"atom_index_map","","",22,null],[3,"ScopeStack","","A stack/sequence of scopes. This is used both to represent hierarchies for a given token of text, as well as in `ScopeSelectors`. Press `ctrl+shift+p` in Sublime Text to see the scope stack at a given point. Also see the TextMate docs.",null,null],[12,"clear_stack","","",23,null],[12,"scopes","","",23,null],[3,"MatchPower","","Wrapper to get around the fact Rust f64 doesn't implement Ord and there is no non-NaN float type",null,null],[12,"0","","",24,null],[4,"ParseScopeError","","Not all strings are valid scopes",null,null],[13,"TooLong","","Due to a limitation of the current optimized internal representation scopes can be at most 8 atoms long",25,null],[13,"TooManyAtoms","","The internal representation uses 16 bits per atom, so if all scopes ever used by the program have more than 2^16-2 atoms, things break",25,null],[4,"ClearAmount","","",null,null],[13,"TopN","","",26,null],[13,"All","","",26,null],[4,"ScopeStackOp","","A change to a scope stack. Generally `Noop` is only used internally and you don't have to worry about ever getting one back from a public function. Use `ScopeStack#apply` to apply this change.",null,null],[13,"Push","","",27,null],[13,"Pop","","",27,null],[13,"Clear","","used for the clear_scopes feature",27,null],[13,"Restore","","restores cleared scopes",27,null],[13,"Noop","","",27,null],[4,"BasicScopeStackOp","","Used for `ScopeStack::apply_with_hook`",null,null],[13,"Push","","",28,null],[13,"Pop","","",28,null],[5,"pack_as_u16s","","",null,null],[7,"SCOPE_REPO","","",null,null],[17,"ATOM_LEN_BITS","","Multiplier on the power of 2 for MatchPower. Only useful if you compute your own MatchPower scores.",null,null],[17,"_IMPL_SERIALIZE_FOR_ScopeStack","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ScopeStack","","",null,null],[17,"_IMPL_SERIALIZE_FOR_ClearAmount","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_ClearAmount","","",null,null],[11,"deref","syntect::parsing","",20,{"inputs":[{"name":"self"}],"output":{"name":"mutex"}}],[11,"initialize","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",21,null],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"ordering"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"scope"}}],[11,"hash","","",21,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"scopestack"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"scopestack"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"scopestack"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"scopestack"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"clearamount"}}],[11,"assert_receiver_is_total_eq","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"clearamount"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"clearamount"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"scopestackop"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"scopestackop"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"scopestackop"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",27,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"basicscopestackop"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"basicscopestackop"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"basicscopestackop"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",28,null],[11,"new","","",22,{"inputs":[],"output":{"name":"scoperepository"}}],[11,"build","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["scope","parsescopeerror"],"name":"result"}}],[11,"to_string","","",22,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"string"}}],[11,"atom_to_index","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"atom_str","","Return the string for an atom number returned by `Scope#atom_at`",22,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"str"}}],[11,"new","","Parses a `Scope` from a series of atoms separated by `.` characters. Example: `Scope::new(\"meta.rails.controller\")`",21,{"inputs":[{"name":"str"}],"output":{"generics":["scope","parsescopeerror"],"name":"result"}}],[11,"atom_at","","Gets the atom number at a given index. I can't think of any reason you'd find this useful. It is used internally for turning a scope back into a string.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u16"}}],[11,"missing_atoms","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"len","","return the number of atoms in the scope",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_empty","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"build_string","","returns a string representation of this scope, this requires locking a global repo and shouldn't be done frequently.",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_prefix_of","","Tests if this scope is a prefix of another scope. Note that the empty scope is always a prefix.",21,{"inputs":[{"name":"self"},{"name":"scope"}],"output":{"name":"bool"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"generics":["scope","parsescopeerror"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"matchpower"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"matchpower"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"scopestack"}}],[11,"from_vec","","Note: creating a ScopeStack with this doesn't contain information on what to do when clear_scopes contexts end.",23,{"inputs":[{"generics":["scope"],"name":"vec"}],"output":{"name":"scopestack"}}],[11,"push","","",23,{"inputs":[{"name":"self"},{"name":"scope"}],"output":null}],[11,"pop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"apply","","Modifies this stack according to the operation given use this to create a stack from a `Vec` of changes given by the parser.",23,{"inputs":[{"name":"self"},{"name":"scopestackop"}],"output":null}],[11,"apply_with_hook","","Modifies this stack according to the operation given and calls the hook for each basic operation. Like `apply` but calls `hook` for every basic modification (as defined by `BasicScopeStackOp`). Use this to do things only when the scope stack changes.",23,{"inputs":[{"name":"self"},{"name":"scopestackop"},{"name":"f"}],"output":null}],[11,"debug_print","","Prints out each scope in the stack separated by spaces and then a newline. Top of the stack at the end.",23,{"inputs":[{"name":"self"},{"name":"scoperepository"}],"output":null}],[11,"bottom_n","","Return the bottom n elements of the stack. Equivalent to &scopes[0..n] on a Vec",23,null],[11,"as_slice","","Return a slice of the scopes in this stack",23,null],[11,"len","","Return the height/length of this stack",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"does_match","","checks if this stack as a selector matches the given stack if so it returns a match score, higher match scores are stronger matches. Scores are ordered according to the rules found at https://manual.macromates.com/en/scope_selectors",23,null],[11,"from_str","","Parses a scope stack from a whitespace separated list of scopes.",23,{"inputs":[{"name":"str"}],"output":{"generics":["scopestack","parsescopeerror"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[7,"SCOPE_REPO","","",null,null],[17,"ATOM_LEN_BITS","","Multiplier on the power of 2 for MatchPower. Only useful if you compute your own MatchPower scores.",null,null],[0,"util","syntect","Convenient utility methods, mostly for printing `syntect` data structures prettily to the terminal.",null,null],[5,"as_24_bit_terminal_escaped","syntect::util","Formats the styled fragments using 24-bit colour terminal escape codes. Meant for debugging and testing. It's currently fairly inefficient in its use of escape codes.",null,null],[11,"fmt","syntect","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"settingserror"}],"output":{"name":"loadingerror"}}],[11,"from","","",0,{"inputs":[{"name":"ioerror"}],"output":{"name":"loadingerror"}}],[11,"from","","",0,{"inputs":[{"name":"parsethemeerror"}],"output":{"name":"loadingerror"}}],[11,"get","syntect::highlighting::settings","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"fmt","","Display a JSON value as a string.",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","Convert string slice to `Value`",17,{"inputs":[{"name":"str"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"value"}}],[11,"from","","Convert a `Vec` to `Value`",17,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","Convert map (with string keys) to `Value`",17,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","Convert `String` to `Value`",17,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","Convert a slice to `Value`",17,null],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","Convert 64-bit floating point number to `Value`",17,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","Convert 32-bit floating point number to `Value`",17,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","Convert boolean to `Value`",17,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","Convert copy-on-write string to `Value`",17,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"value"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"from_iter","","Convert an iteratable type to a `Value`",17,{"inputs":[{"name":"i"}],"output":{"name":"value"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"deserialize","","",17,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}]],"paths":[[4,"LoadingError"],[3,"ScopeSelector"],[3,"ScopeSelectors"],[3,"Style"],[3,"StyleModifier"],[3,"Color"],[3,"FontStyle"],[3,"Theme"],[3,"ThemeSettings"],[3,"ThemeItem"],[3,"Highlighter"],[3,"HighlightState"],[3,"HighlightIterator"],[3,"ThemeSet"],[4,"SettingsError"],[4,"UnderlineOption"],[4,"ParseThemeError"],[4,"Settings"],[8,"FromSettings"],[8,"ParseSettings"],[3,"SCOPE_REPO"],[3,"Scope"],[3,"ScopeRepository"],[3,"ScopeStack"],[3,"MatchPower"],[4,"ParseScopeError"],[4,"ClearAmount"],[4,"ScopeStackOp"],[4,"BasicScopeStackOp"]]};
searchIndex["take_mut"] = {"doc":"This crate provides several functions for handling `&mut T` including `take()`.","items":[[5,"take","take_mut","Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":null}],[5,"take_or_recover","","Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.",null,{"inputs":[{"name":"t"},{"name":"r"},{"name":"f"}],"output":null}],[0,"scoped","","This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure. The references are all required to outlive the closure.",null,null],[3,"Scope","take_mut::scoped","Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.",null,null],[12,"active_holes","","",0,null],[12,"marker","","",0,null],[3,"Hole","","A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.",null,null],[12,"active_holes","","",1,null],[12,"hole","","",1,null],[12,"phantom","","",1,null],[12,"recovery","","",1,null],[5,"scope","","Main function to create a `Scope`.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"take_or_recover","","Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.",0,null],[11,"take","","Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.",0,null],[11,"fill","","Fills the Hole.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Scope"],[3,"Hole"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect which terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[13,"__Nonexhaustive","","Please don't match against this - if you do, we can't promise we won't break your crate with a semver-compliant version bump.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"generics":["box"],"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"generics":["box"],"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[12,"num_colors","","",3,null],[12,"out","","",3,null],[12,"ti","","",3,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",4,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",4,null],[13,"ShortNames","","The names section of the file was empty",4,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",4,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",4,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",4,null],[13,"InvalidLength","","The length of some field was not >= -1.",4,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",4,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",4,null],[5,"is_ansi","","Returns true if the named terminal supports basic ANSI escape codes.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"cap_for_attr","","",null,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"generics":["pathbuf"],"name":"option"}}],[0,"parser","term::terminfo","`TermInfo` format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"read_le_u16","term::terminfo::parser::compiled","",null,{"inputs":[{"name":"read"}],"output":{"generics":["u16"],"name":"result"}}],[5,"read_byte","","",null,{"inputs":[{"name":"read"}],"output":{"generics":["u8"],"name":"result"}}],[5,"parse","","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"generics":["terminfo"],"name":"result"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"names","term::terminfo::parser","",null,null],[7,"boolfnames","term::terminfo::parser::names","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[12,"sta","","Static variables A-Z",5,null],[12,"dyn","","Dynamic variables a-z",5,null],[3,"Flags","","",null,null],[12,"width","","",6,null],[12,"precision","","",6,null],[12,"alternate","","",6,null],[12,"left","","",6,null],[12,"sign","","",6,null],[12,"space","","",6,null],[4,"States","","",null,null],[13,"Nothing","","",7,null],[13,"Percent","","",7,null],[13,"SetVar","","",7,null],[13,"GetVar","","",7,null],[13,"PushParam","","",7,null],[13,"CharConstant","","",7,null],[13,"CharClose","","",7,null],[13,"IntConstant","","",7,null],[13,"FormatPattern","","",7,null],[13,"SeekIfElse","","",7,null],[13,"SeekIfElsePercent","","",7,null],[13,"SeekIfEnd","","",7,null],[13,"SeekIfEndPercent","","",7,null],[4,"FormatState","","",null,null],[13,"Flags","","",8,null],[13,"Width","","",8,null],[13,"Precision","","",8,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Number","","",9,null],[13,"Words","","",9,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",10,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator wanted.",10,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",10,null],[13,"InvalidVariableName","","An invalid variable name was used.",10,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",10,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",10,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",10,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",10,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",10,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",10,null],[4,"FormatOp","","",null,null],[13,"Digit","","",11,null],[13,"Octal","","",11,null],[13,"Hex","","",11,null],[13,"HEX","","",11,null],[13,"String","","",11,null],[5,"expand","","Expand a parameterized capability",null,null],[5,"format","","",null,{"inputs":[{"name":"param"},{"name":"formatop"},{"name":"flags"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"states"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"states"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"states"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"formatstate"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"formatstate"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"variables"}}],[11,"new","","Return a new zero-initialized Variables",5,{"inputs":[],"output":{"name":"variables"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"flags"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"formatop"}}],[11,"from_char","","",11,{"inputs":[{"name":"char"}],"output":{"name":"formatop"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"terminfo"}}],[11,"from_env","","Create a `TermInfo` based on current environment.",2,{"inputs":[],"output":{"generics":["terminfo"],"name":"result"}}],[11,"from_name","","Create a `TermInfo` for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"from_path","","Parse the given `TermInfo`.",2,{"inputs":[{"name":"p"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"_from_path","","",2,{"inputs":[{"name":"path"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"apply_cap","","Retrieve a capability `cmd` and expand it with `params`, writing result to `out`.",2,null],[11,"reset","","Write the reset string to `out`.",2,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"terminfoterminal"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fg","","",3,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",3,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_reset","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_color","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor_up","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_line","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"carriage_return","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",3,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",3,{"inputs":[{"name":"t"}],"output":{"generics":["terminfoterminal"],"name":"option"}}],[11,"dim_if_necessary","","",3,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"color"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",12,null],[10,"fg","","Sets the foreground color to the given color.",12,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",12,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is supported and was sent to the terminal, or `Err(e)` if there was an error or the attribute wasn't supported.",12,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",12,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",12,null],[10,"get_mut","","Gets a mutable reference to the stream inside",12,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",12,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"assert_receiver_is_total_eq","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[3,"TerminfoTerminal"],[4,"Error"],[3,"Variables"],[3,"Flags"],[4,"States"],[4,"FormatState"],[4,"Param"],[4,"Error"],[4,"FormatOp"],[8,"Terminal"]]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[12,"wrapper","","",1,null],[12,"wrap_iter_impl","","",1,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[12,"wrapper","","",2,null],[12,"wrap_iter_impl","","",2,null],[3,"WrapIterImpl","","",null,null],[12,"source","","",3,null],[12,"char_indices","","",3,null],[12,"is_next_first","","",3,null],[12,"start","","",3,null],[12,"split","","",3,null],[12,"split_len","","",3,null],[12,"line_width","","",3,null],[12,"line_width_at_split","","",3,null],[12,"in_whitespace","","",3,null],[12,"finished","","",3,null],[5,"cow_add_assign","","Backport of the `AddAssign` trait implementation from Rust 1.14.",null,{"inputs":[{"name":"cow"},{"name":"str"}],"output":null}],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["cow"],"name":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[17,"NBSP","","A non-breaking space.",null,null],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"nohyphenation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hyphensplitter"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapper"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"inputs":[{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cow"],"name":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"intowrapiter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"wrapper"},{"name":"str"}],"output":{"name":"wrapiterimpl"}}],[11,"create_result_line","","",3,{"inputs":[{"name":"self"},{"name":"wrapper"}],"output":{"generics":["str"],"name":"cow"}}],[11,"impl_next","","",3,{"inputs":[{"name":"self"},{"name":"wrapper"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"Wrapper"],[3,"IntoWrapIter"],[3,"WrapIter"],[3,"WrapIterImpl"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_internal","","",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[12,"table","","",0,null],[12,"lock","","",0,null],[12,"marker","","",0,null],[3,"Table","","",null,null],[12,"entries","","",1,null],[12,"hash_bits","","",1,null],[12,"prev","","",1,null],[3,"TableEntry","","",null,null],[12,"owner","","",2,null],[12,"data","","",2,null],[3,"RawIter","","",null,null],[12,"remaining","","",3,null],[12,"index","","",3,null],[12,"table","","",3,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[12,"raw","","",4,null],[12,"marker","","",4,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[12,"raw","","",5,null],[12,"_thread_local","","",5,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[12,"owner","","",6,null],[12,"local","","",6,null],[12,"global","","",6,null],[5,"unreachable","","",null,null],[5,"hash","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[8,"UncheckedOptionExt","","",null,null],[10,"unchecked_unwrap","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"BoxExt","","",null,null],[10,"into_raw","","",8,null],[10,"from_raw","","",8,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tableentry"}}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"lookup","","",0,{"inputs":[{"name":"usize"},{"name":"table"}],"output":{"generics":["unsafecell"],"name":"option"}}],[11,"get_fast","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_slow","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"table"}],"output":{"name":"option"}}],[11,"insert","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"box"},{"name":"bool"}],"output":{"name":"t"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"default","","",6,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",6,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"get_or_try_slow","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",6,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"Table"],[3,"TableEntry"],[3,"RawIter"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"],[8,"UncheckedOptionExt"],[8,"BoxExt"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[12,"secs","","",0,null],[12,"nanos","","",0,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[12,"0","","",1,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",2,null],[12,"nsec","","",2,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[12,"0","","",3,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[12,"0","","",4,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",5,null],[12,"tm_min","","Minutes after the hour - [0, 59]",5,null],[12,"tm_hour","","Hours after midnight - [0, 23]",5,null],[12,"tm_mday","","Day of the month - [1, 31]",5,null],[12,"tm_mon","","Months since January - [0, 11]",5,null],[12,"tm_year","","Years since 1900",5,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",5,null],[12,"tm_yday","","Days since January 1 - [0, 365]",5,null],[12,"tm_isdst","","Daylight Saving Time flag.",5,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",5,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",5,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[12,"tm","","",6,null],[12,"format","","",6,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",7,null],[13,"InvalidMinute","","",7,null],[13,"InvalidHour","","",7,null],[13,"InvalidDay","","",7,null],[13,"InvalidMonth","","",7,null],[13,"InvalidYear","","",7,null],[13,"InvalidDayOfWeek","","",7,null],[13,"InvalidDayOfMonth","","",7,null],[13,"InvalidDayOfYear","","",7,null],[13,"InvalidZoneOffset","","",7,null],[13,"InvalidTime","","",7,null],[13,"InvalidSecondsSinceEpoch","","",7,null],[13,"MissingFormatConverter","","",7,null],[13,"InvalidFormatSpecifier","","",7,null],[13,"UnexpectedCharacter","","",7,null],[4,"Fmt","","",null,null],[13,"Str","","",8,null],[13,"Rfc3339","","",8,null],[13,"Ctime","","",8,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"validate_format","","",null,{"inputs":[{"name":"tmfmt"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[0,"display","","",null,null],[5,"is_leap_year","time::display","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[5,"days_in_year","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iso_week_days","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"iso_week","","",null,{"inputs":[{"name":"formatter"},{"name":"char"},{"name":"tm"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"formatter"},{"name":"char"},{"name":"tm"}],"output":{"name":"result"}}],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"fmt","time","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"duration","","Temporal quantification",null,null],[3,"Duration","time::duration","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[12,"secs","","",0,null],[12,"nanos","","",0,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[12,"0","","",1,null],[5,"div_mod_floor_64","","",null,null],[5,"div_floor_64","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"mod_floor_64","","",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"div_rem_64","","",null,null],[17,"NANOS_PER_MICRO","","The number of nanoseconds in a microsecond.",null,null],[17,"NANOS_PER_MILLI","","The number of nanoseconds in a millisecond.",null,null],[17,"NANOS_PER_SEC","","The number of nanoseconds in seconds.",null,null],[17,"MICROS_PER_SEC","","The number of microseconds per second.",null,null],[17,"MILLIS_PER_SEC","","The number of milliseconds per second.",null,null],[17,"SECS_PER_MINUTE","","The number of seconds in a minute.",null,null],[17,"SECS_PER_HOUR","","The number of seconds in an hour.",null,null],[17,"SECS_PER_DAY","","The number of (non-leap) seconds in days.",null,null],[17,"SECS_PER_WEEK","","The number of (non-leap) seconds in a week.",null,null],[17,"MIN","","The minimum possible `Duration`: `i64::MIN` milliseconds.",null,null],[17,"MAX","","The maximum possible `Duration`: `i64::MAX` milliseconds.",null,null],[11,"clone","time","",0,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"nanos_mod_sec","","Returns the number of nanoseconds such that `nanos_mod_sec() + num_seconds() * NANOS_PER_SEC` is the total number of nanoseconds in the duration.",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"parse","","",null,null],[5,"strptime","time::parse","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"},{"name":"char"},{"name":"tm"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"match_str","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"match_strs","","",null,null],[5,"match_digits","","",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["i32"],"name":"option"}}],[5,"match_digits_i64","","",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["i64"],"name":"option"}}],[5,"match_fractional_seconds","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"match_digits_in_range","","",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"bool"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[5,"parse_char","","",null,{"inputs":[{"name":"str"},{"name":"char"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"sys","time","",null,null],[0,"inner","time::sys","",null,null],[5,"rust_tm_to_tm","time::sys::inner","",null,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":null}],[5,"tm_to_rust_tm","","",null,{"inputs":[{"name":"tm"},{"name":"i32"},{"name":"tm"}],"output":null}],[5,"time_to_utc_tm","","",null,{"inputs":[{"name":"i64"},{"name":"tm"}],"output":null}],[5,"time_to_local_tm","","",null,{"inputs":[{"name":"i64"},{"name":"tm"}],"output":null}],[5,"utc_tm_to_time","","",null,{"inputs":[{"name":"tm"}],"output":{"name":"i64"}}],[5,"local_tm_to_time","","",null,{"inputs":[{"name":"tm"}],"output":{"name":"i64"}}],[0,"unix","","",null,null],[3,"SteadyTime","time::sys::inner::unix","",null,null],[12,"t","","",9,null],[5,"get_time","","",null,null],[5,"get_precise_ns","","",null,{"inputs":[],"output":{"name":"u64"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"now","","",9,{"inputs":[],"output":{"name":"steadytime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[7,"NSEC_PER_SEC","time","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"new","","",2,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",3,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",3,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",4,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"add","","The resulting Tm is in UTC.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",5,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",5,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",5,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",5,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",5,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",5,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",5,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",5,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Duration"],[3,"OutOfRangeError"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[3,"TmFmt"],[4,"ParseError"],[4,"Fmt"],[3,"SteadyTime"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[0,"tables","unicode_width","",null,null],[0,"charwidth","unicode_width::tables","",null,null],[5,"bsearch_range_value_table","unicode_width::tables::charwidth","",null,null],[5,"width","","",null,{"inputs":[{"name":"char"},{"name":"bool"}],"output":{"generics":["usize"],"name":"option"}}],[17,"charwidth_table","","",null,null],[17,"UNICODE_VERSION","unicode_width::tables","The version of Unicode that this version of unicode-width is based on.",null,null],[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[0,"tables","unicode_xid","",null,null],[5,"bsearch_range_table","unicode_xid::tables","",null,null],[0,"derived_property","","",null,null],[5,"XID_Continue","unicode_xid::tables::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"XID_Start","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"XID_Continue_table","","",null,null],[17,"XID_Start_table","","",null,null],[17,"UNICODE_VERSION","unicode_xid::tables","The version of Unicode that this version of unicode-xid is based on.",null,null],[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[12,"range_stack","","",1,null],[3,"ScalarRange","","",null,null],[12,"start","","",2,null],[12,"end","","",2,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",3,null],[13,"Two","","Two successive byte ranges.",3,null],[13,"Three","","Three successive byte ranges.",3,null],[13,"Four","","Four successive byte ranges.",3,null],[5,"max_scalar_value","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u32"}}],[0,"char_utf8","","",null,null],[5,"encode_utf8","utf8_ranges::char_utf8","",null,null],[17,"TAG_CONT","","",null,null],[17,"TAG_TWO_B","","",null,null],[17,"TAG_THREE_B","","",null,null],[17,"TAG_FOUR_B","","",null,null],[17,"MAX_ONE_B","","",null,null],[17,"MAX_TWO_B","","",null,null],[17,"MAX_THREE_B","","",null,null],[17,"MAX_UTF8_BYTES","utf8_ranges","",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"assert_receiver_is_total_eq","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"from_encoded_range","","Creates a new UTF-8 sequence from the encoded bytes of a scalar value range.",3,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",3,null],[11,"len","","Returns the number of byte ranges in this sequence.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"new","","",0,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",1,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"reset","","reset resets the scalar value range. Any existing state is cleared, but resources may be reused.",1,{"inputs":[{"name":"self"},{"name":"char"},{"name":"char"}],"output":null}],[11,"push","","",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"split","","split splits this range if it overlaps with a surrogate codepoint.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_valid","","is_valid returns true if and only if start <= end.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ascii","","as_ascii returns this range as a Utf8Range if and only if all scalar values in this range can be encoded as a single byte.",2,{"inputs":[{"name":"self"}],"output":{"generics":["utf8range"],"name":"option"}}],[11,"is_ascii","","is_ascii returns true if the range is ASCII only (i.e., takes a single byte to encode any scalar value).",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"encode","","encode writes the UTF-8 encoding of the start and end of this range to the corresponding destination slices.",2,null]],"paths":[[3,"Utf8Range"],[3,"Utf8Sequences"],[3,"ScalarRange"],[4,"Utf8Sequence"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[0,"coreprovider","","",null,null],[0,"fmt","void::coreprovider","Utilities for formatting and printing strings.",null,null],[4,"Alignment","void::coreprovider::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",0,null],[13,"Right","","Indication that contents should be right-aligned.",0,null],[13,"Center","","Indication that contents should be center-aligned.",0,null],[13,"Unknown","","No alignment was requested.",0,null],[0,"rt","","",null,null],[0,"v1","void::coreprovider::fmt::rt","This is an internal module used by the ifmt! runtime. These structures are emitted to static arrays to precompile format strings ahead of time.",null,null],[3,"Argument","void::coreprovider::fmt::rt::v1","",null,null],[12,"position","","",1,null],[12,"format","","",1,null],[3,"FormatSpec","","",null,null],[12,"fill","","",2,null],[12,"align","","",2,null],[12,"flags","","",2,null],[12,"precision","","",2,null],[12,"width","","",2,null],[4,"Alignment","","Possible alignments that can be requested as part of a formatting directive.",null,null],[13,"Left","","Indication that contents should be left-aligned.",3,null],[13,"Right","","Indication that contents should be right-aligned.",3,null],[13,"Center","","Indication that contents should be center-aligned.",3,null],[13,"Unknown","","No alignment was requested.",3,null],[4,"Count","","",null,null],[13,"Is","","",4,null],[13,"Param","","",4,null],[13,"NextParam","","",4,null],[13,"Implied","","",4,null],[4,"Position","","",null,null],[13,"Next","","",5,null],[13,"At","","",5,null],[6,"Result","void::coreprovider::fmt","The type returned by formatter methods.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",6,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",6,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",null,null],[12,"flags","","",7,null],[12,"fill","","",7,null],[12,"align","","",7,null],[12,"width","","",7,null],[12,"precision","","",7,null],[12,"buf","","",7,null],[12,"curarg","","",7,null],[12,"args","","",7,null],[3,"ArgumentV1","","This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.",null,null],[12,"value","","",8,null],[12,"formatter","","",8,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",null,null],[12,"pieces","","",9,null],[12,"fmt","","",9,null],[12,"args","","",9,null],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",19,null],[12,"result","","",19,null],[12,"has_fields","","",19,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",20,null],[12,"result","","",20,null],[12,"has_fields","","",20,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",21,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"inner","","",22,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[12,"fmt","","",23,null],[12,"result","","",23,null],[12,"fields","","",23,null],[12,"empty_name","","",23,null],[0,"cmp","void::coreprovider","Functionality for ordering and comparison.",null,null],[8,"PartialEq","void::coreprovider::cmp","Trait for equality comparisons which are partial equivalence relations.",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",24,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",24,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",null,null],[11,"assert_receiver_is_total_eq","","",25,null],[3,"AssertParamIsEq","","",null,null],[12,"_field","","",26,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",27,null],[13,"Equal","","An ordering where a compared value is equal [to another].",27,null],[13,"Greater","","An ordering where a compared value is greater [than another].",27,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",28,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"max","","Compares and returns the maximum of two values.",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compares and returns the minimum of two values.",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compares and returns the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compares and returns the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"ResultVoidExt","void","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",31,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",32,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"clone","void::coreprovider::cmp","",27,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","void::coreprovider::fmt","",9,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"partial_cmp","void::coreprovider::cmp","",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","void::coreprovider::cmp","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"ordering"}}],[11,"cmp","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"ordering"}}],[11,"assert_receiver_is_total_eq","void::coreprovider::cmp","",28,null],[11,"assert_receiver_is_total_eq","void::coreprovider::fmt","",34,null],[11,"eq","void::coreprovider::cmp","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"eq","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"eq","void::coreprovider::cmp","",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","void::coreprovider::fmt","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","void::coreprovider::cmp","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","void::coreprovider::fmt","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","",7,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","void::coreprovider::cmp","",27,null],[11,"hash","void::coreprovider::fmt","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"error"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",7,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",7,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"flags","","Flags for formatting",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",7,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",7,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",7,{"inputs":[{"name":"self"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",7,{"inputs":[{"name":"self"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",7,{"inputs":[{"name":"self"}],"output":{"name":"debugmap"}}],[11,"new_v1","","When using the format_args!() macro, this function is used to generate the Arguments structure.",9,null],[11,"new_v1_formatted","","This function is used to specify nonstandard formatting parameters. The `pieces` array must be at least as long as `fmt` to construct a valid Arguments structure. Also, any `Count` within `fmt` that is `CountIsParam` or `CountIsNextParam` has to point to an argument created with `argumentusize`. However, failing to do so doesn't cause unsafety, but will ignore invalid .",9,null],[11,"estimated_capacity","","Estimates the length of the formatted text.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"entry","","Adds a new entry to the map output.",19,{"inputs":[{"name":"self"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",19,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",21,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",21,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",21,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"entry","","Adds a new entry to the set output.",22,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",22,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",22,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",23,{"inputs":[{"name":"self"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"reverse","void::coreprovider::cmp","Reverses the `Ordering`.",27,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"then","","Chains two orderings.",27,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"then_with","","Chains the ordering with the given function.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}]],"paths":[[4,"Alignment"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[8,"Write"],[3,"Formatter"],[3,"ArgumentV1"],[3,"Arguments"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"DebugMap"],[3,"DebugStruct"],[3,"DebugList"],[3,"DebugSet"],[3,"DebugTuple"],[8,"PartialEq"],[8,"Eq"],[3,"AssertParamIsEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"],[3,"Error"]]};
searchIndex["walkdir"] = {"doc":"Crate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",null,null],[12,"opts","","",0,null],[12,"root","","",0,null],[3,"WalkDirOptions","","",null,null],[12,"follow_links","","",1,null],[12,"max_open","","",1,null],[12,"min_depth","","",1,null],[12,"max_depth","","",1,null],[12,"sorter","","",1,null],[12,"contents_first","","",1,null],[3,"IntoIter","","An iterator for recursively descending into a directory.",null,null],[12,"opts","","Options specified in the builder. Depths, max fds, etc.",2,null],[12,"start","","The start path.",2,null],[12,"stack_list","","A stack of open (up to max fd) or closed handles to directories. An open handle is a plain [`fs::ReadDir`] while a closed handle is a `Vec<fs::DirEntry>` corresponding to the as-of-yet consumed entries.",2,null],[12,"stack_path","","A stack of file paths.",2,null],[12,"oldest_opened","","An index into `stack_list` that points to the oldest open directory handle. If the maximum fd limit is reached and a new directory needs to be read, the handle at this index is closed before the new directory is opened.",2,null],[12,"depth","","The current depth of iteration (the length of the stack at the beginning of each iteration).",2,null],[12,"deferred_dirs","","A list of DirEntries corresponding to directories, that are yielded after their contents has been fully yielded. This is only used when `contents_first` is enabled.",2,null],[3,"Ancestor","","An ancestor is an item in the directory tree traversed by walkdir, and is used to check for loops in the tree when traversing symlinks.",null,null],[12,"path","","The path of this ancestor.",3,null],[3,"DirEntry","","A directory entry.",null,null],[12,"path","","The path as reported by the [`fs::ReadDir`] iterator (even if it's a symbolic link).",4,null],[12,"ty","","The file type. Necessary for recursive iteration, so store it.",4,null],[12,"follow_link","","Is set when this entry was created from a symbolic link and the user excepts the iterator to follow symbolic links.",4,null],[12,"depth","","The depth at which this entry was generated relative to the root.",4,null],[12,"ino","","The underlying inode number (Unix only).",4,null],[3,"FilterEntry","","A recursive directory iterator that skips entries.",null,null],[12,"it","","",5,null],[12,"predicate","","",5,null],[3,"Error","","An error produced by recursively walking a directory.",null,null],[12,"depth","","",6,null],[12,"inner","","",6,null],[4,"DirList","","A sequence of unconsumed directory entries.",null,null],[13,"Opened","","An opened handle.",7,null],[12,"depth","walkdir::DirList","",7,null],[12,"it","","",7,null],[13,"Closed","walkdir","A closed handle.",7,null],[4,"ErrorInner","","",null,null],[13,"Io","","",8,null],[12,"path","walkdir::ErrorInner","",8,null],[12,"err","","",8,null],[13,"Loop","walkdir","",8,null],[12,"ancestor","walkdir::ErrorInner","",8,null],[12,"child","","",8,null],[0,"unix","walkdir","",null,null],[8,"DirEntryExt","walkdir::unix","Unix-specific extension methods for `walkdir::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"ino","walkdir","Returns the underlying `d_ino` field in the contained `dirent` structure.",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[6,"Result","","A result type for walkdir operations.",null,null],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a builder for a recursive directory iterator starting at the file path `root`. If `root` is a directory, then it is the first item yielded by the iterator. If `root` is a file, then it is the first and only item yielded by the iterator. If `root` is a symlink, then it is always followed.",0,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used by the iterator.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"sort_by","","Set a function for sorting directory entries.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"contents_first","","Yield a directory's contents before the directory itself. By default, this is disabled.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ancestor from the given directory path.",3,{"inputs":[{"name":"direntry"}],"output":{"generics":["ancestor"],"name":"result"}}],[11,"is_same","","Returns true if and only if the given open file handle corresponds to the same directory as this ancestor.",3,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advances the iterator and returns the next value.",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"skip_current_dir","","Skips the current directory.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filterentry"}}],[11,"handle_entry","","",2,{"inputs":[{"name":"self"},{"name":"direntry"}],"output":{"generics":["result"],"name":"option"}}],[11,"get_deferred_dir","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["direntry"],"name":"option"}}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"direntry"}],"output":{"name":"result"}}],[11,"pop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"follow","","",2,{"inputs":[{"name":"self"},{"name":"direntry"}],"output":{"generics":["direntry"],"name":"result"}}],[11,"check_loop","","",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"skippable","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"close","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"path","","The full path that this entry represents.",4,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from a symbolic link. This is unaffected by the [`follow_links`] setting.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"metadata","","Return the metadata for the file that this entry points to.",4,{"inputs":[{"name":"self"}],"output":{"generics":["metadata"],"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points to.",4,{"inputs":[{"name":"self"}],"output":{"name":"filetype"}}],[11,"file_name","","Return the file name of this entry.",4,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"depth","","Returns the depth at which this entry was created relative to the root.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_entry","","",4,{"inputs":[{"name":"usize"},{"name":"direntry"}],"output":{"generics":["direntry"],"name":"result"}}],[11,"from_link","","",4,{"inputs":[{"name":"usize"},{"name":"pathbuf"}],"output":{"generics":["direntry"],"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"direntry"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advances the iterator and returns the next value.",5,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",5,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filterentry"}}],[11,"skip_current_dir","","Skips the current directory.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","Returns the path associated with this error if one exists.",6,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",6,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"depth","","Returns the depth at which this error occurred relative to the root.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"io_error","","Inspect the underlying [`io::Error`] if there is one.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from_path","","",6,{"inputs":[{"name":"usize"},{"name":"pathbuf"},{"name":"error"}],"output":{"name":"self"}}],[11,"from_entry","","",6,{"inputs":[{"name":"direntry"},{"name":"error"}],"output":{"name":"self"}}],[11,"from_io","","",6,{"inputs":[{"name":"usize"},{"name":"error"}],"output":{"name":"self"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"WalkDir"],[3,"WalkDirOptions"],[3,"IntoIter"],[3,"Ancestor"],[3,"DirEntry"],[3,"FilterEntry"],[3,"Error"],[4,"DirList"],[4,"ErrorInner"],[8,"DirEntryExt"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["xml"] = {"doc":"This crate currently provides an almost XML 1.0/1.1-compliant pull parser.","items":[[3,"ParserConfig","xml","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters. Default is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters. Default is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged. Default is true.",0,null],[12,"extra_entities","","A map of extra entities recognized by the parser. Default is an empty map.",0,null],[12,"ignore_end_of_stream","","Whether or not the parser should ignore the end of stream. Default is false.",0,null],[3,"EmitterConfig","","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\" \"` (two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document. Default is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names. Default is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments, if necessary. Default is true.",1,null],[0,"macros","","Contains several macros used in this crate.",null,null],[0,"name","","Contains XML qualified names manipulation types and functions.",null,null],[3,"Name","xml::name","Represents a qualified XML name.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",2,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",2,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",2,null],[3,"ReprDisplay","","A wrapper around `Name` whose `Display` implementation prints the wrapped name as it is displayed in an XML document.",null,null],[12,"0","","",3,null],[3,"OwnedName","","An owned variant of `Name`.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",4,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",4,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"from","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Returns an owned variant of the qualified name.",2,{"inputs":[{"name":"self"}],"output":{"name":"ownedname"}}],[11,"local","","Returns a new `Name` instance representing plain local name.",2,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"prefixed","","Returns a new `Name` instance with the given local name and prefix.",2,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"name"}}],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and with a namespace URI.",2,{"inputs":[{"name":"str"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"name":"name"}}],[11,"to_repr","","Returns a correct XML representation of this local name and prefix.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"repr_display","","Returns a structure which can be displayed with `std::fmt` machinery to obtain this local name and prefix.",2,{"inputs":[{"name":"self"}],"output":{"name":"reprdisplay"}}],[11,"prefix_repr","","Returns either a prefix of this name or `namespace::NS_NO_PREFIX` constant.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ownedname"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"ownedname"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"ownedname"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",4,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",4,{"inputs":[{"name":"s"}],"output":{"name":"ownedname"}}],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without a prefix and with a namespace URI.",4,{"inputs":[{"name":"s1"},{"name":"s2"},{"name":"option"}],"output":{"name":"ownedname"}}],[11,"prefix_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix` but avoids extra work.",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"namespace_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace` but avoids extra work.",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"name"}],"output":{"name":"ownedname"}}],[11,"from_str","","Parses the given string slice into a qualified name.",4,{"inputs":[{"name":"str"}],"output":{"generics":["ownedname"],"name":"result"}}],[0,"attribute","xml","Contains XML attributes manipulation types and functions.",null,null],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute.",null,null],[12,"name","","Attribute name.",5,null],[12,"value","","Attribute value.",5,null],[3,"OwnedAttribute","","An owned version of an XML attribute.",null,null],[12,"name","","Attribute name.",6,null],[12,"value","","Attribute value.",6,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"assert_receiver_is_total_eq","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Creates an owned attribute out of this borrowed one.",5,{"inputs":[{"name":"self"}],"output":{"name":"ownedattribute"}}],[11,"new","","Creates a borrowed attribute using the provided borrowed name and a borrowed string value.",5,{"inputs":[{"name":"name"},{"name":"str"}],"output":{"name":"attribute"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ownedattribute"}}],[11,"assert_receiver_is_total_eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ownedattribute"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ownedattribute"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","Returns a borrowed `Attribute` out of this owned one.",6,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"new","","Creates a new owned attribute using the provided owned name and an owned string value.",6,{"inputs":[{"name":"ownedname"},{"name":"s"}],"output":{"name":"ownedattribute"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"common","xml","Contains common types and functions used throughout the library.",null,null],[3,"TextPosition","xml::common","Represents a position inside some textual document.",null,null],[12,"row","","Row, counting from 0",7,null],[12,"column","","Column, counting from 0",7,null],[4,"XmlVersion","","XML version enumeration.",null,null],[13,"Version10","","XML version 1.0.",8,null],[13,"Version11","","XML version 1.1.",8,null],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`) as is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_whitespace_str","","Checks whether the given string is compound only by white space characters (`S`) using the previous is_whitespace_char to check all characters of this string",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`) as is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`) as is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[8,"Position","","Get the position in the document corresponding to the object",null,null],[10,"position","","Returns the current position or a position corresponding to the object.",9,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"textposition"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"textposition"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",7,null],[11,"new","","Creates a new position initialized to the beginning of the document",7,{"inputs":[],"output":{"name":"textposition"}}],[11,"advance","","Advances the position in a line",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"advance_to_tab","","Advances the position in a line to the next tab position",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"new_line","","Advances the position to the beginning of the next line",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"position","","",7,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"xmlversion"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"xmlversion"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"escape","xml","Contains functions for performing XML special characters escaping.",null,null],[4,"Value","xml::escape","",null,null],[13,"Char","","",10,null],[13,"Str","","",10,null],[4,"Process","","",null,null],[13,"Borrowed","","",11,null],[13,"Owned","","",11,null],[5,"escape_str","","",null,null],[5,"escape_str_attribute","","Performs escaping of common XML characters inside an attribute value.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[5,"escape_str_pcdata","","Performs escaping of common XML characters inside PCDATA.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"cow"}}],[11,"dispatch_for_attribute","","",10,{"inputs":[{"name":"char"}],"output":{"name":"value"}}],[11,"dispatch_for_pcdata","","",10,{"inputs":[{"name":"char"}],"output":{"name":"value"}}],[11,"process","","",11,null],[11,"into_result","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"namespace","xml","Contains namespace manipulation types and functions.",null,null],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs.",null,null],[12,"0","","",12,null],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces.",null,null],[12,"0","","",13,null],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack.",null,null],[12,"namespaces","","",14,null],[12,"current_namespace","","",14,null],[12,"used_keys","","",14,null],[3,"CheckedTarget","","A wrapper around `NamespaceStack` which implements `Extend` using `put_checked()`.",null,null],[12,"0","","",15,null],[6,"NamespaceMappings","","An alias for iterator type for namespace mappings contained in a namespace.",null,null],[6,"UriMapping","","A type alias for a pair of `(prefix, uri)` values returned by namespace iterators.",null,null],[17,"NS_XMLNS_PREFIX","","Designates prefix for namespace definitions.",null,null],[17,"NS_XMLNS_URI","","Designates the standard URI for `xmlns` prefix.",null,null],[17,"NS_XML_PREFIX","","Designates prefix for a namespace containing several special predefined attributes.",null,null],[17,"NS_XML_URI","","Designates the standard URI for `xml` prefix.",null,null],[17,"NS_NO_PREFIX","","Designates the absence of prefix in a qualified name.",null,null],[17,"NS_EMPTY_URI","","Designates an empty namespace URI, which is equivalent to absence of namespace.",null,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty namespace.",12,{"inputs":[],"output":{"name":"namespace"}}],[11,"is_empty","","Checks whether this namespace is empty.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain anything but default mappings.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Checks whether this namespace mapping contains the given prefix.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"put","","Puts a mapping into this namespace.",12,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u"}],"output":{"name":"bool"}}],[11,"force_put","","Puts a mapping into this namespace forcefully.",12,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u"}],"output":{"generics":["string"],"name":"option"}}],[11,"get","","Queries the namespace for the given prefix.",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"namespacestack"}}],[11,"assert_receiver_is_total_eq","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"namespacestack"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"namespacestack"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty namespace stack.",13,{"inputs":[],"output":{"name":"namespacestack"}}],[11,"default","","Returns a namespace stack with default items in it.",13,{"inputs":[],"output":{"name":"namespacestack"}}],[11,"push_empty","","Adds an empty namespace to the top of this stack.",13,{"inputs":[{"name":"self"}],"output":{"name":"namespacestack"}}],[11,"pop","","Removes the topmost namespace in this stack.",13,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"try_pop","","Removes the topmost namespace in this stack.",13,{"inputs":[{"name":"self"}],"output":{"generics":["namespace"],"name":"option"}}],[11,"peek_mut","","Borrows the topmost namespace mutably, leaving the stack intact.",13,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"peek","","Borrows the topmost namespace immutably, leaving the stack intact.",13,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"put_checked","","Puts a mapping into the topmost namespace if this stack does not already contain one.",13,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u"}],"output":{"name":"bool"}}],[11,"put","","Puts a mapping into the topmost namespace in this stack.",13,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u"}],"output":{"name":"bool"}}],[11,"get","","Performs a search for the given prefix in the whole stack.",13,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["str"],"name":"option"}}],[11,"squash","","Combines this stack of namespaces into a single namespace.",13,{"inputs":[{"name":"self"}],"output":{"name":"namespace"}}],[11,"checked_target","","Returns an object which implements `Extend` using `put_checked()` instead of `put()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"checkedtarget"}}],[11,"iter","","Returns an iterator over all mappings in this namespace stack.",13,{"inputs":[{"name":"self"}],"output":{"name":"namespacestackmappings"}}],[11,"to_next_namespace","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["urimapping"],"name":"option"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"reader","xml","Contains high-level interface for a pull-based XML parser.",null,null],[3,"ParserConfig","xml::reader","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters. Default is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters. Default is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged. Default is true.",0,null],[12,"extra_entities","","A map of extra entities recognized by the parser. Default is an empty map.",0,null],[12,"ignore_end_of_stream","","Whether or not the parser should ignore the end of stream. Default is false.",0,null],[3,"Error","","An XML parsing error.",null,null],[12,"pos","","",16,null],[12,"kind","","",16,null],[3,"EventReader","","A wrapper around an `std::io::Read` instance which provides pull-based XML parsing.",null,null],[12,"source","","",17,null],[12,"parser","","",17,null],[3,"Events","","An iterator over XML events created from some type implementing `Read`.",null,null],[12,"reader","","",18,null],[12,"finished","","",18,null],[4,"XmlEvent","","An element of an XML input stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",19,null],[12,"version","xml::reader::XmlEvent","XML version.",19,null],[12,"encoding","","XML document encoding.",19,null],[12,"standalone","","XML standalone declaration.",19,null],[13,"EndDocument","xml::reader","Denotes to the end of the document stream.",19,null],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",19,null],[12,"name","xml::reader::XmlEvent","Processing instruction target.",19,null],[12,"data","","Processing instruction content.",19,null],[13,"StartElement","xml::reader","Denotes a beginning of an XML element.",19,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",19,null],[12,"attributes","","A list of attributes associated with the element.",19,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",19,null],[13,"EndElement","xml::reader","Denotes an end of an XML element.",19,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",19,null],[13,"CData","xml::reader","Denotes CDATA content.",19,null],[13,"Comment","","Denotes a comment.",19,null],[13,"Characters","","Denotes character data outside of tags.",19,null],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",19,null],[4,"ErrorKind","","",null,null],[13,"Syntax","","",20,null],[13,"Io","","",20,null],[13,"Utf8","","",20,null],[13,"UnexpectedEof","","",20,null],[0,"lexer","","Contains simple lexer for XML documents.",null,null],[3,"Lexer","xml::reader::lexer","`Lexer` is a lexer for XML documents, which implements pull API.",null,null],[12,"pos","","",21,null],[12,"head_pos","","",21,null],[12,"char_queue","","",21,null],[12,"st","","",21,null],[12,"skip_errors","","",21,null],[12,"inside_comment","","",21,null],[12,"inside_token","","",21,null],[12,"eof_handled","","",21,null],[4,"Token","","`Token` represents a single lexeme of an XML document. These lexemes are used to perform actual parsing.",null,null],[13,"ProcessingInstructionStart","","`<?`",22,null],[13,"ProcessingInstructionEnd","","`?>`",22,null],[13,"DoctypeStart","","`<!DOCTYPE",22,null],[13,"OpeningTagStart","","`<`",22,null],[13,"ClosingTagStart","","`</`",22,null],[13,"TagEnd","","`>`",22,null],[13,"EmptyTagEnd","","`/>`",22,null],[13,"CommentStart","","`<!--`",22,null],[13,"CommentEnd","","`-->`",22,null],[13,"Chunk","","A chunk of characters, used for errors recovery.",22,null],[13,"Character","","Any non-special character except whitespace.",22,null],[13,"Whitespace","","Whitespace character.",22,null],[13,"EqualsSign","","`=`",22,null],[13,"SingleQuote","","`'`",22,null],[13,"DoubleQuote","","`\"`",22,null],[13,"CDataStart","","`<![CDATA[`",22,null],[13,"CDataEnd","","`]]>`",22,null],[13,"ReferenceStart","","`&`",22,null],[13,"ReferenceEnd","","`;`",22,null],[4,"State","","",null,null],[13,"TagStarted","","Triggered on '<'",23,null],[13,"CommentOrCDataOrDoctypeStarted","","Triggered on '<!'",23,null],[13,"CommentStarted","","Triggered on '<!-'",23,null],[13,"DoctypeStarted","","Triggered on '<!D' up to '<!DOCTYPE'",23,null],[13,"CDataStarted","","Triggered on '<![' up to '<![CDATA'",23,null],[13,"ProcessingInstructionClosing","","Triggered on '?'",23,null],[13,"EmptyTagClosing","","Triggered on '/'",23,null],[13,"CommentClosing","","Triggered on '-' up to '--'",23,null],[13,"CDataClosing","","Triggered on ']' up to ']]'",23,null],[13,"Normal","","Default state",23,null],[4,"ClosingSubstate","","",null,null],[13,"First","","",24,null],[13,"Second","","",24,null],[4,"DoctypeStartedSubstate","","",null,null],[13,"D","","",25,null],[13,"DO","","",25,null],[13,"DOC","","",25,null],[13,"DOCT","","",25,null],[13,"DOCTY","","",25,null],[13,"DOCTYP","","",25,null],[4,"CDataStartedSubstate","","",null,null],[13,"E","","",26,null],[13,"C","","",26,null],[13,"CD","","",26,null],[13,"CDA","","",26,null],[13,"CDAT","","",26,null],[13,"CDATA","","",26,null],[6,"Result","","`Result` represents lexing result. It is either a token or an error message.",null,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_static_str","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"push_to_string","","",22,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"contains_char_data","","Returns `true` if this token contains data that can be interpreted as a part of the text. Surprisingly, this also means '>' and '=' and '\"' and \"'\" and '-->'.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Returns `true` if this token corresponds to a white space character.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"closingsubstate"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"doctypestartedsubstate"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"cdatastartedsubstate"}}],[11,"position","","Returns the position of the last token produced by the lexer",21,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"new","","Returns a new lexer with default state.",21,{"inputs":[],"output":{"name":"lexer"}}],[11,"enable_errors","","Enables error handling so `next_token` will return `Some(Err(..))` upon invalid lexeme.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_errors","","Disables error handling so `next_token` will return `Some(Chunk(..))` upon invalid lexeme with this lexeme content.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"inside_comment","","Enables special handling of some lexemes which should be done when we're parsing comment internals.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"outside_comment","","Disables the effect of `inside_comment()` method.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_eof_handled","","Reset the eof handled flag of the lexer.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_token","","Tries to read the next token from the buffer.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"error"}}],[11,"read_next_token","","",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"dispatch_char","","",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"move_to","","",21,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"move_to_with","","",21,{"inputs":[{"name":"self"},{"name":"state"},{"name":"token"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"move_to_with_unread","","",21,null],[11,"handle_error","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"normal","","Encountered a char",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"tag_opened","","Encountered '<'",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"comment_or_cdata_or_doctype_started","","Encountered '<!'",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"comment_started","","Encountered '<!-'",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"cdata_started","","Encountered '<!['",21,{"inputs":[{"name":"self"},{"name":"char"},{"name":"cdatastartedsubstate"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"doctype_started","","Encountered '<!D'",21,{"inputs":[{"name":"self"},{"name":"char"},{"name":"doctypestartedsubstate"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"processing_instruction_closing","","Encountered '?'",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"empty_element_closing","","Encountered '/'",21,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"comment_closing","","Encountered '-'",21,{"inputs":[{"name":"self"},{"name":"char"},{"name":"closingsubstate"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"cdata_closing","","Encountered ']'",21,{"inputs":[{"name":"self"},{"name":"char"},{"name":"closingsubstate"}],"output":{"generics":["option","error"],"name":"result"}}],[0,"parser","xml::reader","Contains an implementation of pull-based XML parser.",null,null],[3,"PullParser","xml::reader::parser","Pull-based XML parser.",null,null],[12,"config","","",27,null],[12,"lexer","","",27,null],[12,"st","","",27,null],[12,"buf","","",27,null],[12,"nst","","",27,null],[12,"data","","",27,null],[12,"final_result","","",27,null],[12,"next_event","","",27,null],[12,"est","","",27,null],[12,"pos","","",27,null],[12,"encountered_element","","",27,null],[12,"parsed_declaration","","",27,null],[12,"inside_whitespace","","",27,null],[12,"read_prefix_separator","","",27,null],[12,"pop_namespace","","",27,null],[3,"MarkupData","","",null,null],[12,"name","","",28,null],[12,"ref_data","","",28,null],[12,"version","","",28,null],[12,"encoding","","",28,null],[12,"standalone","","",28,null],[12,"element_name","","",28,null],[12,"quote","","",28,null],[12,"attr_name","","",28,null],[12,"attributes","","",28,null],[4,"State","","",null,null],[13,"OutsideTag","","",29,null],[13,"InsideOpeningTag","","",29,null],[13,"InsideClosingTag","","",29,null],[13,"InsideProcessingInstruction","","",29,null],[13,"InsideComment","","",29,null],[13,"InsideCData","","",29,null],[13,"InsideDeclaration","","",29,null],[13,"InsideDoctype","","",29,null],[13,"InsideReference","","",29,null],[4,"OpeningTagSubstate","","",null,null],[13,"InsideName","","",30,null],[13,"InsideTag","","",30,null],[13,"InsideAttributeName","","",30,null],[13,"AfterAttributeName","","",30,null],[13,"InsideAttributeValue","","",30,null],[4,"ClosingTagSubstate","","",null,null],[13,"CTInsideName","","",31,null],[13,"CTAfterName","","",31,null],[4,"ProcessingInstructionSubstate","","",null,null],[13,"PIInsideName","","",32,null],[13,"PIInsideData","","",32,null],[4,"DeclarationSubstate","","",null,null],[13,"BeforeVersion","","",33,null],[13,"InsideVersion","","",33,null],[13,"AfterVersion","","",33,null],[13,"InsideVersionValue","","",33,null],[13,"AfterVersionValue","","",33,null],[13,"InsideEncoding","","",33,null],[13,"AfterEncoding","","",33,null],[13,"InsideEncodingValue","","",33,null],[13,"BeforeStandaloneDecl","","",33,null],[13,"InsideStandaloneDecl","","",33,null],[13,"AfterStandaloneDecl","","",33,null],[13,"InsideStandaloneDeclValue","","",33,null],[13,"AfterStandaloneDeclValue","","",33,null],[4,"QualifiedNameTarget","","",null,null],[13,"AttributeNameTarget","","",34,null],[13,"OpeningTagNameTarget","","",34,null],[13,"ClosingTagNameTarget","","",34,null],[4,"QuoteToken","","",null,null],[13,"SingleQuoteToken","","",35,null],[13,"DoubleQuoteToken","","",35,null],[0,"outside_tag","","",null,null],[11,"outside_tag","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_processing_instruction","","",null,null],[11,"inside_processing_instruction","","",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"processinginstructionsubstate"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_declaration","","",null,null],[11,"inside_declaration","","",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"declarationsubstate"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_doctype","","",null,null],[11,"inside_doctype","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_opening_tag","","",null,null],[11,"inside_opening_tag","","",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"openingtagsubstate"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_closing_tag_name","","",null,null],[11,"inside_closing_tag_name","","",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"closingtagsubstate"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_comment","","",null,null],[11,"inside_comment","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_cdata","","",null,null],[11,"inside_cdata","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["result"],"name":"option"}}],[0,"inside_reference","","",null,null],[11,"inside_reference","","",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"state"}],"output":{"generics":["result"],"name":"option"}}],[6,"ElementStack","","",null,null],[6,"Result","","",null,null],[7,"DEFAULT_VERSION","","",null,null],[7,"DEFAULT_ENCODING","","",null,null],[7,"DEFAULT_STANDALONE","","",null,null],[11,"take_name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_ref_data","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_version","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["xmlversion"],"name":"option"}}],[11,"take_encoding","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"take_standalone","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"take_element_name","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["ownedname"],"name":"option"}}],[11,"take_attr_name","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["ownedname"],"name":"option"}}],[11,"take_attributes","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["ownedattribute"],"name":"vec"}}],[11,"new","","Returns a new parser using the given config.",27,{"inputs":[{"name":"parserconfig"}],"output":{"name":"pullparser"}}],[11,"is_ignoring_end_of_stream","","Checks if this parser ignores the end of stream errors.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"position","","Returns the position of the last event produced by the parser",27,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"openingtagsubstate"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"openingtagsubstate"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"closingtagsubstate"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"closingtagsubstate"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"processinginstructionsubstate"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"processinginstructionsubstate"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"declarationsubstate"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"declarationsubstate"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"qualifiednametarget"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"quotetoken"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"quotetoken"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",35,null],[11,"from_token","","",35,{"inputs":[{"name":"token"}],"output":{"name":"quotetoken"}}],[11,"as_token","","",35,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"next","","Returns next event read from the given buffer.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["xmlevent"],"name":"result"}}],[11,"set_final_result","","",27,{"inputs":[{"name":"self"},{"generics":["xmlevent"],"name":"result"}],"output":{"generics":["xmlevent"],"name":"result"}}],[11,"error","","",27,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["xmlevent"],"name":"result"}}],[11,"next_pos","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"push_pos","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"dispatch_token","","",27,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["result"],"name":"option"}}],[11,"depth","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"buf_has_data","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"take_buf","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"append_char_continue","","",27,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["result"],"name":"option"}}],[11,"into_state","","",27,{"inputs":[{"name":"self"},{"name":"state"},{"generics":["result"],"name":"option"}],"output":{"generics":["result"],"name":"option"}}],[11,"into_state_continue","","",27,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"generics":["result"],"name":"option"}}],[11,"into_state_emit","","",27,{"inputs":[{"name":"self"},{"name":"state"},{"generics":["xmlevent"],"name":"result"}],"output":{"generics":["result"],"name":"option"}}],[11,"read_qualified_name","","Dispatches tokens in order to process qualified name. If qualified name cannot be parsed, an error is returned.",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"qualifiednametarget"},{"name":"f"}],"output":{"generics":["result"],"name":"option"}}],[11,"read_attribute_value","","Dispatches tokens in order to process attribute value.",27,{"inputs":[{"name":"self"},{"name":"token"},{"name":"f"}],"output":{"generics":["result"],"name":"option"}}],[11,"emit_start_element","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["result"],"name":"option"}}],[11,"emit_end_element","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"config","xml::reader","Contains parser configuration structure.",null,null],[3,"ParserConfig","xml::reader::config","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters. Default is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters. Default is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged. Default is true.",0,null],[12,"extra_entities","","A map of extra entities recognized by the parser. Default is an empty map.",0,null],[12,"ignore_end_of_stream","","Whether or not the parser should ignore the end of stream. Default is false.",0,null],[11,"clone","xml","",0,{"inputs":[{"name":"self"}],"output":{"name":"parserconfig"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parserconfig"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parserconfig"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new config with default values.",0,{"inputs":[],"output":{"name":"parserconfig"}}],[11,"create_reader","","Creates an XML reader with this configuration.",0,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"eventreader"}}],[11,"add_entity","","Adds a new entity mapping and returns an updated config object.",0,{"inputs":[{"name":"self"},{"name":"s"},{"name":"t"}],"output":{"name":"parserconfig"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"parserconfig"}}],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[11,"ignore_end_of_stream","","Sets the field to the provided value and returns updated config object.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserconfig"}}],[0,"events","xml::reader","Contains `XmlEvent` datatype, instances of which are emitted by the parser.",null,null],[4,"XmlEvent","xml::reader::events","An element of an XML input stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",19,null],[12,"version","xml::reader::events::XmlEvent","XML version.",19,null],[12,"encoding","","XML document encoding.",19,null],[12,"standalone","","XML standalone declaration.",19,null],[13,"EndDocument","xml::reader::events","Denotes to the end of the document stream.",19,null],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",19,null],[12,"name","xml::reader::events::XmlEvent","Processing instruction target.",19,null],[12,"data","","Processing instruction content.",19,null],[13,"StartElement","xml::reader::events","Denotes a beginning of an XML element.",19,null],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",19,null],[12,"attributes","","A list of attributes associated with the element.",19,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",19,null],[13,"EndElement","xml::reader::events","Denotes an end of an XML element.",19,null],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",19,null],[13,"CData","xml::reader::events","Denotes CDATA content.",19,null],[13,"Comment","","Denotes a comment.",19,null],[13,"Characters","","Denotes character data outside of tags.",19,null],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",19,null],[11,"eq","xml::reader","",19,{"inputs":[{"name":"self"},{"name":"xmlevent"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"xmlevent"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"xmlevent"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_writer_event","","Obtains a writer event from this reader event.",19,{"inputs":[{"name":"self"}],"output":{"generics":["xmlevent"],"name":"option"}}],[0,"error","","",null,null],[3,"Error","xml::reader::error","An XML parsing error.",null,null],[12,"pos","","",16,null],[12,"kind","","",16,null],[4,"ErrorKind","","",null,null],[13,"Syntax","","",20,null],[13,"Io","","",20,null],[13,"Utf8","","",20,null],[13,"UnexpectedEof","","",20,null],[5,"error_description","","",null,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","xml::reader","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"position","","",16,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"msg","","Returns a reference to a message which is contained inside this error.",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kind","","",16,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",16,null],[11,"from","","",16,{"inputs":[{"name":"charreaderror"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[6,"Result","","A result type yielded by `XmlReader`.",null,null],[11,"new","","Creates a new reader, consuming the given stream.",17,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"new_with_config","","Creates a new reader with the provded configuration, consuming the given stream.",17,{"inputs":[{"name":"r"},{"name":"parserconfig"}],"output":{"name":"eventreader"}}],[11,"next","","Pulls and returns next XML event from the stream.",17,{"inputs":[{"name":"self"}],"output":{"generics":["xmlevent"],"name":"result"}}],[11,"source","","",17,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"source_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `EventReader`, returning the underlying reader.",17,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"position","","Returns the position of the last event produced by the reader.",17,{"inputs":[{"name":"self"}],"output":{"name":"textposition"}}],[11,"into_iter","","",17,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"into_inner","","Unwraps the iterator, returning the internal `EventReader`.",18,{"inputs":[{"name":"self"}],"output":{"name":"eventreader"}}],[11,"source","","",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"source_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"from_str","","A convenience method to create an `XmlReader` from a string slice.",17,{"inputs":[{"name":"str"}],"output":{"name":"eventreader"}}],[0,"writer","xml","Contains high-level interface for an events-based XML emitter.",null,null],[3,"EmitterConfig","xml::writer","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\" \"` (two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document. Default is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names. Default is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments, if necessary. Default is true.",1,null],[3,"EventWriter","","A wrapper around an `std::io::Write` instance which emits XML document according to provided events.",null,null],[12,"sink","","",36,null],[12,"emitter","","",36,null],[4,"Error","","An error which may be returned by `XmlWriter` when writing XML events.",null,null],[13,"Io","","An I/O error occured in the underlying `Write` instance.",37,null],[13,"DocumentStartAlreadyEmitted","","Document declaration has already been written to the output stream.",37,null],[13,"LastElementNameNotAvailable","","The name of the last opening element is not available.",37,null],[13,"EndElementNameIsNotEqualToLastStartElementName","","The name of the last opening element is not equal to the name of the provided closing element.",37,null],[13,"EndElementNameIsNotSpecified","","End element name is not specified when it is needed, for example, when automatic closing is not enabled in configuration.",37,null],[0,"emitter","","",null,null],[3,"Emitter","xml::writer::emitter","",null,null],[12,"config","","",38,null],[12,"nst","","",38,null],[12,"indent_level","","",38,null],[12,"indent_stack","","",38,null],[12,"element_names","","",38,null],[12,"start_document_emitted","","",38,null],[12,"just_wrote_start_element","","",38,null],[3,"IndentFlags","","",null,null],[12,"bits","","",39,null],[4,"EmitterError","","An error which may be returned by `XmlWriter` when writing XML events.",null,null],[13,"Io","","An I/O error occured in the underlying `Write` instance.",37,null],[13,"DocumentStartAlreadyEmitted","","Document declaration has already been written to the output stream.",37,null],[13,"LastElementNameNotAvailable","","The name of the last opening element is not available.",37,null],[13,"EndElementNameIsNotEqualToLastStartElementName","","The name of the last opening element is not equal to the name of the provided closing element.",37,null],[13,"EndElementNameIsNotSpecified","","End element name is not specified when it is needed, for example, when automatic closing is not enabled in configuration.",37,null],[6,"Result","","A result type yielded by `XmlWriter`.",null,null],[11,"fmt","xml::writer","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",37,{"inputs":[{"name":"error"}],"output":{"name":"emittererror"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","xml::writer::emitter","",38,{"inputs":[{"name":"emitterconfig"}],"output":{"name":"emitter"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",39,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"indentflags"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"WROTE_NOTHING","","",39,null],[18,"WROTE_MARKUP","","",39,null],[18,"WROTE_TEXT","","",39,null],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[],"output":{"name":"indentflags"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[],"output":{"name":"indentflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"u8"}],"output":{"generics":["indentflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",39,{"inputs":[{"name":"u8"}],"output":{"name":"indentflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",39,{"inputs":[{"name":"self"},{"name":"indentflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"indentflags"}}],[11,"bitor_assign","","Adds the set of flags.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"indentflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"indentflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":{"name":"indentflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",39,{"inputs":[{"name":"self"},{"name":"indentflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"self"}],"output":{"name":"indentflags"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"indentflags"}}],[11,"namespace_stack_mut","","Returns the current state of namespaces.",38,{"inputs":[{"name":"self"}],"output":{"name":"namespacestack"}}],[11,"wrote_text","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"wrote_markup","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_wrote_text","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"set_wrote_markup","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_state","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"write_newline","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"name":"usize"}],"output":{"name":"result"}}],[11,"before_markup","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"after_markup","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"before_start_element","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"after_start_element","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"before_end_element","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"after_end_element","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"after_text","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"emit_start_document","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"name":"xmlversion"},{"name":"str"},{"generics":["bool"],"name":"option"}],"output":{"name":"result"}}],[11,"check_document_started","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fix_non_empty_element","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"emit_processing_instruction","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"emit_start_element_initial","","",38,null],[11,"emit_start_element","","",38,null],[11,"emit_current_namespace_attributes","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"emit_attributes","","",38,null],[11,"emit_end_element","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"generics":["name"],"name":"option"}],"output":{"name":"result"}}],[11,"emit_cdata","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_characters","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_comment","","",38,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[0,"config","xml::writer","Contains emitter configuration structure.",null,null],[3,"EmitterConfig","xml::writer::config","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\" \"` (two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document. Default is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names. Default is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments, if necessary. Default is true.",1,null],[11,"clone","xml","",1,{"inputs":[{"name":"self"}],"output":{"name":"emitterconfig"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"emitterconfig"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"emitterconfig"}],"output":{"name":"bool"}}],[11,"assert_receiver_is_total_eq","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an emitter configuration with default values.",1,{"inputs":[],"output":{"name":"emitterconfig"}}],[11,"create_writer","","Creates an XML writer with this configuration.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"emitterconfig"}}],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"emitterconfig"}}],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"emitterconfig"}}],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"keep_element_names_stack","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[11,"autopad_comments","","Sets the field to the provided value and returns updated config object.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"emitterconfig"}}],[0,"events","xml::writer","Contains `XmlEvent` datatype, instances of which are consumed by the writer.",null,null],[3,"EndElementBuilder","xml::writer::events","",null,null],[12,"name","","",40,null],[3,"StartElementBuilder","","A builder for a starting element event.",null,null],[12,"name","","",41,null],[12,"attributes","","",41,null],[12,"namespace","","",41,null],[4,"XmlEvent","","A part of an XML output stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",42,null],[12,"version","xml::writer::events::XmlEvent","XML version.",42,null],[12,"encoding","","XML document encoding.",42,null],[12,"standalone","","XML standalone declaration.",42,null],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",42,null],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",42,null],[12,"data","","Processing instruction content.",42,null],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",42,null],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",42,null],[12,"attributes","","A list of attributes associated with the element.",42,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",42,null],[13,"EndElement","xml::writer::events","Denotes an end of an XML element.",42,null],[12,"name","xml::writer::events::XmlEvent","Optional qualified name of the element.",42,null],[13,"CData","xml::writer::events","Denotes CDATA content.",42,null],[13,"Comment","","Denotes a comment.",42,null],[13,"Characters","","Denotes character data outside of tags.",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"processing_instruction","","Returns an writer event for a processing instruction.",42,{"inputs":[{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"name":"xmlevent"}}],[11,"start_element","","Returns a builder for a starting element.",42,{"inputs":[{"name":"s"}],"output":{"name":"startelementbuilder"}}],[11,"end_element","","Returns a builder for an closing element.",42,{"inputs":[],"output":{"name":"endelementbuilder"}}],[11,"cdata","","Returns a CDATA event.",42,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"characters","","Returns a regular characters (PCDATA) event.",42,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"comment","","Returns a comment event.",42,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"from","","",42,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"name","","Sets the name of this closing element.",40,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"endelementbuilder"}}],[11,"from","","",42,{"inputs":[{"name":"endelementbuilder"}],"output":{"name":"xmlevent"}}],[11,"attr","","Sets an attribute value of this element to the given string.",41,{"inputs":[{"name":"self"},{"name":"n"},{"name":"str"}],"output":{"name":"startelementbuilder"}}],[11,"ns","","Adds a namespace to the current namespace context.",41,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"}],"output":{"name":"startelementbuilder"}}],[11,"default_ns","","Adds a default namespace mapping to the current namespace context.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"startelementbuilder"}}],[11,"from","","",42,{"inputs":[{"name":"startelementbuilder"}],"output":{"name":"xmlevent"}}],[6,"Result","xml::writer","A result type yielded by `XmlWriter`.",null,null],[11,"new","","Creates a new `EventWriter` out of an `std::io::Write` instance using the default configuration.",36,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"new_with_config","","Creates a new `EventWriter` out of an `std::io::Write` instance using the provided configuration.",36,{"inputs":[{"name":"w"},{"name":"emitterconfig"}],"output":{"name":"eventwriter"}}],[11,"write","","Writes the next piece of XML document according to the provided event.",36,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this `EventWriter`, returning the underlying writer.",36,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[0,"util","xml","",null,null],[4,"CharReadError","xml::util","",null,null],[13,"UnexpectedEof","","",43,null],[13,"Utf8","","",43,null],[13,"Io","","",43,null],[5,"next_char_from","","",null,{"inputs":[{"name":"r"}],"output":{"generics":["option","charreaderror"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",43,{"inputs":[{"name":"utf8error"}],"output":{"name":"charreaderror"}}],[11,"from","","",43,{"inputs":[{"name":"error"}],"output":{"name":"charreaderror"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParserConfig"],[3,"EmitterConfig"],[3,"Name"],[3,"ReprDisplay"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[3,"TextPosition"],[4,"XmlVersion"],[8,"Position"],[4,"Value"],[4,"Process"],[3,"Namespace"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"CheckedTarget"],[3,"Error"],[3,"EventReader"],[3,"Events"],[4,"XmlEvent"],[4,"ErrorKind"],[3,"Lexer"],[4,"Token"],[4,"State"],[4,"ClosingSubstate"],[4,"DoctypeStartedSubstate"],[4,"CDataStartedSubstate"],[3,"PullParser"],[3,"MarkupData"],[4,"State"],[4,"OpeningTagSubstate"],[4,"ClosingTagSubstate"],[4,"ProcessingInstructionSubstate"],[4,"DeclarationSubstate"],[4,"QualifiedNameTarget"],[4,"QuoteToken"],[3,"EventWriter"],[4,"Error"],[3,"Emitter"],[3,"IndentFlags"],[3,"EndElementBuilder"],[3,"StartElementBuilder"],[4,"XmlEvent"],[4,"CharReadError"]]};
initSearch(searchIndex);
