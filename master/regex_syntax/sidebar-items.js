initSidebarItems({"enum":[["ErrorKind","The specific type of parse error that can occur."],["Expr","A regular expression abstract syntax tree."],["Repeater","The type of a repeat operator expression."]],"fn":[["binary_search","Binary search to find first element such that `pred(T) == true`."],["dec_char",""],["inc_char",""],["is_word_byte","Returns true if and only if `c` is an ASCII word byte."],["is_word_char","Returns true if and only if `c` is a word character."],["quote","Escapes all regular expression meta characters in `text`."],["quote_byte",""],["quote_char",""],["simple_case_fold_both_result","The result of binary search on the simple case folding table."]],"mod":[["literals",""],["parser",""],["unicode",""]],"struct":[["ByteClass","A byte class for byte ranges only."],["ByteRange","A single inclusive range in a byte class."],["CharClass","A character class."],["ClassRange","A single inclusive range in a character class."],["Error","A parse error."],["ExprBuilder","A builder for configuring regular expression parsing."],["Lit","A single member of a set of literals extracted from a regular expression."],["Literals","A set of literal byte strings extracted from a regular expression."]],"type":[["CaptureIndex",""],["CaptureName",""],["Result","An alias for computations that can return a `Error`."]]});