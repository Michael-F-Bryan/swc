initSidebarItems({"constant":[["UNIX_EPOCH","An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies."]],"enum":[["Cow","A clone-on-write smart pointer."],["Option","The `Option` type. See the module level documentation for more."],["Result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`])."]],"mod":[["clone","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["core",""],["default","The `Default` trait for types which may have meaningful default values."],["error","Traits for working with Errors."],["f32","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["fmt","Utilities for formatting and printing `String`s."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["net","Networking primitives for TCP/UDP communication."],["ops","Overloadable operators."],["option","Optional values."],["result","Error handling with the `Result` type."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["usize","The pointer-sized unsigned integer type."]],"struct":[["Arc","A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically Reference Counted'."],["BTreeMap","A map based on a B-Tree."],["BTreeSet","A set based on a B-Tree."],["BinaryHeap","A priority queue implemented with a binary heap."],["Box","A pointer type for heap allocation."],["CStr","Representation of a borrowed C string."],["CString","A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the middle."],["Cell","A mutable memory location."],["Duration","A `Duration` type to represent a span of time, typically used for system timeouts."],["HashMap","A hash map implemented with linear probing and Robin Hood bucket stealing."],["HashSet","A hash set implemented as a `HashMap` where the value is `()`."],["LinkedList","A doubly-linked list with owned nodes."],["Mutex","A mutual exclusion primitive useful for protecting shared data"],["OsStr","Borrowed reference to an OS string (see [`OsString`])."],["OsString","A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings."],["Path","A slice of a path (akin to [`str`])."],["PathBuf","An owned, mutable path (akin to [`String`])."],["PhantomData","Zero-sized type used to mark things that \"act like\" they own a `T`."],["Rc","A single-threaded reference-counting pointer. 'Rc' stands for 'Reference Counted'."],["RefCell","A mutable memory location with dynamically checked borrow rules"],["RwLock","A reader-writer lock"],["String","A UTF-8 encoded, growable string."],["SystemTime","A measurement of the system clock, useful for talking to external entities like the file system or other processes."],["Vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'."],["VecDeque","A double-ended queue implemented with a growable ring buffer."],["Wrapping","Provides intentionally-wrapped arithmetic on `T`."]],"trait":[["BuildHasher","A trait for creating instances of [`Hasher`]."],["Clone","A common trait for the ability to explicitly duplicate an object."],["Debug","`?` formatting."],["Default","A trait for giving a type a useful default value."],["Display","Format trait for an empty format, `{}`."],["From","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`."],["Hash","A hashable type."],["Into","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From]."],["ToOwned","A generalization of `Clone` to borrowed data."],["Write","A trait for objects which are byte-oriented sinks."]]});